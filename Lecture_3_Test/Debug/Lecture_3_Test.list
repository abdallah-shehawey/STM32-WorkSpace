
Lecture_3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001698  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08001868  08001868  00002868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019b8  080019b8  000030a0  2**0
                  CONTENTS
  4 .ARM          00000008  080019b8  080019b8  000029b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019c0  080019c0  000030a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019c0  080019c0  000029c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019c4  080019c4  000029c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080019c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000a0  08001a68  000030a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08001a68  00003210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b1e  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ff  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000de  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be7  00000000  00000000  00004206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015fd  00000000  00000000  00006ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009857  00000000  00000000  000083ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00011c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ebc  00000000  00000000  00011cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00012b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001850 	.word	0x08001850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08001850 	.word	0x08001850

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <array_fill_numbers>:
int someData;

const int var = 25;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]

  for ( unsigned int i = 0; i < len; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e015      	b.n	80002ec <array_fill_numbers+0x3c>
  {
    pNumbers[i] = rand() % 1000;
 80002c0:	f000 fa40 	bl	8000744 <rand>
 80002c4:	4602      	mov	r2, r0
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	4419      	add	r1, r3
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <array_fill_numbers+0x50>)
 80002d0:	fb83 0302 	smull	r0, r3, r3, r2
 80002d4:	1198      	asrs	r0, r3, #6
 80002d6:	17d3      	asrs	r3, r2, #31
 80002d8:	1ac3      	subs	r3, r0, r3
 80002da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002de:	fb00 f303 	mul.w	r3, r0, r3
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	600b      	str	r3, [r1, #0]
  for ( unsigned int i = 0; i < len; i++)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d3e5      	bcc.n	80002c0 <array_fill_numbers+0x10>
  }

}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	10624dd3 	.word	0x10624dd3

08000304 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  someData=10;
 8000310:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <display_numbers+0x50>)
 8000312:	220a      	movs	r2, #10
 8000314:	601a      	str	r2, [r3, #0]
  printf("%s",pMessage);
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	480f      	ldr	r0, [pc, #60]	@ (8000358 <display_numbers+0x54>)
 800031a:	f000 fb13 	bl	8000944 <iprintf>

  for (unsigned i = 0; i < len; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	e00b      	b.n	800033c <display_numbers+0x38>
  {
    printf("%5d  ", pNumbers[i]);
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4413      	add	r3, r2
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4619      	mov	r1, r3
 8000330:	480a      	ldr	r0, [pc, #40]	@ (800035c <display_numbers+0x58>)
 8000332:	f000 fb07 	bl	8000944 <iprintf>
  for (unsigned i = 0; i < len; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3ef      	bcc.n	8000324 <display_numbers+0x20>
  }

  printf("\n");
 8000344:	200a      	movs	r0, #10
 8000346:	f000 fb0f 	bl	8000968 <putchar>
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000bc 	.word	0x200000bc
 8000358:	08001868 	.word	0x08001868
 800035c:	0800186c 	.word	0x0800186c

08000360 <swap_numbers>:

void swap_numbers(int *x,int *y)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
  //	void (*FuncPtr)(void)=(void*)0x20000008;
  //	FuncPtr();

  someData = 100;
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <swap_numbers+0x30>)
 800036c:	2264      	movs	r2, #100	@ 0x64
 800036e:	601a      	str	r2, [r3, #0]

  int temp = *x;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	60fb      	str	r3, [r7, #12]
  *x = *y;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]
  *y = temp;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	601a      	str	r2, [r3, #0]

}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	200000bc 	.word	0x200000bc

08000394 <bubble_sort>:

void bubble_sort(int *pNumbers, unsigned int len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]

  int i, j, flag = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < len-1; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e02f      	b.n	8000408 <bubble_sort+0x74>
  {
    flag=0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]

    for(j=0; j<len-1-i; j++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]
 80003b0:	e01d      	b.n	80003ee <bubble_sort+0x5a>
    {
      if(pNumbers[j] > pNumbers[j+1])
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	3301      	adds	r3, #1
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	6879      	ldr	r1, [r7, #4]
 80003c4:	440b      	add	r3, r1
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dd0d      	ble.n	80003e8 <bubble_sort+0x54>
      {
        swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	18d0      	adds	r0, r2, r3
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	3301      	adds	r3, #1
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	4619      	mov	r1, r3
 80003e0:	f7ff ffbe 	bl	8000360 <swap_numbers>
        flag=1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
    for(j=0; j<len-1-i; j++)
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	3301      	adds	r3, #1
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d8da      	bhi.n	80003b2 <bubble_sort+0x1e>
      }
    }

    if(flag==0)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <bubble_sort+0x80>
  for(i = 0; i < len-1; i++)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	3301      	adds	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	1e5a      	subs	r2, r3, #1
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	429a      	cmp	r2, r3
 8000410:	d8ca      	bhi.n	80003a8 <bubble_sort+0x14>
      break;
  }
}
 8000412:	e000      	b.n	8000416 <bubble_sort+0x82>
      break;
 8000414:	bf00      	nop
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <insertion_sort>:

void insertion_sort(int *pNumbers, unsigned int len)
{
 800041e:	b480      	push	{r7}
 8000420:	b087      	sub	sp, #28
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]

  int i, j, num;

  for(i=1 ; i<len ; i++)
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	e02c      	b.n	8000488 <insertion_sort+0x6a>
  {
    j=i-1;
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	3b01      	subs	r3, #1
 8000432:	613b      	str	r3, [r7, #16]

    num = pNumbers[i];
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4413      	add	r3, r2
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]

    while( (j>-1) && (pNumbers[j] > num) )
 8000440:	e00d      	b.n	800045e <insertion_sort+0x40>
    {
      pNumbers[j+1] = pNumbers[j];
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	441a      	add	r2, r3
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	3301      	adds	r3, #1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	440b      	add	r3, r1
 8000454:	6812      	ldr	r2, [r2, #0]
 8000456:	601a      	str	r2, [r3, #0]
      j--;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	3b01      	subs	r3, #1
 800045c:	613b      	str	r3, [r7, #16]
    while( (j>-1) && (pNumbers[j] > num) )
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	2b00      	cmp	r3, #0
 8000462:	db07      	blt.n	8000474 <insertion_sort+0x56>
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbe6      	blt.n	8000442 <insertion_sort+0x24>
    }
    pNumbers[j+1]=num;
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	3301      	adds	r3, #1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	601a      	str	r2, [r3, #0]
  for(i=1 ; i<len ; i++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	d8ce      	bhi.n	800042e <insertion_sort+0x10>
  }
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	371c      	adds	r7, #28
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <main>:

int main()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  unsigned int len = sizeof(numbers)/sizeof(int);
 80004a2:	2311      	movs	r3, #17
 80004a4:	607b      	str	r3, [r7, #4]

  printf("Hello World\r\n");
 80004a6:	4817      	ldr	r0, [pc, #92]	@ (8000504 <main+0x68>)
 80004a8:	f000 fabc 	bl	8000a24 <puts>

  array_fill_numbers(numbers, len);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	4816      	ldr	r0, [pc, #88]	@ (8000508 <main+0x6c>)
 80004b0:	f7ff fefe 	bl	80002b0 <array_fill_numbers>

  int x = &var;
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <main+0x70>)
 80004b6:	603b      	str	r3, [r7, #0]

  display_numbers(numbers, len, "B-unsorted array :");
 80004b8:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <main+0x74>)
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	4812      	ldr	r0, [pc, #72]	@ (8000508 <main+0x6c>)
 80004be:	f7ff ff21 	bl	8000304 <display_numbers>

  bubble_sort(numbers, len);
 80004c2:	6879      	ldr	r1, [r7, #4]
 80004c4:	4810      	ldr	r0, [pc, #64]	@ (8000508 <main+0x6c>)
 80004c6:	f7ff ff65 	bl	8000394 <bubble_sort>

  display_numbers(numbers, len, "B-sorted array   :");
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <main+0x78>)
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	480e      	ldr	r0, [pc, #56]	@ (8000508 <main+0x6c>)
 80004d0:	f7ff ff18 	bl	8000304 <display_numbers>

  array_fill_numbers(numbers, len);
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	480c      	ldr	r0, [pc, #48]	@ (8000508 <main+0x6c>)
 80004d8:	f7ff feea 	bl	80002b0 <array_fill_numbers>

  display_numbers(numbers, len, "I-unsorted array :");
 80004dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <main+0x7c>)
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <main+0x6c>)
 80004e2:	f7ff ff0f 	bl	8000304 <display_numbers>

  insertion_sort(numbers, len);
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	4807      	ldr	r0, [pc, #28]	@ (8000508 <main+0x6c>)
 80004ea:	f7ff ff98 	bl	800041e <insertion_sort>

  display_numbers(numbers, len, "I-sorted array   :");
 80004ee:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <main+0x80>)
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <main+0x6c>)
 80004f4:	f7ff ff06 	bl	8000304 <display_numbers>

  return 0;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	08001874 	.word	0x08001874
 8000508:	20000000 	.word	0x20000000
 800050c:	080018d4 	.word	0x080018d4
 8000510:	08001884 	.word	0x08001884
 8000514:	08001898 	.word	0x08001898
 8000518:	080018ac 	.word	0x080018ac
 800051c:	080018c0 	.word	0x080018c0

08000520 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <ITM_SendChar+0x44>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <ITM_SendChar+0x44>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000534:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <ITM_SendChar+0x48>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <ITM_SendChar+0x48>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000542:	bf00      	nop
 8000544:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f8      	beq.n	8000544 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000552:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	e000edfc 	.word	0xe000edfc
 8000568:	e0000e00 	.word	0xe0000e00

0800056c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	return 1;
 8000570:	2301      	movs	r3, #1
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <_kill>:

int _kill(int pid, int sig)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	(void)pid;
	(void)sig;
	errno = EINVAL;
 8000584:	f000 fb7c 	bl	8000c80 <__errno>
 8000588:	4603      	mov	r3, r0
 800058a:	2216      	movs	r2, #22
 800058c:	601a      	str	r2, [r3, #0]
	return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_exit>:

void _exit (int status)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005a2:	f04f 31ff 	mov.w	r1, #4294967295
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ffe7 	bl	800057a <_kill>
	while (1) {}    /* Make sure we hang here */
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <_exit+0x12>

080005b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00a      	b.n	80005d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c2:	f3af 8000 	nop.w
 80005c6:	4601      	mov	r1, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf0      	blt.n	80005c2 <_read+0x12>
	}

	return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e009      	b.n	8000610 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff8b 	bl	8000520 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf1      	blt.n	80005fc <_write+0x12>
	}
	return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_close>:

int _close(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000648:	605a      	str	r2, [r3, #4]
	return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <_isatty>:

int _isatty(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f000 fae4 	bl	8000c80 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20020000 	.word	0x20020000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	200000c0 	.word	0x200000c0
 80006ec:	20000210 	.word	0x20000210

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 fab5 	bl	8000c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff febb 	bl	800049c <main>

08000726 <LoopForever>:

LoopForever:
  b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000734:	080019c8 	.word	0x080019c8
  ldr r2, =_sbss
 8000738:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800073c:	20000210 	.word	0x20000210

08000740 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <rand>:
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <rand+0x5c>)
 8000746:	b510      	push	{r4, lr}
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800074c:	b9b3      	cbnz	r3, 800077c <rand+0x38>
 800074e:	2018      	movs	r0, #24
 8000750:	f000 fb2c 	bl	8000dac <malloc>
 8000754:	4602      	mov	r2, r0
 8000756:	6320      	str	r0, [r4, #48]	@ 0x30
 8000758:	b920      	cbnz	r0, 8000764 <rand+0x20>
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <rand+0x60>)
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <rand+0x64>)
 800075e:	2152      	movs	r1, #82	@ 0x52
 8000760:	f000 fabc 	bl	8000cdc <__assert_func>
 8000764:	4911      	ldr	r1, [pc, #68]	@ (80007ac <rand+0x68>)
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <rand+0x6c>)
 8000768:	e9c0 1300 	strd	r1, r3, [r0]
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <rand+0x70>)
 800076e:	6083      	str	r3, [r0, #8]
 8000770:	230b      	movs	r3, #11
 8000772:	8183      	strh	r3, [r0, #12]
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
 8000778:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800077c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <rand+0x74>)
 8000780:	690b      	ldr	r3, [r1, #16]
 8000782:	694c      	ldr	r4, [r1, #20]
 8000784:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <rand+0x78>)
 8000786:	4358      	muls	r0, r3
 8000788:	fb02 0004 	mla	r0, r2, r4, r0
 800078c:	fba3 3202 	umull	r3, r2, r3, r2
 8000790:	3301      	adds	r3, #1
 8000792:	eb40 0002 	adc.w	r0, r0, r2
 8000796:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800079a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800079e:	bd10      	pop	{r4, pc}
 80007a0:	20000050 	.word	0x20000050
 80007a4:	080018d8 	.word	0x080018d8
 80007a8:	080018ef 	.word	0x080018ef
 80007ac:	abcd330e 	.word	0xabcd330e
 80007b0:	e66d1234 	.word	0xe66d1234
 80007b4:	0005deec 	.word	0x0005deec
 80007b8:	5851f42d 	.word	0x5851f42d
 80007bc:	4c957f2d 	.word	0x4c957f2d

080007c0 <std>:
 80007c0:	2300      	movs	r3, #0
 80007c2:	b510      	push	{r4, lr}
 80007c4:	4604      	mov	r4, r0
 80007c6:	e9c0 3300 	strd	r3, r3, [r0]
 80007ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ce:	6083      	str	r3, [r0, #8]
 80007d0:	8181      	strh	r1, [r0, #12]
 80007d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80007d4:	81c2      	strh	r2, [r0, #14]
 80007d6:	6183      	str	r3, [r0, #24]
 80007d8:	4619      	mov	r1, r3
 80007da:	2208      	movs	r2, #8
 80007dc:	305c      	adds	r0, #92	@ 0x5c
 80007de:	f000 fa01 	bl	8000be4 <memset>
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <std+0x58>)
 80007e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <std+0x5c>)
 80007e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <std+0x60>)
 80007ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <std+0x64>)
 80007f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <std+0x68>)
 80007f4:	6224      	str	r4, [r4, #32]
 80007f6:	429c      	cmp	r4, r3
 80007f8:	d006      	beq.n	8000808 <std+0x48>
 80007fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007fe:	4294      	cmp	r4, r2
 8000800:	d002      	beq.n	8000808 <std+0x48>
 8000802:	33d0      	adds	r3, #208	@ 0xd0
 8000804:	429c      	cmp	r4, r3
 8000806:	d105      	bne.n	8000814 <std+0x54>
 8000808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000810:	f000 ba60 	b.w	8000cd4 <__retarget_lock_init_recursive>
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	08000a35 	.word	0x08000a35
 800081c:	08000a57 	.word	0x08000a57
 8000820:	08000a8f 	.word	0x08000a8f
 8000824:	08000ab3 	.word	0x08000ab3
 8000828:	200000c4 	.word	0x200000c4

0800082c <stdio_exit_handler>:
 800082c:	4a02      	ldr	r2, [pc, #8]	@ (8000838 <stdio_exit_handler+0xc>)
 800082e:	4903      	ldr	r1, [pc, #12]	@ (800083c <stdio_exit_handler+0x10>)
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <stdio_exit_handler+0x14>)
 8000832:	f000 b869 	b.w	8000908 <_fwalk_sglue>
 8000836:	bf00      	nop
 8000838:	20000044 	.word	0x20000044
 800083c:	080015b5 	.word	0x080015b5
 8000840:	20000054 	.word	0x20000054

08000844 <cleanup_stdio>:
 8000844:	6841      	ldr	r1, [r0, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <cleanup_stdio+0x34>)
 8000848:	4299      	cmp	r1, r3
 800084a:	b510      	push	{r4, lr}
 800084c:	4604      	mov	r4, r0
 800084e:	d001      	beq.n	8000854 <cleanup_stdio+0x10>
 8000850:	f000 feb0 	bl	80015b4 <_fflush_r>
 8000854:	68a1      	ldr	r1, [r4, #8]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <cleanup_stdio+0x38>)
 8000858:	4299      	cmp	r1, r3
 800085a:	d002      	beq.n	8000862 <cleanup_stdio+0x1e>
 800085c:	4620      	mov	r0, r4
 800085e:	f000 fea9 	bl	80015b4 <_fflush_r>
 8000862:	68e1      	ldr	r1, [r4, #12]
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <cleanup_stdio+0x3c>)
 8000866:	4299      	cmp	r1, r3
 8000868:	d004      	beq.n	8000874 <cleanup_stdio+0x30>
 800086a:	4620      	mov	r0, r4
 800086c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000870:	f000 bea0 	b.w	80015b4 <_fflush_r>
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	200000c4 	.word	0x200000c4
 800087c:	2000012c 	.word	0x2000012c
 8000880:	20000194 	.word	0x20000194

08000884 <global_stdio_init.part.0>:
 8000884:	b510      	push	{r4, lr}
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <global_stdio_init.part.0+0x30>)
 8000888:	4c0b      	ldr	r4, [pc, #44]	@ (80008b8 <global_stdio_init.part.0+0x34>)
 800088a:	4a0c      	ldr	r2, [pc, #48]	@ (80008bc <global_stdio_init.part.0+0x38>)
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	4620      	mov	r0, r4
 8000890:	2200      	movs	r2, #0
 8000892:	2104      	movs	r1, #4
 8000894:	f7ff ff94 	bl	80007c0 <std>
 8000898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800089c:	2201      	movs	r2, #1
 800089e:	2109      	movs	r1, #9
 80008a0:	f7ff ff8e 	bl	80007c0 <std>
 80008a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008a8:	2202      	movs	r2, #2
 80008aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ae:	2112      	movs	r1, #18
 80008b0:	f7ff bf86 	b.w	80007c0 <std>
 80008b4:	200001fc 	.word	0x200001fc
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	0800082d 	.word	0x0800082d

080008c0 <__sfp_lock_acquire>:
 80008c0:	4801      	ldr	r0, [pc, #4]	@ (80008c8 <__sfp_lock_acquire+0x8>)
 80008c2:	f000 ba08 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 80008c6:	bf00      	nop
 80008c8:	20000205 	.word	0x20000205

080008cc <__sfp_lock_release>:
 80008cc:	4801      	ldr	r0, [pc, #4]	@ (80008d4 <__sfp_lock_release+0x8>)
 80008ce:	f000 ba03 	b.w	8000cd8 <__retarget_lock_release_recursive>
 80008d2:	bf00      	nop
 80008d4:	20000205 	.word	0x20000205

080008d8 <__sinit>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	4604      	mov	r4, r0
 80008dc:	f7ff fff0 	bl	80008c0 <__sfp_lock_acquire>
 80008e0:	6a23      	ldr	r3, [r4, #32]
 80008e2:	b11b      	cbz	r3, 80008ec <__sinit+0x14>
 80008e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e8:	f7ff bff0 	b.w	80008cc <__sfp_lock_release>
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <__sinit+0x28>)
 80008ee:	6223      	str	r3, [r4, #32]
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <__sinit+0x2c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f5      	bne.n	80008e4 <__sinit+0xc>
 80008f8:	f7ff ffc4 	bl	8000884 <global_stdio_init.part.0>
 80008fc:	e7f2      	b.n	80008e4 <__sinit+0xc>
 80008fe:	bf00      	nop
 8000900:	08000845 	.word	0x08000845
 8000904:	200001fc 	.word	0x200001fc

08000908 <_fwalk_sglue>:
 8000908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800090c:	4607      	mov	r7, r0
 800090e:	4688      	mov	r8, r1
 8000910:	4614      	mov	r4, r2
 8000912:	2600      	movs	r6, #0
 8000914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000918:	f1b9 0901 	subs.w	r9, r9, #1
 800091c:	d505      	bpl.n	800092a <_fwalk_sglue+0x22>
 800091e:	6824      	ldr	r4, [r4, #0]
 8000920:	2c00      	cmp	r4, #0
 8000922:	d1f7      	bne.n	8000914 <_fwalk_sglue+0xc>
 8000924:	4630      	mov	r0, r6
 8000926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092a:	89ab      	ldrh	r3, [r5, #12]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d907      	bls.n	8000940 <_fwalk_sglue+0x38>
 8000930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000934:	3301      	adds	r3, #1
 8000936:	d003      	beq.n	8000940 <_fwalk_sglue+0x38>
 8000938:	4629      	mov	r1, r5
 800093a:	4638      	mov	r0, r7
 800093c:	47c0      	blx	r8
 800093e:	4306      	orrs	r6, r0
 8000940:	3568      	adds	r5, #104	@ 0x68
 8000942:	e7e9      	b.n	8000918 <_fwalk_sglue+0x10>

08000944 <iprintf>:
 8000944:	b40f      	push	{r0, r1, r2, r3}
 8000946:	b507      	push	{r0, r1, r2, lr}
 8000948:	4906      	ldr	r1, [pc, #24]	@ (8000964 <iprintf+0x20>)
 800094a:	ab04      	add	r3, sp, #16
 800094c:	6808      	ldr	r0, [r1, #0]
 800094e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000952:	6881      	ldr	r1, [r0, #8]
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	f000 fb07 	bl	8000f68 <_vfiprintf_r>
 800095a:	b003      	add	sp, #12
 800095c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr
 8000964:	20000050 	.word	0x20000050

08000968 <putchar>:
 8000968:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <putchar+0xc>)
 800096a:	4601      	mov	r1, r0
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	6882      	ldr	r2, [r0, #8]
 8000970:	f000 bebc 	b.w	80016ec <_putc_r>
 8000974:	20000050 	.word	0x20000050

08000978 <_puts_r>:
 8000978:	6a03      	ldr	r3, [r0, #32]
 800097a:	b570      	push	{r4, r5, r6, lr}
 800097c:	6884      	ldr	r4, [r0, #8]
 800097e:	4605      	mov	r5, r0
 8000980:	460e      	mov	r6, r1
 8000982:	b90b      	cbnz	r3, 8000988 <_puts_r+0x10>
 8000984:	f7ff ffa8 	bl	80008d8 <__sinit>
 8000988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800098a:	07db      	lsls	r3, r3, #31
 800098c:	d405      	bmi.n	800099a <_puts_r+0x22>
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	0598      	lsls	r0, r3, #22
 8000992:	d402      	bmi.n	800099a <_puts_r+0x22>
 8000994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000996:	f000 f99e 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 800099a:	89a3      	ldrh	r3, [r4, #12]
 800099c:	0719      	lsls	r1, r3, #28
 800099e:	d502      	bpl.n	80009a6 <_puts_r+0x2e>
 80009a0:	6923      	ldr	r3, [r4, #16]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d135      	bne.n	8000a12 <_puts_r+0x9a>
 80009a6:	4621      	mov	r1, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 f8c5 	bl	8000b38 <__swsetup_r>
 80009ae:	b380      	cbz	r0, 8000a12 <_puts_r+0x9a>
 80009b0:	f04f 35ff 	mov.w	r5, #4294967295
 80009b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009b6:	07da      	lsls	r2, r3, #31
 80009b8:	d405      	bmi.n	80009c6 <_puts_r+0x4e>
 80009ba:	89a3      	ldrh	r3, [r4, #12]
 80009bc:	059b      	lsls	r3, r3, #22
 80009be:	d402      	bmi.n	80009c6 <_puts_r+0x4e>
 80009c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009c2:	f000 f989 	bl	8000cd8 <__retarget_lock_release_recursive>
 80009c6:	4628      	mov	r0, r5
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da04      	bge.n	80009d8 <_puts_r+0x60>
 80009ce:	69a2      	ldr	r2, [r4, #24]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dc17      	bgt.n	8000a04 <_puts_r+0x8c>
 80009d4:	290a      	cmp	r1, #10
 80009d6:	d015      	beq.n	8000a04 <_puts_r+0x8c>
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	6022      	str	r2, [r4, #0]
 80009de:	7019      	strb	r1, [r3, #0]
 80009e0:	68a3      	ldr	r3, [r4, #8]
 80009e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009e6:	3b01      	subs	r3, #1
 80009e8:	60a3      	str	r3, [r4, #8]
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d1ed      	bne.n	80009ca <_puts_r+0x52>
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da11      	bge.n	8000a16 <_puts_r+0x9e>
 80009f2:	4622      	mov	r2, r4
 80009f4:	210a      	movs	r1, #10
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 f85f 	bl	8000aba <__swbuf_r>
 80009fc:	3001      	adds	r0, #1
 80009fe:	d0d7      	beq.n	80009b0 <_puts_r+0x38>
 8000a00:	250a      	movs	r5, #10
 8000a02:	e7d7      	b.n	80009b4 <_puts_r+0x3c>
 8000a04:	4622      	mov	r2, r4
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f857 	bl	8000aba <__swbuf_r>
 8000a0c:	3001      	adds	r0, #1
 8000a0e:	d1e7      	bne.n	80009e0 <_puts_r+0x68>
 8000a10:	e7ce      	b.n	80009b0 <_puts_r+0x38>
 8000a12:	3e01      	subs	r6, #1
 8000a14:	e7e4      	b.n	80009e0 <_puts_r+0x68>
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	6022      	str	r2, [r4, #0]
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e7ee      	b.n	8000a00 <_puts_r+0x88>
	...

08000a24 <puts>:
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <puts+0xc>)
 8000a26:	4601      	mov	r1, r0
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f7ff bfa5 	b.w	8000978 <_puts_r>
 8000a2e:	bf00      	nop
 8000a30:	20000050 	.word	0x20000050

08000a34 <__sread>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	460c      	mov	r4, r1
 8000a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a3c:	f000 f8fc 	bl	8000c38 <_read_r>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	bfab      	itete	ge
 8000a44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a46:	89a3      	ldrhlt	r3, [r4, #12]
 8000a48:	181b      	addge	r3, r3, r0
 8000a4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a4e:	bfac      	ite	ge
 8000a50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a52:	81a3      	strhlt	r3, [r4, #12]
 8000a54:	bd10      	pop	{r4, pc}

08000a56 <__swrite>:
 8000a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a5a:	461f      	mov	r7, r3
 8000a5c:	898b      	ldrh	r3, [r1, #12]
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	4605      	mov	r5, r0
 8000a62:	460c      	mov	r4, r1
 8000a64:	4616      	mov	r6, r2
 8000a66:	d505      	bpl.n	8000a74 <__swrite+0x1e>
 8000a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f000 f8d0 	bl	8000c14 <_lseek_r>
 8000a74:	89a3      	ldrh	r3, [r4, #12]
 8000a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	4632      	mov	r2, r6
 8000a82:	463b      	mov	r3, r7
 8000a84:	4628      	mov	r0, r5
 8000a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8a:	f000 b8e7 	b.w	8000c5c <_write_r>

08000a8e <__sseek>:
 8000a8e:	b510      	push	{r4, lr}
 8000a90:	460c      	mov	r4, r1
 8000a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a96:	f000 f8bd 	bl	8000c14 <_lseek_r>
 8000a9a:	1c43      	adds	r3, r0, #1
 8000a9c:	89a3      	ldrh	r3, [r4, #12]
 8000a9e:	bf15      	itete	ne
 8000aa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000aa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000aa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000aaa:	81a3      	strheq	r3, [r4, #12]
 8000aac:	bf18      	it	ne
 8000aae:	81a3      	strhne	r3, [r4, #12]
 8000ab0:	bd10      	pop	{r4, pc}

08000ab2 <__sclose>:
 8000ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab6:	f000 b89d 	b.w	8000bf4 <_close_r>

08000aba <__swbuf_r>:
 8000aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abc:	460e      	mov	r6, r1
 8000abe:	4614      	mov	r4, r2
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	b118      	cbz	r0, 8000acc <__swbuf_r+0x12>
 8000ac4:	6a03      	ldr	r3, [r0, #32]
 8000ac6:	b90b      	cbnz	r3, 8000acc <__swbuf_r+0x12>
 8000ac8:	f7ff ff06 	bl	80008d8 <__sinit>
 8000acc:	69a3      	ldr	r3, [r4, #24]
 8000ace:	60a3      	str	r3, [r4, #8]
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	071a      	lsls	r2, r3, #28
 8000ad4:	d501      	bpl.n	8000ada <__swbuf_r+0x20>
 8000ad6:	6923      	ldr	r3, [r4, #16]
 8000ad8:	b943      	cbnz	r3, 8000aec <__swbuf_r+0x32>
 8000ada:	4621      	mov	r1, r4
 8000adc:	4628      	mov	r0, r5
 8000ade:	f000 f82b 	bl	8000b38 <__swsetup_r>
 8000ae2:	b118      	cbz	r0, 8000aec <__swbuf_r+0x32>
 8000ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8000ae8:	4638      	mov	r0, r7
 8000aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	6922      	ldr	r2, [r4, #16]
 8000af0:	1a98      	subs	r0, r3, r2
 8000af2:	6963      	ldr	r3, [r4, #20]
 8000af4:	b2f6      	uxtb	r6, r6
 8000af6:	4283      	cmp	r3, r0
 8000af8:	4637      	mov	r7, r6
 8000afa:	dc05      	bgt.n	8000b08 <__swbuf_r+0x4e>
 8000afc:	4621      	mov	r1, r4
 8000afe:	4628      	mov	r0, r5
 8000b00:	f000 fd58 	bl	80015b4 <_fflush_r>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1ed      	bne.n	8000ae4 <__swbuf_r+0x2a>
 8000b08:	68a3      	ldr	r3, [r4, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	60a3      	str	r3, [r4, #8]
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	6022      	str	r2, [r4, #0]
 8000b14:	701e      	strb	r6, [r3, #0]
 8000b16:	6962      	ldr	r2, [r4, #20]
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d004      	beq.n	8000b28 <__swbuf_r+0x6e>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	07db      	lsls	r3, r3, #31
 8000b22:	d5e1      	bpl.n	8000ae8 <__swbuf_r+0x2e>
 8000b24:	2e0a      	cmp	r6, #10
 8000b26:	d1df      	bne.n	8000ae8 <__swbuf_r+0x2e>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 fd42 	bl	80015b4 <_fflush_r>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d0d9      	beq.n	8000ae8 <__swbuf_r+0x2e>
 8000b34:	e7d6      	b.n	8000ae4 <__swbuf_r+0x2a>
	...

08000b38 <__swsetup_r>:
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	4b29      	ldr	r3, [pc, #164]	@ (8000be0 <__swsetup_r+0xa8>)
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	460c      	mov	r4, r1
 8000b42:	b118      	cbz	r0, 8000b4c <__swsetup_r+0x14>
 8000b44:	6a03      	ldr	r3, [r0, #32]
 8000b46:	b90b      	cbnz	r3, 8000b4c <__swsetup_r+0x14>
 8000b48:	f7ff fec6 	bl	80008d8 <__sinit>
 8000b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b50:	0719      	lsls	r1, r3, #28
 8000b52:	d422      	bmi.n	8000b9a <__swsetup_r+0x62>
 8000b54:	06da      	lsls	r2, r3, #27
 8000b56:	d407      	bmi.n	8000b68 <__swsetup_r+0x30>
 8000b58:	2209      	movs	r2, #9
 8000b5a:	602a      	str	r2, [r5, #0]
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b60:	81a3      	strh	r3, [r4, #12]
 8000b62:	f04f 30ff 	mov.w	r0, #4294967295
 8000b66:	e033      	b.n	8000bd0 <__swsetup_r+0x98>
 8000b68:	0758      	lsls	r0, r3, #29
 8000b6a:	d512      	bpl.n	8000b92 <__swsetup_r+0x5a>
 8000b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b6e:	b141      	cbz	r1, 8000b82 <__swsetup_r+0x4a>
 8000b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d002      	beq.n	8000b7e <__swsetup_r+0x46>
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f8cd 	bl	8000d18 <_free_r>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b82:	89a3      	ldrh	r3, [r4, #12]
 8000b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b88:	81a3      	strh	r3, [r4, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6063      	str	r3, [r4, #4]
 8000b8e:	6923      	ldr	r3, [r4, #16]
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	89a3      	ldrh	r3, [r4, #12]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	6923      	ldr	r3, [r4, #16]
 8000b9c:	b94b      	cbnz	r3, 8000bb2 <__swsetup_r+0x7a>
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba8:	d003      	beq.n	8000bb2 <__swsetup_r+0x7a>
 8000baa:	4621      	mov	r1, r4
 8000bac:	4628      	mov	r0, r5
 8000bae:	f000 fd61 	bl	8001674 <__smakebuf_r>
 8000bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bb6:	f013 0201 	ands.w	r2, r3, #1
 8000bba:	d00a      	beq.n	8000bd2 <__swsetup_r+0x9a>
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60a2      	str	r2, [r4, #8]
 8000bc0:	6962      	ldr	r2, [r4, #20]
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	61a2      	str	r2, [r4, #24]
 8000bc6:	6922      	ldr	r2, [r4, #16]
 8000bc8:	b942      	cbnz	r2, 8000bdc <__swsetup_r+0xa4>
 8000bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000bce:	d1c5      	bne.n	8000b5c <__swsetup_r+0x24>
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	0799      	lsls	r1, r3, #30
 8000bd4:	bf58      	it	pl
 8000bd6:	6962      	ldrpl	r2, [r4, #20]
 8000bd8:	60a2      	str	r2, [r4, #8]
 8000bda:	e7f4      	b.n	8000bc6 <__swsetup_r+0x8e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e7f7      	b.n	8000bd0 <__swsetup_r+0x98>
 8000be0:	20000050 	.word	0x20000050

08000be4 <memset>:
 8000be4:	4402      	add	r2, r0
 8000be6:	4603      	mov	r3, r0
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d100      	bne.n	8000bee <memset+0xa>
 8000bec:	4770      	bx	lr
 8000bee:	f803 1b01 	strb.w	r1, [r3], #1
 8000bf2:	e7f9      	b.n	8000be8 <memset+0x4>

08000bf4 <_close_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4d06      	ldr	r5, [pc, #24]	@ (8000c10 <_close_r+0x1c>)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	602b      	str	r3, [r5, #0]
 8000c00:	f7ff fd0f 	bl	8000622 <_close>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d102      	bne.n	8000c0e <_close_r+0x1a>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b103      	cbz	r3, 8000c0e <_close_r+0x1a>
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	20000200 	.word	0x20000200

08000c14 <_lseek_r>:
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4d07      	ldr	r5, [pc, #28]	@ (8000c34 <_lseek_r+0x20>)
 8000c18:	4604      	mov	r4, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	602a      	str	r2, [r5, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f7ff fd21 	bl	800066a <_lseek>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	d102      	bne.n	8000c32 <_lseek_r+0x1e>
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	b103      	cbz	r3, 8000c32 <_lseek_r+0x1e>
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
 8000c34:	20000200 	.word	0x20000200

08000c38 <_read_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4d07      	ldr	r5, [pc, #28]	@ (8000c58 <_read_r+0x20>)
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	602a      	str	r2, [r5, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f7ff fcb2 	bl	80005b0 <_read>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_read_r+0x1e>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_read_r+0x1e>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	20000200 	.word	0x20000200

08000c5c <_write_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	@ (8000c7c <_write_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fcbd 	bl	80005ea <_write>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_write_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_write_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	20000200 	.word	0x20000200

08000c80 <__errno>:
 8000c80:	4b01      	ldr	r3, [pc, #4]	@ (8000c88 <__errno+0x8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000050 	.word	0x20000050

08000c8c <__libc_init_array>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cc4 <__libc_init_array+0x38>)
 8000c90:	4c0d      	ldr	r4, [pc, #52]	@ (8000cc8 <__libc_init_array+0x3c>)
 8000c92:	1b64      	subs	r4, r4, r5
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	2600      	movs	r6, #0
 8000c98:	42a6      	cmp	r6, r4
 8000c9a:	d109      	bne.n	8000cb0 <__libc_init_array+0x24>
 8000c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000ccc <__libc_init_array+0x40>)
 8000c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd0 <__libc_init_array+0x44>)
 8000ca0:	f000 fdd6 	bl	8001850 <_init>
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	2600      	movs	r6, #0
 8000caa:	42a6      	cmp	r6, r4
 8000cac:	d105      	bne.n	8000cba <__libc_init_array+0x2e>
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb4:	4798      	blx	r3
 8000cb6:	3601      	adds	r6, #1
 8000cb8:	e7ee      	b.n	8000c98 <__libc_init_array+0xc>
 8000cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cbe:	4798      	blx	r3
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7f2      	b.n	8000caa <__libc_init_array+0x1e>
 8000cc4:	080019c0 	.word	0x080019c0
 8000cc8:	080019c0 	.word	0x080019c0
 8000ccc:	080019c0 	.word	0x080019c0
 8000cd0:	080019c4 	.word	0x080019c4

08000cd4 <__retarget_lock_init_recursive>:
 8000cd4:	4770      	bx	lr

08000cd6 <__retarget_lock_acquire_recursive>:
 8000cd6:	4770      	bx	lr

08000cd8 <__retarget_lock_release_recursive>:
 8000cd8:	4770      	bx	lr
	...

08000cdc <__assert_func>:
 8000cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cde:	4614      	mov	r4, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <__assert_func+0x2c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	68d8      	ldr	r0, [r3, #12]
 8000cea:	b954      	cbnz	r4, 8000d02 <__assert_func+0x26>
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <__assert_func+0x30>)
 8000cee:	461c      	mov	r4, r3
 8000cf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000cf4:	9100      	str	r1, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4905      	ldr	r1, [pc, #20]	@ (8000d10 <__assert_func+0x34>)
 8000cfa:	f000 fc83 	bl	8001604 <fiprintf>
 8000cfe:	f000 fd5b 	bl	80017b8 <abort>
 8000d02:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__assert_func+0x38>)
 8000d04:	e7f4      	b.n	8000cf0 <__assert_func+0x14>
 8000d06:	bf00      	nop
 8000d08:	20000050 	.word	0x20000050
 8000d0c:	08001982 	.word	0x08001982
 8000d10:	08001954 	.word	0x08001954
 8000d14:	08001947 	.word	0x08001947

08000d18 <_free_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4605      	mov	r5, r0
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d041      	beq.n	8000da4 <_free_r+0x8c>
 8000d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d24:	1f0c      	subs	r4, r1, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bfb8      	it	lt
 8000d2a:	18e4      	addlt	r4, r4, r3
 8000d2c:	f000 f8e8 	bl	8000f00 <__malloc_lock>
 8000d30:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <_free_r+0x90>)
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	b933      	cbnz	r3, 8000d44 <_free_r+0x2c>
 8000d36:	6063      	str	r3, [r4, #4]
 8000d38:	6014      	str	r4, [r2, #0]
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b8e4 	b.w	8000f0c <__malloc_unlock>
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d908      	bls.n	8000d5a <_free_r+0x42>
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	1821      	adds	r1, r4, r0
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	bf01      	itttt	eq
 8000d50:	6819      	ldreq	r1, [r3, #0]
 8000d52:	685b      	ldreq	r3, [r3, #4]
 8000d54:	1809      	addeq	r1, r1, r0
 8000d56:	6021      	streq	r1, [r4, #0]
 8000d58:	e7ed      	b.n	8000d36 <_free_r+0x1e>
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	b10b      	cbz	r3, 8000d64 <_free_r+0x4c>
 8000d60:	42a3      	cmp	r3, r4
 8000d62:	d9fa      	bls.n	8000d5a <_free_r+0x42>
 8000d64:	6811      	ldr	r1, [r2, #0]
 8000d66:	1850      	adds	r0, r2, r1
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	d10b      	bne.n	8000d84 <_free_r+0x6c>
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	4401      	add	r1, r0
 8000d70:	1850      	adds	r0, r2, r1
 8000d72:	4283      	cmp	r3, r0
 8000d74:	6011      	str	r1, [r2, #0]
 8000d76:	d1e0      	bne.n	8000d3a <_free_r+0x22>
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	6053      	str	r3, [r2, #4]
 8000d7e:	4408      	add	r0, r1
 8000d80:	6010      	str	r0, [r2, #0]
 8000d82:	e7da      	b.n	8000d3a <_free_r+0x22>
 8000d84:	d902      	bls.n	8000d8c <_free_r+0x74>
 8000d86:	230c      	movs	r3, #12
 8000d88:	602b      	str	r3, [r5, #0]
 8000d8a:	e7d6      	b.n	8000d3a <_free_r+0x22>
 8000d8c:	6820      	ldr	r0, [r4, #0]
 8000d8e:	1821      	adds	r1, r4, r0
 8000d90:	428b      	cmp	r3, r1
 8000d92:	bf04      	itt	eq
 8000d94:	6819      	ldreq	r1, [r3, #0]
 8000d96:	685b      	ldreq	r3, [r3, #4]
 8000d98:	6063      	str	r3, [r4, #4]
 8000d9a:	bf04      	itt	eq
 8000d9c:	1809      	addeq	r1, r1, r0
 8000d9e:	6021      	streq	r1, [r4, #0]
 8000da0:	6054      	str	r4, [r2, #4]
 8000da2:	e7ca      	b.n	8000d3a <_free_r+0x22>
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop
 8000da8:	2000020c 	.word	0x2000020c

08000dac <malloc>:
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <malloc+0xc>)
 8000dae:	4601      	mov	r1, r0
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f000 b825 	b.w	8000e00 <_malloc_r>
 8000db6:	bf00      	nop
 8000db8:	20000050 	.word	0x20000050

08000dbc <sbrk_aligned>:
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8000dfc <sbrk_aligned+0x40>)
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	6831      	ldr	r1, [r6, #0]
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	b911      	cbnz	r1, 8000dce <sbrk_aligned+0x12>
 8000dc8:	f000 fce6 	bl	8001798 <_sbrk_r>
 8000dcc:	6030      	str	r0, [r6, #0]
 8000dce:	4621      	mov	r1, r4
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f000 fce1 	bl	8001798 <_sbrk_r>
 8000dd6:	1c43      	adds	r3, r0, #1
 8000dd8:	d103      	bne.n	8000de2 <sbrk_aligned+0x26>
 8000dda:	f04f 34ff 	mov.w	r4, #4294967295
 8000dde:	4620      	mov	r0, r4
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
 8000de2:	1cc4      	adds	r4, r0, #3
 8000de4:	f024 0403 	bic.w	r4, r4, #3
 8000de8:	42a0      	cmp	r0, r4
 8000dea:	d0f8      	beq.n	8000dde <sbrk_aligned+0x22>
 8000dec:	1a21      	subs	r1, r4, r0
 8000dee:	4628      	mov	r0, r5
 8000df0:	f000 fcd2 	bl	8001798 <_sbrk_r>
 8000df4:	3001      	adds	r0, #1
 8000df6:	d1f2      	bne.n	8000dde <sbrk_aligned+0x22>
 8000df8:	e7ef      	b.n	8000dda <sbrk_aligned+0x1e>
 8000dfa:	bf00      	nop
 8000dfc:	20000208 	.word	0x20000208

08000e00 <_malloc_r>:
 8000e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e04:	1ccd      	adds	r5, r1, #3
 8000e06:	f025 0503 	bic.w	r5, r5, #3
 8000e0a:	3508      	adds	r5, #8
 8000e0c:	2d0c      	cmp	r5, #12
 8000e0e:	bf38      	it	cc
 8000e10:	250c      	movcc	r5, #12
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	4606      	mov	r6, r0
 8000e16:	db01      	blt.n	8000e1c <_malloc_r+0x1c>
 8000e18:	42a9      	cmp	r1, r5
 8000e1a:	d904      	bls.n	8000e26 <_malloc_r+0x26>
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	6033      	str	r3, [r6, #0]
 8000e20:	2000      	movs	r0, #0
 8000e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000efc <_malloc_r+0xfc>
 8000e2a:	f000 f869 	bl	8000f00 <__malloc_lock>
 8000e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e32:	461c      	mov	r4, r3
 8000e34:	bb44      	cbnz	r4, 8000e88 <_malloc_r+0x88>
 8000e36:	4629      	mov	r1, r5
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff ffbf 	bl	8000dbc <sbrk_aligned>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	4604      	mov	r4, r0
 8000e42:	d158      	bne.n	8000ef6 <_malloc_r+0xf6>
 8000e44:	f8d8 4000 	ldr.w	r4, [r8]
 8000e48:	4627      	mov	r7, r4
 8000e4a:	2f00      	cmp	r7, #0
 8000e4c:	d143      	bne.n	8000ed6 <_malloc_r+0xd6>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d04b      	beq.n	8000eea <_malloc_r+0xea>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	4639      	mov	r1, r7
 8000e56:	4630      	mov	r0, r6
 8000e58:	eb04 0903 	add.w	r9, r4, r3
 8000e5c:	f000 fc9c 	bl	8001798 <_sbrk_r>
 8000e60:	4581      	cmp	r9, r0
 8000e62:	d142      	bne.n	8000eea <_malloc_r+0xea>
 8000e64:	6821      	ldr	r1, [r4, #0]
 8000e66:	1a6d      	subs	r5, r5, r1
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f7ff ffa6 	bl	8000dbc <sbrk_aligned>
 8000e70:	3001      	adds	r0, #1
 8000e72:	d03a      	beq.n	8000eea <_malloc_r+0xea>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	442b      	add	r3, r5
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	bb62      	cbnz	r2, 8000edc <_malloc_r+0xdc>
 8000e82:	f8c8 7000 	str.w	r7, [r8]
 8000e86:	e00f      	b.n	8000ea8 <_malloc_r+0xa8>
 8000e88:	6822      	ldr	r2, [r4, #0]
 8000e8a:	1b52      	subs	r2, r2, r5
 8000e8c:	d420      	bmi.n	8000ed0 <_malloc_r+0xd0>
 8000e8e:	2a0b      	cmp	r2, #11
 8000e90:	d917      	bls.n	8000ec2 <_malloc_r+0xc2>
 8000e92:	1961      	adds	r1, r4, r5
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	6025      	str	r5, [r4, #0]
 8000e98:	bf18      	it	ne
 8000e9a:	6059      	strne	r1, [r3, #4]
 8000e9c:	6863      	ldr	r3, [r4, #4]
 8000e9e:	bf08      	it	eq
 8000ea0:	f8c8 1000 	streq.w	r1, [r8]
 8000ea4:	5162      	str	r2, [r4, r5]
 8000ea6:	604b      	str	r3, [r1, #4]
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f000 f82f 	bl	8000f0c <__malloc_unlock>
 8000eae:	f104 000b 	add.w	r0, r4, #11
 8000eb2:	1d23      	adds	r3, r4, #4
 8000eb4:	f020 0007 	bic.w	r0, r0, #7
 8000eb8:	1ac2      	subs	r2, r0, r3
 8000eba:	bf1c      	itt	ne
 8000ebc:	1a1b      	subne	r3, r3, r0
 8000ebe:	50a3      	strne	r3, [r4, r2]
 8000ec0:	e7af      	b.n	8000e22 <_malloc_r+0x22>
 8000ec2:	6862      	ldr	r2, [r4, #4]
 8000ec4:	42a3      	cmp	r3, r4
 8000ec6:	bf0c      	ite	eq
 8000ec8:	f8c8 2000 	streq.w	r2, [r8]
 8000ecc:	605a      	strne	r2, [r3, #4]
 8000ece:	e7eb      	b.n	8000ea8 <_malloc_r+0xa8>
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	6864      	ldr	r4, [r4, #4]
 8000ed4:	e7ae      	b.n	8000e34 <_malloc_r+0x34>
 8000ed6:	463c      	mov	r4, r7
 8000ed8:	687f      	ldr	r7, [r7, #4]
 8000eda:	e7b6      	b.n	8000e4a <_malloc_r+0x4a>
 8000edc:	461a      	mov	r2, r3
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	d1fb      	bne.n	8000edc <_malloc_r+0xdc>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	6053      	str	r3, [r2, #4]
 8000ee8:	e7de      	b.n	8000ea8 <_malloc_r+0xa8>
 8000eea:	230c      	movs	r3, #12
 8000eec:	6033      	str	r3, [r6, #0]
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f000 f80c 	bl	8000f0c <__malloc_unlock>
 8000ef4:	e794      	b.n	8000e20 <_malloc_r+0x20>
 8000ef6:	6005      	str	r5, [r0, #0]
 8000ef8:	e7d6      	b.n	8000ea8 <_malloc_r+0xa8>
 8000efa:	bf00      	nop
 8000efc:	2000020c 	.word	0x2000020c

08000f00 <__malloc_lock>:
 8000f00:	4801      	ldr	r0, [pc, #4]	@ (8000f08 <__malloc_lock+0x8>)
 8000f02:	f7ff bee8 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 8000f06:	bf00      	nop
 8000f08:	20000204 	.word	0x20000204

08000f0c <__malloc_unlock>:
 8000f0c:	4801      	ldr	r0, [pc, #4]	@ (8000f14 <__malloc_unlock+0x8>)
 8000f0e:	f7ff bee3 	b.w	8000cd8 <__retarget_lock_release_recursive>
 8000f12:	bf00      	nop
 8000f14:	20000204 	.word	0x20000204

08000f18 <__sfputc_r>:
 8000f18:	6893      	ldr	r3, [r2, #8]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	b410      	push	{r4}
 8000f20:	6093      	str	r3, [r2, #8]
 8000f22:	da07      	bge.n	8000f34 <__sfputc_r+0x1c>
 8000f24:	6994      	ldr	r4, [r2, #24]
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	db01      	blt.n	8000f2e <__sfputc_r+0x16>
 8000f2a:	290a      	cmp	r1, #10
 8000f2c:	d102      	bne.n	8000f34 <__sfputc_r+0x1c>
 8000f2e:	bc10      	pop	{r4}
 8000f30:	f7ff bdc3 	b.w	8000aba <__swbuf_r>
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	1c58      	adds	r0, r3, #1
 8000f38:	6010      	str	r0, [r2, #0]
 8000f3a:	7019      	strb	r1, [r3, #0]
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	bc10      	pop	{r4}
 8000f40:	4770      	bx	lr

08000f42 <__sfputs_r>:
 8000f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f44:	4606      	mov	r6, r0
 8000f46:	460f      	mov	r7, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	18d5      	adds	r5, r2, r3
 8000f4c:	42ac      	cmp	r4, r5
 8000f4e:	d101      	bne.n	8000f54 <__sfputs_r+0x12>
 8000f50:	2000      	movs	r0, #0
 8000f52:	e007      	b.n	8000f64 <__sfputs_r+0x22>
 8000f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f58:	463a      	mov	r2, r7
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	f7ff ffdc 	bl	8000f18 <__sfputc_r>
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	d1f3      	bne.n	8000f4c <__sfputs_r+0xa>
 8000f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f68 <_vfiprintf_r>:
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	b09d      	sub	sp, #116	@ 0x74
 8000f70:	4614      	mov	r4, r2
 8000f72:	4698      	mov	r8, r3
 8000f74:	4606      	mov	r6, r0
 8000f76:	b118      	cbz	r0, 8000f80 <_vfiprintf_r+0x18>
 8000f78:	6a03      	ldr	r3, [r0, #32]
 8000f7a:	b90b      	cbnz	r3, 8000f80 <_vfiprintf_r+0x18>
 8000f7c:	f7ff fcac 	bl	80008d8 <__sinit>
 8000f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f82:	07d9      	lsls	r1, r3, #31
 8000f84:	d405      	bmi.n	8000f92 <_vfiprintf_r+0x2a>
 8000f86:	89ab      	ldrh	r3, [r5, #12]
 8000f88:	059a      	lsls	r2, r3, #22
 8000f8a:	d402      	bmi.n	8000f92 <_vfiprintf_r+0x2a>
 8000f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f8e:	f7ff fea2 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 8000f92:	89ab      	ldrh	r3, [r5, #12]
 8000f94:	071b      	lsls	r3, r3, #28
 8000f96:	d501      	bpl.n	8000f9c <_vfiprintf_r+0x34>
 8000f98:	692b      	ldr	r3, [r5, #16]
 8000f9a:	b99b      	cbnz	r3, 8000fc4 <_vfiprintf_r+0x5c>
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f7ff fdca 	bl	8000b38 <__swsetup_r>
 8000fa4:	b170      	cbz	r0, 8000fc4 <_vfiprintf_r+0x5c>
 8000fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fa8:	07dc      	lsls	r4, r3, #31
 8000faa:	d504      	bpl.n	8000fb6 <_vfiprintf_r+0x4e>
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	b01d      	add	sp, #116	@ 0x74
 8000fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb6:	89ab      	ldrh	r3, [r5, #12]
 8000fb8:	0598      	lsls	r0, r3, #22
 8000fba:	d4f7      	bmi.n	8000fac <_vfiprintf_r+0x44>
 8000fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fbe:	f7ff fe8b 	bl	8000cd8 <__retarget_lock_release_recursive>
 8000fc2:	e7f3      	b.n	8000fac <_vfiprintf_r+0x44>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fc8:	2320      	movs	r3, #32
 8000fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fd2:	2330      	movs	r3, #48	@ 0x30
 8000fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001184 <_vfiprintf_r+0x21c>
 8000fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fdc:	f04f 0901 	mov.w	r9, #1
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fe8:	b10a      	cbz	r2, 8000fee <_vfiprintf_r+0x86>
 8000fea:	2a25      	cmp	r2, #37	@ 0x25
 8000fec:	d1f9      	bne.n	8000fe2 <_vfiprintf_r+0x7a>
 8000fee:	ebba 0b04 	subs.w	fp, sl, r4
 8000ff2:	d00b      	beq.n	800100c <_vfiprintf_r+0xa4>
 8000ff4:	465b      	mov	r3, fp
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff ffa1 	bl	8000f42 <__sfputs_r>
 8001000:	3001      	adds	r0, #1
 8001002:	f000 80a7 	beq.w	8001154 <_vfiprintf_r+0x1ec>
 8001006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001008:	445a      	add	r2, fp
 800100a:	9209      	str	r2, [sp, #36]	@ 0x24
 800100c:	f89a 3000 	ldrb.w	r3, [sl]
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 809f 	beq.w	8001154 <_vfiprintf_r+0x1ec>
 8001016:	2300      	movs	r3, #0
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001020:	f10a 0a01 	add.w	sl, sl, #1
 8001024:	9304      	str	r3, [sp, #16]
 8001026:	9307      	str	r3, [sp, #28]
 8001028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800102c:	931a      	str	r3, [sp, #104]	@ 0x68
 800102e:	4654      	mov	r4, sl
 8001030:	2205      	movs	r2, #5
 8001032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001036:	4853      	ldr	r0, [pc, #332]	@ (8001184 <_vfiprintf_r+0x21c>)
 8001038:	f7ff f8ea 	bl	8000210 <memchr>
 800103c:	9a04      	ldr	r2, [sp, #16]
 800103e:	b9d8      	cbnz	r0, 8001078 <_vfiprintf_r+0x110>
 8001040:	06d1      	lsls	r1, r2, #27
 8001042:	bf44      	itt	mi
 8001044:	2320      	movmi	r3, #32
 8001046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800104a:	0713      	lsls	r3, r2, #28
 800104c:	bf44      	itt	mi
 800104e:	232b      	movmi	r3, #43	@ 0x2b
 8001050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001054:	f89a 3000 	ldrb.w	r3, [sl]
 8001058:	2b2a      	cmp	r3, #42	@ 0x2a
 800105a:	d015      	beq.n	8001088 <_vfiprintf_r+0x120>
 800105c:	9a07      	ldr	r2, [sp, #28]
 800105e:	4654      	mov	r4, sl
 8001060:	2000      	movs	r0, #0
 8001062:	f04f 0c0a 	mov.w	ip, #10
 8001066:	4621      	mov	r1, r4
 8001068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800106c:	3b30      	subs	r3, #48	@ 0x30
 800106e:	2b09      	cmp	r3, #9
 8001070:	d94b      	bls.n	800110a <_vfiprintf_r+0x1a2>
 8001072:	b1b0      	cbz	r0, 80010a2 <_vfiprintf_r+0x13a>
 8001074:	9207      	str	r2, [sp, #28]
 8001076:	e014      	b.n	80010a2 <_vfiprintf_r+0x13a>
 8001078:	eba0 0308 	sub.w	r3, r0, r8
 800107c:	fa09 f303 	lsl.w	r3, r9, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	9304      	str	r3, [sp, #16]
 8001084:	46a2      	mov	sl, r4
 8001086:	e7d2      	b.n	800102e <_vfiprintf_r+0xc6>
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	1d19      	adds	r1, r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	9103      	str	r1, [sp, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfbb      	ittet	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	f042 0202 	orrlt.w	r2, r2, #2
 800109a:	9307      	strge	r3, [sp, #28]
 800109c:	9307      	strlt	r3, [sp, #28]
 800109e:	bfb8      	it	lt
 80010a0:	9204      	strlt	r2, [sp, #16]
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80010a6:	d10a      	bne.n	80010be <_vfiprintf_r+0x156>
 80010a8:	7863      	ldrb	r3, [r4, #1]
 80010aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80010ac:	d132      	bne.n	8001114 <_vfiprintf_r+0x1ac>
 80010ae:	9b03      	ldr	r3, [sp, #12]
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	9203      	str	r2, [sp, #12]
 80010b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010ba:	3402      	adds	r4, #2
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001188 <_vfiprintf_r+0x220>
 80010c2:	7821      	ldrb	r1, [r4, #0]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4650      	mov	r0, sl
 80010c8:	f7ff f8a2 	bl	8000210 <memchr>
 80010cc:	b138      	cbz	r0, 80010de <_vfiprintf_r+0x176>
 80010ce:	9b04      	ldr	r3, [sp, #16]
 80010d0:	eba0 000a 	sub.w	r0, r0, sl
 80010d4:	2240      	movs	r2, #64	@ 0x40
 80010d6:	4082      	lsls	r2, r0
 80010d8:	4313      	orrs	r3, r2
 80010da:	3401      	adds	r4, #1
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010e2:	482a      	ldr	r0, [pc, #168]	@ (800118c <_vfiprintf_r+0x224>)
 80010e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010e8:	2206      	movs	r2, #6
 80010ea:	f7ff f891 	bl	8000210 <memchr>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d03f      	beq.n	8001172 <_vfiprintf_r+0x20a>
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <_vfiprintf_r+0x228>)
 80010f4:	bb1b      	cbnz	r3, 800113e <_vfiprintf_r+0x1d6>
 80010f6:	9b03      	ldr	r3, [sp, #12]
 80010f8:	3307      	adds	r3, #7
 80010fa:	f023 0307 	bic.w	r3, r3, #7
 80010fe:	3308      	adds	r3, #8
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001104:	443b      	add	r3, r7
 8001106:	9309      	str	r3, [sp, #36]	@ 0x24
 8001108:	e76a      	b.n	8000fe0 <_vfiprintf_r+0x78>
 800110a:	fb0c 3202 	mla	r2, ip, r2, r3
 800110e:	460c      	mov	r4, r1
 8001110:	2001      	movs	r0, #1
 8001112:	e7a8      	b.n	8001066 <_vfiprintf_r+0xfe>
 8001114:	2300      	movs	r3, #0
 8001116:	3401      	adds	r4, #1
 8001118:	9305      	str	r3, [sp, #20]
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 0c0a 	mov.w	ip, #10
 8001120:	4620      	mov	r0, r4
 8001122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001126:	3a30      	subs	r2, #48	@ 0x30
 8001128:	2a09      	cmp	r2, #9
 800112a:	d903      	bls.n	8001134 <_vfiprintf_r+0x1cc>
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0c6      	beq.n	80010be <_vfiprintf_r+0x156>
 8001130:	9105      	str	r1, [sp, #20]
 8001132:	e7c4      	b.n	80010be <_vfiprintf_r+0x156>
 8001134:	fb0c 2101 	mla	r1, ip, r1, r2
 8001138:	4604      	mov	r4, r0
 800113a:	2301      	movs	r3, #1
 800113c:	e7f0      	b.n	8001120 <_vfiprintf_r+0x1b8>
 800113e:	ab03      	add	r3, sp, #12
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	462a      	mov	r2, r5
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <_vfiprintf_r+0x22c>)
 8001146:	a904      	add	r1, sp, #16
 8001148:	4630      	mov	r0, r6
 800114a:	f3af 8000 	nop.w
 800114e:	4607      	mov	r7, r0
 8001150:	1c78      	adds	r0, r7, #1
 8001152:	d1d6      	bne.n	8001102 <_vfiprintf_r+0x19a>
 8001154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001156:	07d9      	lsls	r1, r3, #31
 8001158:	d405      	bmi.n	8001166 <_vfiprintf_r+0x1fe>
 800115a:	89ab      	ldrh	r3, [r5, #12]
 800115c:	059a      	lsls	r2, r3, #22
 800115e:	d402      	bmi.n	8001166 <_vfiprintf_r+0x1fe>
 8001160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001162:	f7ff fdb9 	bl	8000cd8 <__retarget_lock_release_recursive>
 8001166:	89ab      	ldrh	r3, [r5, #12]
 8001168:	065b      	lsls	r3, r3, #25
 800116a:	f53f af1f 	bmi.w	8000fac <_vfiprintf_r+0x44>
 800116e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001170:	e71e      	b.n	8000fb0 <_vfiprintf_r+0x48>
 8001172:	ab03      	add	r3, sp, #12
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	462a      	mov	r2, r5
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <_vfiprintf_r+0x22c>)
 800117a:	a904      	add	r1, sp, #16
 800117c:	4630      	mov	r0, r6
 800117e:	f000 f879 	bl	8001274 <_printf_i>
 8001182:	e7e4      	b.n	800114e <_vfiprintf_r+0x1e6>
 8001184:	08001983 	.word	0x08001983
 8001188:	08001989 	.word	0x08001989
 800118c:	0800198d 	.word	0x0800198d
 8001190:	00000000 	.word	0x00000000
 8001194:	08000f43 	.word	0x08000f43

08001198 <_printf_common>:
 8001198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800119c:	4616      	mov	r6, r2
 800119e:	4698      	mov	r8, r3
 80011a0:	688a      	ldr	r2, [r1, #8]
 80011a2:	690b      	ldr	r3, [r1, #16]
 80011a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	bfb8      	it	lt
 80011ac:	4613      	movlt	r3, r2
 80011ae:	6033      	str	r3, [r6, #0]
 80011b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80011b4:	4607      	mov	r7, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	b10a      	cbz	r2, 80011be <_printf_common+0x26>
 80011ba:	3301      	adds	r3, #1
 80011bc:	6033      	str	r3, [r6, #0]
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	0699      	lsls	r1, r3, #26
 80011c2:	bf42      	ittt	mi
 80011c4:	6833      	ldrmi	r3, [r6, #0]
 80011c6:	3302      	addmi	r3, #2
 80011c8:	6033      	strmi	r3, [r6, #0]
 80011ca:	6825      	ldr	r5, [r4, #0]
 80011cc:	f015 0506 	ands.w	r5, r5, #6
 80011d0:	d106      	bne.n	80011e0 <_printf_common+0x48>
 80011d2:	f104 0a19 	add.w	sl, r4, #25
 80011d6:	68e3      	ldr	r3, [r4, #12]
 80011d8:	6832      	ldr	r2, [r6, #0]
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	42ab      	cmp	r3, r5
 80011de:	dc26      	bgt.n	800122e <_printf_common+0x96>
 80011e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	3b00      	subs	r3, #0
 80011e8:	bf18      	it	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	0692      	lsls	r2, r2, #26
 80011ee:	d42b      	bmi.n	8001248 <_printf_common+0xb0>
 80011f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011f4:	4641      	mov	r1, r8
 80011f6:	4638      	mov	r0, r7
 80011f8:	47c8      	blx	r9
 80011fa:	3001      	adds	r0, #1
 80011fc:	d01e      	beq.n	800123c <_printf_common+0xa4>
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	6922      	ldr	r2, [r4, #16]
 8001202:	f003 0306 	and.w	r3, r3, #6
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf02      	ittt	eq
 800120a:	68e5      	ldreq	r5, [r4, #12]
 800120c:	6833      	ldreq	r3, [r6, #0]
 800120e:	1aed      	subeq	r5, r5, r3
 8001210:	68a3      	ldr	r3, [r4, #8]
 8001212:	bf0c      	ite	eq
 8001214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001218:	2500      	movne	r5, #0
 800121a:	4293      	cmp	r3, r2
 800121c:	bfc4      	itt	gt
 800121e:	1a9b      	subgt	r3, r3, r2
 8001220:	18ed      	addgt	r5, r5, r3
 8001222:	2600      	movs	r6, #0
 8001224:	341a      	adds	r4, #26
 8001226:	42b5      	cmp	r5, r6
 8001228:	d11a      	bne.n	8001260 <_printf_common+0xc8>
 800122a:	2000      	movs	r0, #0
 800122c:	e008      	b.n	8001240 <_printf_common+0xa8>
 800122e:	2301      	movs	r3, #1
 8001230:	4652      	mov	r2, sl
 8001232:	4641      	mov	r1, r8
 8001234:	4638      	mov	r0, r7
 8001236:	47c8      	blx	r9
 8001238:	3001      	adds	r0, #1
 800123a:	d103      	bne.n	8001244 <_printf_common+0xac>
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001244:	3501      	adds	r5, #1
 8001246:	e7c6      	b.n	80011d6 <_printf_common+0x3e>
 8001248:	18e1      	adds	r1, r4, r3
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	2030      	movs	r0, #48	@ 0x30
 800124e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001252:	4422      	add	r2, r4
 8001254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800125c:	3302      	adds	r3, #2
 800125e:	e7c7      	b.n	80011f0 <_printf_common+0x58>
 8001260:	2301      	movs	r3, #1
 8001262:	4622      	mov	r2, r4
 8001264:	4641      	mov	r1, r8
 8001266:	4638      	mov	r0, r7
 8001268:	47c8      	blx	r9
 800126a:	3001      	adds	r0, #1
 800126c:	d0e6      	beq.n	800123c <_printf_common+0xa4>
 800126e:	3601      	adds	r6, #1
 8001270:	e7d9      	b.n	8001226 <_printf_common+0x8e>
	...

08001274 <_printf_i>:
 8001274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001278:	7e0f      	ldrb	r7, [r1, #24]
 800127a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800127c:	2f78      	cmp	r7, #120	@ 0x78
 800127e:	4691      	mov	r9, r2
 8001280:	4680      	mov	r8, r0
 8001282:	460c      	mov	r4, r1
 8001284:	469a      	mov	sl, r3
 8001286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800128a:	d807      	bhi.n	800129c <_printf_i+0x28>
 800128c:	2f62      	cmp	r7, #98	@ 0x62
 800128e:	d80a      	bhi.n	80012a6 <_printf_i+0x32>
 8001290:	2f00      	cmp	r7, #0
 8001292:	f000 80d2 	beq.w	800143a <_printf_i+0x1c6>
 8001296:	2f58      	cmp	r7, #88	@ 0x58
 8001298:	f000 80b9 	beq.w	800140e <_printf_i+0x19a>
 800129c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80012a4:	e03a      	b.n	800131c <_printf_i+0xa8>
 80012a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80012aa:	2b15      	cmp	r3, #21
 80012ac:	d8f6      	bhi.n	800129c <_printf_i+0x28>
 80012ae:	a101      	add	r1, pc, #4	@ (adr r1, 80012b4 <_printf_i+0x40>)
 80012b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012b4:	0800130d 	.word	0x0800130d
 80012b8:	08001321 	.word	0x08001321
 80012bc:	0800129d 	.word	0x0800129d
 80012c0:	0800129d 	.word	0x0800129d
 80012c4:	0800129d 	.word	0x0800129d
 80012c8:	0800129d 	.word	0x0800129d
 80012cc:	08001321 	.word	0x08001321
 80012d0:	0800129d 	.word	0x0800129d
 80012d4:	0800129d 	.word	0x0800129d
 80012d8:	0800129d 	.word	0x0800129d
 80012dc:	0800129d 	.word	0x0800129d
 80012e0:	08001421 	.word	0x08001421
 80012e4:	0800134b 	.word	0x0800134b
 80012e8:	080013db 	.word	0x080013db
 80012ec:	0800129d 	.word	0x0800129d
 80012f0:	0800129d 	.word	0x0800129d
 80012f4:	08001443 	.word	0x08001443
 80012f8:	0800129d 	.word	0x0800129d
 80012fc:	0800134b 	.word	0x0800134b
 8001300:	0800129d 	.word	0x0800129d
 8001304:	0800129d 	.word	0x0800129d
 8001308:	080013e3 	.word	0x080013e3
 800130c:	6833      	ldr	r3, [r6, #0]
 800130e:	1d1a      	adds	r2, r3, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6032      	str	r2, [r6, #0]
 8001314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800131c:	2301      	movs	r3, #1
 800131e:	e09d      	b.n	800145c <_printf_i+0x1e8>
 8001320:	6833      	ldr	r3, [r6, #0]
 8001322:	6820      	ldr	r0, [r4, #0]
 8001324:	1d19      	adds	r1, r3, #4
 8001326:	6031      	str	r1, [r6, #0]
 8001328:	0606      	lsls	r6, r0, #24
 800132a:	d501      	bpl.n	8001330 <_printf_i+0xbc>
 800132c:	681d      	ldr	r5, [r3, #0]
 800132e:	e003      	b.n	8001338 <_printf_i+0xc4>
 8001330:	0645      	lsls	r5, r0, #25
 8001332:	d5fb      	bpl.n	800132c <_printf_i+0xb8>
 8001334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001338:	2d00      	cmp	r5, #0
 800133a:	da03      	bge.n	8001344 <_printf_i+0xd0>
 800133c:	232d      	movs	r3, #45	@ 0x2d
 800133e:	426d      	negs	r5, r5
 8001340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001344:	4859      	ldr	r0, [pc, #356]	@ (80014ac <_printf_i+0x238>)
 8001346:	230a      	movs	r3, #10
 8001348:	e011      	b.n	800136e <_printf_i+0xfa>
 800134a:	6821      	ldr	r1, [r4, #0]
 800134c:	6833      	ldr	r3, [r6, #0]
 800134e:	0608      	lsls	r0, r1, #24
 8001350:	f853 5b04 	ldr.w	r5, [r3], #4
 8001354:	d402      	bmi.n	800135c <_printf_i+0xe8>
 8001356:	0649      	lsls	r1, r1, #25
 8001358:	bf48      	it	mi
 800135a:	b2ad      	uxthmi	r5, r5
 800135c:	2f6f      	cmp	r7, #111	@ 0x6f
 800135e:	4853      	ldr	r0, [pc, #332]	@ (80014ac <_printf_i+0x238>)
 8001360:	6033      	str	r3, [r6, #0]
 8001362:	bf14      	ite	ne
 8001364:	230a      	movne	r3, #10
 8001366:	2308      	moveq	r3, #8
 8001368:	2100      	movs	r1, #0
 800136a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800136e:	6866      	ldr	r6, [r4, #4]
 8001370:	60a6      	str	r6, [r4, #8]
 8001372:	2e00      	cmp	r6, #0
 8001374:	bfa2      	ittt	ge
 8001376:	6821      	ldrge	r1, [r4, #0]
 8001378:	f021 0104 	bicge.w	r1, r1, #4
 800137c:	6021      	strge	r1, [r4, #0]
 800137e:	b90d      	cbnz	r5, 8001384 <_printf_i+0x110>
 8001380:	2e00      	cmp	r6, #0
 8001382:	d04b      	beq.n	800141c <_printf_i+0x1a8>
 8001384:	4616      	mov	r6, r2
 8001386:	fbb5 f1f3 	udiv	r1, r5, r3
 800138a:	fb03 5711 	mls	r7, r3, r1, r5
 800138e:	5dc7      	ldrb	r7, [r0, r7]
 8001390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001394:	462f      	mov	r7, r5
 8001396:	42bb      	cmp	r3, r7
 8001398:	460d      	mov	r5, r1
 800139a:	d9f4      	bls.n	8001386 <_printf_i+0x112>
 800139c:	2b08      	cmp	r3, #8
 800139e:	d10b      	bne.n	80013b8 <_printf_i+0x144>
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	07df      	lsls	r7, r3, #31
 80013a4:	d508      	bpl.n	80013b8 <_printf_i+0x144>
 80013a6:	6923      	ldr	r3, [r4, #16]
 80013a8:	6861      	ldr	r1, [r4, #4]
 80013aa:	4299      	cmp	r1, r3
 80013ac:	bfde      	ittt	le
 80013ae:	2330      	movle	r3, #48	@ 0x30
 80013b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013b8:	1b92      	subs	r2, r2, r6
 80013ba:	6122      	str	r2, [r4, #16]
 80013bc:	f8cd a000 	str.w	sl, [sp]
 80013c0:	464b      	mov	r3, r9
 80013c2:	aa03      	add	r2, sp, #12
 80013c4:	4621      	mov	r1, r4
 80013c6:	4640      	mov	r0, r8
 80013c8:	f7ff fee6 	bl	8001198 <_printf_common>
 80013cc:	3001      	adds	r0, #1
 80013ce:	d14a      	bne.n	8001466 <_printf_i+0x1f2>
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	b004      	add	sp, #16
 80013d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	4833      	ldr	r0, [pc, #204]	@ (80014b0 <_printf_i+0x23c>)
 80013e4:	2778      	movs	r7, #120	@ 0x78
 80013e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	6831      	ldr	r1, [r6, #0]
 80013ee:	061f      	lsls	r7, r3, #24
 80013f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80013f4:	d402      	bmi.n	80013fc <_printf_i+0x188>
 80013f6:	065f      	lsls	r7, r3, #25
 80013f8:	bf48      	it	mi
 80013fa:	b2ad      	uxthmi	r5, r5
 80013fc:	6031      	str	r1, [r6, #0]
 80013fe:	07d9      	lsls	r1, r3, #31
 8001400:	bf44      	itt	mi
 8001402:	f043 0320 	orrmi.w	r3, r3, #32
 8001406:	6023      	strmi	r3, [r4, #0]
 8001408:	b11d      	cbz	r5, 8001412 <_printf_i+0x19e>
 800140a:	2310      	movs	r3, #16
 800140c:	e7ac      	b.n	8001368 <_printf_i+0xf4>
 800140e:	4827      	ldr	r0, [pc, #156]	@ (80014ac <_printf_i+0x238>)
 8001410:	e7e9      	b.n	80013e6 <_printf_i+0x172>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	f023 0320 	bic.w	r3, r3, #32
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	e7f6      	b.n	800140a <_printf_i+0x196>
 800141c:	4616      	mov	r6, r2
 800141e:	e7bd      	b.n	800139c <_printf_i+0x128>
 8001420:	6833      	ldr	r3, [r6, #0]
 8001422:	6825      	ldr	r5, [r4, #0]
 8001424:	6961      	ldr	r1, [r4, #20]
 8001426:	1d18      	adds	r0, r3, #4
 8001428:	6030      	str	r0, [r6, #0]
 800142a:	062e      	lsls	r6, r5, #24
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	d501      	bpl.n	8001434 <_printf_i+0x1c0>
 8001430:	6019      	str	r1, [r3, #0]
 8001432:	e002      	b.n	800143a <_printf_i+0x1c6>
 8001434:	0668      	lsls	r0, r5, #25
 8001436:	d5fb      	bpl.n	8001430 <_printf_i+0x1bc>
 8001438:	8019      	strh	r1, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	6123      	str	r3, [r4, #16]
 800143e:	4616      	mov	r6, r2
 8001440:	e7bc      	b.n	80013bc <_printf_i+0x148>
 8001442:	6833      	ldr	r3, [r6, #0]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	6032      	str	r2, [r6, #0]
 8001448:	681e      	ldr	r6, [r3, #0]
 800144a:	6862      	ldr	r2, [r4, #4]
 800144c:	2100      	movs	r1, #0
 800144e:	4630      	mov	r0, r6
 8001450:	f7fe fede 	bl	8000210 <memchr>
 8001454:	b108      	cbz	r0, 800145a <_printf_i+0x1e6>
 8001456:	1b80      	subs	r0, r0, r6
 8001458:	6060      	str	r0, [r4, #4]
 800145a:	6863      	ldr	r3, [r4, #4]
 800145c:	6123      	str	r3, [r4, #16]
 800145e:	2300      	movs	r3, #0
 8001460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001464:	e7aa      	b.n	80013bc <_printf_i+0x148>
 8001466:	6923      	ldr	r3, [r4, #16]
 8001468:	4632      	mov	r2, r6
 800146a:	4649      	mov	r1, r9
 800146c:	4640      	mov	r0, r8
 800146e:	47d0      	blx	sl
 8001470:	3001      	adds	r0, #1
 8001472:	d0ad      	beq.n	80013d0 <_printf_i+0x15c>
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	079b      	lsls	r3, r3, #30
 8001478:	d413      	bmi.n	80014a2 <_printf_i+0x22e>
 800147a:	68e0      	ldr	r0, [r4, #12]
 800147c:	9b03      	ldr	r3, [sp, #12]
 800147e:	4298      	cmp	r0, r3
 8001480:	bfb8      	it	lt
 8001482:	4618      	movlt	r0, r3
 8001484:	e7a6      	b.n	80013d4 <_printf_i+0x160>
 8001486:	2301      	movs	r3, #1
 8001488:	4632      	mov	r2, r6
 800148a:	4649      	mov	r1, r9
 800148c:	4640      	mov	r0, r8
 800148e:	47d0      	blx	sl
 8001490:	3001      	adds	r0, #1
 8001492:	d09d      	beq.n	80013d0 <_printf_i+0x15c>
 8001494:	3501      	adds	r5, #1
 8001496:	68e3      	ldr	r3, [r4, #12]
 8001498:	9903      	ldr	r1, [sp, #12]
 800149a:	1a5b      	subs	r3, r3, r1
 800149c:	42ab      	cmp	r3, r5
 800149e:	dcf2      	bgt.n	8001486 <_printf_i+0x212>
 80014a0:	e7eb      	b.n	800147a <_printf_i+0x206>
 80014a2:	2500      	movs	r5, #0
 80014a4:	f104 0619 	add.w	r6, r4, #25
 80014a8:	e7f5      	b.n	8001496 <_printf_i+0x222>
 80014aa:	bf00      	nop
 80014ac:	08001994 	.word	0x08001994
 80014b0:	080019a5 	.word	0x080019a5

080014b4 <__sflush_r>:
 80014b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	0716      	lsls	r6, r2, #28
 80014bc:	4605      	mov	r5, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	d454      	bmi.n	800156c <__sflush_r+0xb8>
 80014c2:	684b      	ldr	r3, [r1, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dc02      	bgt.n	80014ce <__sflush_r+0x1a>
 80014c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dd48      	ble.n	8001560 <__sflush_r+0xac>
 80014ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	d045      	beq.n	8001560 <__sflush_r+0xac>
 80014d4:	2300      	movs	r3, #0
 80014d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014da:	682f      	ldr	r7, [r5, #0]
 80014dc:	6a21      	ldr	r1, [r4, #32]
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	d030      	beq.n	8001544 <__sflush_r+0x90>
 80014e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	0759      	lsls	r1, r3, #29
 80014e8:	d505      	bpl.n	80014f6 <__sflush_r+0x42>
 80014ea:	6863      	ldr	r3, [r4, #4]
 80014ec:	1ad2      	subs	r2, r2, r3
 80014ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014f0:	b10b      	cbz	r3, 80014f6 <__sflush_r+0x42>
 80014f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014f4:	1ad2      	subs	r2, r2, r3
 80014f6:	2300      	movs	r3, #0
 80014f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014fa:	6a21      	ldr	r1, [r4, #32]
 80014fc:	4628      	mov	r0, r5
 80014fe:	47b0      	blx	r6
 8001500:	1c43      	adds	r3, r0, #1
 8001502:	89a3      	ldrh	r3, [r4, #12]
 8001504:	d106      	bne.n	8001514 <__sflush_r+0x60>
 8001506:	6829      	ldr	r1, [r5, #0]
 8001508:	291d      	cmp	r1, #29
 800150a:	d82b      	bhi.n	8001564 <__sflush_r+0xb0>
 800150c:	4a28      	ldr	r2, [pc, #160]	@ (80015b0 <__sflush_r+0xfc>)
 800150e:	410a      	asrs	r2, r1
 8001510:	07d6      	lsls	r6, r2, #31
 8001512:	d427      	bmi.n	8001564 <__sflush_r+0xb0>
 8001514:	2200      	movs	r2, #0
 8001516:	6062      	str	r2, [r4, #4]
 8001518:	04d9      	lsls	r1, r3, #19
 800151a:	6922      	ldr	r2, [r4, #16]
 800151c:	6022      	str	r2, [r4, #0]
 800151e:	d504      	bpl.n	800152a <__sflush_r+0x76>
 8001520:	1c42      	adds	r2, r0, #1
 8001522:	d101      	bne.n	8001528 <__sflush_r+0x74>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	b903      	cbnz	r3, 800152a <__sflush_r+0x76>
 8001528:	6560      	str	r0, [r4, #84]	@ 0x54
 800152a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800152c:	602f      	str	r7, [r5, #0]
 800152e:	b1b9      	cbz	r1, 8001560 <__sflush_r+0xac>
 8001530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001534:	4299      	cmp	r1, r3
 8001536:	d002      	beq.n	800153e <__sflush_r+0x8a>
 8001538:	4628      	mov	r0, r5
 800153a:	f7ff fbed 	bl	8000d18 <_free_r>
 800153e:	2300      	movs	r3, #0
 8001540:	6363      	str	r3, [r4, #52]	@ 0x34
 8001542:	e00d      	b.n	8001560 <__sflush_r+0xac>
 8001544:	2301      	movs	r3, #1
 8001546:	4628      	mov	r0, r5
 8001548:	47b0      	blx	r6
 800154a:	4602      	mov	r2, r0
 800154c:	1c50      	adds	r0, r2, #1
 800154e:	d1c9      	bne.n	80014e4 <__sflush_r+0x30>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0c6      	beq.n	80014e4 <__sflush_r+0x30>
 8001556:	2b1d      	cmp	r3, #29
 8001558:	d001      	beq.n	800155e <__sflush_r+0xaa>
 800155a:	2b16      	cmp	r3, #22
 800155c:	d11d      	bne.n	800159a <__sflush_r+0xe6>
 800155e:	602f      	str	r7, [r5, #0]
 8001560:	2000      	movs	r0, #0
 8001562:	e021      	b.n	80015a8 <__sflush_r+0xf4>
 8001564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001568:	b21b      	sxth	r3, r3
 800156a:	e01a      	b.n	80015a2 <__sflush_r+0xee>
 800156c:	690f      	ldr	r7, [r1, #16]
 800156e:	2f00      	cmp	r7, #0
 8001570:	d0f6      	beq.n	8001560 <__sflush_r+0xac>
 8001572:	0793      	lsls	r3, r2, #30
 8001574:	680e      	ldr	r6, [r1, #0]
 8001576:	bf08      	it	eq
 8001578:	694b      	ldreq	r3, [r1, #20]
 800157a:	600f      	str	r7, [r1, #0]
 800157c:	bf18      	it	ne
 800157e:	2300      	movne	r3, #0
 8001580:	1bf6      	subs	r6, r6, r7
 8001582:	608b      	str	r3, [r1, #8]
 8001584:	2e00      	cmp	r6, #0
 8001586:	ddeb      	ble.n	8001560 <__sflush_r+0xac>
 8001588:	6a21      	ldr	r1, [r4, #32]
 800158a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800158e:	4633      	mov	r3, r6
 8001590:	463a      	mov	r2, r7
 8001592:	4628      	mov	r0, r5
 8001594:	47e0      	blx	ip
 8001596:	2800      	cmp	r0, #0
 8001598:	dc07      	bgt.n	80015aa <__sflush_r+0xf6>
 800159a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a2:	81a3      	strh	r3, [r4, #12]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015aa:	4407      	add	r7, r0
 80015ac:	1a36      	subs	r6, r6, r0
 80015ae:	e7e9      	b.n	8001584 <__sflush_r+0xd0>
 80015b0:	dfbffffe 	.word	0xdfbffffe

080015b4 <_fflush_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	690b      	ldr	r3, [r1, #16]
 80015b8:	4605      	mov	r5, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	b913      	cbnz	r3, 80015c4 <_fflush_r+0x10>
 80015be:	2500      	movs	r5, #0
 80015c0:	4628      	mov	r0, r5
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	b118      	cbz	r0, 80015ce <_fflush_r+0x1a>
 80015c6:	6a03      	ldr	r3, [r0, #32]
 80015c8:	b90b      	cbnz	r3, 80015ce <_fflush_r+0x1a>
 80015ca:	f7ff f985 	bl	80008d8 <__sinit>
 80015ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f3      	beq.n	80015be <_fflush_r+0xa>
 80015d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015d8:	07d0      	lsls	r0, r2, #31
 80015da:	d404      	bmi.n	80015e6 <_fflush_r+0x32>
 80015dc:	0599      	lsls	r1, r3, #22
 80015de:	d402      	bmi.n	80015e6 <_fflush_r+0x32>
 80015e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015e2:	f7ff fb78 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 80015e6:	4628      	mov	r0, r5
 80015e8:	4621      	mov	r1, r4
 80015ea:	f7ff ff63 	bl	80014b4 <__sflush_r>
 80015ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015f0:	07da      	lsls	r2, r3, #31
 80015f2:	4605      	mov	r5, r0
 80015f4:	d4e4      	bmi.n	80015c0 <_fflush_r+0xc>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	059b      	lsls	r3, r3, #22
 80015fa:	d4e1      	bmi.n	80015c0 <_fflush_r+0xc>
 80015fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015fe:	f7ff fb6b 	bl	8000cd8 <__retarget_lock_release_recursive>
 8001602:	e7dd      	b.n	80015c0 <_fflush_r+0xc>

08001604 <fiprintf>:
 8001604:	b40e      	push	{r1, r2, r3}
 8001606:	b503      	push	{r0, r1, lr}
 8001608:	4601      	mov	r1, r0
 800160a:	ab03      	add	r3, sp, #12
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <fiprintf+0x20>)
 800160e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001612:	6800      	ldr	r0, [r0, #0]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f7ff fca7 	bl	8000f68 <_vfiprintf_r>
 800161a:	b002      	add	sp, #8
 800161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001620:	b003      	add	sp, #12
 8001622:	4770      	bx	lr
 8001624:	20000050 	.word	0x20000050

08001628 <__swhatbuf_r>:
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	460c      	mov	r4, r1
 800162c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001630:	2900      	cmp	r1, #0
 8001632:	b096      	sub	sp, #88	@ 0x58
 8001634:	4615      	mov	r5, r2
 8001636:	461e      	mov	r6, r3
 8001638:	da0d      	bge.n	8001656 <__swhatbuf_r+0x2e>
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	bf14      	ite	ne
 8001646:	2340      	movne	r3, #64	@ 0x40
 8001648:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800164c:	2000      	movs	r0, #0
 800164e:	6031      	str	r1, [r6, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	b016      	add	sp, #88	@ 0x58
 8001654:	bd70      	pop	{r4, r5, r6, pc}
 8001656:	466a      	mov	r2, sp
 8001658:	f000 f87c 	bl	8001754 <_fstat_r>
 800165c:	2800      	cmp	r0, #0
 800165e:	dbec      	blt.n	800163a <__swhatbuf_r+0x12>
 8001660:	9901      	ldr	r1, [sp, #4]
 8001662:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001666:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800166a:	4259      	negs	r1, r3
 800166c:	4159      	adcs	r1, r3
 800166e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001672:	e7eb      	b.n	800164c <__swhatbuf_r+0x24>

08001674 <__smakebuf_r>:
 8001674:	898b      	ldrh	r3, [r1, #12]
 8001676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001678:	079d      	lsls	r5, r3, #30
 800167a:	4606      	mov	r6, r0
 800167c:	460c      	mov	r4, r1
 800167e:	d507      	bpl.n	8001690 <__smakebuf_r+0x1c>
 8001680:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	6123      	str	r3, [r4, #16]
 8001688:	2301      	movs	r3, #1
 800168a:	6163      	str	r3, [r4, #20]
 800168c:	b003      	add	sp, #12
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001690:	ab01      	add	r3, sp, #4
 8001692:	466a      	mov	r2, sp
 8001694:	f7ff ffc8 	bl	8001628 <__swhatbuf_r>
 8001698:	9f00      	ldr	r7, [sp, #0]
 800169a:	4605      	mov	r5, r0
 800169c:	4639      	mov	r1, r7
 800169e:	4630      	mov	r0, r6
 80016a0:	f7ff fbae 	bl	8000e00 <_malloc_r>
 80016a4:	b948      	cbnz	r0, 80016ba <__smakebuf_r+0x46>
 80016a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016aa:	059a      	lsls	r2, r3, #22
 80016ac:	d4ee      	bmi.n	800168c <__smakebuf_r+0x18>
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	81a3      	strh	r3, [r4, #12]
 80016b8:	e7e2      	b.n	8001680 <__smakebuf_r+0xc>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	6020      	str	r0, [r4, #0]
 80016be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c2:	81a3      	strh	r3, [r4, #12]
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016ca:	b15b      	cbz	r3, 80016e4 <__smakebuf_r+0x70>
 80016cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d0:	4630      	mov	r0, r6
 80016d2:	f000 f851 	bl	8001778 <_isatty_r>
 80016d6:	b128      	cbz	r0, 80016e4 <__smakebuf_r+0x70>
 80016d8:	89a3      	ldrh	r3, [r4, #12]
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	81a3      	strh	r3, [r4, #12]
 80016e4:	89a3      	ldrh	r3, [r4, #12]
 80016e6:	431d      	orrs	r5, r3
 80016e8:	81a5      	strh	r5, [r4, #12]
 80016ea:	e7cf      	b.n	800168c <__smakebuf_r+0x18>

080016ec <_putc_r>:
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	460d      	mov	r5, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	4606      	mov	r6, r0
 80016f4:	b118      	cbz	r0, 80016fe <_putc_r+0x12>
 80016f6:	6a03      	ldr	r3, [r0, #32]
 80016f8:	b90b      	cbnz	r3, 80016fe <_putc_r+0x12>
 80016fa:	f7ff f8ed 	bl	80008d8 <__sinit>
 80016fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001700:	07d8      	lsls	r0, r3, #31
 8001702:	d405      	bmi.n	8001710 <_putc_r+0x24>
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	0599      	lsls	r1, r3, #22
 8001708:	d402      	bmi.n	8001710 <_putc_r+0x24>
 800170a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800170c:	f7ff fae3 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	60a3      	str	r3, [r4, #8]
 8001718:	da05      	bge.n	8001726 <_putc_r+0x3a>
 800171a:	69a2      	ldr	r2, [r4, #24]
 800171c:	4293      	cmp	r3, r2
 800171e:	db12      	blt.n	8001746 <_putc_r+0x5a>
 8001720:	b2eb      	uxtb	r3, r5
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d00f      	beq.n	8001746 <_putc_r+0x5a>
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	6022      	str	r2, [r4, #0]
 800172c:	701d      	strb	r5, [r3, #0]
 800172e:	b2ed      	uxtb	r5, r5
 8001730:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001732:	07da      	lsls	r2, r3, #31
 8001734:	d405      	bmi.n	8001742 <_putc_r+0x56>
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	059b      	lsls	r3, r3, #22
 800173a:	d402      	bmi.n	8001742 <_putc_r+0x56>
 800173c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800173e:	f7ff facb 	bl	8000cd8 <__retarget_lock_release_recursive>
 8001742:	4628      	mov	r0, r5
 8001744:	bd70      	pop	{r4, r5, r6, pc}
 8001746:	4629      	mov	r1, r5
 8001748:	4622      	mov	r2, r4
 800174a:	4630      	mov	r0, r6
 800174c:	f7ff f9b5 	bl	8000aba <__swbuf_r>
 8001750:	4605      	mov	r5, r0
 8001752:	e7ed      	b.n	8001730 <_putc_r+0x44>

08001754 <_fstat_r>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4d07      	ldr	r5, [pc, #28]	@ (8001774 <_fstat_r+0x20>)
 8001758:	2300      	movs	r3, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	602b      	str	r3, [r5, #0]
 8001762:	f7fe ff69 	bl	8000638 <_fstat>
 8001766:	1c43      	adds	r3, r0, #1
 8001768:	d102      	bne.n	8001770 <_fstat_r+0x1c>
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	b103      	cbz	r3, 8001770 <_fstat_r+0x1c>
 800176e:	6023      	str	r3, [r4, #0]
 8001770:	bd38      	pop	{r3, r4, r5, pc}
 8001772:	bf00      	nop
 8001774:	20000200 	.word	0x20000200

08001778 <_isatty_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4d06      	ldr	r5, [pc, #24]	@ (8001794 <_isatty_r+0x1c>)
 800177c:	2300      	movs	r3, #0
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	602b      	str	r3, [r5, #0]
 8001784:	f7fe ff67 	bl	8000656 <_isatty>
 8001788:	1c43      	adds	r3, r0, #1
 800178a:	d102      	bne.n	8001792 <_isatty_r+0x1a>
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	b103      	cbz	r3, 8001792 <_isatty_r+0x1a>
 8001790:	6023      	str	r3, [r4, #0]
 8001792:	bd38      	pop	{r3, r4, r5, pc}
 8001794:	20000200 	.word	0x20000200

08001798 <_sbrk_r>:
 8001798:	b538      	push	{r3, r4, r5, lr}
 800179a:	4d06      	ldr	r5, [pc, #24]	@ (80017b4 <_sbrk_r+0x1c>)
 800179c:	2300      	movs	r3, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	602b      	str	r3, [r5, #0]
 80017a4:	f7fe ff6e 	bl	8000684 <_sbrk>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	d102      	bne.n	80017b2 <_sbrk_r+0x1a>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	b103      	cbz	r3, 80017b2 <_sbrk_r+0x1a>
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	20000200 	.word	0x20000200

080017b8 <abort>:
 80017b8:	b508      	push	{r3, lr}
 80017ba:	2006      	movs	r0, #6
 80017bc:	f000 f82c 	bl	8001818 <raise>
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7fe feea 	bl	800059a <_exit>

080017c6 <_raise_r>:
 80017c6:	291f      	cmp	r1, #31
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4605      	mov	r5, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	d904      	bls.n	80017da <_raise_r+0x14>
 80017d0:	2316      	movs	r3, #22
 80017d2:	6003      	str	r3, [r0, #0]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	bd38      	pop	{r3, r4, r5, pc}
 80017da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80017dc:	b112      	cbz	r2, 80017e4 <_raise_r+0x1e>
 80017de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80017e2:	b94b      	cbnz	r3, 80017f8 <_raise_r+0x32>
 80017e4:	4628      	mov	r0, r5
 80017e6:	f000 f831 	bl	800184c <_getpid_r>
 80017ea:	4622      	mov	r2, r4
 80017ec:	4601      	mov	r1, r0
 80017ee:	4628      	mov	r0, r5
 80017f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017f4:	f000 b818 	b.w	8001828 <_kill_r>
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d00a      	beq.n	8001812 <_raise_r+0x4c>
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	d103      	bne.n	8001808 <_raise_r+0x42>
 8001800:	2316      	movs	r3, #22
 8001802:	6003      	str	r3, [r0, #0]
 8001804:	2001      	movs	r0, #1
 8001806:	e7e7      	b.n	80017d8 <_raise_r+0x12>
 8001808:	2100      	movs	r1, #0
 800180a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800180e:	4620      	mov	r0, r4
 8001810:	4798      	blx	r3
 8001812:	2000      	movs	r0, #0
 8001814:	e7e0      	b.n	80017d8 <_raise_r+0x12>
	...

08001818 <raise>:
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <raise+0xc>)
 800181a:	4601      	mov	r1, r0
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	f7ff bfd2 	b.w	80017c6 <_raise_r>
 8001822:	bf00      	nop
 8001824:	20000050 	.word	0x20000050

08001828 <_kill_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4d07      	ldr	r5, [pc, #28]	@ (8001848 <_kill_r+0x20>)
 800182c:	2300      	movs	r3, #0
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	f7fe fea0 	bl	800057a <_kill>
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	d102      	bne.n	8001844 <_kill_r+0x1c>
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	b103      	cbz	r3, 8001844 <_kill_r+0x1c>
 8001842:	6023      	str	r3, [r4, #0]
 8001844:	bd38      	pop	{r3, r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	20000200 	.word	0x20000200

0800184c <_getpid_r>:
 800184c:	f7fe be8e 	b.w	800056c <_getpid>

08001850 <_init>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr

0800185c <_fini>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr
