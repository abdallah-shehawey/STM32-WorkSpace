
Advanced_Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021c  00800060  00004982  00004a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080027c  0080027c  00004c32  2**0
                  ALLOC
  3 .stab         00004188  00000000  00000000  00004c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001326  00000000  00000000  00008dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  0000a302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  0000a579  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  0000cecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0000e583  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0000faf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  0000fd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  0001009f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 22 	call	0x456a	; 0x456a <main>
      8a:	0c 94 bf 24 	jmp	0x497e	; 0x497e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a8 e6       	ldi	r26, 0x68	; 104
     360:	b1 e0       	ldi	r27, 0x01	; 1
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	88 e6       	ldi	r24, 0x68	; 104
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	68 e6       	ldi	r22, 0x68	; 104
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e0 59       	subi	r30, 0x90	; 144
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <USART_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    122c:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    122e:	ab e2       	ldi	r26, 0x2B	; 43
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e2       	ldi	r30, 0x2B	; 43
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    1252:	ab e2       	ldi	r26, 0x2B	; 43
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1284:	aa e2       	ldi	r26, 0x2A	; 42
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ea e2       	ldi	r30, 0x2A	; 42
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    12a0:	aa e2       	ldi	r26, 0x2A	; 42
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e2       	ldi	r30, 0x2A	; 42
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    12ae:	aa e2       	ldi	r26, 0x2A	; 42
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    12ca:	aa e2       	ldi	r26, 0x2A	; 42
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e2       	ldi	r30, 0x2A	; 42
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 61       	ori	r24, 0x10	; 16
    12d6:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    12d8:	aa e2       	ldi	r26, 0x2A	; 42
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e2       	ldi	r30, 0x2A	; 42
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <USART_u8SendData+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <USART_u8SendData+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <USART_u8SendData+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    1302:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
    130c:	80 91 82 02 	lds	r24, 0x0282
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <USART_u8SendData+0x24>
    1314:	44 c0       	rjmp	.+136    	; 0x139e <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 82 02 	sts	0x0282, r24
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	ab 81       	ldd	r26, Y+3	; 0x03
    1324:	bc 81       	ldd	r27, Y+4	; 0x04
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1334:	eb e2       	ldi	r30, 0x2B	; 43
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	80 72       	andi	r24, 0x20	; 32
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	95 95       	asr	r25
    134c:	87 95       	ror	r24
    134e:	95 95       	asr	r25
    1350:	87 95       	ror	r24
    1352:	95 95       	asr	r25
    1354:	87 95       	ror	r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f4       	brne	.+24     	; 0x1372 <USART_u8SendData+0x80>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	27 e2       	ldi	r18, 0x27	; 39
    1366:	92 07       	cpc	r25, r18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	a2 07       	cpc	r26, r18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	b2 07       	cpc	r27, r18
    1370:	b1 f6       	brne	.-84     	; 0x131e <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	ab 81       	ldd	r26, Y+3	; 0x03
    1378:	bc 81       	ldd	r27, Y+4	; 0x04
    137a:	80 31       	cpi	r24, 0x10	; 16
    137c:	27 e2       	ldi	r18, 0x27	; 39
    137e:	92 07       	cpc	r25, r18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	a2 07       	cpc	r26, r18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	b2 07       	cpc	r27, r18
    1388:	19 f4       	brne	.+6      	; 0x1390 <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
    1398:	10 92 82 02 	sts	0x0282, r1
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	27 97       	sbiw	r28, 0x07	; 7
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	1b 82       	std	Y+3, r1	; 0x03
    13d6:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <USART_u8ReceiveData+0x2c>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
    13e2:	80 91 82 02 	lds	r24, 0x0282
    13e6:	88 23       	and	r24, r24
    13e8:	09 f0       	breq	.+2      	; 0x13ec <USART_u8ReceiveData+0x36>
    13ea:	3e c0       	rjmp	.+124    	; 0x1468 <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 82 02 	sts	0x0282, r24
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	ab 81       	ldd	r26, Y+3	; 0x03
    13fa:	bc 81       	ldd	r27, Y+4	; 0x04
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    140a:	eb e2       	ldi	r30, 0x2B	; 43
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 1f       	adc	r24, r24
    1412:	88 27       	eor	r24, r24
    1414:	88 1f       	adc	r24, r24
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f4       	brne	.+24     	; 0x1438 <USART_u8ReceiveData+0x82>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	ab 81       	ldd	r26, Y+3	; 0x03
    1426:	bc 81       	ldd	r27, Y+4	; 0x04
    1428:	80 31       	cpi	r24, 0x10	; 16
    142a:	27 e2       	ldi	r18, 0x27	; 39
    142c:	92 07       	cpc	r25, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	a2 07       	cpc	r26, r18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	b2 07       	cpc	r27, r18
    1436:	f1 f6       	brne	.-68     	; 0x13f4 <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	ab 81       	ldd	r26, Y+3	; 0x03
    143e:	bc 81       	ldd	r27, Y+4	; 0x04
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	27 e2       	ldi	r18, 0x27	; 39
    1444:	92 07       	cpc	r25, r18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	a2 07       	cpc	r26, r18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	b2 07       	cpc	r27, r18
    144e:	19 f4       	brne	.+6      	; 0x1456 <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    1456:	ec e2       	ldi	r30, 0x2C	; 44
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	ee 81       	ldd	r30, Y+6	; 0x06
    145e:	ff 81       	ldd	r31, Y+7	; 0x07
    1460:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
    1462:	10 92 82 02 	sts	0x0282, r1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1474:	27 96       	adiw	r28, 0x07	; 7
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	65 97       	sbiw	r28, 0x15	; 21
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9d 8b       	std	Y+21, r25	; 0x15
    149c:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_u8ErrorState = OK;
    149e:	1b 8a       	std	Y+19, r1	; 0x13

  u32 Local_u32Index = 0;
    14a0:	1f 86       	std	Y+15, r1	; 0x0f
    14a2:	18 8a       	std	Y+16, r1	; 0x10
    14a4:	19 8a       	std	Y+17, r1	; 0x11
    14a6:	1a 8a       	std	Y+18, r1	; 0x12

  if (Copy_pu8String != NULL)
    14a8:	8c 89       	ldd	r24, Y+20	; 0x14
    14aa:	9d 89       	ldd	r25, Y+21	; 0x15
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <USART_u8SendStringSynch+0x2c>
    14b0:	98 c0       	rjmp	.+304    	; 0x15e2 <USART_u8SendStringSynch+0x15c>
    14b2:	8b c0       	rjmp	.+278    	; 0x15ca <USART_u8SendStringSynch+0x144>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    14b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    14b6:	38 89       	ldd	r19, Y+16	; 0x10
    14b8:	8c 89       	ldd	r24, Y+20	; 0x14
    14ba:	9d 89       	ldd	r25, Y+21	; 0x15
    14bc:	fc 01       	movw	r30, r24
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	80 81       	ld	r24, Z
    14c4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 ec       	ldi	r26, 0xC8	; 200
    14d0:	b2 e4       	ldi	r27, 0x42	; 66
    14d2:	8b 87       	std	Y+11, r24	; 0x0b
    14d4:	9c 87       	std	Y+12, r25	; 0x0c
    14d6:	ad 87       	std	Y+13, r26	; 0x0d
    14d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8f 83       	std	Y+7, r24	; 0x07
    14f4:	98 87       	std	Y+8, r25	; 0x08
    14f6:	a9 87       	std	Y+9, r26	; 0x09
    14f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <USART_u8SendStringSynch+0x96>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	3f c0       	rjmp	.+126    	; 0x159a <USART_u8SendStringSynch+0x114>
	else if (__tmp > 65535)
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <USART_u8SendStringSynch+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	0f c0       	rjmp	.+30     	; 0x157c <USART_u8SendStringSynch+0xf6>
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <USART_u8SendStringSynch+0xe4>
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <USART_u8SendStringSynch+0xd8>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <USART_u8SendStringSynch+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <USART_u8SendStringSynch+0x120>
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(100);
      Local_u32Index++;
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	98 89       	ldd	r25, Y+16	; 0x10
    15b2:	a9 89       	ldd	r26, Y+17	; 0x11
    15b4:	ba 89       	ldd	r27, Y+18	; 0x12
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	b1 1d       	adc	r27, r1
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
    15be:	98 8b       	std	Y+16, r25	; 0x10
    15c0:	a9 8b       	std	Y+17, r26	; 0x11
    15c2:	ba 8b       	std	Y+18, r27	; 0x12
      if (Local_u8ErrorState != OK)
    15c4:	8b 89       	ldd	r24, Y+19	; 0x13
    15c6:	88 23       	and	r24, r24
    15c8:	71 f4       	brne	.+28     	; 0x15e6 <USART_u8SendStringSynch+0x160>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    15ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    15cc:	38 89       	ldd	r19, Y+16	; 0x10
    15ce:	8c 89       	ldd	r24, Y+20	; 0x14
    15d0:	9d 89       	ldd	r25, Y+21	; 0x15
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	80 81       	ld	r24, Z
    15da:	88 23       	and	r24, r24
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <USART_u8SendStringSynch+0x15a>
    15de:	6a cf       	rjmp	.-300    	; 0x14b4 <USART_u8SendStringSynch+0x2e>
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <USART_u8SendStringSynch+0x160>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
  }

  return Local_u8ErrorState;
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
}
    15e8:	65 96       	adiw	r28, 0x15	; 21
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <USART_u8SendStringAsynch+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <USART_u8SendStringAsynch+0x8>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9b 83       	std	Y+3, r25	; 0x03
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	7d 83       	std	Y+5, r23	; 0x05
    160e:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    1610:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1612:	80 91 82 02 	lds	r24, 0x0282
    1616:	88 23       	and	r24, r24
    1618:	99 f5       	brne	.+102    	; 0x1680 <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f1       	breq	.+88     	; 0x167a <USART_u8SendStringAsynch+0x80>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f1       	breq	.+80     	; 0x167a <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 82 02 	sts	0x0282, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	90 93 7d 02 	sts	0x027D, r25
    1638:	80 93 7c 02 	sts	0x027C, r24
      USART_pvNotificationFunc = NotificationFunc;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	90 93 81 02 	sts	0x0281, r25
    1644:	80 93 80 02 	sts	0x0280, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    1648:	10 92 84 02 	sts	0x0284, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    164c:	ac e2       	ldi	r26, 0x2C	; 44
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	20 91 7c 02 	lds	r18, 0x027C
    1654:	30 91 7d 02 	lds	r19, 0x027D
    1658:	80 91 84 02 	lds	r24, 0x0284
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	e8 0f       	add	r30, r24
    1664:	f9 1f       	adc	r31, r25
    1666:	80 81       	ld	r24, Z
    1668:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    166a:	aa e2       	ldi	r26, 0x2A	; 42
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ea e2       	ldi	r30, 0x2A	; 42
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	8c 93       	st	X, r24
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2b 97       	sbiw	r28, 0x0b	; 11
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9f 83       	std	Y+7, r25	; 0x07
    16ac:	8e 83       	std	Y+6, r24	; 0x06
    16ae:	48 87       	std	Y+8, r20	; 0x08
    16b0:	59 87       	std	Y+9, r21	; 0x09
    16b2:	6a 87       	std	Y+10, r22	; 0x0a
    16b4:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    16b6:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	51 f1       	breq	.+84     	; 0x1714 <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1a 82       	std	Y+2, r1	; 0x02
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	17 c0       	rjmp	.+46     	; 0x16f8 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    16da:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	88 23       	and	r24, r24
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	ab 81       	ldd	r26, Y+3	; 0x03
    16e8:	bc 81       	ldd	r27, Y+4	; 0x04
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	b1 1d       	adc	r27, r1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	ab 83       	std	Y+3, r26	; 0x03
    16f6:	bc 83       	std	Y+4, r27	; 0x04
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	3a 81       	ldd	r19, Y+2	; 0x02
    16fc:	4b 81       	ldd	r20, Y+3	; 0x03
    16fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1700:	88 85       	ldd	r24, Y+8	; 0x08
    1702:	99 85       	ldd	r25, Y+9	; 0x09
    1704:	aa 85       	ldd	r26, Y+10	; 0x0a
    1706:	bb 85       	ldd	r27, Y+11	; 0x0b
    1708:	28 17       	cp	r18, r24
    170a:	39 07       	cpc	r19, r25
    170c:	4a 07       	cpc	r20, r26
    170e:	5b 07       	cpc	r21, r27
    1710:	e0 f2       	brcs	.-72     	; 0x16ca <USART_u8ReceiveBufferSynch+0x34>
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
}
    171a:	2b 96       	adiw	r28, 0x0b	; 11
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	9b 83       	std	Y+3, r25	; 0x03
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	4c 83       	std	Y+4, r20	; 0x04
    1746:	5d 83       	std	Y+5, r21	; 0x05
    1748:	6e 83       	std	Y+6, r22	; 0x06
    174a:	7f 83       	std	Y+7, r23	; 0x07
    174c:	39 87       	std	Y+9, r19	; 0x09
    174e:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    1750:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1752:	80 91 82 02 	lds	r24, 0x0282
    1756:	88 23       	and	r24, r24
    1758:	39 f5       	brne	.+78     	; 0x17a8 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	01 f1       	breq	.+64     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    1762:	88 85       	ldd	r24, Y+8	; 0x08
    1764:	99 85       	ldd	r25, Y+9	; 0x09
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 82 02 	sts	0x0282, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	90 93 7f 02 	sts	0x027F, r25
    1778:	80 93 7e 02 	sts	0x027E, r24
      USART_pvNotificationFunc = NotificationFunc;
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	90 93 81 02 	sts	0x0281, r25
    1784:	80 93 80 02 	sts	0x0280, r24
      USART_u8BufferSize = Copy_u32BufferSize;
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	80 93 83 02 	sts	0x0283, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    178e:	10 92 84 02 	sts	0x0284, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    1792:	aa e2       	ldi	r26, 0x2A	; 42
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e2       	ldi	r30, 0x2A	; 42
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	8c 93       	st	X, r24
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	29 96       	adiw	r28, 0x09	; 9
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    17ea:	20 91 7e 02 	lds	r18, 0x027E
    17ee:	30 91 7f 02 	lds	r19, 0x027F
    17f2:	80 91 84 02 	lds	r24, 0x0284
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	d9 01       	movw	r26, r18
    17fc:	a8 0f       	add	r26, r24
    17fe:	b9 1f       	adc	r27, r25
    1800:	ec e2       	ldi	r30, 0x2C	; 44
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    1808:	80 91 84 02 	lds	r24, 0x0284
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 84 02 	sts	0x0284, r24

  if (USART_u8Index == USART_u8BufferSize)
    1812:	90 91 84 02 	lds	r25, 0x0284
    1816:	80 91 83 02 	lds	r24, 0x0283
    181a:	98 17       	cp	r25, r24
    181c:	b1 f4       	brne	.+44     	; 0x184a <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    181e:	10 92 84 02 	sts	0x0284, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    1822:	10 92 82 02 	sts	0x0282, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    1826:	80 91 80 02 	lds	r24, 0x0280
    182a:	90 91 81 02 	lds	r25, 0x0281
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	29 f0       	breq	.+10     	; 0x183c <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    1832:	e0 91 80 02 	lds	r30, 0x0280
    1836:	f0 91 81 02 	lds	r31, 0x0281
    183a:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    183c:	aa e2       	ldi	r26, 0x2A	; 42
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e2       	ldi	r30, 0x2A	; 42
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    189a:	80 91 84 02 	lds	r24, 0x0284
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 84 02 	sts	0x0284, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    18a4:	20 91 7c 02 	lds	r18, 0x027C
    18a8:	30 91 7d 02 	lds	r19, 0x027D
    18ac:	80 91 84 02 	lds	r24, 0x0284
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	f9 01       	movw	r30, r18
    18b6:	e8 0f       	add	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	80 81       	ld	r24, Z
    18bc:	88 23       	and	r24, r24
    18be:	b9 f4       	brne	.+46     	; 0x18ee <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    18c0:	10 92 84 02 	sts	0x0284, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    18c4:	10 92 82 02 	sts	0x0282, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    18c8:	80 91 80 02 	lds	r24, 0x0280
    18cc:	90 91 81 02 	lds	r25, 0x0281
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	29 f0       	breq	.+10     	; 0x18de <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    18d4:	e0 91 80 02 	lds	r30, 0x0280
    18d8:	f0 91 81 02 	lds	r31, 0x0281
    18dc:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    18de:	aa e2       	ldi	r26, 0x2A	; 42
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ea e2       	ldi	r30, 0x2A	; 42
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7b       	andi	r24, 0xBF	; 191
    18ea:	8c 93       	st	X, r24
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    18ee:	ac e2       	ldi	r26, 0x2C	; 44
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	20 91 7c 02 	lds	r18, 0x027C
    18f6:	30 91 7d 02 	lds	r19, 0x027D
    18fa:	80 91 84 02 	lds	r24, 0x0284
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	80 81       	ld	r24, Z
    190a:	8c 93       	st	X, r24
  }
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f 90       	pop	r0
    192e:	1f 90       	pop	r1
    1930:	18 95       	reti

00001932 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <EEPROM_vWrite+0x6>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    1944:	ee e3       	ldi	r30, 0x3E	; 62
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
  /*set up data register*/
  EEDR_REG = data;
    1950:	ed e3       	ldi	r30, 0x3D	; 61
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	80 83       	st	Z, r24
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    1958:	ac e3       	ldi	r26, 0x3C	; 60
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ec e3       	ldi	r30, 0x3C	; 60
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	84 60       	ori	r24, 0x04	; 4
    1964:	8c 93       	st	X, r24
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    1966:	ac e3       	ldi	r26, 0x3C	; 60
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ec e3       	ldi	r30, 0x3C	; 60
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	8c 93       	st	X, r24
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    1974:	ec e3       	ldi	r30, 0x3C	; 60
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	82 70       	andi	r24, 0x02	; 2
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	95 95       	asr	r25
    1984:	87 95       	ror	r24
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	a1 f3       	breq	.-24     	; 0x1974 <EEPROM_vWrite+0x42>
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <EEPROM_vRead+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    19a6:	ee e3       	ldi	r30, 0x3E	; 62
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    19ae:	ef e3       	ldi	r30, 0x3F	; 63
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	89 2f       	mov	r24, r25
    19b8:	99 27       	eor	r25, r25
    19ba:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    19bc:	ac e3       	ldi	r26, 0x3C	; 60
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ec e3       	ldi	r30, 0x3C	; 60
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	81 60       	ori	r24, 0x01	; 1
    19c8:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    19ca:	ed e3       	ldi	r30, 0x3D	; 61
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	28 97       	sbiw	r28, 0x08	; 8
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	6b 83       	std	Y+3, r22	; 0x03
    19f2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <DIO_enumSetPinDir+0x26>
    19fe:	f1 c0       	rjmp	.+482    	; 0x1be2 <DIO_enumSetPinDir+0x208>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <DIO_enumSetPinDir+0x2e>
    1a06:	ed c0       	rjmp	.+474    	; 0x1be2 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <DIO_enumSetPinDir+0x36>
    1a0e:	6f c0       	rjmp	.+222    	; 0x1aee <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	38 87       	std	Y+8, r19	; 0x08
    1a18:	2f 83       	std	Y+7, r18	; 0x07
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	98 85       	ldd	r25, Y+8	; 0x08
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	49 f1       	breq	.+82     	; 0x1a76 <DIO_enumSetPinDir+0x9c>
    1a24:	2f 81       	ldd	r18, Y+7	; 0x07
    1a26:	38 85       	ldd	r19, Y+8	; 0x08
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <DIO_enumSetPinDir+0x5e>
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a30:	98 85       	ldd	r25, Y+8	; 0x08
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <DIO_enumSetPinDir+0x74>
    1a36:	d6 c0       	rjmp	.+428    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    1a38:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3a:	38 85       	ldd	r19, Y+8	; 0x08
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	71 f1       	breq	.+92     	; 0x1a9e <DIO_enumSetPinDir+0xc4>
    1a42:	8f 81       	ldd	r24, Y+7	; 0x07
    1a44:	98 85       	ldd	r25, Y+8	; 0x08
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	e9 f1       	breq	.+122    	; 0x1ac6 <DIO_enumSetPinDir+0xec>
    1a4c:	cb c0       	rjmp	.+406    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1a4e:	aa e3       	ldi	r26, 0x3A	; 58
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ea e3       	ldi	r30, 0x3A	; 58
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_enumSetPinDir+0x92>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_enumSetPinDir+0x8e>
    1a70:	84 2b       	or	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	b7 c0       	rjmp	.+366    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1a76:	a7 e3       	ldi	r26, 0x37	; 55
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e7 e3       	ldi	r30, 0x37	; 55
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_enumSetPinDir+0xba>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_enumSetPinDir+0xb6>
    1a98:	84 2b       	or	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	a3 c0       	rjmp	.+326    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    1a9e:	a4 e3       	ldi	r26, 0x34	; 52
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e4 e3       	ldi	r30, 0x34	; 52
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_enumSetPinDir+0xe2>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_enumSetPinDir+0xde>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	8f c0       	rjmp	.+286    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    1ac6:	a1 e3       	ldi	r26, 0x31	; 49
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e1 e3       	ldi	r30, 0x31	; 49
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_enumSetPinDir+0x10a>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_enumSetPinDir+0x106>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	7b c0       	rjmp	.+246    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	88 23       	and	r24, r24
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <DIO_enumSetPinDir+0x11c>
    1af4:	74 c0       	rjmp	.+232    	; 0x1bde <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3e 83       	std	Y+6, r19	; 0x06
    1afe:	2d 83       	std	Y+5, r18	; 0x05
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	91 05       	cpc	r25, r1
    1b08:	59 f1       	breq	.+86     	; 0x1b60 <DIO_enumSetPinDir+0x186>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <DIO_enumSetPinDir+0x144>
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f0       	breq	.+26     	; 0x1b36 <DIO_enumSetPinDir+0x15c>
    1b1c:	63 c0       	rjmp	.+198    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    1b1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b20:	3e 81       	ldd	r19, Y+6	; 0x06
    1b22:	22 30       	cpi	r18, 0x02	; 2
    1b24:	31 05       	cpc	r19, r1
    1b26:	89 f1       	breq	.+98     	; 0x1b8a <DIO_enumSetPinDir+0x1b0>
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <DIO_enumSetPinDir+0x15a>
    1b32:	40 c0       	rjmp	.+128    	; 0x1bb4 <DIO_enumSetPinDir+0x1da>
    1b34:	57 c0       	rjmp	.+174    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1b36:	aa e3       	ldi	r26, 0x3A	; 58
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ea e3       	ldi	r30, 0x3A	; 58
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enumSetPinDir+0x17a>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_enumSetPinDir+0x176>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	42 c0       	rjmp	.+132    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1b60:	a7 e3       	ldi	r26, 0x37	; 55
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e7 e3       	ldi	r30, 0x37	; 55
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_enumSetPinDir+0x1a4>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_enumSetPinDir+0x1a0>
    1b82:	80 95       	com	r24
    1b84:	84 23       	and	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	2d c0       	rjmp	.+90     	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_enumSetPinDir+0x1ce>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_enumSetPinDir+0x1ca>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	18 c0       	rjmp	.+48     	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1bb4:	a1 e3       	ldi	r26, 0x31	; 49
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e1 e3       	ldi	r30, 0x31	; 49
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enumSetPinDir+0x1f8>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_enumSetPinDir+0x1f4>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1be2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be6:	28 96       	adiw	r28, 0x08	; 8
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	28 97       	sbiw	r28, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	6b 83       	std	Y+3, r22	; 0x03
    1c10:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <DIO_enumWritePinVal+0x26>
    1c1c:	f1 c0       	rjmp	.+482    	; 0x1e00 <DIO_enumWritePinVal+0x208>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 30       	cpi	r24, 0x08	; 8
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <DIO_enumWritePinVal+0x2e>
    1c24:	ed c0       	rjmp	.+474    	; 0x1e00 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <DIO_enumWritePinVal+0x36>
    1c2c:	6f c0       	rjmp	.+222    	; 0x1d0c <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	38 87       	std	Y+8, r19	; 0x08
    1c36:	2f 83       	std	Y+7, r18	; 0x07
    1c38:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3a:	98 85       	ldd	r25, Y+8	; 0x08
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	49 f1       	breq	.+82     	; 0x1c94 <DIO_enumWritePinVal+0x9c>
    1c42:	2f 81       	ldd	r18, Y+7	; 0x07
    1c44:	38 85       	ldd	r19, Y+8	; 0x08
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <DIO_enumWritePinVal+0x5e>
    1c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4e:	98 85       	ldd	r25, Y+8	; 0x08
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	61 f0       	breq	.+24     	; 0x1c6c <DIO_enumWritePinVal+0x74>
    1c54:	d6 c0       	rjmp	.+428    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    1c56:	2f 81       	ldd	r18, Y+7	; 0x07
    1c58:	38 85       	ldd	r19, Y+8	; 0x08
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	71 f1       	breq	.+92     	; 0x1cbc <DIO_enumWritePinVal+0xc4>
    1c60:	8f 81       	ldd	r24, Y+7	; 0x07
    1c62:	98 85       	ldd	r25, Y+8	; 0x08
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	e9 f1       	breq	.+122    	; 0x1ce4 <DIO_enumWritePinVal+0xec>
    1c6a:	cb c0       	rjmp	.+406    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1c6c:	ab e3       	ldi	r26, 0x3B	; 59
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	eb e3       	ldi	r30, 0x3B	; 59
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_enumWritePinVal+0x92>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_enumWritePinVal+0x8e>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	b7 c0       	rjmp	.+366    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1c94:	a8 e3       	ldi	r26, 0x38	; 56
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e8 e3       	ldi	r30, 0x38	; 56
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_enumWritePinVal+0xba>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_enumWritePinVal+0xb6>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	a3 c0       	rjmp	.+326    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1cbc:	a5 e3       	ldi	r26, 0x35	; 53
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e3       	ldi	r30, 0x35	; 53
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_enumWritePinVal+0xe2>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_enumWritePinVal+0xde>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	8f c0       	rjmp	.+286    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1ce4:	a2 e3       	ldi	r26, 0x32	; 50
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e2 e3       	ldi	r30, 0x32	; 50
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_enumWritePinVal+0x10a>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_enumWritePinVal+0x106>
    1d06:	84 2b       	or	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	7b c0       	rjmp	.+246    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <DIO_enumWritePinVal+0x11c>
    1d12:	74 c0       	rjmp	.+232    	; 0x1dfc <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3e 83       	std	Y+6, r19	; 0x06
    1d1c:	2d 83       	std	Y+5, r18	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	59 f1       	breq	.+86     	; 0x1d7e <DIO_enumWritePinVal+0x186>
    1d28:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <DIO_enumWritePinVal+0x144>
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f0       	breq	.+26     	; 0x1d54 <DIO_enumWritePinVal+0x15c>
    1d3a:	63 c0       	rjmp	.+198    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    1d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	89 f1       	breq	.+98     	; 0x1da8 <DIO_enumWritePinVal+0x1b0>
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <DIO_enumWritePinVal+0x15a>
    1d50:	40 c0       	rjmp	.+128    	; 0x1dd2 <DIO_enumWritePinVal+0x1da>
    1d52:	57 c0       	rjmp	.+174    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_enumWritePinVal+0x17a>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_enumWritePinVal+0x176>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	42 c0       	rjmp	.+132    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1d7e:	a8 e3       	ldi	r26, 0x38	; 56
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_enumWritePinVal+0x1a4>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_enumWritePinVal+0x1a0>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	2d c0       	rjmp	.+90     	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1da8:	a5 e3       	ldi	r26, 0x35	; 53
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e3       	ldi	r30, 0x35	; 53
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enumWritePinVal+0x1ce>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enumWritePinVal+0x1ca>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	18 c0       	rjmp	.+48     	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1dd2:	a2 e3       	ldi	r26, 0x32	; 50
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e2 e3       	ldi	r30, 0x32	; 50
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_enumWritePinVal+0x1f8>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_enumWritePinVal+0x1f4>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1dfc:	19 82       	std	Y+1, r1	; 0x01
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1e00:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e04:	28 96       	adiw	r28, 0x08	; 8
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	27 97       	sbiw	r28, 0x07	; 7
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	6b 83       	std	Y+3, r22	; 0x03
    1e2e:	5d 83       	std	Y+5, r21	; 0x05
    1e30:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <DIO_enumReadPinVal+0x28>
    1e3c:	a6 c0       	rjmp	.+332    	; 0x1f8a <DIO_enumReadPinVal+0x174>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	88 30       	cpi	r24, 0x08	; 8
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <DIO_enumReadPinVal+0x30>
    1e44:	a2 c0       	rjmp	.+324    	; 0x1f8a <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3f 83       	std	Y+7, r19	; 0x07
    1e4e:	2e 83       	std	Y+6, r18	; 0x06
    1e50:	4e 81       	ldd	r20, Y+6	; 0x06
    1e52:	5f 81       	ldd	r21, Y+7	; 0x07
    1e54:	41 30       	cpi	r20, 0x01	; 1
    1e56:	51 05       	cpc	r21, r1
    1e58:	c1 f1       	breq	.+112    	; 0x1eca <DIO_enumReadPinVal+0xb4>
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	91 05       	cpc	r25, r1
    1e62:	34 f4       	brge	.+12     	; 0x1e70 <DIO_enumReadPinVal+0x5a>
    1e64:	2e 81       	ldd	r18, Y+6	; 0x06
    1e66:	3f 81       	ldd	r19, Y+7	; 0x07
    1e68:	21 15       	cp	r18, r1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	71 f0       	breq	.+28     	; 0x1e8a <DIO_enumReadPinVal+0x74>
    1e6e:	8e c0       	rjmp	.+284    	; 0x1f8c <DIO_enumReadPinVal+0x176>
    1e70:	4e 81       	ldd	r20, Y+6	; 0x06
    1e72:	5f 81       	ldd	r21, Y+7	; 0x07
    1e74:	42 30       	cpi	r20, 0x02	; 2
    1e76:	51 05       	cpc	r21, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <DIO_enumReadPinVal+0x66>
    1e7a:	47 c0       	rjmp	.+142    	; 0x1f0a <DIO_enumReadPinVal+0xf4>
    1e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	91 05       	cpc	r25, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <DIO_enumReadPinVal+0x72>
    1e86:	61 c0       	rjmp	.+194    	; 0x1f4a <DIO_enumReadPinVal+0x134>
    1e88:	81 c0       	rjmp	.+258    	; 0x1f8c <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1e8a:	e9 e3       	ldi	r30, 0x39	; 57
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <DIO_enumReadPinVal+0x8e>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	2a 95       	dec	r18
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <DIO_enumReadPinVal+0x8a>
    1ea8:	9a 01       	movw	r18, r20
    1eaa:	28 23       	and	r18, r24
    1eac:	39 23       	and	r19, r25
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a9 01       	movw	r20, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_enumReadPinVal+0xa6>
    1eb8:	55 95       	asr	r21
    1eba:	47 95       	ror	r20
    1ebc:	8a 95       	dec	r24
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_enumReadPinVal+0xa2>
    1ec0:	ca 01       	movw	r24, r20
    1ec2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec6:	80 83       	st	Z, r24
    1ec8:	61 c0       	rjmp	.+194    	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1eca:	e6 e3       	ldi	r30, 0x36	; 54
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_enumReadPinVal+0xce>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	2a 95       	dec	r18
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_enumReadPinVal+0xca>
    1ee8:	9a 01       	movw	r18, r20
    1eea:	28 23       	and	r18, r24
    1eec:	39 23       	and	r19, r25
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_enumReadPinVal+0xe6>
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_enumReadPinVal+0xe2>
    1f00:	ca 01       	movw	r24, r20
    1f02:	ec 81       	ldd	r30, Y+4	; 0x04
    1f04:	fd 81       	ldd	r31, Y+5	; 0x05
    1f06:	80 83       	st	Z, r24
    1f08:	41 c0       	rjmp	.+130    	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1f0a:	e3 e3       	ldi	r30, 0x33	; 51
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_enumReadPinVal+0x10e>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	2a 95       	dec	r18
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_enumReadPinVal+0x10a>
    1f28:	9a 01       	movw	r18, r20
    1f2a:	28 23       	and	r18, r24
    1f2c:	39 23       	and	r19, r25
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_enumReadPinVal+0x126>
    1f38:	55 95       	asr	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_enumReadPinVal+0x122>
    1f40:	ca 01       	movw	r24, r20
    1f42:	ec 81       	ldd	r30, Y+4	; 0x04
    1f44:	fd 81       	ldd	r31, Y+5	; 0x05
    1f46:	80 83       	st	Z, r24
    1f48:	21 c0       	rjmp	.+66     	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1f4a:	e0 e3       	ldi	r30, 0x30	; 48
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_enumReadPinVal+0x14e>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	2a 95       	dec	r18
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_enumReadPinVal+0x14a>
    1f68:	9a 01       	movw	r18, r20
    1f6a:	28 23       	and	r18, r24
    1f6c:	39 23       	and	r19, r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_enumReadPinVal+0x166>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_enumReadPinVal+0x162>
    1f80:	ca 01       	movw	r24, r20
    1f82:	ec 81       	ldd	r30, Y+4	; 0x04
    1f84:	fd 81       	ldd	r31, Y+5	; 0x05
    1f86:	80 83       	st	Z, r24
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1f8a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8e:	27 96       	adiw	r28, 0x07	; 7
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <DIO_enumTogglePinVal+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <DIO_enumTogglePinVal+0x8>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <DIO_enumTogglePinVal+0x1e>
    1fbc:	73 c0       	rjmp	.+230    	; 0x20a4 <DIO_enumTogglePinVal+0x104>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 30       	cpi	r24, 0x08	; 8
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <DIO_enumTogglePinVal+0x26>
    1fc4:	6f c0       	rjmp	.+222    	; 0x20a4 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	3d 83       	std	Y+5, r19	; 0x05
    1fce:	2c 83       	std	Y+4, r18	; 0x04
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	49 f1       	breq	.+82     	; 0x202c <DIO_enumTogglePinVal+0x8c>
    1fda:	2c 81       	ldd	r18, Y+4	; 0x04
    1fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <DIO_enumTogglePinVal+0x4e>
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	61 f0       	breq	.+24     	; 0x2004 <DIO_enumTogglePinVal+0x64>
    1fec:	5c c0       	rjmp	.+184    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	71 f1       	breq	.+92     	; 0x2054 <DIO_enumTogglePinVal+0xb4>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	91 05       	cpc	r25, r1
    2000:	e9 f1       	breq	.+122    	; 0x207c <DIO_enumTogglePinVal+0xdc>
    2002:	51 c0       	rjmp	.+162    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    2004:	ab e3       	ldi	r26, 0x3B	; 59
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e3       	ldi	r30, 0x3B	; 59
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_enumTogglePinVal+0x82>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_enumTogglePinVal+0x7e>
    2026:	84 27       	eor	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	3d c0       	rjmp	.+122    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    202c:	a8 e3       	ldi	r26, 0x38	; 56
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_enumTogglePinVal+0xaa>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_enumTogglePinVal+0xa6>
    204e:	84 27       	eor	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	29 c0       	rjmp	.+82     	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2054:	a5 e3       	ldi	r26, 0x35	; 53
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e5 e3       	ldi	r30, 0x35	; 53
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_enumTogglePinVal+0xd2>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_enumTogglePinVal+0xce>
    2076:	84 27       	eor	r24, r20
    2078:	8c 93       	st	X, r24
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    207c:	a2 e3       	ldi	r26, 0x32	; 50
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e2 e3       	ldi	r30, 0x32	; 50
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	48 2f       	mov	r20, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <DIO_enumTogglePinVal+0xfa>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <DIO_enumTogglePinVal+0xf6>
    209e:	84 27       	eor	r24, r20
    20a0:	8c 93       	st	X, r24
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    20a4:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <DIO_enumConnectPullUp+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <DIO_enumConnectPullUp+0x8>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <DIO_enumConnectPullUp+0xa>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
    20ca:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <DIO_enumConnectPullUp+0x20>
    20d6:	3e c1       	rjmp	.+636    	; 0x2354 <DIO_enumConnectPullUp+0x29c>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	08 f0       	brcs	.+2      	; 0x20e0 <DIO_enumConnectPullUp+0x28>
    20de:	3a c1       	rjmp	.+628    	; 0x2354 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3e 83       	std	Y+6, r19	; 0x06
    20e8:	2d 83       	std	Y+5, r18	; 0x05
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	91 05       	cpc	r25, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <DIO_enumConnectPullUp+0x3e>
    20f4:	5d c0       	rjmp	.+186    	; 0x21b0 <DIO_enumConnectPullUp+0xf8>
    20f6:	2d 81       	ldd	r18, Y+5	; 0x05
    20f8:	3e 81       	ldd	r19, Y+6	; 0x06
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	2c f4       	brge	.+10     	; 0x210a <DIO_enumConnectPullUp+0x52>
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	71 f0       	breq	.+28     	; 0x2124 <DIO_enumConnectPullUp+0x6c>
    2108:	26 c1       	rjmp	.+588    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    210a:	2d 81       	ldd	r18, Y+5	; 0x05
    210c:	3e 81       	ldd	r19, Y+6	; 0x06
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <DIO_enumConnectPullUp+0x5e>
    2114:	93 c0       	rjmp	.+294    	; 0x223c <DIO_enumConnectPullUp+0x184>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <DIO_enumConnectPullUp+0x6a>
    2120:	d3 c0       	rjmp	.+422    	; 0x22c8 <DIO_enumConnectPullUp+0x210>
    2122:	19 c1       	rjmp	.+562    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	71 f5       	brne	.+92     	; 0x2186 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    212a:	a0 e5       	ldi	r26, 0x50	; 80
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e0 e5       	ldi	r30, 0x50	; 80
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2138:	aa e3       	ldi	r26, 0x3A	; 58
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ea e3       	ldi	r30, 0x3A	; 58
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_enumConnectPullUp+0x9c>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	2a 95       	dec	r18
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_enumConnectPullUp+0x98>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    215e:	ab e3       	ldi	r26, 0x3B	; 59
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e3       	ldi	r30, 0x3B	; 59
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <DIO_enumConnectPullUp+0xc4>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <DIO_enumConnectPullUp+0xc0>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	e8 c0       	rjmp	.+464    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2186:	ab e3       	ldi	r26, 0x3B	; 59
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	eb e3       	ldi	r30, 0x3B	; 59
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_enumConnectPullUp+0xec>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_enumConnectPullUp+0xe8>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	d3 c0       	rjmp	.+422    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	71 f5       	brne	.+92     	; 0x2212 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    21b6:	a0 e5       	ldi	r26, 0x50	; 80
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e0 e5       	ldi	r30, 0x50	; 80
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8b 7f       	andi	r24, 0xFB	; 251
    21c2:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    21c4:	a7 e3       	ldi	r26, 0x37	; 55
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e7 e3       	ldi	r30, 0x37	; 55
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_enumConnectPullUp+0x128>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	2a 95       	dec	r18
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_enumConnectPullUp+0x124>
    21e4:	80 95       	com	r24
    21e6:	84 23       	and	r24, r20
    21e8:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    21ea:	a8 e3       	ldi	r26, 0x38	; 56
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 e3       	ldi	r30, 0x38	; 56
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_enumConnectPullUp+0x150>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_enumConnectPullUp+0x14c>
    220c:	84 2b       	or	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	a2 c0       	rjmp	.+324    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2212:	a8 e3       	ldi	r26, 0x38	; 56
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e8 e3       	ldi	r30, 0x38	; 56
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_enumConnectPullUp+0x178>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_enumConnectPullUp+0x174>
    2234:	80 95       	com	r24
    2236:	84 23       	and	r24, r20
    2238:	8c 93       	st	X, r24
    223a:	8d c0       	rjmp	.+282    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	71 f5       	brne	.+92     	; 0x229e <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2242:	a0 e5       	ldi	r26, 0x50	; 80
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e0 e5       	ldi	r30, 0x50	; 80
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8b 7f       	andi	r24, 0xFB	; 251
    224e:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2250:	a4 e3       	ldi	r26, 0x34	; 52
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e4 e3       	ldi	r30, 0x34	; 52
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_enumConnectPullUp+0x1b4>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	2a 95       	dec	r18
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <DIO_enumConnectPullUp+0x1b0>
    2270:	80 95       	com	r24
    2272:	84 23       	and	r24, r20
    2274:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2276:	a5 e3       	ldi	r26, 0x35	; 53
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e5 e3       	ldi	r30, 0x35	; 53
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	48 2f       	mov	r20, r24
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_enumConnectPullUp+0x1dc>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_enumConnectPullUp+0x1d8>
    2298:	84 2b       	or	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	5c c0       	rjmp	.+184    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    229e:	a5 e3       	ldi	r26, 0x35	; 53
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e5 e3       	ldi	r30, 0x35	; 53
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_enumConnectPullUp+0x204>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_enumConnectPullUp+0x200>
    22c0:	80 95       	com	r24
    22c2:	84 23       	and	r24, r20
    22c4:	8c 93       	st	X, r24
    22c6:	47 c0       	rjmp	.+142    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	71 f5       	brne	.+92     	; 0x232a <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    22ce:	a0 e5       	ldi	r26, 0x50	; 80
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e0 e5       	ldi	r30, 0x50	; 80
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8b 7f       	andi	r24, 0xFB	; 251
    22da:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    22dc:	a1 e3       	ldi	r26, 0x31	; 49
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e1 e3       	ldi	r30, 0x31	; 49
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <DIO_enumConnectPullUp+0x240>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	2a 95       	dec	r18
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <DIO_enumConnectPullUp+0x23c>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2302:	a2 e3       	ldi	r26, 0x32	; 50
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_enumConnectPullUp+0x268>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_enumConnectPullUp+0x264>
    2324:	84 2b       	or	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	16 c0       	rjmp	.+44     	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    232a:	a2 e3       	ldi	r26, 0x32	; 50
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e2 e3       	ldi	r30, 0x32	; 50
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <DIO_enumConnectPullUp+0x290>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <DIO_enumConnectPullUp+0x28c>
    234c:	80 95       	com	r24
    234e:	84 23       	and	r24, r20
    2350:	8c 93       	st	X, r24
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2354:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
}
    2358:	26 96       	adiw	r28, 0x06	; 6
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <DIO_enumSetPortDir+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <DIO_enumSetPortDir+0x8>
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	a8 f5       	brcc	.+106    	; 0x23f0 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	3d 83       	std	Y+5, r19	; 0x05
    238e:	2c 83       	std	Y+4, r18	; 0x04
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	91 05       	cpc	r25, r1
    2398:	d1 f0       	breq	.+52     	; 0x23ce <DIO_enumSetPortDir+0x64>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	2c f4       	brge	.+10     	; 0x23ae <DIO_enumSetPortDir+0x44>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	61 f0       	breq	.+24     	; 0x23c4 <DIO_enumSetPortDir+0x5a>
    23ac:	1f c0       	rjmp	.+62     	; 0x23ec <DIO_enumSetPortDir+0x82>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <DIO_enumSetPortDir+0x6e>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	81 f0       	breq	.+32     	; 0x23e2 <DIO_enumSetPortDir+0x78>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    23c4:	ea e3       	ldi	r30, 0x3A	; 58
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	12 c0       	rjmp	.+36     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    23ce:	e7 e3       	ldi	r30, 0x37	; 55
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	80 83       	st	Z, r24
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    23d8:	e4 e3       	ldi	r30, 0x34	; 52
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	80 83       	st	Z, r24
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    23e2:	e1 e3       	ldi	r30, 0x31	; 49
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 83       	st	Z, r24
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    23f0:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <DIO_enumWritePortVal+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <DIO_enumWritePortVal+0x8>
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	8a 83       	std	Y+2, r24	; 0x02
    2414:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	84 30       	cpi	r24, 0x04	; 4
    241e:	a8 f5       	brcc	.+106    	; 0x248a <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3d 83       	std	Y+5, r19	; 0x05
    2428:	2c 83       	std	Y+4, r18	; 0x04
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	d1 f0       	breq	.+52     	; 0x2468 <DIO_enumWritePortVal+0x64>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	2c f4       	brge	.+10     	; 0x2448 <DIO_enumWritePortVal+0x44>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	61 f0       	breq	.+24     	; 0x245e <DIO_enumWritePortVal+0x5a>
    2446:	1f c0       	rjmp	.+62     	; 0x2486 <DIO_enumWritePortVal+0x82>
    2448:	2c 81       	ldd	r18, Y+4	; 0x04
    244a:	3d 81       	ldd	r19, Y+5	; 0x05
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 05       	cpc	r19, r1
    2450:	81 f0       	breq	.+32     	; 0x2472 <DIO_enumWritePortVal+0x6e>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	83 30       	cpi	r24, 0x03	; 3
    2458:	91 05       	cpc	r25, r1
    245a:	81 f0       	breq	.+32     	; 0x247c <DIO_enumWritePortVal+0x78>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    245e:	eb e3       	ldi	r30, 0x3B	; 59
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	80 83       	st	Z, r24
    2466:	12 c0       	rjmp	.+36     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    2468:	e8 e3       	ldi	r30, 0x38	; 56
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	80 83       	st	Z, r24
    2470:	0d c0       	rjmp	.+26     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    2472:	e5 e3       	ldi	r30, 0x35	; 53
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	80 83       	st	Z, r24
    247a:	08 c0       	rjmp	.+16     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    247c:	e2 e3       	ldi	r30, 0x32	; 50
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	80 83       	st	Z, r24
    2484:	03 c0       	rjmp	.+6      	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2486:	19 82       	std	Y+1, r1	; 0x01
    2488:	01 c0       	rjmp	.+2      	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    248a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	27 97       	sbiw	r28, 0x07	; 7
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    24b4:	7c 83       	std	Y+4, r23	; 0x04
    24b6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	08 f0       	brcs	.+2      	; 0x24c4 <DIO_enumReadPorVal+0x26>
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	3f 83       	std	Y+7, r19	; 0x07
    24cc:	2e 83       	std	Y+6, r18	; 0x06
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
    24d0:	9f 81       	ldd	r25, Y+7	; 0x07
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	e1 f0       	breq	.+56     	; 0x2510 <DIO_enumReadPorVal+0x72>
    24d8:	2e 81       	ldd	r18, Y+6	; 0x06
    24da:	3f 81       	ldd	r19, Y+7	; 0x07
    24dc:	22 30       	cpi	r18, 0x02	; 2
    24de:	31 05       	cpc	r19, r1
    24e0:	2c f4       	brge	.+10     	; 0x24ec <DIO_enumReadPorVal+0x4e>
    24e2:	8e 81       	ldd	r24, Y+6	; 0x06
    24e4:	9f 81       	ldd	r25, Y+7	; 0x07
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	61 f0       	breq	.+24     	; 0x2502 <DIO_enumReadPorVal+0x64>
    24ea:	27 c0       	rjmp	.+78     	; 0x253a <DIO_enumReadPorVal+0x9c>
    24ec:	2e 81       	ldd	r18, Y+6	; 0x06
    24ee:	3f 81       	ldd	r19, Y+7	; 0x07
    24f0:	22 30       	cpi	r18, 0x02	; 2
    24f2:	31 05       	cpc	r19, r1
    24f4:	a1 f0       	breq	.+40     	; 0x251e <DIO_enumReadPorVal+0x80>
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	b1 f0       	breq	.+44     	; 0x252c <DIO_enumReadPorVal+0x8e>
    2500:	1c c0       	rjmp	.+56     	; 0x253a <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    2502:	e9 e3       	ldi	r30, 0x39	; 57
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	eb 81       	ldd	r30, Y+3	; 0x03
    250a:	fc 81       	ldd	r31, Y+4	; 0x04
    250c:	80 83       	st	Z, r24
    250e:	16 c0       	rjmp	.+44     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    2510:	e6 e3       	ldi	r30, 0x36	; 54
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	eb 81       	ldd	r30, Y+3	; 0x03
    2518:	fc 81       	ldd	r31, Y+4	; 0x04
    251a:	80 83       	st	Z, r24
    251c:	0f c0       	rjmp	.+30     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    251e:	e3 e3       	ldi	r30, 0x33	; 51
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	eb 81       	ldd	r30, Y+3	; 0x03
    2526:	fc 81       	ldd	r31, Y+4	; 0x04
    2528:	80 83       	st	Z, r24
    252a:	08 c0       	rjmp	.+16     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    252c:	e0 e3       	ldi	r30, 0x30	; 48
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	eb 81       	ldd	r30, Y+3	; 0x03
    2534:	fc 81       	ldd	r31, Y+4	; 0x04
    2536:	80 83       	st	Z, r24
    2538:	01 c0       	rjmp	.+2      	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    253a:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    253c:	99 81       	ldd	r25, Y+1	; 0x01
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	03 c0       	rjmp	.+6      	; 0x2548 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2542:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2544:	29 81       	ldd	r18, Y+1	; 0x01
    2546:	2d 83       	std	Y+5, r18	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
}
    254a:	27 96       	adiw	r28, 0x07	; 7
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <DIO_enumTogglePortValue+0x6>
    2562:	00 d0       	rcall	.+0      	; 0x2564 <DIO_enumTogglePortValue+0x8>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	84 30       	cpi	r24, 0x04	; 4
    2572:	08 f0       	brcs	.+2      	; 0x2576 <DIO_enumTogglePortValue+0x1a>
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3c 83       	std	Y+4, r19	; 0x04
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	e9 f0       	breq	.+58     	; 0x25c4 <DIO_enumTogglePortValue+0x68>
    258a:	2b 81       	ldd	r18, Y+3	; 0x03
    258c:	3c 81       	ldd	r19, Y+4	; 0x04
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <DIO_enumTogglePortValue+0x42>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <DIO_enumTogglePortValue+0x58>
    259c:	2c c0       	rjmp	.+88     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	b1 f0       	breq	.+44     	; 0x25d4 <DIO_enumTogglePortValue+0x78>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	c9 f0       	breq	.+50     	; 0x25e4 <DIO_enumTogglePortValue+0x88>
    25b2:	21 c0       	rjmp	.+66     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 95       	com	r24
    25c0:	8c 93       	st	X, r24
    25c2:	19 c0       	rjmp	.+50     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    25c4:	a8 e3       	ldi	r26, 0x38	; 56
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e8 e3       	ldi	r30, 0x38	; 56
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 95       	com	r24
    25d0:	8c 93       	st	X, r24
    25d2:	11 c0       	rjmp	.+34     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    25d4:	a5 e3       	ldi	r26, 0x35	; 53
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e3       	ldi	r30, 0x35	; 53
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 95       	com	r24
    25e0:	8c 93       	st	X, r24
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    25e4:	a2 e3       	ldi	r26, 0x32	; 50
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e2 e3       	ldi	r30, 0x32	; 50
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 95       	com	r24
    25f0:	8c 93       	st	X, r24
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    25f4:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <DIO_vWriteLowNibble+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <DIO_vWriteLowNibble+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	08 f0       	brcs	.+2      	; 0x2624 <DIO_vWriteLowNibble+0x1e>
    2622:	62 c0       	rjmp	.+196    	; 0x26e8 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	8f 70       	andi	r24, 0x0F	; 15
    2628:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	3d 83       	std	Y+5, r19	; 0x05
    2632:	2c 83       	std	Y+4, r18	; 0x04
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	9d 81       	ldd	r25, Y+5	; 0x05
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	91 05       	cpc	r25, r1
    263c:	29 f1       	breq	.+74     	; 0x2688 <DIO_vWriteLowNibble+0x82>
    263e:	2c 81       	ldd	r18, Y+4	; 0x04
    2640:	3d 81       	ldd	r19, Y+5	; 0x05
    2642:	22 30       	cpi	r18, 0x02	; 2
    2644:	31 05       	cpc	r19, r1
    2646:	2c f4       	brge	.+10     	; 0x2652 <DIO_vWriteLowNibble+0x4c>
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	61 f0       	breq	.+24     	; 0x2668 <DIO_vWriteLowNibble+0x62>
    2650:	4c c0       	rjmp	.+152    	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	31 f1       	breq	.+76     	; 0x26a8 <DIO_vWriteLowNibble+0xa2>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	83 30       	cpi	r24, 0x03	; 3
    2662:	91 05       	cpc	r25, r1
    2664:	89 f1       	breq	.+98     	; 0x26c8 <DIO_vWriteLowNibble+0xc2>
    2666:	41 c0       	rjmp	.+130    	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2668:	ab e3       	ldi	r26, 0x3B	; 59
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	eb e3       	ldi	r30, 0x3B	; 59
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	80 7f       	andi	r24, 0xF0	; 240
    2674:	8c 93       	st	X, r24
      PORTA_REG |= value;
    2676:	ab e3       	ldi	r26, 0x3B	; 59
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	eb e3       	ldi	r30, 0x3B	; 59
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	90 81       	ld	r25, Z
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	89 2b       	or	r24, r25
    2684:	8c 93       	st	X, r24
    2686:	31 c0       	rjmp	.+98     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2688:	a8 e3       	ldi	r26, 0x38	; 56
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e8 e3       	ldi	r30, 0x38	; 56
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	80 7f       	andi	r24, 0xF0	; 240
    2694:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2696:	a8 e3       	ldi	r26, 0x38	; 56
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	90 81       	ld	r25, Z
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	89 2b       	or	r24, r25
    26a4:	8c 93       	st	X, r24
    26a6:	21 c0       	rjmp	.+66     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    26a8:	a5 e3       	ldi	r26, 0x35	; 53
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e3       	ldi	r30, 0x35	; 53
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 7f       	andi	r24, 0xF0	; 240
    26b4:	8c 93       	st	X, r24
      PORTC_REG |= value;
    26b6:	a5 e3       	ldi	r26, 0x35	; 53
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e3       	ldi	r30, 0x35	; 53
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	90 81       	ld	r25, Z
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	89 2b       	or	r24, r25
    26c4:	8c 93       	st	X, r24
    26c6:	11 c0       	rjmp	.+34     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    26c8:	a2 e3       	ldi	r26, 0x32	; 50
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e2 e3       	ldi	r30, 0x32	; 50
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 7f       	andi	r24, 0xF0	; 240
    26d4:	8c 93       	st	X, r24
      PORTD_REG |= value;
    26d6:	a2 e3       	ldi	r26, 0x32	; 50
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e2 e3       	ldi	r30, 0x32	; 50
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	90 81       	ld	r25, Z
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	89 2b       	or	r24, r25
    26e4:	8c 93       	st	X, r24
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    26e8:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	00 d0       	rcall	.+0      	; 0x2702 <DIO_vWriteHighNibble+0x6>
    2702:	00 d0       	rcall	.+0      	; 0x2704 <DIO_vWriteHighNibble+0x8>
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	8a 83       	std	Y+2, r24	; 0x02
    270c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	08 f0       	brcs	.+2      	; 0x271a <DIO_vWriteHighNibble+0x1e>
    2718:	63 c0       	rjmp	.+198    	; 0x27e0 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	82 95       	swap	r24
    271e:	80 7f       	andi	r24, 0xF0	; 240
    2720:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	29 f1       	breq	.+74     	; 0x2780 <DIO_vWriteHighNibble+0x84>
    2736:	2c 81       	ldd	r18, Y+4	; 0x04
    2738:	3d 81       	ldd	r19, Y+5	; 0x05
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	2c f4       	brge	.+10     	; 0x274a <DIO_vWriteHighNibble+0x4e>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <DIO_vWriteHighNibble+0x64>
    2748:	4c c0       	rjmp	.+152    	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	31 f1       	breq	.+76     	; 0x27a0 <DIO_vWriteHighNibble+0xa4>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	91 05       	cpc	r25, r1
    275c:	89 f1       	breq	.+98     	; 0x27c0 <DIO_vWriteHighNibble+0xc4>
    275e:	41 c0       	rjmp	.+130    	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    2760:	ab e3       	ldi	r26, 0x3B	; 59
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	eb e3       	ldi	r30, 0x3B	; 59
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	8c 93       	st	X, r24
      PORTA_REG|= value;
    276e:	ab e3       	ldi	r26, 0x3B	; 59
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	eb e3       	ldi	r30, 0x3B	; 59
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	90 81       	ld	r25, Z
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	89 2b       	or	r24, r25
    277c:	8c 93       	st	X, r24
    277e:	31 c0       	rjmp	.+98     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    2780:	a8 e3       	ldi	r26, 0x38	; 56
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e8 e3       	ldi	r30, 0x38	; 56
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8f 70       	andi	r24, 0x0F	; 15
    278c:	8c 93       	st	X, r24
      PORTB_REG |= value;
    278e:	a8 e3       	ldi	r26, 0x38	; 56
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e8 e3       	ldi	r30, 0x38	; 56
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	90 81       	ld	r25, Z
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	89 2b       	or	r24, r25
    279c:	8c 93       	st	X, r24
    279e:	21 c0       	rjmp	.+66     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    27a0:	a5 e3       	ldi	r26, 0x35	; 53
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e5 e3       	ldi	r30, 0x35	; 53
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	8f 70       	andi	r24, 0x0F	; 15
    27ac:	8c 93       	st	X, r24
      PORTC_REG |= value;
    27ae:	a5 e3       	ldi	r26, 0x35	; 53
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e3       	ldi	r30, 0x35	; 53
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	90 81       	ld	r25, Z
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	89 2b       	or	r24, r25
    27bc:	8c 93       	st	X, r24
    27be:	11 c0       	rjmp	.+34     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    27c0:	a2 e3       	ldi	r26, 0x32	; 50
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e2 e3       	ldi	r30, 0x32	; 50
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8f 70       	andi	r24, 0x0F	; 15
    27cc:	8c 93       	st	X, r24
      PORTD_REG |= value;
    27ce:	a2 e3       	ldi	r26, 0x32	; 50
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e2 e3       	ldi	r30, 0x32	; 50
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	90 81       	ld	r25, Z
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	89 2b       	or	r24, r25
    27dc:	8c 93       	st	X, r24
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    27e0:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <DIO_vSetLowNibbleDir+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <DIO_vSetLowNibbleDir+0x8>
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	08 f0       	brcs	.+2      	; 0x2812 <DIO_vSetLowNibbleDir+0x1e>
    2810:	62 c0       	rjmp	.+196    	; 0x28d6 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	8f 70       	andi	r24, 0x0F	; 15
    2816:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	3d 83       	std	Y+5, r19	; 0x05
    2820:	2c 83       	std	Y+4, r18	; 0x04
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	91 05       	cpc	r25, r1
    282a:	29 f1       	breq	.+74     	; 0x2876 <DIO_vSetLowNibbleDir+0x82>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	2c f4       	brge	.+10     	; 0x2840 <DIO_vSetLowNibbleDir+0x4c>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	61 f0       	breq	.+24     	; 0x2856 <DIO_vSetLowNibbleDir+0x62>
    283e:	4c c0       	rjmp	.+152    	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	31 f1       	breq	.+76     	; 0x2896 <DIO_vSetLowNibbleDir+0xa2>
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	83 30       	cpi	r24, 0x03	; 3
    2850:	91 05       	cpc	r25, r1
    2852:	89 f1       	breq	.+98     	; 0x28b6 <DIO_vSetLowNibbleDir+0xc2>
    2854:	41 c0       	rjmp	.+130    	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2856:	aa e3       	ldi	r26, 0x3A	; 58
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ea e3       	ldi	r30, 0x3A	; 58
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 7f       	andi	r24, 0xF0	; 240
    2862:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2864:	aa e3       	ldi	r26, 0x3A	; 58
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	ea e3       	ldi	r30, 0x3A	; 58
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	90 81       	ld	r25, Z
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	89 2b       	or	r24, r25
    2872:	8c 93       	st	X, r24
    2874:	31 c0       	rjmp	.+98     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2876:	a7 e3       	ldi	r26, 0x37	; 55
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e7 e3       	ldi	r30, 0x37	; 55
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 7f       	andi	r24, 0xF0	; 240
    2882:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2884:	a7 e3       	ldi	r26, 0x37	; 55
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	90 81       	ld	r25, Z
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	89 2b       	or	r24, r25
    2892:	8c 93       	st	X, r24
    2894:	21 c0       	rjmp	.+66     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2896:	a4 e3       	ldi	r26, 0x34	; 52
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e4 e3       	ldi	r30, 0x34	; 52
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	80 7f       	andi	r24, 0xF0	; 240
    28a2:	8c 93       	st	X, r24
      DDRC_REG |= value;
    28a4:	a4 e3       	ldi	r26, 0x34	; 52
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e4 e3       	ldi	r30, 0x34	; 52
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	90 81       	ld	r25, Z
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	89 2b       	or	r24, r25
    28b2:	8c 93       	st	X, r24
    28b4:	11 c0       	rjmp	.+34     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    28b6:	a1 e3       	ldi	r26, 0x31	; 49
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e1 e3       	ldi	r30, 0x31	; 49
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	80 7f       	andi	r24, 0xF0	; 240
    28c2:	8c 93       	st	X, r24
      DDRD_REG|= value;
    28c4:	a1 e3       	ldi	r26, 0x31	; 49
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e1 e3       	ldi	r30, 0x31	; 49
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	90 81       	ld	r25, Z
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	89 2b       	or	r24, r25
    28d2:	8c 93       	st	X, r24
    28d4:	01 c0       	rjmp	.+2      	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    28d6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <DIO_vSetHighNibbleDir+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <DIO_vSetHighNibbleDir+0x8>
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    28fa:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	84 30       	cpi	r24, 0x04	; 4
    2904:	08 f0       	brcs	.+2      	; 0x2908 <DIO_vSetHighNibbleDir+0x1e>
    2906:	63 c0       	rjmp	.+198    	; 0x29ce <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	82 95       	swap	r24
    290c:	80 7f       	andi	r24, 0xF0	; 240
    290e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3d 83       	std	Y+5, r19	; 0x05
    2918:	2c 83       	std	Y+4, r18	; 0x04
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	91 05       	cpc	r25, r1
    2922:	29 f1       	breq	.+74     	; 0x296e <DIO_vSetHighNibbleDir+0x84>
    2924:	2c 81       	ldd	r18, Y+4	; 0x04
    2926:	3d 81       	ldd	r19, Y+5	; 0x05
    2928:	22 30       	cpi	r18, 0x02	; 2
    292a:	31 05       	cpc	r19, r1
    292c:	2c f4       	brge	.+10     	; 0x2938 <DIO_vSetHighNibbleDir+0x4e>
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	61 f0       	breq	.+24     	; 0x294e <DIO_vSetHighNibbleDir+0x64>
    2936:	4c c0       	rjmp	.+152    	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
    2938:	2c 81       	ldd	r18, Y+4	; 0x04
    293a:	3d 81       	ldd	r19, Y+5	; 0x05
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	31 f1       	breq	.+76     	; 0x298e <DIO_vSetHighNibbleDir+0xa4>
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	9d 81       	ldd	r25, Y+5	; 0x05
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	91 05       	cpc	r25, r1
    294a:	89 f1       	breq	.+98     	; 0x29ae <DIO_vSetHighNibbleDir+0xc4>
    294c:	41 c0       	rjmp	.+130    	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    294e:	aa e3       	ldi	r26, 0x3A	; 58
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ea e3       	ldi	r30, 0x3A	; 58
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8f 70       	andi	r24, 0x0F	; 15
    295a:	8c 93       	st	X, r24
      DDRA_REG |= value;
    295c:	aa e3       	ldi	r26, 0x3A	; 58
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	ea e3       	ldi	r30, 0x3A	; 58
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	90 81       	ld	r25, Z
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	89 2b       	or	r24, r25
    296a:	8c 93       	st	X, r24
    296c:	31 c0       	rjmp	.+98     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    296e:	a7 e3       	ldi	r26, 0x37	; 55
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e7 e3       	ldi	r30, 0x37	; 55
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 70       	andi	r24, 0x0F	; 15
    297a:	8c 93       	st	X, r24
      DDRB_REG |= value;
    297c:	a7 e3       	ldi	r26, 0x37	; 55
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e7 e3       	ldi	r30, 0x37	; 55
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	90 81       	ld	r25, Z
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	89 2b       	or	r24, r25
    298a:	8c 93       	st	X, r24
    298c:	21 c0       	rjmp	.+66     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    298e:	a4 e3       	ldi	r26, 0x34	; 52
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e4 e3       	ldi	r30, 0x34	; 52
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8f 70       	andi	r24, 0x0F	; 15
    299a:	8c 93       	st	X, r24
      DDRC_REG |= value;
    299c:	a4 e3       	ldi	r26, 0x34	; 52
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 e3       	ldi	r30, 0x34	; 52
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	90 81       	ld	r25, Z
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	89 2b       	or	r24, r25
    29aa:	8c 93       	st	X, r24
    29ac:	11 c0       	rjmp	.+34     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    29ae:	a1 e3       	ldi	r26, 0x31	; 49
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e1 e3       	ldi	r30, 0x31	; 49
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8f 70       	andi	r24, 0x0F	; 15
    29ba:	8c 93       	st	X, r24
      DDRD_REG |= value;
    29bc:	a1 e3       	ldi	r26, 0x31	; 49
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e1 e3       	ldi	r30, 0x31	; 49
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	90 81       	ld	r25, Z
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	89 2b       	or	r24, r25
    29ca:	8c 93       	st	X, r24
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    29ce:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	c6 54       	subi	r28, 0x46	; 70
    29f0:	d0 40       	sbci	r29, 0x00	; 0
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	fe 01       	movw	r30, r28
    29fe:	ed 5b       	subi	r30, 0xBD	; 189
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a8 e4       	ldi	r26, 0x48	; 72
    2a08:	b2 e4       	ldi	r27, 0x42	; 66
    2a0a:	80 83       	st	Z, r24
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	a2 83       	std	Z+2, r26	; 0x02
    2a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a12:	8e 01       	movw	r16, r28
    2a14:	01 5c       	subi	r16, 0xC1	; 193
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ed 5b       	subi	r30, 0xBD	; 189
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a ef       	ldi	r20, 0xFA	; 250
    2a2c:	54 e4       	ldi	r21, 0x44	; 68
    2a2e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a40:	fe 01       	movw	r30, r28
    2a42:	ff 96       	adiw	r30, 0x3f	; 63
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <CLCD_vInit+0x84>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9e af       	std	Y+62, r25	; 0x3e
    2a62:	8d af       	std	Y+61, r24	; 0x3d
    2a64:	46 c0       	rjmp	.+140    	; 0x2af2 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    2a66:	fe 01       	movw	r30, r28
    2a68:	ff 96       	adiw	r30, 0x3f	; 63
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	64 f5       	brge	.+88     	; 0x2ada <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 5b       	subi	r30, 0xBD	; 189
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e2       	ldi	r20, 0x20	; 32
    2a96:	51 e4       	ldi	r21, 0x41	; 65
    2a98:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e af       	std	Y+62, r25	; 0x3e
    2aae:	8d af       	std	Y+61, r24	; 0x3d
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <CLCD_vInit+0xee>
    2ab2:	88 ec       	ldi	r24, 0xC8	; 200
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c af       	std	Y+60, r25	; 0x3c
    2ab8:	8b af       	std	Y+59, r24	; 0x3b
    2aba:	8b ad       	ldd	r24, Y+59	; 0x3b
    2abc:	9c ad       	ldd	r25, Y+60	; 0x3c
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <CLCD_vInit+0xdc>
    2ac2:	9c af       	std	Y+60, r25	; 0x3c
    2ac4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	9e af       	std	Y+62, r25	; 0x3e
    2ace:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	69 f7       	brne	.-38     	; 0x2ab2 <CLCD_vInit+0xd0>
    2ad8:	16 c0       	rjmp	.+44     	; 0x2b06 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ada:	fe 01       	movw	r30, r28
    2adc:	ff 96       	adiw	r30, 0x3f	; 63
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	9e af       	std	Y+62, r25	; 0x3e
    2af0:	8d af       	std	Y+61, r24	; 0x3d
    2af2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af6:	9a af       	std	Y+58, r25	; 0x3a
    2af8:	89 af       	std	Y+57, r24	; 0x39
    2afa:	89 ad       	ldd	r24, Y+57	; 0x39
    2afc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <CLCD_vInit+0x11c>
    2b02:	9a af       	std	Y+58, r25	; 0x3a
    2b04:	89 af       	std	Y+57, r24	; 0x39
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	63 e0       	ldi	r22, 0x03	; 3
    2b28:	41 e0       	ldi	r20, 0x01	; 1
    2b2a:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	66 e0       	ldi	r22, 0x06	; 6
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	65 e0       	ldi	r22, 0x05	; 5
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	64 e0       	ldi	r22, 0x04	; 4
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    2b4c:	82 e0       	ldi	r24, 0x02	; 2
    2b4e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e2       	ldi	r26, 0x20	; 32
    2b58:	b1 e4       	ldi	r27, 0x41	; 65
    2b5a:	8d ab       	std	Y+53, r24	; 0x35
    2b5c:	9e ab       	std	Y+54, r25	; 0x36
    2b5e:	af ab       	std	Y+55, r26	; 0x37
    2b60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6d a9       	ldd	r22, Y+53	; 0x35
    2b64:	7e a9       	ldd	r23, Y+54	; 0x36
    2b66:	8f a9       	ldd	r24, Y+55	; 0x37
    2b68:	98 ad       	ldd	r25, Y+56	; 0x38
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	89 ab       	std	Y+49, r24	; 0x31
    2b7c:	9a ab       	std	Y+50, r25	; 0x32
    2b7e:	ab ab       	std	Y+51, r26	; 0x33
    2b80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <CLCD_vInit+0x1c2>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	98 ab       	std	Y+48, r25	; 0x30
    2ba0:	8f a7       	std	Y+47, r24	; 0x2f
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    2ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    2baa:	9c a9       	ldd	r25, Y+52	; 0x34
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	98 ab       	std	Y+48, r25	; 0x30
    2be2:	8f a7       	std	Y+47, r24	; 0x2f
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <CLCD_vInit+0x222>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9e a7       	std	Y+46, r25	; 0x2e
    2bec:	8d a7       	std	Y+45, r24	; 0x2d
    2bee:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <CLCD_vInit+0x210>
    2bf6:	9e a7       	std	Y+46, r25	; 0x2e
    2bf8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	98 ab       	std	Y+48, r25	; 0x30
    2c02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c06:	98 a9       	ldd	r25, Y+48	; 0x30
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <CLCD_vInit+0x204>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c10:	7a a9       	ldd	r23, Y+50	; 0x32
    2c12:	8b a9       	ldd	r24, Y+51	; 0x33
    2c14:	9c a9       	ldd	r25, Y+52	; 0x34
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	98 ab       	std	Y+48, r25	; 0x30
    2c20:	8f a7       	std	Y+47, r24	; 0x2f
    2c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c24:	98 a9       	ldd	r25, Y+48	; 0x30
    2c26:	9c a7       	std	Y+44, r25	; 0x2c
    2c28:	8b a7       	std	Y+43, r24	; 0x2b
    2c2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <CLCD_vInit+0x24c>
    2c32:	9c a7       	std	Y+44, r25	; 0x2c
    2c34:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    2c36:	88 e2       	ldi	r24, 0x28	; 40
    2c38:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	bf e3       	ldi	r27, 0x3F	; 63
    2c44:	8f a3       	std	Y+39, r24	; 0x27
    2c46:	98 a7       	std	Y+40, r25	; 0x28
    2c48:	a9 a7       	std	Y+41, r26	; 0x29
    2c4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c50:	89 a5       	ldd	r24, Y+41	; 0x29
    2c52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a ef       	ldi	r20, 0xFA	; 250
    2c5a:	54 e4       	ldi	r21, 0x44	; 68
    2c5c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8b a3       	std	Y+35, r24	; 0x23
    2c66:	9c a3       	std	Y+36, r25	; 0x24
    2c68:	ad a3       	std	Y+37, r26	; 0x25
    2c6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <CLCD_vInit+0x2ac>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9a a3       	std	Y+34, r25	; 0x22
    2c8a:	89 a3       	std	Y+33, r24	; 0x21
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    2c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c90:	7c a1       	ldd	r23, Y+36	; 0x24
    2c92:	8d a1       	ldd	r24, Y+37	; 0x25
    2c94:	9e a1       	ldd	r25, Y+38	; 0x26
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca8:	78 a5       	ldd	r23, Y+40	; 0x28
    2caa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9a a3       	std	Y+34, r25	; 0x22
    2ccc:	89 a3       	std	Y+33, r24	; 0x21
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <CLCD_vInit+0x30c>
    2cd0:	88 ec       	ldi	r24, 0xC8	; 200
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	98 a3       	std	Y+32, r25	; 0x20
    2cd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cda:	98 a1       	ldd	r25, Y+32	; 0x20
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <CLCD_vInit+0x2fa>
    2ce0:	98 a3       	std	Y+32, r25	; 0x20
    2ce2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9a a3       	std	Y+34, r25	; 0x22
    2cec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <CLCD_vInit+0x2ee>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9a a3       	std	Y+34, r25	; 0x22
    2d0a:	89 a3       	std	Y+33, r24	; 0x21
    2d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d10:	9e 8f       	std	Y+30, r25	; 0x1e
    2d12:	8d 8f       	std	Y+29, r24	; 0x1d
    2d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <CLCD_vInit+0x336>
    2d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1e:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    2d20:	8c e0       	ldi	r24, 0x0C	; 12
    2d22:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a0 e8       	ldi	r26, 0x80	; 128
    2d2c:	bf e3       	ldi	r27, 0x3F	; 63
    2d2e:	89 8f       	std	Y+25, r24	; 0x19
    2d30:	9a 8f       	std	Y+26, r25	; 0x1a
    2d32:	ab 8f       	std	Y+27, r26	; 0x1b
    2d34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d36:	69 8d       	ldd	r22, Y+25	; 0x19
    2d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a ef       	ldi	r20, 0xFA	; 250
    2d44:	54 e4       	ldi	r21, 0x44	; 68
    2d46:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	8d 8b       	std	Y+21, r24	; 0x15
    2d50:	9e 8b       	std	Y+22, r25	; 0x16
    2d52:	af 8b       	std	Y+23, r26	; 0x17
    2d54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d56:	6d 89       	ldd	r22, Y+21	; 0x15
    2d58:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	2c f4       	brge	.+10     	; 0x2d78 <CLCD_vInit+0x396>
		__ticks = 1;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
    2d76:	3f c0       	rjmp	.+126    	; 0x2df6 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    2d78:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	3f ef       	ldi	r19, 0xFF	; 255
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	57 e4       	ldi	r21, 0x47	; 71
    2d88:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	4c f5       	brge	.+82     	; 0x2de2 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d90:	69 8d       	ldd	r22, Y+25	; 0x19
    2d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e2       	ldi	r20, 0x20	; 32
    2d9e:	51 e4       	ldi	r21, 0x41	; 65
    2da0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	0f c0       	rjmp	.+30     	; 0x2dd8 <CLCD_vInit+0x3f6>
    2dba:	88 ec       	ldi	r24, 0xC8	; 200
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	9a 8b       	std	Y+18, r25	; 0x12
    2dc0:	89 8b       	std	Y+17, r24	; 0x11
    2dc2:	89 89       	ldd	r24, Y+17	; 0x11
    2dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <CLCD_vInit+0x3e4>
    2dca:	9a 8b       	std	Y+18, r25	; 0x12
    2dcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dce:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	9c 8b       	std	Y+20, r25	; 0x14
    2dd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	9c 89       	ldd	r25, Y+20	; 0x14
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	69 f7       	brne	.-38     	; 0x2dba <CLCD_vInit+0x3d8>
    2de0:	14 c0       	rjmp	.+40     	; 0x2e0a <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de2:	6d 89       	ldd	r22, Y+21	; 0x15
    2de4:	7e 89       	ldd	r23, Y+22	; 0x16
    2de6:	8f 89       	ldd	r24, Y+23	; 0x17
    2de8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9c 8b       	std	Y+20, r25	; 0x14
    2df4:	8b 8b       	std	Y+19, r24	; 0x13
    2df6:	8b 89       	ldd	r24, Y+19	; 0x13
    2df8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfa:	98 8b       	std	Y+16, r25	; 0x10
    2dfc:	8f 87       	std	Y+15, r24	; 0x0f
    2dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e00:	98 89       	ldd	r25, Y+16	; 0x10
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <CLCD_vInit+0x420>
    2e06:	98 8b       	std	Y+16, r25	; 0x10
    2e08:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    2e0a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    2e0e:	86 e0       	ldi	r24, 0x06	; 6
    2e10:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	a0 e8       	ldi	r26, 0x80	; 128
    2e1a:	bf e3       	ldi	r27, 0x3F	; 63
    2e1c:	8b 87       	std	Y+11, r24	; 0x0b
    2e1e:	9c 87       	std	Y+12, r25	; 0x0c
    2e20:	ad 87       	std	Y+13, r26	; 0x0d
    2e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a ef       	ldi	r20, 0xFA	; 250
    2e32:	54 e4       	ldi	r21, 0x44	; 68
    2e34:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8f 83       	std	Y+7, r24	; 0x07
    2e3e:	98 87       	std	Y+8, r25	; 0x08
    2e40:	a9 87       	std	Y+9, r26	; 0x09
    2e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e8       	ldi	r20, 0x80	; 128
    2e52:	5f e3       	ldi	r21, 0x3F	; 63
    2e54:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	2c f4       	brge	.+10     	; 0x2e66 <CLCD_vInit+0x484>
		__ticks = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	3f c0       	rjmp	.+126    	; 0x2ee4 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	4f e7       	ldi	r20, 0x7F	; 127
    2e74:	57 e4       	ldi	r21, 0x47	; 71
    2e76:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2e7a:	18 16       	cp	r1, r24
    2e7c:	4c f5       	brge	.+82     	; 0x2ed0 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e2       	ldi	r20, 0x20	; 32
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <CLCD_vInit+0x4e4>
    2ea8:	88 ec       	ldi	r24, 0xC8	; 200
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <CLCD_vInit+0x4d2>
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	69 f7       	brne	.-38     	; 0x2ea8 <CLCD_vInit+0x4c6>
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <CLCD_vInit+0x50e>
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    2ef8:	ca 5b       	subi	r28, 0xBA	; 186
    2efa:	df 4f       	sbci	r29, 0xFF	; 255
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	08 95       	ret

00002f10 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	66 e0       	ldi	r22, 0x06	; 6
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	65 e0       	ldi	r22, 0x05	; 5
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	98 2f       	mov	r25, r24
    2f34:	92 95       	swap	r25
    2f36:	9f 70       	andi	r25, 0x0F	; 15
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	69 2f       	mov	r22, r25
    2f3c:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    2f40:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	69 81       	ldd	r22, Y+1	; 0x01
    2f48:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    2f4c:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	66 e0       	ldi	r22, 0x06	; 6
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	65 e0       	ldi	r22, 0x05	; 5
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	98 2f       	mov	r25, r24
    2f7c:	92 95       	swap	r25
    2f7e:	9f 70       	andi	r25, 0x0F	; 15
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	69 2f       	mov	r22, r25
    2f84:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    2f88:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	69 81       	ldd	r22, Y+1	; 0x01
    2f90:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    2f94:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    2f98:	0f 90       	pop	r0
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	6c 97       	sbiw	r28, 0x1c	; 28
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	64 e0       	ldi	r22, 0x04	; 4
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 e8       	ldi	r26, 0x80	; 128
    2fc4:	bf e3       	ldi	r27, 0x3F	; 63
    2fc6:	89 8f       	std	Y+25, r24	; 0x19
    2fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fca:	ab 8f       	std	Y+27, r26	; 0x1b
    2fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8d 8b       	std	Y+21, r24	; 0x15
    2fe8:	9e 8b       	std	Y+22, r25	; 0x16
    2fea:	af 8b       	std	Y+23, r26	; 0x17
    2fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	3f c0       	rjmp	.+126    	; 0x308e <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	69 8d       	ldd	r22, Y+25	; 0x19
    302a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <CLCD_vSendFallingEdge+0xd0>
    3052:	88 ec       	ldi	r24, 0xC8	; 200
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9a 8b       	std	Y+18, r25	; 0x12
    3058:	89 8b       	std	Y+17, r24	; 0x11
    305a:	89 89       	ldd	r24, Y+17	; 0x11
    305c:	9a 89       	ldd	r25, Y+18	; 0x12
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <CLCD_vSendFallingEdge+0xbe>
    3062:	9a 8b       	std	Y+18, r25	; 0x12
    3064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8b 89       	ldd	r24, Y+19	; 0x13
    3068:	9c 89       	ldd	r25, Y+20	; 0x14
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9c 8b       	std	Y+20, r25	; 0x14
    306e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8b 89       	ldd	r24, Y+19	; 0x13
    3072:	9c 89       	ldd	r25, Y+20	; 0x14
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <CLCD_vSendFallingEdge+0xb2>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6d 89       	ldd	r22, Y+21	; 0x15
    307c:	7e 89       	ldd	r23, Y+22	; 0x16
    307e:	8f 89       	ldd	r24, Y+23	; 0x17
    3080:	98 8d       	ldd	r25, Y+24	; 0x18
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	98 8b       	std	Y+16, r25	; 0x10
    3094:	8f 87       	std	Y+15, r24	; 0x0f
    3096:	8f 85       	ldd	r24, Y+15	; 0x0f
    3098:	98 89       	ldd	r25, Y+16	; 0x10
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <CLCD_vSendFallingEdge+0xfa>
    309e:	98 8b       	std	Y+16, r25	; 0x10
    30a0:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	64 e0       	ldi	r22, 0x04	; 4
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 e8       	ldi	r26, 0x80	; 128
    30b2:	bf e3       	ldi	r27, 0x3F	; 63
    30b4:	8b 87       	std	Y+11, r24	; 0x0b
    30b6:	9c 87       	std	Y+12, r25	; 0x0c
    30b8:	ad 87       	std	Y+13, r26	; 0x0d
    30ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30be:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4a ef       	ldi	r20, 0xFA	; 250
    30ca:	54 e4       	ldi	r21, 0x44	; 68
    30cc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8f 83       	std	Y+7, r24	; 0x07
    30d6:	98 87       	std	Y+8, r25	; 0x08
    30d8:	a9 87       	std	Y+9, r26	; 0x09
    30da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	2c f4       	brge	.+10     	; 0x30fe <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	3f c0       	rjmp	.+126    	; 0x317c <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	4c f5       	brge	.+82     	; 0x3168 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3116:	6b 85       	ldd	r22, Y+11	; 0x0b
    3118:	7c 85       	ldd	r23, Y+12	; 0x0c
    311a:	8d 85       	ldd	r24, Y+13	; 0x0d
    311c:	9e 85       	ldd	r25, Y+14	; 0x0e
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e2       	ldi	r20, 0x20	; 32
    3124:	51 e4       	ldi	r21, 0x41	; 65
    3126:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9e 83       	std	Y+6, r25	; 0x06
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	0f c0       	rjmp	.+30     	; 0x315e <CLCD_vSendFallingEdge+0x1be>
    3140:	88 ec       	ldi	r24, 0xC8	; 200
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	9c 81       	ldd	r25, Y+4	; 0x04
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <CLCD_vSendFallingEdge+0x1ac>
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	69 f7       	brne	.-38     	; 0x3140 <CLCD_vSendFallingEdge+0x1a0>
    3166:	14 c0       	rjmp	.+40     	; 0x3190 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <CLCD_vSendFallingEdge+0x1e8>
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3190:	6c 96       	adiw	r28, 0x1c	; 28
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	2e 97       	sbiw	r28, 0x0e	; 14
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e2       	ldi	r26, 0x20	; 32
    31c2:	b1 e4       	ldi	r27, 0x41	; 65
    31c4:	8b 87       	std	Y+11, r24	; 0x0b
    31c6:	9c 87       	std	Y+12, r25	; 0x0c
    31c8:	ad 87       	std	Y+13, r26	; 0x0d
    31ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8f 83       	std	Y+7, r24	; 0x07
    31e6:	98 87       	std	Y+8, r25	; 0x08
    31e8:	a9 87       	std	Y+9, r26	; 0x09
    31ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ec:	6f 81       	ldd	r22, Y+7	; 0x07
    31ee:	78 85       	ldd	r23, Y+8	; 0x08
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	3f c0       	rjmp	.+126    	; 0x328c <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	89 85       	ldd	r24, Y+9	; 0x09
    3214:	9a 85       	ldd	r25, Y+10	; 0x0a
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	0f c0       	rjmp	.+30     	; 0x326e <CLCD_vClearScreen+0xcc>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <CLCD_vClearScreen+0xba>
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	9e 81       	ldd	r25, Y+6	; 0x06
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <CLCD_vClearScreen+0xae>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6f 81       	ldd	r22, Y+7	; 0x07
    327a:	78 85       	ldd	r23, Y+8	; 0x08
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <CLCD_vClearScreen+0xf6>
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    32a0:	2e 96       	adiw	r28, 0x0e	; 14
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <CLCD_vSendString+0x6>
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	9b 83       	std	Y+3, r25	; 0x03
    32c0:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    32c2:	19 82       	std	Y+1, r1	; 0x01
    32c4:	0e c0       	rjmp	.+28     	; 0x32e2 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	80 81       	ld	r24, Z
    32d8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
    LOC_u8Iterator++;
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	8f 5f       	subi	r24, 0xFF	; 255
    32e0:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	e2 0f       	add	r30, r18
    32f0:	f3 1f       	adc	r31, r19
    32f2:	80 81       	ld	r24, Z
    32f4:	88 23       	and	r24, r24
    32f6:	39 f7       	brne	.-50     	; 0x32c6 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	28 97       	sbiw	r28, 0x08	; 8
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	6d 83       	std	Y+5, r22	; 0x05
    3322:	7e 83       	std	Y+6, r23	; 0x06
    3324:	8f 83       	std	Y+7, r24	; 0x07
    3326:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	ab 83       	std	Y+3, r26	; 0x03
    3336:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	af 81       	ldd	r26, Y+7	; 0x07
    333e:	b8 85       	ldd	r27, Y+8	; 0x08
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	a1 05       	cpc	r26, r1
    3344:	b1 05       	cpc	r27, r1
    3346:	21 f4       	brne	.+8      	; 0x3350 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    3348:	80 e3       	ldi	r24, 0x30	; 48
    334a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
    334e:	85 c0       	rjmp	.+266    	; 0x345a <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	af 81       	ldd	r26, Y+7	; 0x07
    3356:	b8 85       	ldd	r27, Y+8	; 0x08
    3358:	bb 23       	and	r27, r27
    335a:	0c f0       	brlt	.+2      	; 0x335e <CLCD_vSendIntNumber+0x5a>
    335c:	49 c0       	rjmp	.+146    	; 0x33f0 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    335e:	8d e2       	ldi	r24, 0x2D	; 45
    3360:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	af 81       	ldd	r26, Y+7	; 0x07
    336a:	b8 85       	ldd	r27, Y+8	; 0x08
    336c:	b0 95       	com	r27
    336e:	a0 95       	com	r26
    3370:	90 95       	com	r25
    3372:	81 95       	neg	r24
    3374:	9f 4f       	sbci	r25, 0xFF	; 255
    3376:	af 4f       	sbci	r26, 0xFF	; 255
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	af 83       	std	Y+7, r26	; 0x07
    3380:	b8 87       	std	Y+8, r27	; 0x08
    3382:	36 c0       	rjmp	.+108    	; 0x33f0 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	ab 81       	ldd	r26, Y+3	; 0x03
    338a:	bc 81       	ldd	r27, Y+4	; 0x04
    338c:	2a e0       	ldi	r18, 0x0A	; 10
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 2c 24 	call	0x4858	; 0x4858 <__mulsi3>
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	9e 81       	ldd	r25, Y+6	; 0x06
    33a4:	af 81       	ldd	r26, Y+7	; 0x07
    33a6:	b8 85       	ldd	r27, Y+8	; 0x08
    33a8:	2a e0       	ldi	r18, 0x0A	; 10
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	8e 0d       	add	r24, r14
    33be:	9f 1d       	adc	r25, r15
    33c0:	a0 1f       	adc	r26, r16
    33c2:	b1 1f       	adc	r27, r17
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	ab 83       	std	Y+3, r26	; 0x03
    33ca:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    33cc:	8d 81       	ldd	r24, Y+5	; 0x05
    33ce:	9e 81       	ldd	r25, Y+6	; 0x06
    33d0:	af 81       	ldd	r26, Y+7	; 0x07
    33d2:	b8 85       	ldd	r27, Y+8	; 0x08
    33d4:	2a e0       	ldi	r18, 0x0A	; 10
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    33e4:	da 01       	movw	r26, r20
    33e6:	c9 01       	movw	r24, r18
    33e8:	8d 83       	std	Y+5, r24	; 0x05
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	af 83       	std	Y+7, r26	; 0x07
    33ee:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    33f0:	8d 81       	ldd	r24, Y+5	; 0x05
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	af 81       	ldd	r26, Y+7	; 0x07
    33f6:	b8 85       	ldd	r27, Y+8	; 0x08
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	a1 05       	cpc	r26, r1
    33fc:	b1 05       	cpc	r27, r1
    33fe:	11 f6       	brne	.-124    	; 0x3384 <CLCD_vSendIntNumber+0x80>
    3400:	23 c0       	rjmp	.+70     	; 0x3448 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	ab 81       	ldd	r26, Y+3	; 0x03
    3408:	bc 81       	ldd	r27, Y+4	; 0x04
    340a:	2a e0       	ldi	r18, 0x0A	; 10
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 4b 24 	call	0x4896	; 0x4896 <__udivmodsi4>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	80 5d       	subi	r24, 0xD0	; 208
    3420:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	9a 81       	ldd	r25, Y+2	; 0x02
    3428:	ab 81       	ldd	r26, Y+3	; 0x03
    342a:	bc 81       	ldd	r27, Y+4	; 0x04
    342c:	2a e0       	ldi	r18, 0x0A	; 10
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 4b 24 	call	0x4896	; 0x4896 <__udivmodsi4>
    343c:	da 01       	movw	r26, r20
    343e:	c9 01       	movw	r24, r18
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	9a 83       	std	Y+2, r25	; 0x02
    3444:	ab 83       	std	Y+3, r26	; 0x03
    3446:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	9a 81       	ldd	r25, Y+2	; 0x02
    344c:	ab 81       	ldd	r26, Y+3	; 0x03
    344e:	bc 81       	ldd	r27, Y+4	; 0x04
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	91 05       	cpc	r25, r1
    3454:	a1 05       	cpc	r26, r1
    3456:	b1 05       	cpc	r27, r1
    3458:	a1 f6       	brne	.-88     	; 0x3402 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    345a:	28 96       	adiw	r28, 0x08	; 8
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	ff 90       	pop	r15
    3470:	ef 90       	pop	r14
    3472:	08 95       	ret

00003474 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3474:	af 92       	push	r10
    3476:	bf 92       	push	r11
    3478:	cf 92       	push	r12
    347a:	df 92       	push	r13
    347c:	ef 92       	push	r14
    347e:	ff 92       	push	r15
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	00 d0       	rcall	.+0      	; 0x348a <CLCD_vSendFloatNumber+0x16>
    348a:	00 d0       	rcall	.+0      	; 0x348c <CLCD_vSendFloatNumber+0x18>
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	69 83       	std	Y+1, r22	; 0x01
    3492:	7a 83       	std	Y+2, r23	; 0x02
    3494:	8b 83       	std	Y+3, r24	; 0x03
    3496:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    3498:	69 81       	ldd	r22, Y+1	; 0x01
    349a:	7a 81       	ldd	r23, Y+2	; 0x02
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 82 19 	call	0x3304	; 0x3304 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    34b0:	69 81       	ldd	r22, Y+1	; 0x01
    34b2:	7a 81       	ldd	r23, Y+2	; 0x02
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	4c f4       	brge	.+18     	; 0x34da <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	9a 81       	ldd	r25, Y+2	; 0x02
    34cc:	ab 81       	ldd	r26, Y+3	; 0x03
    34ce:	bc 81       	ldd	r27, Y+4	; 0x04
    34d0:	b0 58       	subi	r27, 0x80	; 128
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	ab 83       	std	Y+3, r26	; 0x03
    34d8:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    34da:	69 81       	ldd	r22, Y+1	; 0x01
    34dc:	7a 81       	ldd	r23, Y+2	; 0x02
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	9c 81       	ldd	r25, Y+4	; 0x04
    34e2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    34f2:	9b 01       	movw	r18, r22
    34f4:	ac 01       	movw	r20, r24
    34f6:	69 81       	ldd	r22, Y+1	; 0x01
    34f8:	7a 81       	ldd	r23, Y+2	; 0x02
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	89 83       	std	Y+1, r24	; 0x01
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	ab 83       	std	Y+3, r26	; 0x03
    350c:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    350e:	69 81       	ldd	r22, Y+1	; 0x01
    3510:	7a 81       	ldd	r23, Y+2	; 0x02
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e4       	ldi	r19, 0x40	; 64
    351a:	4c e1       	ldi	r20, 0x1C	; 28
    351c:	56 e4       	ldi	r21, 0x46	; 70
    351e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	ab 83       	std	Y+3, r26	; 0x03
    352c:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    352e:	69 81       	ldd	r22, Y+1	; 0x01
    3530:	7a 81       	ldd	r23, Y+2	; 0x02
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	9c 81       	ldd	r25, Y+4	; 0x04
    3536:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    353a:	a2 2e       	mov	r10, r18
    353c:	b3 2e       	mov	r11, r19
    353e:	c4 2e       	mov	r12, r20
    3540:	d5 2e       	mov	r13, r21
    3542:	e6 2e       	mov	r14, r22
    3544:	f7 2e       	mov	r15, r23
    3546:	08 2f       	mov	r16, r24
    3548:	19 2f       	mov	r17, r25
    354a:	8a 2d       	mov	r24, r10
    354c:	8b 29       	or	r24, r11
    354e:	8c 29       	or	r24, r12
    3550:	8d 29       	or	r24, r13
    3552:	8e 29       	or	r24, r14
    3554:	8f 29       	or	r24, r15
    3556:	80 2b       	or	r24, r16
    3558:	81 2b       	or	r24, r17
    355a:	88 23       	and	r24, r24
    355c:	79 f0       	breq	.+30     	; 0x357c <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    355e:	8e e2       	ldi	r24, 0x2E	; 46
    3560:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    3564:	69 81       	ldd	r22, Y+1	; 0x01
    3566:	7a 81       	ldd	r23, Y+2	; 0x02
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 82 19 	call	0x3304	; 0x3304 <CLCD_vSendIntNumber>
  }
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	bf 90       	pop	r11
    3596:	af 90       	pop	r10
    3598:	08 95       	ret

0000359a <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	61 97       	sbiw	r28, 0x11	; 17
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	88 8b       	std	Y+16, r24	; 0x10
    35b0:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    35b2:	88 89       	ldd	r24, Y+16	; 0x10
    35b4:	88 23       	and	r24, r24
    35b6:	49 f0       	breq	.+18     	; 0x35ca <CLCD_vSetPosition+0x30>
    35b8:	88 89       	ldd	r24, Y+16	; 0x10
    35ba:	85 30       	cpi	r24, 0x05	; 5
    35bc:	30 f4       	brcc	.+12     	; 0x35ca <CLCD_vSetPosition+0x30>
    35be:	89 89       	ldd	r24, Y+17	; 0x11
    35c0:	88 23       	and	r24, r24
    35c2:	19 f0       	breq	.+6      	; 0x35ca <CLCD_vSetPosition+0x30>
    35c4:	89 89       	ldd	r24, Y+17	; 0x11
    35c6:	85 31       	cpi	r24, 0x15	; 21
    35c8:	18 f0       	brcs	.+6      	; 0x35d0 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    35ca:	80 e8       	ldi	r24, 0x80	; 128
    35cc:	8f 87       	std	Y+15, r24	; 0x0f
    35ce:	1b c0       	rjmp	.+54     	; 0x3606 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    35d0:	88 89       	ldd	r24, Y+16	; 0x10
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	21 f4       	brne	.+8      	; 0x35de <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    35d6:	89 89       	ldd	r24, Y+17	; 0x11
    35d8:	81 58       	subi	r24, 0x81	; 129
    35da:	8f 87       	std	Y+15, r24	; 0x0f
    35dc:	14 c0       	rjmp	.+40     	; 0x3606 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    35de:	88 89       	ldd	r24, Y+16	; 0x10
    35e0:	82 30       	cpi	r24, 0x02	; 2
    35e2:	21 f4       	brne	.+8      	; 0x35ec <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    35e4:	89 89       	ldd	r24, Y+17	; 0x11
    35e6:	81 54       	subi	r24, 0x41	; 65
    35e8:	8f 87       	std	Y+15, r24	; 0x0f
    35ea:	0d c0       	rjmp	.+26     	; 0x3606 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    35ec:	88 89       	ldd	r24, Y+16	; 0x10
    35ee:	83 30       	cpi	r24, 0x03	; 3
    35f0:	21 f4       	brne	.+8      	; 0x35fa <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    35f2:	89 89       	ldd	r24, Y+17	; 0x11
    35f4:	8d 56       	subi	r24, 0x6D	; 109
    35f6:	8f 87       	std	Y+15, r24	; 0x0f
    35f8:	06 c0       	rjmp	.+12     	; 0x3606 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    35fa:	88 89       	ldd	r24, Y+16	; 0x10
    35fc:	84 30       	cpi	r24, 0x04	; 4
    35fe:	19 f4       	brne	.+6      	; 0x3606 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    3600:	89 89       	ldd	r24, Y+17	; 0x11
    3602:	8d 52       	subi	r24, 0x2D	; 45
    3604:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    3606:	8f 85       	ldd	r24, Y+15	; 0x0f
    3608:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	a0 e8       	ldi	r26, 0x80	; 128
    3612:	bf e3       	ldi	r27, 0x3F	; 63
    3614:	8b 87       	std	Y+11, r24	; 0x0b
    3616:	9c 87       	std	Y+12, r25	; 0x0c
    3618:	ad 87       	std	Y+13, r26	; 0x0d
    361a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361c:	6b 85       	ldd	r22, Y+11	; 0x0b
    361e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4a ef       	ldi	r20, 0xFA	; 250
    362a:	54 e4       	ldi	r21, 0x44	; 68
    362c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	8f 83       	std	Y+7, r24	; 0x07
    3636:	98 87       	std	Y+8, r25	; 0x08
    3638:	a9 87       	std	Y+9, r26	; 0x09
    363a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    363c:	6f 81       	ldd	r22, Y+7	; 0x07
    363e:	78 85       	ldd	r23, Y+8	; 0x08
    3640:	89 85       	ldd	r24, Y+9	; 0x09
    3642:	9a 85       	ldd	r25, Y+10	; 0x0a
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e8       	ldi	r20, 0x80	; 128
    364a:	5f e3       	ldi	r21, 0x3F	; 63
    364c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3650:	88 23       	and	r24, r24
    3652:	2c f4       	brge	.+10     	; 0x365e <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
    365c:	3f c0       	rjmp	.+126    	; 0x36dc <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    365e:	6f 81       	ldd	r22, Y+7	; 0x07
    3660:	78 85       	ldd	r23, Y+8	; 0x08
    3662:	89 85       	ldd	r24, Y+9	; 0x09
    3664:	9a 85       	ldd	r25, Y+10	; 0x0a
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	3f ef       	ldi	r19, 0xFF	; 255
    366a:	4f e7       	ldi	r20, 0x7F	; 127
    366c:	57 e4       	ldi	r21, 0x47	; 71
    366e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3672:	18 16       	cp	r1, r24
    3674:	4c f5       	brge	.+82     	; 0x36c8 <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3676:	6b 85       	ldd	r22, Y+11	; 0x0b
    3678:	7c 85       	ldd	r23, Y+12	; 0x0c
    367a:	8d 85       	ldd	r24, Y+13	; 0x0d
    367c:	9e 85       	ldd	r25, Y+14	; 0x0e
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	40 e2       	ldi	r20, 0x20	; 32
    3684:	51 e4       	ldi	r21, 0x41	; 65
    3686:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
    369e:	0f c0       	rjmp	.+30     	; 0x36be <CLCD_vSetPosition+0x124>
    36a0:	88 ec       	ldi	r24, 0xC8	; 200
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	9c 83       	std	Y+4, r25	; 0x04
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	9c 81       	ldd	r25, Y+4	; 0x04
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <CLCD_vSetPosition+0x112>
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	9e 81       	ldd	r25, Y+6	; 0x06
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	69 f7       	brne	.-38     	; 0x36a0 <CLCD_vSetPosition+0x106>
    36c6:	14 c0       	rjmp	.+40     	; 0x36f0 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ca:	78 85       	ldd	r23, Y+8	; 0x08
    36cc:	89 85       	ldd	r24, Y+9	; 0x09
    36ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	9e 83       	std	Y+6, r25	; 0x06
    36da:	8d 83       	std	Y+5, r24	; 0x05
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	9a 83       	std	Y+2, r25	; 0x02
    36e2:	89 83       	std	Y+1, r24	; 0x01
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <CLCD_vSetPosition+0x14e>
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    36f0:	61 96       	adiw	r28, 0x11	; 17
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	00 d0       	rcall	.+0      	; 0x3708 <CLCD_vSendExtraChar+0x6>
    3708:	0f 92       	push	r0
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	8a 83       	std	Y+2, r24	; 0x02
    3710:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    3712:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    3714:	80 e4       	ldi	r24, 0x40	; 64
    3716:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    371a:	19 82       	std	Y+1, r1	; 0x01
    371c:	0c c0       	rjmp	.+24     	; 0x3736 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	e0 59       	subi	r30, 0x90	; 144
    3728:	fd 4f       	sbci	r31, 0xFD	; 253
    372a:	80 81       	ld	r24, Z
    372c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	8f 5f       	subi	r24, 0xFF	; 255
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	88 30       	cpi	r24, 0x08	; 8
    373a:	88 f3       	brcs	.-30     	; 0x371e <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	6b 81       	ldd	r22, Y+3	; 0x03
    3740:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    3744:	19 82       	std	Y+1, r1	; 0x01
    3746:	06 c0       	rjmp	.+12     	; 0x3754 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	88 30       	cpi	r24, 0x08	; 8
    3758:	b8 f3       	brcs	.-18     	; 0x3748 <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	2e 97       	sbiw	r28, 0x0e	; 14
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    377a:	8c e1       	ldi	r24, 0x1C	; 28
    377c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	a0 e8       	ldi	r26, 0x80	; 128
    3786:	bf e3       	ldi	r27, 0x3F	; 63
    3788:	8b 87       	std	Y+11, r24	; 0x0b
    378a:	9c 87       	std	Y+12, r25	; 0x0c
    378c:	ad 87       	std	Y+13, r26	; 0x0d
    378e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3790:	6b 85       	ldd	r22, Y+11	; 0x0b
    3792:	7c 85       	ldd	r23, Y+12	; 0x0c
    3794:	8d 85       	ldd	r24, Y+13	; 0x0d
    3796:	9e 85       	ldd	r25, Y+14	; 0x0e
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	4a ef       	ldi	r20, 0xFA	; 250
    379e:	54 e4       	ldi	r21, 0x44	; 68
    37a0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	8f 83       	std	Y+7, r24	; 0x07
    37aa:	98 87       	std	Y+8, r25	; 0x08
    37ac:	a9 87       	std	Y+9, r26	; 0x09
    37ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b0:	6f 81       	ldd	r22, Y+7	; 0x07
    37b2:	78 85       	ldd	r23, Y+8	; 0x08
    37b4:	89 85       	ldd	r24, Y+9	; 0x09
    37b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9e 83       	std	Y+6, r25	; 0x06
    37ce:	8d 83       	std	Y+5, r24	; 0x05
    37d0:	3f c0       	rjmp	.+126    	; 0x3850 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    37d2:	6f 81       	ldd	r22, Y+7	; 0x07
    37d4:	78 85       	ldd	r23, Y+8	; 0x08
    37d6:	89 85       	ldd	r24, Y+9	; 0x09
    37d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	3f ef       	ldi	r19, 0xFF	; 255
    37de:	4f e7       	ldi	r20, 0x7F	; 127
    37e0:	57 e4       	ldi	r21, 0x47	; 71
    37e2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    37e6:	18 16       	cp	r1, r24
    37e8:	4c f5       	brge	.+82     	; 0x383c <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e2       	ldi	r20, 0x20	; 32
    37f8:	51 e4       	ldi	r21, 0x41	; 65
    37fa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <CLCD_voidShiftDisplayRight+0xcc>
    3814:	88 ec       	ldi	r24, 0xC8	; 200
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9c 83       	std	Y+4, r25	; 0x04
    381a:	8b 83       	std	Y+3, r24	; 0x03
    381c:	8b 81       	ldd	r24, Y+3	; 0x03
    381e:	9c 81       	ldd	r25, Y+4	; 0x04
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <CLCD_voidShiftDisplayRight+0xba>
    3824:	9c 83       	std	Y+4, r25	; 0x04
    3826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3828:	8d 81       	ldd	r24, Y+5	; 0x05
    382a:	9e 81       	ldd	r25, Y+6	; 0x06
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	9e 83       	std	Y+6, r25	; 0x06
    3830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	69 f7       	brne	.-38     	; 0x3814 <CLCD_voidShiftDisplayRight+0xae>
    383a:	14 c0       	rjmp	.+40     	; 0x3864 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383c:	6f 81       	ldd	r22, Y+7	; 0x07
    383e:	78 85       	ldd	r23, Y+8	; 0x08
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9e 83       	std	Y+6, r25	; 0x06
    384e:	8d 83       	std	Y+5, r24	; 0x05
    3850:	8d 81       	ldd	r24, Y+5	; 0x05
    3852:	9e 81       	ldd	r25, Y+6	; 0x06
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	89 83       	std	Y+1, r24	; 0x01
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <CLCD_voidShiftDisplayRight+0xf6>
    3860:	9a 83       	std	Y+2, r25	; 0x02
    3862:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3864:	2e 96       	adiw	r28, 0x0e	; 14
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	2e 97       	sbiw	r28, 0x0e	; 14
    3880:	0f b6       	in	r0, 0x3f	; 63
    3882:	f8 94       	cli
    3884:	de bf       	out	0x3e, r29	; 62
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    388a:	88 e1       	ldi	r24, 0x18	; 24
    388c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	a0 e8       	ldi	r26, 0x80	; 128
    3896:	bf e3       	ldi	r27, 0x3F	; 63
    3898:	8b 87       	std	Y+11, r24	; 0x0b
    389a:	9c 87       	std	Y+12, r25	; 0x0c
    389c:	ad 87       	std	Y+13, r26	; 0x0d
    389e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a ef       	ldi	r20, 0xFA	; 250
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8f 83       	std	Y+7, r24	; 0x07
    38ba:	98 87       	std	Y+8, r25	; 0x08
    38bc:	a9 87       	std	Y+9, r26	; 0x09
    38be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 e8       	ldi	r20, 0x80	; 128
    38ce:	5f e3       	ldi	r21, 0x3F	; 63
    38d0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    38d4:	88 23       	and	r24, r24
    38d6:	2c f4       	brge	.+10     	; 0x38e2 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
    38e0:	3f c0       	rjmp	.+126    	; 0x3960 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    38e2:	6f 81       	ldd	r22, Y+7	; 0x07
    38e4:	78 85       	ldd	r23, Y+8	; 0x08
    38e6:	89 85       	ldd	r24, Y+9	; 0x09
    38e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	4c f5       	brge	.+82     	; 0x394c <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3900:	9e 85       	ldd	r25, Y+14	; 0x0e
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e2       	ldi	r20, 0x20	; 32
    3908:	51 e4       	ldi	r21, 0x41	; 65
    390a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	9e 83       	std	Y+6, r25	; 0x06
    3920:	8d 83       	std	Y+5, r24	; 0x05
    3922:	0f c0       	rjmp	.+30     	; 0x3942 <CLCD_voidShiftDisplayLeft+0xcc>
    3924:	88 ec       	ldi	r24, 0xC8	; 200
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	9c 83       	std	Y+4, r25	; 0x04
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <CLCD_voidShiftDisplayLeft+0xba>
    3934:	9c 83       	std	Y+4, r25	; 0x04
    3936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3938:	8d 81       	ldd	r24, Y+5	; 0x05
    393a:	9e 81       	ldd	r25, Y+6	; 0x06
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	9e 83       	std	Y+6, r25	; 0x06
    3940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	9e 81       	ldd	r25, Y+6	; 0x06
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	69 f7       	brne	.-38     	; 0x3924 <CLCD_voidShiftDisplayLeft+0xae>
    394a:	14 c0       	rjmp	.+40     	; 0x3974 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394c:	6f 81       	ldd	r22, Y+7	; 0x07
    394e:	78 85       	ldd	r23, Y+8	; 0x08
    3950:	89 85       	ldd	r24, Y+9	; 0x09
    3952:	9a 85       	ldd	r25, Y+10	; 0x0a
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <CLCD_voidShiftDisplayLeft+0xf6>
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3974:	2e 96       	adiw	r28, 0x0e	; 14
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <UserName_Set>:
volatile u8 Check[21] ;
volatile u8 UserName_Check_Flag = 1, PassWord_Check_Flag = 1;
volatile u8 KPD_Press, Error_State = 1;

void UserName_Set(void)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	0f 92       	push	r0
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
	EEPROM_vWrite(EEPROM_USNL_Location, 0x00);
    3990:	83 e1       	ldi	r24, 0x13	; 19
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
	UserName_Length = EEPROM_vRead(EEPROM_USNL_Location);
    399a:	83 e1       	ldi	r24, 0x13	; 19
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    39a2:	80 93 85 02 	sts	0x0285, r24
	CLCD_vClearScreen();
    39a6:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	CLCD_vSetPosition(1, 5);
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	65 e0       	ldi	r22, 0x05	; 5
    39ae:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString("Set UserName");
    39b2:	80 e6       	ldi	r24, 0x60	; 96
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString("Maximum char : 20");
    39c2:	8d e6       	ldi	r24, 0x6D	; 109
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSendExtraChar(4, 15);  // To Send Enter Symbol
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	6f e0       	ldi	r22, 0x0F	; 15
    39ce:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
	CLCD_vSetPosition(4, 16);
    39d2:	84 e0       	ldi	r24, 0x04	; 4
    39d4:	60 e1       	ldi	r22, 0x10	; 16
    39d6:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString(" : OK");
    39da:	8f e7       	ldi	r24, 0x7F	; 127
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>

	CLCD_vSetPosition(3, 1);
    39e2:	83 e0       	ldi	r24, 0x03	; 3
    39e4:	61 e0       	ldi	r22, 0x01	; 1
    39e6:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	UserName_Length = 0;
    39ea:	10 92 85 02 	sts	0x0285, r1
	/*Get username from user*/
	do
	{
		//if username is less than 5 char
		if (UserName_Length != 0)
    39ee:	80 91 85 02 	lds	r24, 0x0285
    39f2:	88 23       	and	r24, r24
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <UserName_Set+0x72>
    39f6:	50 c0       	rjmp	.+160    	; 0x3a98 <UserName_Set+0x112>
		{
			CLCD_vClearScreen();
    39f8:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
			CLCD_vSendString ("UserName Must be");
    39fc:	85 e8       	ldi	r24, 0x85	; 133
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	61 e0       	ldi	r22, 0x01	; 1
    3a08:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("More than 5 Char");
    3a0c:	86 e9       	ldi	r24, 0x96	; 150
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSendExtraChar(4, 1);
    3a14:	84 e0       	ldi	r24, 0x04	; 4
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
			CLCD_vSetPosition(4, 2);
    3a1c:	84 e0       	ldi	r24, 0x04	; 4
    3a1e:	62 e0       	ldi	r22, 0x02	; 2
    3a20:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString(" : Exit");
    3a24:	87 ea       	ldi	r24, 0xA7	; 167
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			while(1)
			{
				//wait in error page until press enter
				Error_State = USART_u8ReceiveData(&KPD_Press);
    3a2c:	8c e9       	ldi	r24, 0x9C	; 156
    3a2e:	92 e0       	ldi	r25, 0x02	; 2
    3a30:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    3a34:	80 93 7a 02 	sts	0x027A, r24
				if (Error_State == OK)
    3a38:	80 91 7a 02 	lds	r24, 0x027A
    3a3c:	88 23       	and	r24, r24
    3a3e:	b1 f7       	brne	.-20     	; 0x3a2c <UserName_Set+0xa6>
				{
					if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3a40:	80 91 9c 02 	lds	r24, 0x029C
    3a44:	8d 30       	cpi	r24, 0x0D	; 13
    3a46:	21 f0       	breq	.+8      	; 0x3a50 <UserName_Set+0xca>
    3a48:	80 91 9c 02 	lds	r24, 0x029C
    3a4c:	8f 30       	cpi	r24, 0x0F	; 15
    3a4e:	71 f7       	brne	.-36     	; 0x3a2c <UserName_Set+0xa6>
					{
						break;
					}
				}
			}
			CLCD_vClearScreen();
    3a50:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
			CLCD_vSetPosition(1, 5);
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	65 e0       	ldi	r22, 0x05	; 5
    3a58:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("Set UserName");
    3a5c:	80 e6       	ldi	r24, 0x60	; 96
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	61 e0       	ldi	r22, 0x01	; 1
    3a68:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("Maximum char : 20");
    3a6c:	8d e6       	ldi	r24, 0x6D	; 109
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSendExtraChar(4, 15); // To Send Enter Symbol
    3a74:	84 e0       	ldi	r24, 0x04	; 4
    3a76:	6f e0       	ldi	r22, 0x0F	; 15
    3a78:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
			CLCD_vSetPosition(4, 16);
    3a7c:	84 e0       	ldi	r24, 0x04	; 4
    3a7e:	60 e1       	ldi	r22, 0x10	; 16
    3a80:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString(" : OK");
    3a84:	8f e7       	ldi	r24, 0x7F	; 127
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    3a8c:	83 e0       	ldi	r24, 0x03	; 3
    3a8e:	61 e0       	ldi	r22, 0x01	; 1
    3a90:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			UserName_Length = 0;
    3a94:	10 92 85 02 	sts	0x0285, r1
		}
		CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    3a98:	8e e0       	ldi	r24, 0x0E	; 14
    3a9a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
		//get user name from user by using Keypoard
		while (1)
		{
			//get input from Laptop
			Error_State = USART_u8ReceiveData(&KPD_Press);
    3a9e:	8c e9       	ldi	r24, 0x9C	; 156
    3aa0:	92 e0       	ldi	r25, 0x02	; 2
    3aa2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    3aa6:	80 93 7a 02 	sts	0x027A, r24
			//if user name length is valid
			if (Error_State == OK && UserName_Length == 0)
    3aaa:	80 91 7a 02 	lds	r24, 0x027A
    3aae:	88 23       	and	r24, r24
    3ab0:	21 f5       	brne	.+72     	; 0x3afa <UserName_Set+0x174>
    3ab2:	80 91 85 02 	lds	r24, 0x0285
    3ab6:	88 23       	and	r24, r24
    3ab8:	01 f5       	brne	.+64     	; 0x3afa <UserName_Set+0x174>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3aba:	80 91 9c 02 	lds	r24, 0x029C
    3abe:	8d 30       	cpi	r24, 0x0D	; 13
    3ac0:	71 f3       	breq	.-36     	; 0x3a9e <UserName_Set+0x118>
    3ac2:	80 91 9c 02 	lds	r24, 0x029C
    3ac6:	8f 30       	cpi	r24, 0x0F	; 15
    3ac8:	51 f3       	breq	.-44     	; 0x3a9e <UserName_Set+0x118>
				{

				}
				else if (KPD_Press == 0x08)
    3aca:	80 91 9c 02 	lds	r24, 0x029C
    3ace:	88 30       	cpi	r24, 0x08	; 8
    3ad0:	31 f3       	breq	.-52     	; 0x3a9e <UserName_Set+0x118>
				{

				}
				else
				{
					CLCD_vSendData(KPD_Press);
    3ad2:	80 91 9c 02 	lds	r24, 0x029C
    3ad6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
					EEPROM_vWrite(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    3ada:	80 91 85 02 	lds	r24, 0x0285
    3ade:	88 2f       	mov	r24, r24
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	81 96       	adiw	r24, 0x21	; 33
    3ae4:	20 91 9c 02 	lds	r18, 0x029C
    3ae8:	62 2f       	mov	r22, r18
    3aea:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
					UserName_Length++;
    3aee:	80 91 85 02 	lds	r24, 0x0285
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	80 93 85 02 	sts	0x0285, r24
    3af8:	d2 cf       	rjmp	.-92     	; 0x3a9e <UserName_Set+0x118>
				}
			}
			else if (Error_State == OK && UserName_Length < 20)
    3afa:	80 91 7a 02 	lds	r24, 0x027A
    3afe:	88 23       	and	r24, r24
    3b00:	81 f5       	brne	.+96     	; 0x3b62 <UserName_Set+0x1dc>
    3b02:	80 91 85 02 	lds	r24, 0x0285
    3b06:	84 31       	cpi	r24, 0x14	; 20
    3b08:	60 f5       	brcc	.+88     	; 0x3b62 <UserName_Set+0x1dc>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3b0a:	80 91 9c 02 	lds	r24, 0x029C
    3b0e:	8d 30       	cpi	r24, 0x0D	; 13
    3b10:	21 f0       	breq	.+8      	; 0x3b1a <UserName_Set+0x194>
    3b12:	80 91 9c 02 	lds	r24, 0x029C
    3b16:	8f 30       	cpi	r24, 0x0F	; 15
    3b18:	21 f4       	brne	.+8      	; 0x3b22 <UserName_Set+0x19c>
				{
					CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3b1a:	8c e0       	ldi	r24, 0x0C	; 12
    3b1c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3b20:	43 c0       	rjmp	.+134    	; 0x3ba8 <UserName_Set+0x222>
					break;
				}
				else if (KPD_Press == 0x08)
    3b22:	80 91 9c 02 	lds	r24, 0x029C
    3b26:	88 30       	cpi	r24, 0x08	; 8
    3b28:	41 f4       	brne	.+16     	; 0x3b3a <UserName_Set+0x1b4>
				{
					Clear_Char();
    3b2a:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
					UserName_Length--;
    3b2e:	80 91 85 02 	lds	r24, 0x0285
    3b32:	81 50       	subi	r24, 0x01	; 1
    3b34:	80 93 85 02 	sts	0x0285, r24
    3b38:	b2 cf       	rjmp	.-156    	; 0x3a9e <UserName_Set+0x118>
				}
				else
				{
					CLCD_vSendData(KPD_Press);
    3b3a:	80 91 9c 02 	lds	r24, 0x029C
    3b3e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
					EEPROM_vWrite(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    3b42:	80 91 85 02 	lds	r24, 0x0285
    3b46:	88 2f       	mov	r24, r24
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	81 96       	adiw	r24, 0x21	; 33
    3b4c:	20 91 9c 02 	lds	r18, 0x029C
    3b50:	62 2f       	mov	r22, r18
    3b52:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
					UserName_Length++;
    3b56:	80 91 85 02 	lds	r24, 0x0285
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	80 93 85 02 	sts	0x0285, r24
    3b60:	9e cf       	rjmp	.-196    	; 0x3a9e <UserName_Set+0x118>
				}
			}
			//if user name length is more than 20 do no thing exept enter and delete
			else if (Error_State == OK && UserName_Length >= 20)
    3b62:	80 91 7a 02 	lds	r24, 0x027A
    3b66:	88 23       	and	r24, r24
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <UserName_Set+0x1e6>
    3b6a:	99 cf       	rjmp	.-206    	; 0x3a9e <UserName_Set+0x118>
    3b6c:	80 91 85 02 	lds	r24, 0x0285
    3b70:	84 31       	cpi	r24, 0x14	; 20
    3b72:	08 f4       	brcc	.+2      	; 0x3b76 <UserName_Set+0x1f0>
    3b74:	94 cf       	rjmp	.-216    	; 0x3a9e <UserName_Set+0x118>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3b76:	80 91 9c 02 	lds	r24, 0x029C
    3b7a:	8d 30       	cpi	r24, 0x0D	; 13
    3b7c:	21 f0       	breq	.+8      	; 0x3b86 <UserName_Set+0x200>
    3b7e:	80 91 9c 02 	lds	r24, 0x029C
    3b82:	8f 30       	cpi	r24, 0x0F	; 15
    3b84:	21 f4       	brne	.+8      	; 0x3b8e <UserName_Set+0x208>
				{
					CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3b86:	8c e0       	ldi	r24, 0x0C	; 12
    3b88:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3b8c:	0d c0       	rjmp	.+26     	; 0x3ba8 <UserName_Set+0x222>
					break;
				}
				else if (KPD_Press == 0x08)
    3b8e:	80 91 9c 02 	lds	r24, 0x029C
    3b92:	88 30       	cpi	r24, 0x08	; 8
    3b94:	09 f0       	breq	.+2      	; 0x3b98 <UserName_Set+0x212>
    3b96:	83 cf       	rjmp	.-250    	; 0x3a9e <UserName_Set+0x118>
				{
					Clear_Char();
    3b98:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
					UserName_Length--;
    3b9c:	80 91 85 02 	lds	r24, 0x0285
    3ba0:	81 50       	subi	r24, 0x01	; 1
    3ba2:	80 93 85 02 	sts	0x0285, r24
    3ba6:	7b cf       	rjmp	.-266    	; 0x3a9e <UserName_Set+0x118>
			else
			{

			}
		}
	}while(UserName_Length <= 5);
    3ba8:	80 91 85 02 	lds	r24, 0x0285
    3bac:	86 30       	cpi	r24, 0x06	; 6
    3bae:	08 f4       	brcc	.+2      	; 0x3bb2 <UserName_Set+0x22c>
    3bb0:	1e cf       	rjmp	.-452    	; 0x39ee <UserName_Set+0x68>
	/*___________________________________________________________________________________________________________________*/

	for (u8 i = 0; i < 20 - (UserName_Length - 1); i++)
    3bb2:	19 82       	std	Y+1, r1	; 0x01
    3bb4:	0d c0       	rjmp	.+26     	; 0x3bd0 <UserName_Set+0x24a>
	{
		EEPROM_vWrite(EEPROM_UserNameEndLocation - i, 0xFF);
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	28 2f       	mov	r18, r24
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	80 e4       	ldi	r24, 0x40	; 64
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	82 1b       	sub	r24, r18
    3bc2:	93 0b       	sbc	r25, r19
    3bc4:	6f ef       	ldi	r22, 0xFF	; 255
    3bc6:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
			}
		}
	}while(UserName_Length <= 5);
	/*___________________________________________________________________________________________________________________*/

	for (u8 i = 0; i < 20 - (UserName_Length - 1); i++)
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	48 2f       	mov	r20, r24
    3bd4:	50 e0       	ldi	r21, 0x00	; 0
    3bd6:	80 91 85 02 	lds	r24, 0x0285
    3bda:	28 2f       	mov	r18, r24
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	85 e1       	ldi	r24, 0x15	; 21
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	82 1b       	sub	r24, r18
    3be4:	93 0b       	sbc	r25, r19
    3be6:	48 17       	cp	r20, r24
    3be8:	59 07       	cpc	r21, r25
    3bea:	2c f3       	brlt	.-54     	; 0x3bb6 <UserName_Set+0x230>
	{
		EEPROM_vWrite(EEPROM_UserNameEndLocation - i, 0xFF);
	}
	EEPROM_vWrite(EEPROM_UserNameStatus, 0x00);
    3bec:	80 e1       	ldi	r24, 0x10	; 16
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_USNL_Location, UserName_Length);
    3bf6:	20 91 85 02 	lds	r18, 0x0285
    3bfa:	83 e1       	ldi	r24, 0x13	; 19
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	62 2f       	mov	r22, r18
    3c00:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <PassWord_Set>:

//======================================================================================================================================//

void PassWord_Set(void)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	0f 92       	push	r0
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
	CLCD_vClearScreen();
    3c16:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	CLCD_vSetPosition(1, 5);
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	65 e0       	ldi	r22, 0x05	; 5
    3c1e:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString("Set PassWord");
    3c22:	8f ea       	ldi	r24, 0xAF	; 175
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	61 e0       	ldi	r22, 0x01	; 1
    3c2e:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString("Maximum char : 20");
    3c32:	8d e6       	ldi	r24, 0x6D	; 109
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSendExtraChar(4, 15);  // To Send Enter Symbol
    3c3a:	84 e0       	ldi	r24, 0x04	; 4
    3c3c:	6f e0       	ldi	r22, 0x0F	; 15
    3c3e:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
	CLCD_vSetPosition(4, 16);
    3c42:	84 e0       	ldi	r24, 0x04	; 4
    3c44:	60 e1       	ldi	r22, 0x10	; 16
    3c46:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString(" : OK");
    3c4a:	8f e7       	ldi	r24, 0x7F	; 127
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>

	CLCD_vSetPosition(3, 1);
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	PassWord_Length = 0;
    3c5a:	10 92 86 02 	sts	0x0286, r1
	/*Get username from user*/
	do
	{
		//if username is less than 5 char
		if (PassWord_Length != 0)
    3c5e:	80 91 86 02 	lds	r24, 0x0286
    3c62:	88 23       	and	r24, r24
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <PassWord_Set+0x5c>
    3c66:	50 c0       	rjmp	.+160    	; 0x3d08 <PassWord_Set+0xfc>
		{
			CLCD_vClearScreen();
    3c68:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
			CLCD_vSendString ("PassWord Must be");
    3c6c:	8c eb       	ldi	r24, 0xBC	; 188
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	61 e0       	ldi	r22, 0x01	; 1
    3c78:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("More than 5 Char");
    3c7c:	86 e9       	ldi	r24, 0x96	; 150
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSendExtraChar(4, 1);
    3c84:	84 e0       	ldi	r24, 0x04	; 4
    3c86:	61 e0       	ldi	r22, 0x01	; 1
    3c88:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
			CLCD_vSetPosition(4, 2);
    3c8c:	84 e0       	ldi	r24, 0x04	; 4
    3c8e:	62 e0       	ldi	r22, 0x02	; 2
    3c90:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString(" : Exit");
    3c94:	87 ea       	ldi	r24, 0xA7	; 167
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			while(1)
			{
				Error_State = USART_u8ReceiveData(&KPD_Press);
    3c9c:	8c e9       	ldi	r24, 0x9C	; 156
    3c9e:	92 e0       	ldi	r25, 0x02	; 2
    3ca0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    3ca4:	80 93 7a 02 	sts	0x027A, r24
				if (Error_State == OK)
    3ca8:	80 91 7a 02 	lds	r24, 0x027A
    3cac:	88 23       	and	r24, r24
    3cae:	b1 f7       	brne	.-20     	; 0x3c9c <PassWord_Set+0x90>
				{
					if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3cb0:	80 91 9c 02 	lds	r24, 0x029C
    3cb4:	8d 30       	cpi	r24, 0x0D	; 13
    3cb6:	21 f0       	breq	.+8      	; 0x3cc0 <PassWord_Set+0xb4>
    3cb8:	80 91 9c 02 	lds	r24, 0x029C
    3cbc:	8f 30       	cpi	r24, 0x0F	; 15
    3cbe:	71 f7       	brne	.-36     	; 0x3c9c <PassWord_Set+0x90>
					{
						break;
					}
				}
			}
			CLCD_vClearScreen();
    3cc0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
			CLCD_vSetPosition(1, 5);
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	65 e0       	ldi	r22, 0x05	; 5
    3cc8:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("Set PassWord");
    3ccc:	8f ea       	ldi	r24, 0xAF	; 175
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(2, 1);
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("Maximum char : 20");
    3cdc:	8d e6       	ldi	r24, 0x6D	; 109
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSendExtraChar(4, 15); // To Send Enter Symbol
    3ce4:	84 e0       	ldi	r24, 0x04	; 4
    3ce6:	6f e0       	ldi	r22, 0x0F	; 15
    3ce8:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
			CLCD_vSetPosition(4, 16);
    3cec:	84 e0       	ldi	r24, 0x04	; 4
    3cee:	60 e1       	ldi	r22, 0x10	; 16
    3cf0:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString(" : OK");
    3cf4:	8f e7       	ldi	r24, 0x7F	; 127
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSetPosition(3, 1);
    3cfc:	83 e0       	ldi	r24, 0x03	; 3
    3cfe:	61 e0       	ldi	r22, 0x01	; 1
    3d00:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			PassWord_Length = 0;
    3d04:	10 92 86 02 	sts	0x0286, r1
		}
		CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    3d08:	8e e0       	ldi	r24, 0x0E	; 14
    3d0a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
		//get user name from user by using Keypoard
		while (1)
		{
			//get input from Laptop
			Error_State = USART_u8ReceiveData(&KPD_Press);
    3d0e:	8c e9       	ldi	r24, 0x9C	; 156
    3d10:	92 e0       	ldi	r25, 0x02	; 2
    3d12:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    3d16:	80 93 7a 02 	sts	0x027A, r24
			//if user name length is valid
			if (Error_State == OK && PassWord_Length == 0)
    3d1a:	80 91 7a 02 	lds	r24, 0x027A
    3d1e:	88 23       	and	r24, r24
    3d20:	29 f5       	brne	.+74     	; 0x3d6c <PassWord_Set+0x160>
    3d22:	80 91 86 02 	lds	r24, 0x0286
    3d26:	88 23       	and	r24, r24
    3d28:	09 f5       	brne	.+66     	; 0x3d6c <PassWord_Set+0x160>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3d2a:	80 91 9c 02 	lds	r24, 0x029C
    3d2e:	8d 30       	cpi	r24, 0x0D	; 13
    3d30:	71 f3       	breq	.-36     	; 0x3d0e <PassWord_Set+0x102>
    3d32:	80 91 9c 02 	lds	r24, 0x029C
    3d36:	8f 30       	cpi	r24, 0x0F	; 15
    3d38:	51 f3       	breq	.-44     	; 0x3d0e <PassWord_Set+0x102>
				{

				}
				else if (KPD_Press == 0x08)
    3d3a:	80 91 9c 02 	lds	r24, 0x029C
    3d3e:	88 30       	cpi	r24, 0x08	; 8
    3d40:	31 f3       	breq	.-52     	; 0x3d0e <PassWord_Set+0x102>
				{

				}
				else
				{
					CLCD_vSendData(KPD_Press);
    3d42:	80 91 9c 02 	lds	r24, 0x029C
    3d46:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
					EEPROM_vWrite(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    3d4a:	80 91 86 02 	lds	r24, 0x0286
    3d4e:	88 2f       	mov	r24, r24
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	8f 5b       	subi	r24, 0xBF	; 191
    3d54:	9f 4f       	sbci	r25, 0xFF	; 255
    3d56:	20 91 9c 02 	lds	r18, 0x029C
    3d5a:	62 2f       	mov	r22, r18
    3d5c:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
					PassWord_Length++;
    3d60:	80 91 86 02 	lds	r24, 0x0286
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	80 93 86 02 	sts	0x0286, r24
    3d6a:	d1 cf       	rjmp	.-94     	; 0x3d0e <PassWord_Set+0x102>
				}
			}
			else if (Error_State == OK && PassWord_Length < 20)
    3d6c:	80 91 7a 02 	lds	r24, 0x027A
    3d70:	88 23       	and	r24, r24
    3d72:	89 f5       	brne	.+98     	; 0x3dd6 <PassWord_Set+0x1ca>
    3d74:	80 91 86 02 	lds	r24, 0x0286
    3d78:	84 31       	cpi	r24, 0x14	; 20
    3d7a:	68 f5       	brcc	.+90     	; 0x3dd6 <PassWord_Set+0x1ca>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3d7c:	80 91 9c 02 	lds	r24, 0x029C
    3d80:	8d 30       	cpi	r24, 0x0D	; 13
    3d82:	21 f0       	breq	.+8      	; 0x3d8c <PassWord_Set+0x180>
    3d84:	80 91 9c 02 	lds	r24, 0x029C
    3d88:	8f 30       	cpi	r24, 0x0F	; 15
    3d8a:	21 f4       	brne	.+8      	; 0x3d94 <PassWord_Set+0x188>
				{
					CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3d8c:	8c e0       	ldi	r24, 0x0C	; 12
    3d8e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3d92:	44 c0       	rjmp	.+136    	; 0x3e1c <PassWord_Set+0x210>
					break;
				}
				else if (KPD_Press == 0x08)
    3d94:	80 91 9c 02 	lds	r24, 0x029C
    3d98:	88 30       	cpi	r24, 0x08	; 8
    3d9a:	41 f4       	brne	.+16     	; 0x3dac <PassWord_Set+0x1a0>
				{
					Clear_Char();
    3d9c:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
					PassWord_Length--;
    3da0:	80 91 86 02 	lds	r24, 0x0286
    3da4:	81 50       	subi	r24, 0x01	; 1
    3da6:	80 93 86 02 	sts	0x0286, r24
    3daa:	b1 cf       	rjmp	.-158    	; 0x3d0e <PassWord_Set+0x102>
				}
				else
				{
					CLCD_vSendData(KPD_Press);
    3dac:	80 91 9c 02 	lds	r24, 0x029C
    3db0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
					EEPROM_vWrite(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    3db4:	80 91 86 02 	lds	r24, 0x0286
    3db8:	88 2f       	mov	r24, r24
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	8f 5b       	subi	r24, 0xBF	; 191
    3dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc0:	20 91 9c 02 	lds	r18, 0x029C
    3dc4:	62 2f       	mov	r22, r18
    3dc6:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
					PassWord_Length++;
    3dca:	80 91 86 02 	lds	r24, 0x0286
    3dce:	8f 5f       	subi	r24, 0xFF	; 255
    3dd0:	80 93 86 02 	sts	0x0286, r24
    3dd4:	9c cf       	rjmp	.-200    	; 0x3d0e <PassWord_Set+0x102>
				}
			}
			//if user name length is more than 20 do no thing exept enter and delete
			else if (Error_State == OK && PassWord_Length >= 20)
    3dd6:	80 91 7a 02 	lds	r24, 0x027A
    3dda:	88 23       	and	r24, r24
    3ddc:	09 f0       	breq	.+2      	; 0x3de0 <PassWord_Set+0x1d4>
    3dde:	97 cf       	rjmp	.-210    	; 0x3d0e <PassWord_Set+0x102>
    3de0:	80 91 86 02 	lds	r24, 0x0286
    3de4:	84 31       	cpi	r24, 0x14	; 20
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <PassWord_Set+0x1de>
    3de8:	92 cf       	rjmp	.-220    	; 0x3d0e <PassWord_Set+0x102>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3dea:	80 91 9c 02 	lds	r24, 0x029C
    3dee:	8d 30       	cpi	r24, 0x0D	; 13
    3df0:	21 f0       	breq	.+8      	; 0x3dfa <PassWord_Set+0x1ee>
    3df2:	80 91 9c 02 	lds	r24, 0x029C
    3df6:	8f 30       	cpi	r24, 0x0F	; 15
    3df8:	21 f4       	brne	.+8      	; 0x3e02 <PassWord_Set+0x1f6>
				{
					CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3dfa:	8c e0       	ldi	r24, 0x0C	; 12
    3dfc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3e00:	0d c0       	rjmp	.+26     	; 0x3e1c <PassWord_Set+0x210>
					break;
				}
				else if (KPD_Press == 0x08)
    3e02:	80 91 9c 02 	lds	r24, 0x029C
    3e06:	88 30       	cpi	r24, 0x08	; 8
    3e08:	09 f0       	breq	.+2      	; 0x3e0c <PassWord_Set+0x200>
    3e0a:	81 cf       	rjmp	.-254    	; 0x3d0e <PassWord_Set+0x102>
				{
					Clear_Char();
    3e0c:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
					PassWord_Length--;
    3e10:	80 91 86 02 	lds	r24, 0x0286
    3e14:	81 50       	subi	r24, 0x01	; 1
    3e16:	80 93 86 02 	sts	0x0286, r24
    3e1a:	79 cf       	rjmp	.-270    	; 0x3d0e <PassWord_Set+0x102>
			else
			{

			}
		}
	}while(PassWord_Length <= 5);
    3e1c:	80 91 86 02 	lds	r24, 0x0286
    3e20:	86 30       	cpi	r24, 0x06	; 6
    3e22:	08 f4       	brcc	.+2      	; 0x3e26 <PassWord_Set+0x21a>
    3e24:	1c cf       	rjmp	.-456    	; 0x3c5e <PassWord_Set+0x52>
	/*___________________________________________________________________________________________________________________*/

	for (u8 i = 0; i < 20 - (PassWord_Length - 1); i++)
    3e26:	19 82       	std	Y+1, r1	; 0x01
    3e28:	0d c0       	rjmp	.+26     	; 0x3e44 <PassWord_Set+0x238>
	{
		EEPROM_vWrite(EEPROM_PassWordEndLocation - i, 0xFF);
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	28 2f       	mov	r18, r24
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	80 e6       	ldi	r24, 0x60	; 96
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	82 1b       	sub	r24, r18
    3e36:	93 0b       	sbc	r25, r19
    3e38:	6f ef       	ldi	r22, 0xFF	; 255
    3e3a:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
			}
		}
	}while(PassWord_Length <= 5);
	/*___________________________________________________________________________________________________________________*/

	for (u8 i = 0; i < 20 - (PassWord_Length - 1); i++)
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	48 2f       	mov	r20, r24
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	80 91 86 02 	lds	r24, 0x0286
    3e4e:	28 2f       	mov	r18, r24
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	85 e1       	ldi	r24, 0x15	; 21
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	82 1b       	sub	r24, r18
    3e58:	93 0b       	sbc	r25, r19
    3e5a:	48 17       	cp	r20, r24
    3e5c:	59 07       	cpc	r21, r25
    3e5e:	2c f3       	brlt	.-54     	; 0x3e2a <PassWord_Set+0x21e>
	{
		EEPROM_vWrite(EEPROM_PassWordEndLocation - i, 0xFF);
	}
	EEPROM_vWrite(EEPROM_PassWordStatus, 0x00);
    3e60:	81 e1       	ldi	r24, 0x11	; 17
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_PWL_Location, PassWord_Length);
    3e6a:	20 91 86 02 	lds	r18, 0x0286
    3e6e:	84 e1       	ldi	r24, 0x14	; 20
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	62 2f       	mov	r22, r18
    3e74:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <UserName_Check>:

//======================================================================================================================================//

void UserName_Check(void)
{
    3e80:	1f 93       	push	r17
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	00 d0       	rcall	.+0      	; 0x3e88 <UserName_Check+0x8>
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
	CLCD_vClearScreen();
    3e8c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	CLCD_vSendString("Check UserName");
    3e90:	8d ec       	ldi	r24, 0xCD	; 205
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    3e98:	82 e0       	ldi	r24, 0x02	; 2
    3e9a:	61 e0       	ldi	r22, 0x01	; 1
    3e9c:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    3ea0:	8e e0       	ldi	r24, 0x0E	; 14
    3ea2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
	u8 CheckLength = 0;
    3ea6:	1a 82       	std	Y+2, r1	; 0x02
	UserName_Check_Flag = 1;
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	80 93 78 02 	sts	0x0278, r24
	while(1)
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    3eae:	8c e9       	ldi	r24, 0x9C	; 156
    3eb0:	92 e0       	ldi	r25, 0x02	; 2
    3eb2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    3eb6:	80 93 7a 02 	sts	0x027A, r24
		//if user name length is valid
		if (Error_State == OK && CheckLength == 0)
    3eba:	80 91 7a 02 	lds	r24, 0x027A
    3ebe:	88 23       	and	r24, r24
    3ec0:	01 f5       	brne	.+64     	; 0x3f02 <UserName_Check+0x82>
    3ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec4:	88 23       	and	r24, r24
    3ec6:	e9 f4       	brne	.+58     	; 0x3f02 <UserName_Check+0x82>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3ec8:	80 91 9c 02 	lds	r24, 0x029C
    3ecc:	8d 30       	cpi	r24, 0x0D	; 13
    3ece:	79 f3       	breq	.-34     	; 0x3eae <UserName_Check+0x2e>
    3ed0:	80 91 9c 02 	lds	r24, 0x029C
    3ed4:	8f 30       	cpi	r24, 0x0F	; 15
    3ed6:	59 f3       	breq	.-42     	; 0x3eae <UserName_Check+0x2e>
			{

			}
			else if (KPD_Press == 0x08)
    3ed8:	80 91 9c 02 	lds	r24, 0x029C
    3edc:	88 30       	cpi	r24, 0x08	; 8
    3ede:	39 f3       	breq	.-50     	; 0x3eae <UserName_Check+0x2e>
			{

			}
			else
			{
				CLCD_vSendData(KPD_Press);
    3ee0:	80 91 9c 02 	lds	r24, 0x029C
    3ee4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
				Check[CheckLength] = KPD_Press;
    3ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eea:	88 2f       	mov	r24, r24
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	20 91 9c 02 	lds	r18, 0x029C
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	e9 57       	subi	r30, 0x79	; 121
    3ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef8:	20 83       	st	Z, r18
				CheckLength++;
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	8f 5f       	subi	r24, 0xFF	; 255
    3efe:	8a 83       	std	Y+2, r24	; 0x02
    3f00:	d6 cf       	rjmp	.-84     	; 0x3eae <UserName_Check+0x2e>
			}
		}
		else if (Error_State == OK && CheckLength < 20)
    3f02:	80 91 7a 02 	lds	r24, 0x027A
    3f06:	88 23       	and	r24, r24
    3f08:	51 f5       	brne	.+84     	; 0x3f5e <UserName_Check+0xde>
    3f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0c:	84 31       	cpi	r24, 0x14	; 20
    3f0e:	38 f5       	brcc	.+78     	; 0x3f5e <UserName_Check+0xde>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3f10:	80 91 9c 02 	lds	r24, 0x029C
    3f14:	8d 30       	cpi	r24, 0x0D	; 13
    3f16:	21 f0       	breq	.+8      	; 0x3f20 <UserName_Check+0xa0>
    3f18:	80 91 9c 02 	lds	r24, 0x029C
    3f1c:	8f 30       	cpi	r24, 0x0F	; 15
    3f1e:	21 f4       	brne	.+8      	; 0x3f28 <UserName_Check+0xa8>
			{
				CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3f20:	8c e0       	ldi	r24, 0x0C	; 12
    3f22:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3f26:	3b c0       	rjmp	.+118    	; 0x3f9e <UserName_Check+0x11e>
				break;
			}
			else if (KPD_Press == 0x08)
    3f28:	80 91 9c 02 	lds	r24, 0x029C
    3f2c:	88 30       	cpi	r24, 0x08	; 8
    3f2e:	31 f4       	brne	.+12     	; 0x3f3c <UserName_Check+0xbc>
			{
				Clear_Char();
    3f30:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
				CheckLength--;
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	81 50       	subi	r24, 0x01	; 1
    3f38:	8a 83       	std	Y+2, r24	; 0x02
    3f3a:	b9 cf       	rjmp	.-142    	; 0x3eae <UserName_Check+0x2e>
			}
			else
			{
				CLCD_vSendData(KPD_Press);
    3f3c:	80 91 9c 02 	lds	r24, 0x029C
    3f40:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
				Check[CheckLength] = KPD_Press;
    3f44:	8a 81       	ldd	r24, Y+2	; 0x02
    3f46:	88 2f       	mov	r24, r24
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	20 91 9c 02 	lds	r18, 0x029C
    3f4e:	fc 01       	movw	r30, r24
    3f50:	e9 57       	subi	r30, 0x79	; 121
    3f52:	fd 4f       	sbci	r31, 0xFD	; 253
    3f54:	20 83       	st	Z, r18
				CheckLength++;
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	8f 5f       	subi	r24, 0xFF	; 255
    3f5a:	8a 83       	std	Y+2, r24	; 0x02
    3f5c:	a8 cf       	rjmp	.-176    	; 0x3eae <UserName_Check+0x2e>
			}
		}
		//if user name length is more than 20 do no thing exept enter and delete
		else if (Error_State == OK && CheckLength>= 20)
    3f5e:	80 91 7a 02 	lds	r24, 0x027A
    3f62:	88 23       	and	r24, r24
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <UserName_Check+0xe8>
    3f66:	a3 cf       	rjmp	.-186    	; 0x3eae <UserName_Check+0x2e>
    3f68:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6a:	84 31       	cpi	r24, 0x14	; 20
    3f6c:	08 f4       	brcc	.+2      	; 0x3f70 <UserName_Check+0xf0>
    3f6e:	9f cf       	rjmp	.-194    	; 0x3eae <UserName_Check+0x2e>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3f70:	80 91 9c 02 	lds	r24, 0x029C
    3f74:	8d 30       	cpi	r24, 0x0D	; 13
    3f76:	21 f0       	breq	.+8      	; 0x3f80 <UserName_Check+0x100>
    3f78:	80 91 9c 02 	lds	r24, 0x029C
    3f7c:	8f 30       	cpi	r24, 0x0F	; 15
    3f7e:	21 f4       	brne	.+8      	; 0x3f88 <UserName_Check+0x108>
			{
				CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    3f80:	8c e0       	ldi	r24, 0x0C	; 12
    3f82:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    3f86:	0b c0       	rjmp	.+22     	; 0x3f9e <UserName_Check+0x11e>
				break;
			}
			else if (KPD_Press == 0x08)
    3f88:	80 91 9c 02 	lds	r24, 0x029C
    3f8c:	88 30       	cpi	r24, 0x08	; 8
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <UserName_Check+0x112>
    3f90:	8e cf       	rjmp	.-228    	; 0x3eae <UserName_Check+0x2e>
			{
				Clear_Char();
    3f92:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
				CheckLength--;
    3f96:	8a 81       	ldd	r24, Y+2	; 0x02
    3f98:	81 50       	subi	r24, 0x01	; 1
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
    3f9c:	88 cf       	rjmp	.-240    	; 0x3eae <UserName_Check+0x2e>
	}

	/*___________________________________________________________________________________________________________________*/

	//Check if UserName is correct or not
	if (CheckLength == UserName_Length)
    3f9e:	90 91 85 02 	lds	r25, 0x0285
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	89 17       	cp	r24, r25
    3fa6:	e1 f4       	brne	.+56     	; 0x3fe0 <UserName_Check+0x160>
	{
		for(u8 i = 0; i < UserName_Length; i++)
    3fa8:	19 82       	std	Y+1, r1	; 0x01
    3faa:	14 c0       	rjmp	.+40     	; 0x3fd4 <UserName_Check+0x154>
		{
			if (Check[i] != EEPROM_vRead(EEPROM_UserNameStartLocation + i))
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	88 2f       	mov	r24, r24
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	e9 57       	subi	r30, 0x79	; 121
    3fb6:	fd 4f       	sbci	r31, 0xFD	; 253
    3fb8:	10 81       	ld	r17, Z
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	88 2f       	mov	r24, r24
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	81 96       	adiw	r24, 0x21	; 33
    3fc2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    3fc6:	18 17       	cp	r17, r24
    3fc8:	11 f0       	breq	.+4      	; 0x3fce <UserName_Check+0x14e>
			{
				UserName_Check_Flag = 0;
    3fca:	10 92 78 02 	sts	0x0278, r1
	/*___________________________________________________________________________________________________________________*/

	//Check if UserName is correct or not
	if (CheckLength == UserName_Length)
	{
		for(u8 i = 0; i < UserName_Length; i++)
    3fce:	89 81       	ldd	r24, Y+1	; 0x01
    3fd0:	8f 5f       	subi	r24, 0xFF	; 255
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    3fd4:	90 91 85 02 	lds	r25, 0x0285
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	89 17       	cp	r24, r25
    3fdc:	38 f3       	brcs	.-50     	; 0x3fac <UserName_Check+0x12c>
    3fde:	07 c0       	rjmp	.+14     	; 0x3fee <UserName_Check+0x16e>
			{

			}
		}
	}
	else if (CheckLength != UserName_Length)
    3fe0:	90 91 85 02 	lds	r25, 0x0285
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	89 17       	cp	r24, r25
    3fe8:	11 f0       	breq	.+4      	; 0x3fee <UserName_Check+0x16e>
	{
		UserName_Check_Flag = 0;
    3fea:	10 92 78 02 	sts	0x0278, r1
	}
	else
	{

	}
}
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	1f 91       	pop	r17
    3ff8:	08 95       	ret

00003ffa <PassWord_Check>:

//======================================================================================================================================//

void PassWord_Check(void)
{
    3ffa:	1f 93       	push	r17
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	00 d0       	rcall	.+0      	; 0x4002 <PassWord_Check+0x8>
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
	CLCD_vClearScreen();
    4006:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	CLCD_vSendString("Check PassWord");
    400a:	8c ed       	ldi	r24, 0xDC	; 220
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    4012:	82 e0       	ldi	r24, 0x02	; 2
    4014:	61 e0       	ldi	r22, 0x01	; 1
    4016:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    401a:	8e e0       	ldi	r24, 0x0E	; 14
    401c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
	u8 CheckLength = 0;
    4020:	1a 82       	std	Y+2, r1	; 0x02
	PassWord_Check_Flag = 1;
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	80 93 79 02 	sts	0x0279, r24

	while(1)
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4028:	8c e9       	ldi	r24, 0x9C	; 156
    402a:	92 e0       	ldi	r25, 0x02	; 2
    402c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    4030:	80 93 7a 02 	sts	0x027A, r24
		//if user name length is valid
		if (Error_State == OK && CheckLength == 0)
    4034:	80 91 7a 02 	lds	r24, 0x027A
    4038:	88 23       	and	r24, r24
    403a:	01 f5       	brne	.+64     	; 0x407c <PassWord_Check+0x82>
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	88 23       	and	r24, r24
    4040:	e9 f4       	brne	.+58     	; 0x407c <PassWord_Check+0x82>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    4042:	80 91 9c 02 	lds	r24, 0x029C
    4046:	8d 30       	cpi	r24, 0x0D	; 13
    4048:	79 f3       	breq	.-34     	; 0x4028 <PassWord_Check+0x2e>
    404a:	80 91 9c 02 	lds	r24, 0x029C
    404e:	8f 30       	cpi	r24, 0x0F	; 15
    4050:	59 f3       	breq	.-42     	; 0x4028 <PassWord_Check+0x2e>
			{

			}
			else if (KPD_Press == 0x08)
    4052:	80 91 9c 02 	lds	r24, 0x029C
    4056:	88 30       	cpi	r24, 0x08	; 8
    4058:	39 f3       	breq	.-50     	; 0x4028 <PassWord_Check+0x2e>
			{

			}
			else
			{
				CLCD_vSendData(KPD_Press);
    405a:	80 91 9c 02 	lds	r24, 0x029C
    405e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
				Check[CheckLength] = KPD_Press;
    4062:	8a 81       	ldd	r24, Y+2	; 0x02
    4064:	88 2f       	mov	r24, r24
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	20 91 9c 02 	lds	r18, 0x029C
    406c:	fc 01       	movw	r30, r24
    406e:	e9 57       	subi	r30, 0x79	; 121
    4070:	fd 4f       	sbci	r31, 0xFD	; 253
    4072:	20 83       	st	Z, r18
				CheckLength++;
    4074:	8a 81       	ldd	r24, Y+2	; 0x02
    4076:	8f 5f       	subi	r24, 0xFF	; 255
    4078:	8a 83       	std	Y+2, r24	; 0x02
    407a:	d6 cf       	rjmp	.-84     	; 0x4028 <PassWord_Check+0x2e>
			}
		}
		else if (Error_State == OK && CheckLength < 20)
    407c:	80 91 7a 02 	lds	r24, 0x027A
    4080:	88 23       	and	r24, r24
    4082:	51 f5       	brne	.+84     	; 0x40d8 <PassWord_Check+0xde>
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	84 31       	cpi	r24, 0x14	; 20
    4088:	38 f5       	brcc	.+78     	; 0x40d8 <PassWord_Check+0xde>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    408a:	80 91 9c 02 	lds	r24, 0x029C
    408e:	8d 30       	cpi	r24, 0x0D	; 13
    4090:	21 f0       	breq	.+8      	; 0x409a <PassWord_Check+0xa0>
    4092:	80 91 9c 02 	lds	r24, 0x029C
    4096:	8f 30       	cpi	r24, 0x0F	; 15
    4098:	21 f4       	brne	.+8      	; 0x40a2 <PassWord_Check+0xa8>
			{
				CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    409a:	8c e0       	ldi	r24, 0x0C	; 12
    409c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    40a0:	3b c0       	rjmp	.+118    	; 0x4118 <PassWord_Check+0x11e>
				break;
			}
			else if (KPD_Press == 0x08)
    40a2:	80 91 9c 02 	lds	r24, 0x029C
    40a6:	88 30       	cpi	r24, 0x08	; 8
    40a8:	31 f4       	brne	.+12     	; 0x40b6 <PassWord_Check+0xbc>
			{
				Clear_Char();
    40aa:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
				CheckLength--;
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	81 50       	subi	r24, 0x01	; 1
    40b2:	8a 83       	std	Y+2, r24	; 0x02
    40b4:	b9 cf       	rjmp	.-142    	; 0x4028 <PassWord_Check+0x2e>
			}
			else
			{
				CLCD_vSendData(KPD_Press);
    40b6:	80 91 9c 02 	lds	r24, 0x029C
    40ba:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
				Check[CheckLength] = KPD_Press;
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	88 2f       	mov	r24, r24
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	20 91 9c 02 	lds	r18, 0x029C
    40c8:	fc 01       	movw	r30, r24
    40ca:	e9 57       	subi	r30, 0x79	; 121
    40cc:	fd 4f       	sbci	r31, 0xFD	; 253
    40ce:	20 83       	st	Z, r18
				CheckLength++;
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	8f 5f       	subi	r24, 0xFF	; 255
    40d4:	8a 83       	std	Y+2, r24	; 0x02
    40d6:	a8 cf       	rjmp	.-176    	; 0x4028 <PassWord_Check+0x2e>
			}
		}
		//if user name length is more than 20 do no thing exept enter and delete
		else if (Error_State == OK && CheckLength>= 20)
    40d8:	80 91 7a 02 	lds	r24, 0x027A
    40dc:	88 23       	and	r24, r24
    40de:	09 f0       	breq	.+2      	; 0x40e2 <PassWord_Check+0xe8>
    40e0:	a3 cf       	rjmp	.-186    	; 0x4028 <PassWord_Check+0x2e>
    40e2:	8a 81       	ldd	r24, Y+2	; 0x02
    40e4:	84 31       	cpi	r24, 0x14	; 20
    40e6:	08 f4       	brcc	.+2      	; 0x40ea <PassWord_Check+0xf0>
    40e8:	9f cf       	rjmp	.-194    	; 0x4028 <PassWord_Check+0x2e>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    40ea:	80 91 9c 02 	lds	r24, 0x029C
    40ee:	8d 30       	cpi	r24, 0x0D	; 13
    40f0:	21 f0       	breq	.+8      	; 0x40fa <PassWord_Check+0x100>
    40f2:	80 91 9c 02 	lds	r24, 0x029C
    40f6:	8f 30       	cpi	r24, 0x0F	; 15
    40f8:	21 f4       	brne	.+8      	; 0x4102 <PassWord_Check+0x108>
			{
				CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    40fa:	8c e0       	ldi	r24, 0x0C	; 12
    40fc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
    4100:	0b c0       	rjmp	.+22     	; 0x4118 <PassWord_Check+0x11e>
				break;
			}
			else if (KPD_Press == 0x08)
    4102:	80 91 9c 02 	lds	r24, 0x029C
    4106:	88 30       	cpi	r24, 0x08	; 8
    4108:	09 f0       	breq	.+2      	; 0x410c <PassWord_Check+0x112>
    410a:	8e cf       	rjmp	.-228    	; 0x4028 <PassWord_Check+0x2e>
			{
				Clear_Char();
    410c:	0e 94 a5 22 	call	0x454a	; 0x454a <Clear_Char>
				CheckLength--;
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	81 50       	subi	r24, 0x01	; 1
    4114:	8a 83       	std	Y+2, r24	; 0x02
    4116:	88 cf       	rjmp	.-240    	; 0x4028 <PassWord_Check+0x2e>
	}

	/*___________________________________________________________________________________________________________________*/

	//Check if UserName is correct or not
	if (CheckLength == PassWord_Length)
    4118:	90 91 86 02 	lds	r25, 0x0286
    411c:	8a 81       	ldd	r24, Y+2	; 0x02
    411e:	89 17       	cp	r24, r25
    4120:	e9 f4       	brne	.+58     	; 0x415c <PassWord_Check+0x162>
	{
		for(u8 i = 0; i < PassWord_Length; i++)
    4122:	19 82       	std	Y+1, r1	; 0x01
    4124:	15 c0       	rjmp	.+42     	; 0x4150 <PassWord_Check+0x156>
		{
			if (Check[i] != EEPROM_vRead(EEPROM_PassWordStartLocation + i))
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	88 2f       	mov	r24, r24
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	fc 01       	movw	r30, r24
    412e:	e9 57       	subi	r30, 0x79	; 121
    4130:	fd 4f       	sbci	r31, 0xFD	; 253
    4132:	10 81       	ld	r17, Z
    4134:	89 81       	ldd	r24, Y+1	; 0x01
    4136:	88 2f       	mov	r24, r24
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	8f 5b       	subi	r24, 0xBF	; 191
    413c:	9f 4f       	sbci	r25, 0xFF	; 255
    413e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    4142:	18 17       	cp	r17, r24
    4144:	11 f0       	breq	.+4      	; 0x414a <PassWord_Check+0x150>
			{
				PassWord_Check_Flag = 0;
    4146:	10 92 79 02 	sts	0x0279, r1
	/*___________________________________________________________________________________________________________________*/

	//Check if UserName is correct or not
	if (CheckLength == PassWord_Length)
	{
		for(u8 i = 0; i < PassWord_Length; i++)
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	8f 5f       	subi	r24, 0xFF	; 255
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	90 91 86 02 	lds	r25, 0x0286
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	89 17       	cp	r24, r25
    4158:	30 f3       	brcs	.-52     	; 0x4126 <PassWord_Check+0x12c>
    415a:	07 c0       	rjmp	.+14     	; 0x416a <PassWord_Check+0x170>
			{

			}
		}
	}
	else if (CheckLength != PassWord_Length)
    415c:	90 91 86 02 	lds	r25, 0x0286
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	89 17       	cp	r24, r25
    4164:	11 f0       	breq	.+4      	; 0x416a <PassWord_Check+0x170>
	{
		PassWord_Check_Flag = 0;
    4166:	10 92 79 02 	sts	0x0279, r1
	}
	else
	{

	}
}
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	1f 91       	pop	r17
    4174:	08 95       	ret

00004176 <Sign_In>:

//======================================================================================================================================//

void Sign_In(void)
{
    4176:	df 93       	push	r29
    4178:	cf 93       	push	r28
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
    417e:	6c 97       	sbiw	r28, 0x1c	; 28
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
	UserName_Check();
    418a:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <UserName_Check>
	PassWord_Check();
    418e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <PassWord_Check>
	if(UserName_Check_Flag ==0 || PassWord_Check_Flag ==0)
    4192:	80 91 78 02 	lds	r24, 0x0278
    4196:	88 23       	and	r24, r24
    4198:	29 f0       	breq	.+10     	; 0x41a4 <Sign_In+0x2e>
    419a:	80 91 79 02 	lds	r24, 0x0279
    419e:	88 23       	and	r24, r24
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <Sign_In+0x2e>
    41a2:	a6 c0       	rjmp	.+332    	; 0x42f0 <Sign_In+0x17a>
	{
		CLCD_vClearScreen();
    41a4:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
		CLCD_vSendString("Invalid Username");
    41a8:	8b ee       	ldi	r24, 0xEB	; 235
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		CLCD_vSetPosition(2, 1);
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	61 e0       	ldi	r22, 0x01	; 1
    41b4:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
		CLCD_vSendString("or Password");
    41b8:	8c ef       	ldi	r24, 0xFC	; 252
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		Max_Tries--;
    41c0:	80 91 7b 02 	lds	r24, 0x027B
    41c4:	81 50       	subi	r24, 0x01	; 1
    41c6:	80 93 7b 02 	sts	0x027B, r24
		EEPROM_vWrite(EEPROM_NoTries_Location, Max_Tries);
    41ca:	20 91 7b 02 	lds	r18, 0x027B
    41ce:	82 e1       	ldi	r24, 0x12	; 18
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	62 2f       	mov	r22, r18
    41d4:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

		if (Max_Tries > 0)
    41d8:	80 91 7b 02 	lds	r24, 0x027B
    41dc:	88 23       	and	r24, r24
    41de:	71 f0       	breq	.+28     	; 0x41fc <Sign_In+0x86>
		{
			CLCD_vSetPosition(3, 1);
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
			CLCD_vSendString("Tries Left : ");
    41e8:	88 e0       	ldi	r24, 0x08	; 8
    41ea:	91 e0       	ldi	r25, 0x01	; 1
    41ec:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
			CLCD_vSendData(Max_Tries + 48);
    41f0:	80 91 7b 02 	lds	r24, 0x027B
    41f4:	80 5d       	subi	r24, 0xD0	; 208
    41f6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
    41fa:	fa c0       	rjmp	.+500    	; 0x43f0 <Sign_In+0x27a>
		}
		else	if (Max_Tries == 0)
    41fc:	80 91 7b 02 	lds	r24, 0x027B
    4200:	88 23       	and	r24, r24
    4202:	09 f0       	breq	.+2      	; 0x4206 <Sign_In+0x90>
    4204:	f5 c0       	rjmp	.+490    	; 0x43f0 <Sign_In+0x27a>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	aa ef       	ldi	r26, 0xFA	; 250
    420c:	b3 e4       	ldi	r27, 0x43	; 67
    420e:	89 8f       	std	Y+25, r24	; 0x19
    4210:	9a 8f       	std	Y+26, r25	; 0x1a
    4212:	ab 8f       	std	Y+27, r26	; 0x1b
    4214:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4216:	69 8d       	ldd	r22, Y+25	; 0x19
    4218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    421a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    421c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	4a ef       	ldi	r20, 0xFA	; 250
    4224:	54 e4       	ldi	r21, 0x44	; 68
    4226:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	8d 8b       	std	Y+21, r24	; 0x15
    4230:	9e 8b       	std	Y+22, r25	; 0x16
    4232:	af 8b       	std	Y+23, r26	; 0x17
    4234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4236:	6d 89       	ldd	r22, Y+21	; 0x15
    4238:	7e 89       	ldd	r23, Y+22	; 0x16
    423a:	8f 89       	ldd	r24, Y+23	; 0x17
    423c:	98 8d       	ldd	r25, Y+24	; 0x18
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e8       	ldi	r20, 0x80	; 128
    4244:	5f e3       	ldi	r21, 0x3F	; 63
    4246:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    424a:	88 23       	and	r24, r24
    424c:	2c f4       	brge	.+10     	; 0x4258 <Sign_In+0xe2>
		__ticks = 1;
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	9c 8b       	std	Y+20, r25	; 0x14
    4254:	8b 8b       	std	Y+19, r24	; 0x13
    4256:	3f c0       	rjmp	.+126    	; 0x42d6 <Sign_In+0x160>
	else if (__tmp > 65535)
    4258:	6d 89       	ldd	r22, Y+21	; 0x15
    425a:	7e 89       	ldd	r23, Y+22	; 0x16
    425c:	8f 89       	ldd	r24, Y+23	; 0x17
    425e:	98 8d       	ldd	r25, Y+24	; 0x18
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	3f ef       	ldi	r19, 0xFF	; 255
    4264:	4f e7       	ldi	r20, 0x7F	; 127
    4266:	57 e4       	ldi	r21, 0x47	; 71
    4268:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    426c:	18 16       	cp	r1, r24
    426e:	4c f5       	brge	.+82     	; 0x42c2 <Sign_In+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4270:	69 8d       	ldd	r22, Y+25	; 0x19
    4272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e2       	ldi	r20, 0x20	; 32
    427e:	51 e4       	ldi	r21, 0x41	; 65
    4280:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	9c 8b       	std	Y+20, r25	; 0x14
    4296:	8b 8b       	std	Y+19, r24	; 0x13
    4298:	0f c0       	rjmp	.+30     	; 0x42b8 <Sign_In+0x142>
    429a:	88 ec       	ldi	r24, 0xC8	; 200
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	9a 8b       	std	Y+18, r25	; 0x12
    42a0:	89 8b       	std	Y+17, r24	; 0x11
    42a2:	89 89       	ldd	r24, Y+17	; 0x11
    42a4:	9a 89       	ldd	r25, Y+18	; 0x12
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	f1 f7       	brne	.-4      	; 0x42a6 <Sign_In+0x130>
    42aa:	9a 8b       	std	Y+18, r25	; 0x12
    42ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ae:	8b 89       	ldd	r24, Y+19	; 0x13
    42b0:	9c 89       	ldd	r25, Y+20	; 0x14
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	9c 8b       	std	Y+20, r25	; 0x14
    42b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b8:	8b 89       	ldd	r24, Y+19	; 0x13
    42ba:	9c 89       	ldd	r25, Y+20	; 0x14
    42bc:	00 97       	sbiw	r24, 0x00	; 0
    42be:	69 f7       	brne	.-38     	; 0x429a <Sign_In+0x124>
    42c0:	14 c0       	rjmp	.+40     	; 0x42ea <Sign_In+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c2:	6d 89       	ldd	r22, Y+21	; 0x15
    42c4:	7e 89       	ldd	r23, Y+22	; 0x16
    42c6:	8f 89       	ldd	r24, Y+23	; 0x17
    42c8:	98 8d       	ldd	r25, Y+24	; 0x18
    42ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	9c 8b       	std	Y+20, r25	; 0x14
    42d4:	8b 8b       	std	Y+19, r24	; 0x13
    42d6:	8b 89       	ldd	r24, Y+19	; 0x13
    42d8:	9c 89       	ldd	r25, Y+20	; 0x14
    42da:	98 8b       	std	Y+16, r25	; 0x10
    42dc:	8f 87       	std	Y+15, r24	; 0x0f
    42de:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e0:	98 89       	ldd	r25, Y+16	; 0x10
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	f1 f7       	brne	.-4      	; 0x42e2 <Sign_In+0x16c>
    42e6:	98 8b       	std	Y+16, r25	; 0x10
    42e8:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(500);
			Error_TimeOut();
    42ea:	0e 94 01 22 	call	0x4402	; 0x4402 <Error_TimeOut>
    42ee:	80 c0       	rjmp	.+256    	; 0x43f0 <Sign_In+0x27a>
		}
	}
	else
	{
		CLCD_vClearScreen();
    42f0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
		CLCD_vSendString("Successfully");
    42f4:	86 e1       	ldi	r24, 0x16	; 22
    42f6:	91 e0       	ldi	r25, 0x01	; 1
    42f8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		CLCD_vSetPosition(2, 1);
    42fc:	82 e0       	ldi	r24, 0x02	; 2
    42fe:	61 e0       	ldi	r22, 0x01	; 1
    4300:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
		CLCD_vSendString("Sign in");
    4304:	83 e2       	ldi	r24, 0x23	; 35
    4306:	91 e0       	ldi	r25, 0x01	; 1
    4308:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e4       	ldi	r25, 0x40	; 64
    4310:	ac e9       	ldi	r26, 0x9C	; 156
    4312:	b5 e4       	ldi	r27, 0x45	; 69
    4314:	8b 87       	std	Y+11, r24	; 0x0b
    4316:	9c 87       	std	Y+12, r25	; 0x0c
    4318:	ad 87       	std	Y+13, r26	; 0x0d
    431a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431c:	6b 85       	ldd	r22, Y+11	; 0x0b
    431e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4320:	8d 85       	ldd	r24, Y+13	; 0x0d
    4322:	9e 85       	ldd	r25, Y+14	; 0x0e
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	4a ef       	ldi	r20, 0xFA	; 250
    432a:	54 e4       	ldi	r21, 0x44	; 68
    432c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	8f 83       	std	Y+7, r24	; 0x07
    4336:	98 87       	std	Y+8, r25	; 0x08
    4338:	a9 87       	std	Y+9, r26	; 0x09
    433a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    433c:	6f 81       	ldd	r22, Y+7	; 0x07
    433e:	78 85       	ldd	r23, Y+8	; 0x08
    4340:	89 85       	ldd	r24, Y+9	; 0x09
    4342:	9a 85       	ldd	r25, Y+10	; 0x0a
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e8       	ldi	r20, 0x80	; 128
    434a:	5f e3       	ldi	r21, 0x3F	; 63
    434c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4350:	88 23       	and	r24, r24
    4352:	2c f4       	brge	.+10     	; 0x435e <Sign_In+0x1e8>
		__ticks = 1;
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	9e 83       	std	Y+6, r25	; 0x06
    435a:	8d 83       	std	Y+5, r24	; 0x05
    435c:	3f c0       	rjmp	.+126    	; 0x43dc <Sign_In+0x266>
	else if (__tmp > 65535)
    435e:	6f 81       	ldd	r22, Y+7	; 0x07
    4360:	78 85       	ldd	r23, Y+8	; 0x08
    4362:	89 85       	ldd	r24, Y+9	; 0x09
    4364:	9a 85       	ldd	r25, Y+10	; 0x0a
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	3f ef       	ldi	r19, 0xFF	; 255
    436a:	4f e7       	ldi	r20, 0x7F	; 127
    436c:	57 e4       	ldi	r21, 0x47	; 71
    436e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4372:	18 16       	cp	r1, r24
    4374:	4c f5       	brge	.+82     	; 0x43c8 <Sign_In+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4376:	6b 85       	ldd	r22, Y+11	; 0x0b
    4378:	7c 85       	ldd	r23, Y+12	; 0x0c
    437a:	8d 85       	ldd	r24, Y+13	; 0x0d
    437c:	9e 85       	ldd	r25, Y+14	; 0x0e
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e2       	ldi	r20, 0x20	; 32
    4384:	51 e4       	ldi	r21, 0x41	; 65
    4386:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	9e 83       	std	Y+6, r25	; 0x06
    439c:	8d 83       	std	Y+5, r24	; 0x05
    439e:	0f c0       	rjmp	.+30     	; 0x43be <Sign_In+0x248>
    43a0:	88 ec       	ldi	r24, 0xC8	; 200
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	9c 83       	std	Y+4, r25	; 0x04
    43a6:	8b 83       	std	Y+3, r24	; 0x03
    43a8:	8b 81       	ldd	r24, Y+3	; 0x03
    43aa:	9c 81       	ldd	r25, Y+4	; 0x04
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <Sign_In+0x236>
    43b0:	9c 83       	std	Y+4, r25	; 0x04
    43b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b4:	8d 81       	ldd	r24, Y+5	; 0x05
    43b6:	9e 81       	ldd	r25, Y+6	; 0x06
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	9e 83       	std	Y+6, r25	; 0x06
    43bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43be:	8d 81       	ldd	r24, Y+5	; 0x05
    43c0:	9e 81       	ldd	r25, Y+6	; 0x06
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	69 f7       	brne	.-38     	; 0x43a0 <Sign_In+0x22a>
    43c6:	14 c0       	rjmp	.+40     	; 0x43f0 <Sign_In+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ca:	78 85       	ldd	r23, Y+8	; 0x08
    43cc:	89 85       	ldd	r24, Y+9	; 0x09
    43ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	9e 83       	std	Y+6, r25	; 0x06
    43da:	8d 83       	std	Y+5, r24	; 0x05
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	9e 81       	ldd	r25, Y+6	; 0x06
    43e0:	9a 83       	std	Y+2, r25	; 0x02
    43e2:	89 83       	std	Y+1, r24	; 0x01
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	9a 81       	ldd	r25, Y+2	; 0x02
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	f1 f7       	brne	.-4      	; 0x43e8 <Sign_In+0x272>
    43ec:	9a 83       	std	Y+2, r25	; 0x02
    43ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
	}

}
    43f0:	6c 96       	adiw	r28, 0x1c	; 28
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	cd bf       	out	0x3d, r28	; 61
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <Error_TimeOut>:

//======================================================================================================================================//

void Error_TimeOut(void)
{
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
    440a:	2f 97       	sbiw	r28, 0x0f	; 15
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    4416:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	CLCD_vSendString("Time out :  ");
    441a:	8b e2       	ldi	r24, 0x2B	; 43
    441c:	91 e0       	ldi	r25, 0x01	; 1
    441e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>

	for (u8 i = 6; i > 0 ; i-- )
    4422:	86 e0       	ldi	r24, 0x06	; 6
    4424:	8f 87       	std	Y+15, r24	; 0x0f
    4426:	7c c0       	rjmp	.+248    	; 0x4520 <Error_TimeOut+0x11e>
	{
		CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4428:	80 e1       	ldi	r24, 0x10	; 16
    442a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
		CLCD_vSendData(i + 47);
    442e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4430:	81 5d       	subi	r24, 0xD1	; 209
    4432:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	aa e7       	ldi	r26, 0x7A	; 122
    443c:	b4 e4       	ldi	r27, 0x44	; 68
    443e:	8b 87       	std	Y+11, r24	; 0x0b
    4440:	9c 87       	std	Y+12, r25	; 0x0c
    4442:	ad 87       	std	Y+13, r26	; 0x0d
    4444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4446:	6b 85       	ldd	r22, Y+11	; 0x0b
    4448:	7c 85       	ldd	r23, Y+12	; 0x0c
    444a:	8d 85       	ldd	r24, Y+13	; 0x0d
    444c:	9e 85       	ldd	r25, Y+14	; 0x0e
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	4a ef       	ldi	r20, 0xFA	; 250
    4454:	54 e4       	ldi	r21, 0x44	; 68
    4456:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	8f 83       	std	Y+7, r24	; 0x07
    4460:	98 87       	std	Y+8, r25	; 0x08
    4462:	a9 87       	std	Y+9, r26	; 0x09
    4464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4466:	6f 81       	ldd	r22, Y+7	; 0x07
    4468:	78 85       	ldd	r23, Y+8	; 0x08
    446a:	89 85       	ldd	r24, Y+9	; 0x09
    446c:	9a 85       	ldd	r25, Y+10	; 0x0a
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e8       	ldi	r20, 0x80	; 128
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    447a:	88 23       	and	r24, r24
    447c:	2c f4       	brge	.+10     	; 0x4488 <Error_TimeOut+0x86>
		__ticks = 1;
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	9e 83       	std	Y+6, r25	; 0x06
    4484:	8d 83       	std	Y+5, r24	; 0x05
    4486:	3f c0       	rjmp	.+126    	; 0x4506 <Error_TimeOut+0x104>
	else if (__tmp > 65535)
    4488:	6f 81       	ldd	r22, Y+7	; 0x07
    448a:	78 85       	ldd	r23, Y+8	; 0x08
    448c:	89 85       	ldd	r24, Y+9	; 0x09
    448e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	3f ef       	ldi	r19, 0xFF	; 255
    4494:	4f e7       	ldi	r20, 0x7F	; 127
    4496:	57 e4       	ldi	r21, 0x47	; 71
    4498:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    449c:	18 16       	cp	r1, r24
    449e:	4c f5       	brge	.+82     	; 0x44f2 <Error_TimeOut+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e2       	ldi	r20, 0x20	; 32
    44ae:	51 e4       	ldi	r21, 0x41	; 65
    44b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9e 83       	std	Y+6, r25	; 0x06
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	0f c0       	rjmp	.+30     	; 0x44e8 <Error_TimeOut+0xe6>
    44ca:	88 ec       	ldi	r24, 0xC8	; 200
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	9c 83       	std	Y+4, r25	; 0x04
    44d0:	8b 83       	std	Y+3, r24	; 0x03
    44d2:	8b 81       	ldd	r24, Y+3	; 0x03
    44d4:	9c 81       	ldd	r25, Y+4	; 0x04
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <Error_TimeOut+0xd4>
    44da:	9c 83       	std	Y+4, r25	; 0x04
    44dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	9e 81       	ldd	r25, Y+6	; 0x06
    44ec:	00 97       	sbiw	r24, 0x00	; 0
    44ee:	69 f7       	brne	.-38     	; 0x44ca <Error_TimeOut+0xc8>
    44f0:	14 c0       	rjmp	.+40     	; 0x451a <Error_TimeOut+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f2:	6f 81       	ldd	r22, Y+7	; 0x07
    44f4:	78 85       	ldd	r23, Y+8	; 0x08
    44f6:	89 85       	ldd	r24, Y+9	; 0x09
    44f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	9e 83       	std	Y+6, r25	; 0x06
    4504:	8d 83       	std	Y+5, r24	; 0x05
    4506:	8d 81       	ldd	r24, Y+5	; 0x05
    4508:	9e 81       	ldd	r25, Y+6	; 0x06
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <Error_TimeOut+0x110>
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	89 83       	std	Y+1, r24	; 0x01
void Error_TimeOut(void)
{
	CLCD_vClearScreen();
	CLCD_vSendString("Time out :  ");

	for (u8 i = 6; i > 0 ; i-- )
    451a:	8f 85       	ldd	r24, Y+15	; 0x0f
    451c:	81 50       	subi	r24, 0x01	; 1
    451e:	8f 87       	std	Y+15, r24	; 0x0f
    4520:	8f 85       	ldd	r24, Y+15	; 0x0f
    4522:	88 23       	and	r24, r24
    4524:	09 f0       	breq	.+2      	; 0x4528 <Error_TimeOut+0x126>
    4526:	80 cf       	rjmp	.-256    	; 0x4428 <Error_TimeOut+0x26>
	{
		CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
		CLCD_vSendData(i + 47);
		_delay_ms(1000);
	}
	EEPROM_vWrite(EEPROM_NoTries_Location, NOTPRESSED);
    4528:	82 e1       	ldi	r24, 0x12	; 18
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	6f ef       	ldi	r22, 0xFF	; 255
    452e:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
	Max_Tries = 3;
    4532:	83 e0       	ldi	r24, 0x03	; 3
    4534:	80 93 7b 02 	sts	0x027B, r24
}
    4538:	2f 96       	adiw	r28, 0x0f	; 15
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	cf 91       	pop	r28
    4546:	df 91       	pop	r29
    4548:	08 95       	ret

0000454a <Clear_Char>:

//======================================================================================================================================//

void Clear_Char()
{
    454a:	df 93       	push	r29
    454c:	cf 93       	push	r28
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
	CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4552:	80 e1       	ldi	r24, 0x10	; 16
    4554:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>
	CLCD_vSendData(' ');
    4558:	80 e2       	ldi	r24, 0x20	; 32
    455a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <CLCD_vSendData>
	CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    455e:	80 e1       	ldi	r24, 0x10	; 16
    4560:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <CLCD_vSendCommand>

}
    4564:	cf 91       	pop	r28
    4566:	df 91       	pop	r29
    4568:	08 95       	ret

0000456a <main>:




void main(void)
{
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	6c 97       	sbiw	r28, 0x1c	; 28
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
	UserName_Length = EEPROM_vRead(EEPROM_USNL_Location);
    457e:	83 e1       	ldi	r24, 0x13	; 19
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    4586:	80 93 85 02 	sts	0x0285, r24
	PassWord_Length = EEPROM_vRead(EEPROM_PWL_Location);
    458a:	84 e1       	ldi	r24, 0x14	; 20
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    4592:	80 93 86 02 	sts	0x0286, r24

	if(EEPROM_vRead(EEPROM_NoTries_Location) != NOTPRESSED)
    4596:	82 e1       	ldi	r24, 0x12	; 18
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    459e:	8f 3f       	cpi	r24, 0xFF	; 255
    45a0:	31 f0       	breq	.+12     	; 0x45ae <main+0x44>
	{
		Max_Tries = EEPROM_vRead(EEPROM_NoTries_Location);
    45a2:	82 e1       	ldi	r24, 0x12	; 18
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    45aa:	80 93 7b 02 	sts	0x027B, r24
	else
	{

	}
	/* Initialize CLCD On PORTB And 4Bit Mode And Connected on Low Nibble */
	CLCD_vInit();
    45ae:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <CLCD_vInit>

	/* Initialize USART to communicate with laptop */
	USART_vInit();
    45b2:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_vInit>

	CLCD_vSetPosition(1, 7);
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	67 e0       	ldi	r22, 0x07	; 7
    45ba:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
	CLCD_vSendString("Welcome");
    45be:	88 e3       	ldi	r24, 0x38	; 56
    45c0:	91 e0       	ldi	r25, 0x01	; 1
    45c2:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	aa ef       	ldi	r26, 0xFA	; 250
    45cc:	b3 e4       	ldi	r27, 0x43	; 67
    45ce:	89 8f       	std	Y+25, r24	; 0x19
    45d0:	9a 8f       	std	Y+26, r25	; 0x1a
    45d2:	ab 8f       	std	Y+27, r26	; 0x1b
    45d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d6:	69 8d       	ldd	r22, Y+25	; 0x19
    45d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	4a ef       	ldi	r20, 0xFA	; 250
    45e4:	54 e4       	ldi	r21, 0x44	; 68
    45e6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	8d 8b       	std	Y+21, r24	; 0x15
    45f0:	9e 8b       	std	Y+22, r25	; 0x16
    45f2:	af 8b       	std	Y+23, r26	; 0x17
    45f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45f6:	6d 89       	ldd	r22, Y+21	; 0x15
    45f8:	7e 89       	ldd	r23, Y+22	; 0x16
    45fa:	8f 89       	ldd	r24, Y+23	; 0x17
    45fc:	98 8d       	ldd	r25, Y+24	; 0x18
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	40 e8       	ldi	r20, 0x80	; 128
    4604:	5f e3       	ldi	r21, 0x3F	; 63
    4606:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    460a:	88 23       	and	r24, r24
    460c:	2c f4       	brge	.+10     	; 0x4618 <main+0xae>
		__ticks = 1;
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	9c 8b       	std	Y+20, r25	; 0x14
    4614:	8b 8b       	std	Y+19, r24	; 0x13
    4616:	3f c0       	rjmp	.+126    	; 0x4696 <main+0x12c>
	else if (__tmp > 65535)
    4618:	6d 89       	ldd	r22, Y+21	; 0x15
    461a:	7e 89       	ldd	r23, Y+22	; 0x16
    461c:	8f 89       	ldd	r24, Y+23	; 0x17
    461e:	98 8d       	ldd	r25, Y+24	; 0x18
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	3f ef       	ldi	r19, 0xFF	; 255
    4624:	4f e7       	ldi	r20, 0x7F	; 127
    4626:	57 e4       	ldi	r21, 0x47	; 71
    4628:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    462c:	18 16       	cp	r1, r24
    462e:	4c f5       	brge	.+82     	; 0x4682 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4630:	69 8d       	ldd	r22, Y+25	; 0x19
    4632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e2       	ldi	r20, 0x20	; 32
    463e:	51 e4       	ldi	r21, 0x41	; 65
    4640:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4650:	dc 01       	movw	r26, r24
    4652:	cb 01       	movw	r24, r22
    4654:	9c 8b       	std	Y+20, r25	; 0x14
    4656:	8b 8b       	std	Y+19, r24	; 0x13
    4658:	0f c0       	rjmp	.+30     	; 0x4678 <main+0x10e>
    465a:	88 ec       	ldi	r24, 0xC8	; 200
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9a 8b       	std	Y+18, r25	; 0x12
    4660:	89 8b       	std	Y+17, r24	; 0x11
    4662:	89 89       	ldd	r24, Y+17	; 0x11
    4664:	9a 89       	ldd	r25, Y+18	; 0x12
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	f1 f7       	brne	.-4      	; 0x4666 <main+0xfc>
    466a:	9a 8b       	std	Y+18, r25	; 0x12
    466c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466e:	8b 89       	ldd	r24, Y+19	; 0x13
    4670:	9c 89       	ldd	r25, Y+20	; 0x14
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	9c 8b       	std	Y+20, r25	; 0x14
    4676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4678:	8b 89       	ldd	r24, Y+19	; 0x13
    467a:	9c 89       	ldd	r25, Y+20	; 0x14
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	69 f7       	brne	.-38     	; 0x465a <main+0xf0>
    4680:	14 c0       	rjmp	.+40     	; 0x46aa <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4682:	6d 89       	ldd	r22, Y+21	; 0x15
    4684:	7e 89       	ldd	r23, Y+22	; 0x16
    4686:	8f 89       	ldd	r24, Y+23	; 0x17
    4688:	98 8d       	ldd	r25, Y+24	; 0x18
    468a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	9c 8b       	std	Y+20, r25	; 0x14
    4694:	8b 8b       	std	Y+19, r24	; 0x13
    4696:	8b 89       	ldd	r24, Y+19	; 0x13
    4698:	9c 89       	ldd	r25, Y+20	; 0x14
    469a:	98 8b       	std	Y+16, r25	; 0x10
    469c:	8f 87       	std	Y+15, r24	; 0x0f
    469e:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a0:	98 89       	ldd	r25, Y+16	; 0x10
    46a2:	01 97       	sbiw	r24, 0x01	; 1
    46a4:	f1 f7       	brne	.-4      	; 0x46a2 <main+0x138>
    46a6:	98 8b       	std	Y+16, r25	; 0x10
    46a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	//if it's first login
	if(EEPROM_vRead(EEPROM_UserNameStatus) == NOTPRESSED)
    46aa:	80 e1       	ldi	r24, 0x10	; 16
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    46b2:	8f 3f       	cpi	r24, 0xFF	; 255
    46b4:	41 f5       	brne	.+80     	; 0x4706 <main+0x19c>
	{
		CLCD_vSetPosition(2, 1);
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	61 e0       	ldi	r22, 0x01	; 1
    46ba:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
		CLCD_vSendString("Please Sign UP");
    46be:	80 e4       	ldi	r24, 0x40	; 64
    46c0:	91 e0       	ldi	r25, 0x01	; 1
    46c2:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		CLCD_vSendExtraChar(4, 15);
    46c6:	84 e0       	ldi	r24, 0x04	; 4
    46c8:	6f e0       	ldi	r22, 0x0F	; 15
    46ca:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
		CLCD_vSetPosition(4, 16);
    46ce:	84 e0       	ldi	r24, 0x04	; 4
    46d0:	60 e1       	ldi	r22, 0x10	; 16
    46d2:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
		CLCD_vSendString(" : OK");
    46d6:	8f e4       	ldi	r24, 0x4F	; 79
    46d8:	91 e0       	ldi	r25, 0x01	; 1
    46da:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		while(1)
		{
			//wait in error page until press enter
			Error_State = USART_u8ReceiveData(&KPD_Press);
    46de:	8c e9       	ldi	r24, 0x9C	; 156
    46e0:	92 e0       	ldi	r25, 0x02	; 2
    46e2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    46e6:	80 93 7a 02 	sts	0x027A, r24
			if (Error_State == OK)
    46ea:	80 91 7a 02 	lds	r24, 0x027A
    46ee:	88 23       	and	r24, r24
    46f0:	b1 f7       	brne	.-20     	; 0x46de <main+0x174>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    46f2:	80 91 9c 02 	lds	r24, 0x029C
    46f6:	8d 30       	cpi	r24, 0x0D	; 13
    46f8:	21 f0       	breq	.+8      	; 0x4702 <main+0x198>
    46fa:	80 91 9c 02 	lds	r24, 0x029C
    46fe:	8f 30       	cpi	r24, 0x0F	; 15
    4700:	71 f7       	brne	.-36     	; 0x46de <main+0x174>
				{
					break;
				}
			}
		}
		UserName_Set();
    4702:	0e 94 c3 1c 	call	0x3986	; 0x3986 <UserName_Set>
	}
	if(EEPROM_vRead(EEPROM_PassWordStatus) == NOTPRESSED)
    4706:	81 e1       	ldi	r24, 0x11	; 17
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    470e:	8f 3f       	cpi	r24, 0xFF	; 255
    4710:	41 f5       	brne	.+80     	; 0x4762 <main+0x1f8>
	{
		PassWord_Set();
    4712:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <PassWord_Set>
		CLCD_vClearScreen();
    4716:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
		CLCD_vSendString("Saved Successfully");
    471a:	85 e5       	ldi	r24, 0x55	; 85
    471c:	91 e0       	ldi	r25, 0x01	; 1
    471e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		CLCD_vSendExtraChar(4, 15);
    4722:	84 e0       	ldi	r24, 0x04	; 4
    4724:	6f e0       	ldi	r22, 0x0F	; 15
    4726:	0e 94 81 1b 	call	0x3702	; 0x3702 <CLCD_vSendExtraChar>
		CLCD_vSetPosition(4, 16);
    472a:	84 e0       	ldi	r24, 0x04	; 4
    472c:	60 e1       	ldi	r22, 0x10	; 16
    472e:	0e 94 cd 1a 	call	0x359a	; 0x359a <CLCD_vSetPosition>
		CLCD_vSendString(" : OK");
    4732:	8f e4       	ldi	r24, 0x4F	; 79
    4734:	91 e0       	ldi	r25, 0x01	; 1
    4736:	0e 94 59 19 	call	0x32b2	; 0x32b2 <CLCD_vSendString>
		while(1)
		{
			//wait in error page until press enter
			Error_State = USART_u8ReceiveData(&KPD_Press);
    473a:	8c e9       	ldi	r24, 0x9C	; 156
    473c:	92 e0       	ldi	r25, 0x02	; 2
    473e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    4742:	80 93 7a 02 	sts	0x027A, r24
			if (Error_State == OK)
    4746:	80 91 7a 02 	lds	r24, 0x027A
    474a:	88 23       	and	r24, r24
    474c:	b1 f7       	brne	.-20     	; 0x473a <main+0x1d0>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    474e:	80 91 9c 02 	lds	r24, 0x029C
    4752:	8d 30       	cpi	r24, 0x0D	; 13
    4754:	21 f0       	breq	.+8      	; 0x475e <main+0x1f4>
    4756:	80 91 9c 02 	lds	r24, 0x029C
    475a:	8f 30       	cpi	r24, 0x0F	; 15
    475c:	71 f7       	brne	.-36     	; 0x473a <main+0x1d0>
				{
					break;
				}
			}
		}
		CLCD_vClearScreen();
    475e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CLCD_vClearScreen>
	}
	/*___________________________________________________________________________________________________________________*/

	if(Max_Tries == 0)
    4762:	80 91 7b 02 	lds	r24, 0x027B
    4766:	88 23       	and	r24, r24
    4768:	11 f4       	brne	.+4      	; 0x476e <main+0x204>
	{
		Error_TimeOut();
    476a:	0e 94 01 22 	call	0x4402	; 0x4402 <Error_TimeOut>

	}

	while (1)
	{
		Sign_In();
    476e:	0e 94 bb 20 	call	0x4176	; 0x4176 <Sign_In>
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	aa e7       	ldi	r26, 0x7A	; 122
    4778:	b4 e4       	ldi	r27, 0x44	; 68
    477a:	8b 87       	std	Y+11, r24	; 0x0b
    477c:	9c 87       	std	Y+12, r25	; 0x0c
    477e:	ad 87       	std	Y+13, r26	; 0x0d
    4780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4782:	6b 85       	ldd	r22, Y+11	; 0x0b
    4784:	7c 85       	ldd	r23, Y+12	; 0x0c
    4786:	8d 85       	ldd	r24, Y+13	; 0x0d
    4788:	9e 85       	ldd	r25, Y+14	; 0x0e
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	4a ef       	ldi	r20, 0xFA	; 250
    4790:	54 e4       	ldi	r21, 0x44	; 68
    4792:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	8f 83       	std	Y+7, r24	; 0x07
    479c:	98 87       	std	Y+8, r25	; 0x08
    479e:	a9 87       	std	Y+9, r26	; 0x09
    47a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47a2:	6f 81       	ldd	r22, Y+7	; 0x07
    47a4:	78 85       	ldd	r23, Y+8	; 0x08
    47a6:	89 85       	ldd	r24, Y+9	; 0x09
    47a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	40 e8       	ldi	r20, 0x80	; 128
    47b0:	5f e3       	ldi	r21, 0x3F	; 63
    47b2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    47b6:	88 23       	and	r24, r24
    47b8:	2c f4       	brge	.+10     	; 0x47c4 <main+0x25a>
		__ticks = 1;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	9e 83       	std	Y+6, r25	; 0x06
    47c0:	8d 83       	std	Y+5, r24	; 0x05
    47c2:	3f c0       	rjmp	.+126    	; 0x4842 <main+0x2d8>
	else if (__tmp > 65535)
    47c4:	6f 81       	ldd	r22, Y+7	; 0x07
    47c6:	78 85       	ldd	r23, Y+8	; 0x08
    47c8:	89 85       	ldd	r24, Y+9	; 0x09
    47ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	3f ef       	ldi	r19, 0xFF	; 255
    47d0:	4f e7       	ldi	r20, 0x7F	; 127
    47d2:	57 e4       	ldi	r21, 0x47	; 71
    47d4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    47d8:	18 16       	cp	r1, r24
    47da:	4c f5       	brge	.+82     	; 0x482e <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47de:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	40 e2       	ldi	r20, 0x20	; 32
    47ea:	51 e4       	ldi	r21, 0x41	; 65
    47ec:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	bc 01       	movw	r22, r24
    47f6:	cd 01       	movw	r24, r26
    47f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	9e 83       	std	Y+6, r25	; 0x06
    4802:	8d 83       	std	Y+5, r24	; 0x05
    4804:	0f c0       	rjmp	.+30     	; 0x4824 <main+0x2ba>
    4806:	88 ec       	ldi	r24, 0xC8	; 200
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	9c 83       	std	Y+4, r25	; 0x04
    480c:	8b 83       	std	Y+3, r24	; 0x03
    480e:	8b 81       	ldd	r24, Y+3	; 0x03
    4810:	9c 81       	ldd	r25, Y+4	; 0x04
    4812:	01 97       	sbiw	r24, 0x01	; 1
    4814:	f1 f7       	brne	.-4      	; 0x4812 <main+0x2a8>
    4816:	9c 83       	std	Y+4, r25	; 0x04
    4818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    481a:	8d 81       	ldd	r24, Y+5	; 0x05
    481c:	9e 81       	ldd	r25, Y+6	; 0x06
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	9e 83       	std	Y+6, r25	; 0x06
    4822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4824:	8d 81       	ldd	r24, Y+5	; 0x05
    4826:	9e 81       	ldd	r25, Y+6	; 0x06
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	69 f7       	brne	.-38     	; 0x4806 <main+0x29c>
    482c:	a0 cf       	rjmp	.-192    	; 0x476e <main+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482e:	6f 81       	ldd	r22, Y+7	; 0x07
    4830:	78 85       	ldd	r23, Y+8	; 0x08
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	9e 83       	std	Y+6, r25	; 0x06
    4840:	8d 83       	std	Y+5, r24	; 0x05
    4842:	8d 81       	ldd	r24, Y+5	; 0x05
    4844:	9e 81       	ldd	r25, Y+6	; 0x06
    4846:	9a 83       	std	Y+2, r25	; 0x02
    4848:	89 83       	std	Y+1, r24	; 0x01
    484a:	89 81       	ldd	r24, Y+1	; 0x01
    484c:	9a 81       	ldd	r25, Y+2	; 0x02
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	f1 f7       	brne	.-4      	; 0x484e <main+0x2e4>
    4852:	9a 83       	std	Y+2, r25	; 0x02
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	8b cf       	rjmp	.-234    	; 0x476e <main+0x204>

00004858 <__mulsi3>:
    4858:	62 9f       	mul	r22, r18
    485a:	d0 01       	movw	r26, r0
    485c:	73 9f       	mul	r23, r19
    485e:	f0 01       	movw	r30, r0
    4860:	82 9f       	mul	r24, r18
    4862:	e0 0d       	add	r30, r0
    4864:	f1 1d       	adc	r31, r1
    4866:	64 9f       	mul	r22, r20
    4868:	e0 0d       	add	r30, r0
    486a:	f1 1d       	adc	r31, r1
    486c:	92 9f       	mul	r25, r18
    486e:	f0 0d       	add	r31, r0
    4870:	83 9f       	mul	r24, r19
    4872:	f0 0d       	add	r31, r0
    4874:	74 9f       	mul	r23, r20
    4876:	f0 0d       	add	r31, r0
    4878:	65 9f       	mul	r22, r21
    487a:	f0 0d       	add	r31, r0
    487c:	99 27       	eor	r25, r25
    487e:	72 9f       	mul	r23, r18
    4880:	b0 0d       	add	r27, r0
    4882:	e1 1d       	adc	r30, r1
    4884:	f9 1f       	adc	r31, r25
    4886:	63 9f       	mul	r22, r19
    4888:	b0 0d       	add	r27, r0
    488a:	e1 1d       	adc	r30, r1
    488c:	f9 1f       	adc	r31, r25
    488e:	bd 01       	movw	r22, r26
    4890:	cf 01       	movw	r24, r30
    4892:	11 24       	eor	r1, r1
    4894:	08 95       	ret

00004896 <__udivmodsi4>:
    4896:	a1 e2       	ldi	r26, 0x21	; 33
    4898:	1a 2e       	mov	r1, r26
    489a:	aa 1b       	sub	r26, r26
    489c:	bb 1b       	sub	r27, r27
    489e:	fd 01       	movw	r30, r26
    48a0:	0d c0       	rjmp	.+26     	; 0x48bc <__udivmodsi4_ep>

000048a2 <__udivmodsi4_loop>:
    48a2:	aa 1f       	adc	r26, r26
    48a4:	bb 1f       	adc	r27, r27
    48a6:	ee 1f       	adc	r30, r30
    48a8:	ff 1f       	adc	r31, r31
    48aa:	a2 17       	cp	r26, r18
    48ac:	b3 07       	cpc	r27, r19
    48ae:	e4 07       	cpc	r30, r20
    48b0:	f5 07       	cpc	r31, r21
    48b2:	20 f0       	brcs	.+8      	; 0x48bc <__udivmodsi4_ep>
    48b4:	a2 1b       	sub	r26, r18
    48b6:	b3 0b       	sbc	r27, r19
    48b8:	e4 0b       	sbc	r30, r20
    48ba:	f5 0b       	sbc	r31, r21

000048bc <__udivmodsi4_ep>:
    48bc:	66 1f       	adc	r22, r22
    48be:	77 1f       	adc	r23, r23
    48c0:	88 1f       	adc	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	1a 94       	dec	r1
    48c6:	69 f7       	brne	.-38     	; 0x48a2 <__udivmodsi4_loop>
    48c8:	60 95       	com	r22
    48ca:	70 95       	com	r23
    48cc:	80 95       	com	r24
    48ce:	90 95       	com	r25
    48d0:	9b 01       	movw	r18, r22
    48d2:	ac 01       	movw	r20, r24
    48d4:	bd 01       	movw	r22, r26
    48d6:	cf 01       	movw	r24, r30
    48d8:	08 95       	ret

000048da <__divmodsi4>:
    48da:	97 fb       	bst	r25, 7
    48dc:	09 2e       	mov	r0, r25
    48de:	05 26       	eor	r0, r21
    48e0:	0e d0       	rcall	.+28     	; 0x48fe <__divmodsi4_neg1>
    48e2:	57 fd       	sbrc	r21, 7
    48e4:	04 d0       	rcall	.+8      	; 0x48ee <__divmodsi4_neg2>
    48e6:	d7 df       	rcall	.-82     	; 0x4896 <__udivmodsi4>
    48e8:	0a d0       	rcall	.+20     	; 0x48fe <__divmodsi4_neg1>
    48ea:	00 1c       	adc	r0, r0
    48ec:	38 f4       	brcc	.+14     	; 0x48fc <__divmodsi4_exit>

000048ee <__divmodsi4_neg2>:
    48ee:	50 95       	com	r21
    48f0:	40 95       	com	r20
    48f2:	30 95       	com	r19
    48f4:	21 95       	neg	r18
    48f6:	3f 4f       	sbci	r19, 0xFF	; 255
    48f8:	4f 4f       	sbci	r20, 0xFF	; 255
    48fa:	5f 4f       	sbci	r21, 0xFF	; 255

000048fc <__divmodsi4_exit>:
    48fc:	08 95       	ret

000048fe <__divmodsi4_neg1>:
    48fe:	f6 f7       	brtc	.-4      	; 0x48fc <__divmodsi4_exit>
    4900:	90 95       	com	r25
    4902:	80 95       	com	r24
    4904:	70 95       	com	r23
    4906:	61 95       	neg	r22
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	8f 4f       	sbci	r24, 0xFF	; 255
    490c:	9f 4f       	sbci	r25, 0xFF	; 255
    490e:	08 95       	ret

00004910 <__prologue_saves__>:
    4910:	2f 92       	push	r2
    4912:	3f 92       	push	r3
    4914:	4f 92       	push	r4
    4916:	5f 92       	push	r5
    4918:	6f 92       	push	r6
    491a:	7f 92       	push	r7
    491c:	8f 92       	push	r8
    491e:	9f 92       	push	r9
    4920:	af 92       	push	r10
    4922:	bf 92       	push	r11
    4924:	cf 92       	push	r12
    4926:	df 92       	push	r13
    4928:	ef 92       	push	r14
    492a:	ff 92       	push	r15
    492c:	0f 93       	push	r16
    492e:	1f 93       	push	r17
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	ca 1b       	sub	r28, r26
    493a:	db 0b       	sbc	r29, r27
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	09 94       	ijmp

00004948 <__epilogue_restores__>:
    4948:	2a 88       	ldd	r2, Y+18	; 0x12
    494a:	39 88       	ldd	r3, Y+17	; 0x11
    494c:	48 88       	ldd	r4, Y+16	; 0x10
    494e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4950:	6e 84       	ldd	r6, Y+14	; 0x0e
    4952:	7d 84       	ldd	r7, Y+13	; 0x0d
    4954:	8c 84       	ldd	r8, Y+12	; 0x0c
    4956:	9b 84       	ldd	r9, Y+11	; 0x0b
    4958:	aa 84       	ldd	r10, Y+10	; 0x0a
    495a:	b9 84       	ldd	r11, Y+9	; 0x09
    495c:	c8 84       	ldd	r12, Y+8	; 0x08
    495e:	df 80       	ldd	r13, Y+7	; 0x07
    4960:	ee 80       	ldd	r14, Y+6	; 0x06
    4962:	fd 80       	ldd	r15, Y+5	; 0x05
    4964:	0c 81       	ldd	r16, Y+4	; 0x04
    4966:	1b 81       	ldd	r17, Y+3	; 0x03
    4968:	aa 81       	ldd	r26, Y+2	; 0x02
    496a:	b9 81       	ldd	r27, Y+1	; 0x01
    496c:	ce 0f       	add	r28, r30
    496e:	d1 1d       	adc	r29, r1
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	ed 01       	movw	r28, r26
    497c:	08 95       	ret

0000497e <_exit>:
    497e:	f8 94       	cli

00004980 <__stop_program>:
    4980:	ff cf       	rjmp	.-2      	; 0x4980 <__stop_program>
