
Smart_Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000432  00800060  00007c1c  00007cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800492  00800492  000080e2  2**0
                  ALLOC
  3 .stab         00008bc8  00000000  00000000  000080e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c30  00000000  00000000  00010cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000138dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00013afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00013d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  000166c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  00017d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000192f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00019530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  0001989b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a48b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_1>
       8:	0c 94 85 12 	jmp	0x250a	; 0x250a <__vector_2>
       c:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__vector_3>
      10:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__vector_4>
      14:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_5>
      18:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__vector_6>
      1c:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_7>
      20:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_8>
      24:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_9>
      28:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_10>
      2c:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_15>
      40:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	fc e7       	ldi	r31, 0x7C	; 124
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 31 	call	0x6348	; 0x6348 <main>
      8a:	0c 94 0c 3e 	jmp	0x7c18	; 0x7c18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a6 e5       	ldi	r26, 0x56	; 86
     360:	b3 e0       	ldi	r27, 0x03	; 3
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 fd 3d 	jmp	0x7bfa	; 0x7bfa <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 fd 3d 	jmp	0x7bfa	; 0x7bfa <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	86 e5       	ldi	r24, 0x56	; 86
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 dd 3d 	jmp	0x7bba	; 0x7bba <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	66 e5       	ldi	r22, 0x56	; 86
     8d4:	73 e0       	ldi	r23, 0x03	; 3
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 fd 3d 	jmp	0x7bfa	; 0x7bfa <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 fd 3d 	jmp	0x7bfa	; 0x7bfa <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 fd 3d 	jmp	0x7bfa	; 0x7bfa <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 de 3d 	jmp	0x7bbc	; 0x7bbc <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 fa 3d 	jmp	0x7bf4	; 0x7bf4 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 e5 3d 	jmp	0x7bca	; 0x7bca <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 01 3e 	jmp	0x7c02	; 0x7c02 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 dd 3d 	jmp	0x7bba	; 0x7bba <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e2 5a       	subi	r30, 0xA2	; 162
     ebc:	fc 4f       	sbci	r31, 0xFC	; 252
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <USART_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    122c:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    122e:	ab e2       	ldi	r26, 0x2B	; 43
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e2       	ldi	r30, 0x2B	; 43
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    1252:	ab e2       	ldi	r26, 0x2B	; 43
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1284:	aa e2       	ldi	r26, 0x2A	; 42
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ea e2       	ldi	r30, 0x2A	; 42
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    12a0:	aa e2       	ldi	r26, 0x2A	; 42
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e2       	ldi	r30, 0x2A	; 42
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    12ae:	aa e2       	ldi	r26, 0x2A	; 42
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    12ca:	aa e2       	ldi	r26, 0x2A	; 42
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e2       	ldi	r30, 0x2A	; 42
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 61       	ori	r24, 0x10	; 16
    12d6:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    12d8:	aa e2       	ldi	r26, 0x2A	; 42
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e2       	ldi	r30, 0x2A	; 42
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <USART_u8SendData+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <USART_u8SendData+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <USART_u8SendData+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    1302:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
    130c:	80 91 98 04 	lds	r24, 0x0498
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <USART_u8SendData+0x24>
    1314:	44 c0       	rjmp	.+136    	; 0x139e <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 98 04 	sts	0x0498, r24
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	ab 81       	ldd	r26, Y+3	; 0x03
    1324:	bc 81       	ldd	r27, Y+4	; 0x04
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1334:	eb e2       	ldi	r30, 0x2B	; 43
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	80 72       	andi	r24, 0x20	; 32
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	95 95       	asr	r25
    134c:	87 95       	ror	r24
    134e:	95 95       	asr	r25
    1350:	87 95       	ror	r24
    1352:	95 95       	asr	r25
    1354:	87 95       	ror	r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f4       	brne	.+24     	; 0x1372 <USART_u8SendData+0x80>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	27 e2       	ldi	r18, 0x27	; 39
    1366:	92 07       	cpc	r25, r18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	a2 07       	cpc	r26, r18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	b2 07       	cpc	r27, r18
    1370:	b1 f6       	brne	.-84     	; 0x131e <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	ab 81       	ldd	r26, Y+3	; 0x03
    1378:	bc 81       	ldd	r27, Y+4	; 0x04
    137a:	80 31       	cpi	r24, 0x10	; 16
    137c:	27 e2       	ldi	r18, 0x27	; 39
    137e:	92 07       	cpc	r25, r18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	a2 07       	cpc	r26, r18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	b2 07       	cpc	r27, r18
    1388:	19 f4       	brne	.+6      	; 0x1390 <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
    1398:	10 92 98 04 	sts	0x0498, r1
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	27 97       	sbiw	r28, 0x07	; 7
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	1b 82       	std	Y+3, r1	; 0x03
    13d6:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <USART_u8ReceiveData+0x2c>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
    13e2:	80 91 98 04 	lds	r24, 0x0498
    13e6:	88 23       	and	r24, r24
    13e8:	09 f0       	breq	.+2      	; 0x13ec <USART_u8ReceiveData+0x36>
    13ea:	3e c0       	rjmp	.+124    	; 0x1468 <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 98 04 	sts	0x0498, r24
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	ab 81       	ldd	r26, Y+3	; 0x03
    13fa:	bc 81       	ldd	r27, Y+4	; 0x04
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    140a:	eb e2       	ldi	r30, 0x2B	; 43
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 1f       	adc	r24, r24
    1412:	88 27       	eor	r24, r24
    1414:	88 1f       	adc	r24, r24
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f4       	brne	.+24     	; 0x1438 <USART_u8ReceiveData+0x82>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	ab 81       	ldd	r26, Y+3	; 0x03
    1426:	bc 81       	ldd	r27, Y+4	; 0x04
    1428:	80 31       	cpi	r24, 0x10	; 16
    142a:	27 e2       	ldi	r18, 0x27	; 39
    142c:	92 07       	cpc	r25, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	a2 07       	cpc	r26, r18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	b2 07       	cpc	r27, r18
    1436:	f1 f6       	brne	.-68     	; 0x13f4 <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	ab 81       	ldd	r26, Y+3	; 0x03
    143e:	bc 81       	ldd	r27, Y+4	; 0x04
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	27 e2       	ldi	r18, 0x27	; 39
    1444:	92 07       	cpc	r25, r18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	a2 07       	cpc	r26, r18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	b2 07       	cpc	r27, r18
    144e:	19 f4       	brne	.+6      	; 0x1456 <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    1456:	ec e2       	ldi	r30, 0x2C	; 44
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	ee 81       	ldd	r30, Y+6	; 0x06
    145e:	ff 81       	ldd	r31, Y+7	; 0x07
    1460:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
    1462:	10 92 98 04 	sts	0x0498, r1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1474:	27 96       	adiw	r28, 0x07	; 7
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	27 97       	sbiw	r28, 0x07	; 7
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9f 83       	std	Y+7, r25	; 0x07
    149c:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    149e:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32Index = 0;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	1b 82       	std	Y+3, r1	; 0x03
    14a6:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu8String != NULL)
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	29 f1       	breq	.+74     	; 0x14fa <USART_u8SendStringSynch+0x74>
    14b0:	19 c0       	rjmp	.+50     	; 0x14e4 <USART_u8SendStringSynch+0x5e>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    14b2:	29 81       	ldd	r18, Y+1	; 0x01
    14b4:	3a 81       	ldd	r19, Y+2	; 0x02
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	fc 01       	movw	r30, r24
    14bc:	e2 0f       	add	r30, r18
    14be:	f3 1f       	adc	r31, r19
    14c0:	80 81       	ld	r24, Z
    14c2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
    14c6:	8d 83       	std	Y+5, r24	; 0x05
      Local_u32Index++;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	ab 81       	ldd	r26, Y+3	; 0x03
    14ce:	bc 81       	ldd	r27, Y+4	; 0x04
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	a1 1d       	adc	r26, r1
    14d4:	b1 1d       	adc	r27, r1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	ab 83       	std	Y+3, r26	; 0x03
    14dc:	bc 83       	std	Y+4, r27	; 0x04
      if (Local_u8ErrorState != OK)
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	88 23       	and	r24, r24
    14e2:	69 f4       	brne	.+26     	; 0x14fe <USART_u8SendStringSynch+0x78>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    14e4:	29 81       	ldd	r18, Y+1	; 0x01
    14e6:	3a 81       	ldd	r19, Y+2	; 0x02
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	80 81       	ld	r24, Z
    14f4:	88 23       	and	r24, r24
    14f6:	e9 f6       	brne	.-70     	; 0x14b2 <USART_u8SendStringSynch+0x2c>
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <USART_u8SendStringSynch+0x78>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1500:	27 96       	adiw	r28, 0x07	; 7
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <USART_u8SendStringAsynch+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <USART_u8SendStringAsynch+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	7d 83       	std	Y+5, r23	; 0x05
    1526:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    1528:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    152a:	80 91 98 04 	lds	r24, 0x0498
    152e:	88 23       	and	r24, r24
    1530:	99 f5       	brne	.+102    	; 0x1598 <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f1       	breq	.+88     	; 0x1592 <USART_u8SendStringAsynch+0x80>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	41 f1       	breq	.+80     	; 0x1592 <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 98 04 	sts	0x0498, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	90 93 93 04 	sts	0x0493, r25
    1550:	80 93 92 04 	sts	0x0492, r24
      USART_pvNotificationFunc = NotificationFunc;
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	90 93 97 04 	sts	0x0497, r25
    155c:	80 93 96 04 	sts	0x0496, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    1560:	10 92 9a 04 	sts	0x049A, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    1564:	ac e2       	ldi	r26, 0x2C	; 44
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	20 91 92 04 	lds	r18, 0x0492
    156c:	30 91 93 04 	lds	r19, 0x0493
    1570:	80 91 9a 04 	lds	r24, 0x049A
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	f9 01       	movw	r30, r18
    157a:	e8 0f       	add	r30, r24
    157c:	f9 1f       	adc	r31, r25
    157e:	80 81       	ld	r24, Z
    1580:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    1582:	aa e2       	ldi	r26, 0x2A	; 42
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ea e2       	ldi	r30, 0x2A	; 42
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 64       	ori	r24, 0x40	; 64
    158e:	8c 93       	st	X, r24
    1590:	05 c0       	rjmp	.+10     	; 0x159c <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	02 c0       	rjmp	.+4      	; 0x159c <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	2b 97       	sbiw	r28, 0x0b	; 11
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	9f 83       	std	Y+7, r25	; 0x07
    15c4:	8e 83       	std	Y+6, r24	; 0x06
    15c6:	48 87       	std	Y+8, r20	; 0x08
    15c8:	59 87       	std	Y+9, r21	; 0x09
    15ca:	6a 87       	std	Y+10, r22	; 0x0a
    15cc:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    15ce:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    15d0:	8e 81       	ldd	r24, Y+6	; 0x06
    15d2:	9f 81       	ldd	r25, Y+7	; 0x07
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	51 f1       	breq	.+84     	; 0x162c <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	1a 82       	std	Y+2, r1	; 0x02
    15dc:	1b 82       	std	Y+3, r1	; 0x03
    15de:	1c 82       	std	Y+4, r1	; 0x04
    15e0:	17 c0       	rjmp	.+46     	; 0x1610 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    15e2:	29 81       	ldd	r18, Y+1	; 0x01
    15e4:	3a 81       	ldd	r19, Y+2	; 0x02
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    15f2:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	88 23       	and	r24, r24
    15f8:	d9 f4       	brne	.+54     	; 0x1630 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1600:	bc 81       	ldd	r27, Y+4	; 0x04
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	a1 1d       	adc	r26, r1
    1606:	b1 1d       	adc	r27, r1
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	ab 83       	std	Y+3, r26	; 0x03
    160e:	bc 83       	std	Y+4, r27	; 0x04
    1610:	29 81       	ldd	r18, Y+1	; 0x01
    1612:	3a 81       	ldd	r19, Y+2	; 0x02
    1614:	4b 81       	ldd	r20, Y+3	; 0x03
    1616:	5c 81       	ldd	r21, Y+4	; 0x04
    1618:	88 85       	ldd	r24, Y+8	; 0x08
    161a:	99 85       	ldd	r25, Y+9	; 0x09
    161c:	aa 85       	ldd	r26, Y+10	; 0x0a
    161e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1620:	28 17       	cp	r18, r24
    1622:	39 07       	cpc	r19, r25
    1624:	4a 07       	cpc	r20, r26
    1626:	5b 07       	cpc	r21, r27
    1628:	e0 f2       	brcs	.-72     	; 0x15e2 <USART_u8ReceiveBufferSynch+0x34>
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1632:	2b 96       	adiw	r28, 0x0b	; 11
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	29 97       	sbiw	r28, 0x09	; 9
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	8a 83       	std	Y+2, r24	; 0x02
    165c:	4c 83       	std	Y+4, r20	; 0x04
    165e:	5d 83       	std	Y+5, r21	; 0x05
    1660:	6e 83       	std	Y+6, r22	; 0x06
    1662:	7f 83       	std	Y+7, r23	; 0x07
    1664:	39 87       	std	Y+9, r19	; 0x09
    1666:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    1668:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    166a:	80 91 98 04 	lds	r24, 0x0498
    166e:	88 23       	and	r24, r24
    1670:	39 f5       	brne	.+78     	; 0x16c0 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	01 f1       	breq	.+64     	; 0x16ba <USART_u8ReceiveBufferAsynch+0x76>
    167a:	88 85       	ldd	r24, Y+8	; 0x08
    167c:	99 85       	ldd	r25, Y+9	; 0x09
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	e1 f0       	breq	.+56     	; 0x16ba <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 93 98 04 	sts	0x0498, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	90 93 95 04 	sts	0x0495, r25
    1690:	80 93 94 04 	sts	0x0494, r24
      USART_pvNotificationFunc = NotificationFunc;
    1694:	88 85       	ldd	r24, Y+8	; 0x08
    1696:	99 85       	ldd	r25, Y+9	; 0x09
    1698:	90 93 97 04 	sts	0x0497, r25
    169c:	80 93 96 04 	sts	0x0496, r24
      USART_u8BufferSize = Copy_u32BufferSize;
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	80 93 99 04 	sts	0x0499, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    16a6:	10 92 9a 04 	sts	0x049A, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    16aa:	aa e2       	ldi	r26, 0x2A	; 42
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ea e2       	ldi	r30, 0x2A	; 42
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 68       	ori	r24, 0x80	; 128
    16b6:	8c 93       	st	X, r24
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c6:	29 96       	adiw	r28, 0x09	; 9
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    1702:	20 91 94 04 	lds	r18, 0x0494
    1706:	30 91 95 04 	lds	r19, 0x0495
    170a:	80 91 9a 04 	lds	r24, 0x049A
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	d9 01       	movw	r26, r18
    1714:	a8 0f       	add	r26, r24
    1716:	b9 1f       	adc	r27, r25
    1718:	ec e2       	ldi	r30, 0x2C	; 44
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    1720:	80 91 9a 04 	lds	r24, 0x049A
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 9a 04 	sts	0x049A, r24

  if (USART_u8Index == USART_u8BufferSize)
    172a:	90 91 9a 04 	lds	r25, 0x049A
    172e:	80 91 99 04 	lds	r24, 0x0499
    1732:	98 17       	cp	r25, r24
    1734:	b1 f4       	brne	.+44     	; 0x1762 <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    1736:	10 92 9a 04 	sts	0x049A, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    173a:	10 92 98 04 	sts	0x0498, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    173e:	80 91 96 04 	lds	r24, 0x0496
    1742:	90 91 97 04 	lds	r25, 0x0497
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	29 f0       	breq	.+10     	; 0x1754 <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    174a:	e0 91 96 04 	lds	r30, 0x0496
    174e:	f0 91 97 04 	lds	r31, 0x0497
    1752:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    1754:	aa e2       	ldi	r26, 0x2A	; 42
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ea e2       	ldi	r30, 0x2A	; 42
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 77       	andi	r24, 0x7F	; 127
    1760:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	2f 93       	push	r18
    1794:	3f 93       	push	r19
    1796:	4f 93       	push	r20
    1798:	5f 93       	push	r21
    179a:	6f 93       	push	r22
    179c:	7f 93       	push	r23
    179e:	8f 93       	push	r24
    17a0:	9f 93       	push	r25
    17a2:	af 93       	push	r26
    17a4:	bf 93       	push	r27
    17a6:	ef 93       	push	r30
    17a8:	ff 93       	push	r31
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    17b2:	80 91 9a 04 	lds	r24, 0x049A
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	80 93 9a 04 	sts	0x049A, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    17bc:	20 91 92 04 	lds	r18, 0x0492
    17c0:	30 91 93 04 	lds	r19, 0x0493
    17c4:	80 91 9a 04 	lds	r24, 0x049A
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	b9 f4       	brne	.+46     	; 0x1806 <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    17d8:	10 92 9a 04 	sts	0x049A, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    17dc:	10 92 98 04 	sts	0x0498, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    17e0:	80 91 96 04 	lds	r24, 0x0496
    17e4:	90 91 97 04 	lds	r25, 0x0497
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    17ec:	e0 91 96 04 	lds	r30, 0x0496
    17f0:	f0 91 97 04 	lds	r31, 0x0497
    17f4:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    17f6:	aa e2       	ldi	r26, 0x2A	; 42
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ea e2       	ldi	r30, 0x2A	; 42
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	8c 93       	st	X, r24
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    1806:	ac e2       	ldi	r26, 0x2C	; 44
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	20 91 92 04 	lds	r18, 0x0492
    180e:	30 91 93 04 	lds	r19, 0x0493
    1812:	80 91 9a 04 	lds	r24, 0x049A
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	f9 01       	movw	r30, r18
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	80 81       	ld	r24, Z
    1822:	8c 93       	st	X, r24
  }
}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	ff 91       	pop	r31
    182a:	ef 91       	pop	r30
    182c:	bf 91       	pop	r27
    182e:	af 91       	pop	r26
    1830:	9f 91       	pop	r25
    1832:	8f 91       	pop	r24
    1834:	7f 91       	pop	r23
    1836:	6f 91       	pop	r22
    1838:	5f 91       	pop	r21
    183a:	4f 91       	pop	r20
    183c:	3f 91       	pop	r19
    183e:	2f 91       	pop	r18
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR0 , TCCR0_WGM00) ;
    1852:	a3 e5       	ldi	r26, 0x53	; 83
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e3 e5       	ldi	r30, 0x53	; 83
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    1860:	a3 e5       	ldi	r26, 0x53	; 83
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e3 e5       	ldi	r30, 0x53	; 83
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
					CLR_BIT(TCCR0 , TCCR0_COM01) ;
			#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
    186e:	a3 e5       	ldi	r26, 0x53	; 83
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e3 e5       	ldi	r30, 0x53	; 83
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7e       	andi	r24, 0xEF	; 239
    187a:	8c 93       	st	X, r24
					SET_BIT(TCCR0 , TCCR0_COM01) ;
    187c:	a3 e5       	ldi	r26, 0x53	; 83
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e3 e5       	ldi	r30, 0x53	; 83
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 62       	ori	r24, 0x20	; 32
    1888:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER0_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    188a:	ec e5       	ldi	r30, 0x5C	; 92
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	10 82       	st	Z, r1
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1890:	a3 e5       	ldi	r26, 0x53	; 83
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e3 e5       	ldi	r30, 0x53	; 83
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	88 7f       	andi	r24, 0xF8	; 248
    189c:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    189e:	a3 e5       	ldi	r26, 0x53	; 83
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e3 e5       	ldi	r30, 0x53	; 83
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8c 93       	st	X, r24
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    18b8:	af e4       	ldi	r26, 0x4F	; 79
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ef e4       	ldi	r30, 0x4F	; 79
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    18c6:	af e4       	ldi	r26, 0x4F	; 79
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	ef e4       	ldi	r30, 0x4F	; 79
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	82 60       	ori	r24, 0x02	; 2
    18d2:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    18d4:	ae e4       	ldi	r26, 0x4E	; 78
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ee e4       	ldi	r30, 0x4E	; 78
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	88 60       	ori	r24, 0x08	; 8
    18e0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    18e2:	ae e4       	ldi	r26, 0x4E	; 78
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ee e4       	ldi	r30, 0x4E	; 78
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    18f0:	ea e4       	ldi	r30, 0x4A	; 74
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	11 82       	std	Z+1, r1	; 0x01
    18f6:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    18f8:	e8 e4       	ldi	r30, 0x48	; 72
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	11 82       	std	Z+1, r1	; 0x01
    18fe:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1900:	e6 e4       	ldi	r30, 0x46	; 70
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	9e e4       	ldi	r25, 0x4E	; 78
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    190c:	ae e4       	ldi	r26, 0x4E	; 78
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ee e4       	ldi	r30, 0x4E	; 78
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 64       	ori	r24, 0x40	; 64
    1918:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    191a:	af e4       	ldi	r26, 0x4F	; 79
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ef e4       	ldi	r30, 0x4F	; 79
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 7b       	andi	r24, 0xBF	; 191
    1926:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1928:	af e4       	ldi	r26, 0x4F	; 79
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ef e4       	ldi	r30, 0x4F	; 79
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 68       	ori	r24, 0x80	; 128
    1934:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1936:	af e4       	ldi	r26, 0x4F	; 79
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ef e4       	ldi	r30, 0x4F	; 79
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7e       	andi	r24, 0xEF	; 239
    1942:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	80 62       	ori	r24, 0x20	; 32
    1950:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1952:	a9 e5       	ldi	r26, 0x59	; 89
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e9 e5       	ldi	r30, 0x59	; 89
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8b 7f       	andi	r24, 0xFB	; 251
    195e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1960:	a9 e5       	ldi	r26, 0x59	; 89
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e9 e5       	ldi	r30, 0x59	; 89
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8f 7e       	andi	r24, 0xEF	; 239
    196c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    196e:	a9 e5       	ldi	r26, 0x59	; 89
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e9 e5       	ldi	r30, 0x59	; 89
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	87 7f       	andi	r24, 0xF7	; 247
    197a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    197c:	a9 e5       	ldi	r26, 0x59	; 89
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e9 e5       	ldi	r30, 0x59	; 89
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7d       	andi	r24, 0xDF	; 223
    1988:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	88 7f       	andi	r24, 0xF8	; 248
    1996:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1998:	ae e4       	ldi	r26, 0x4E	; 78
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ee e4       	ldi	r30, 0x4E	; 78
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	82 60       	ori	r24, 0x02	; 2
    19a4:	8c 93       	st	X, r24


}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    19b4:	a2 e4       	ldi	r26, 0x42	; 66
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e2 e4       	ldi	r30, 0x42	; 66
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	88 60       	ori	r24, 0x08	; 8
    19c0:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    19c2:	a5 e4       	ldi	r26, 0x45	; 69
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e5 e4       	ldi	r30, 0x45	; 69
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 7b       	andi	r24, 0xBF	; 191
    19ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    19d0:	a5 e4       	ldi	r26, 0x45	; 69
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e5 e4       	ldi	r30, 0x45	; 69
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	87 7f       	andi	r24, 0xF7	; 247
    19dc:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    19de:	e4 e4       	ldi	r30, 0x44	; 68
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    19e4:	a9 e5       	ldi	r26, 0x59	; 89
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e9 e5       	ldi	r30, 0x59	; 89
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 64       	ori	r24, 0x40	; 64
    19f0:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

			/*Set the Required Prescaler*/
		TCCR2 &= TIMER_PRESCALER_MASK ;
    19f2:	a5 e4       	ldi	r26, 0x45	; 69
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e4       	ldi	r30, 0x45	; 69
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	88 7f       	andi	r24, 0xF8	; 248
    19fe:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
    1a00:	a5 e4       	ldi	r26, 0x45	; 69
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e5 e4       	ldi	r30, 0x45	; 69
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	85 60       	ori	r24, 0x05	; 5
    1a0c:	8c 93       	st	X, r24
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1a20:	e2 e5       	ldi	r30, 0x52	; 82
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 83       	st	Z, r24
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <TIMER1_vSetPreload+0x6>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1a3e:	ec e4       	ldi	r30, 0x4C	; 76
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	80 83       	st	Z, r24
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1a60:	e4 e4       	ldi	r30, 0x44	; 68
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	80 83       	st	Z, r24
}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1a7c:	ec e5       	ldi	r30, 0x5C	; 92
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	80 83       	st	Z, r24
}
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <TIMER1_vSetCTCA+0x6>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1a9a:	ea e4       	ldi	r30, 0x4A	; 74
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <TIMER1_vSetCTCB+0x6>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1abe:	e8 e4       	ldi	r30, 0x48	; 72
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1ae0:	e3 e4       	ldi	r30, 0x43	; 67
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	80 83       	st	Z, r24
}
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <TIMER1_vSetICR1+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1afe:	e6 e4       	ldi	r30, 0x46	; 70
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1b1c:	e2 e5       	ldi	r30, 0x52	; 82
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1b30:	ec e4       	ldi	r30, 0x4C	; 76
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1b46:	e4 e4       	ldi	r30, 0x44	; 68
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <TIMER_vSetPWM+0x6>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1b60:	ea e4       	ldi	r30, 0x4A	; 74
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <Timer2_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer2_vSetPrescaler(u8 Prescaler)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1b82:	a5 e4       	ldi	r26, 0x45	; 69
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e5 e4       	ldi	r30, 0x45	; 69
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 7f       	andi	r24, 0xF8	; 248
    1b8e:	8c 93       	st	X, r24
	TCCR2 |= Prescaler ;
    1b90:	a5 e4       	ldi	r26, 0x45	; 69
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e5 e4       	ldi	r30, 0x45	; 69
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	90 81       	ld	r25, Z
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	89 2b       	or	r24, r25
    1b9e:	8c 93       	st	X, r24
}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <Timer0_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer0_vSetPrescaler(u8 Prescaler)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	0f 92       	push	r0
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 7f       	andi	r24, 0xF8	; 248
    1bc0:	8c 93       	st	X, r24
	TCCR0 |= Prescaler ;
    1bc2:	a3 e5       	ldi	r26, 0x53	; 83
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e3 e5       	ldi	r30, 0x53	; 83
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	90 81       	ld	r25, Z
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	89 2b       	or	r24, r25
    1bd0:	8c 93       	st	X, r24
}
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1be2:	ae e4       	ldi	r26, 0x4E	; 78
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ee e4       	ldi	r30, 0x4E	; 78
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 64       	ori	r24, 0x40	; 64
    1bee:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1bf0:	a9 e5       	ldi	r26, 0x59	; 89
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e9 e5       	ldi	r30, 0x59	; 89
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 62       	ori	r24, 0x20	; 32
    1bfc:	8c 93       	st	X, r24
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <TIMER_vICUSetTriggerEdge+0x6>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    1c10:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	41 f4       	brne	.+16     	; 0x1c28 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c18:	ae e4       	ldi	r26, 0x4E	; 78
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ee e4       	ldi	r30, 0x4E	; 78
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	8c 93       	st	X, r24
    1c26:	0d c0       	rjmp	.+26     	; 0x1c42 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 23       	and	r24, r24
    1c2c:	41 f4       	brne	.+16     	; 0x1c3e <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1c2e:	ae e4       	ldi	r26, 0x4E	; 78
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ee e4       	ldi	r30, 0x4E	; 78
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7b       	andi	r24, 0xBF	; 191
    1c3a:	8c 93       	st	X, r24
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1c56:	a9 e5       	ldi	r26, 0x59	; 89
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e9 e5       	ldi	r30, 0x59	; 89
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	8c 93       	st	X, r24
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1c72:	a9 e5       	ldi	r26, 0x59	; 89
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e9 e5       	ldi	r30, 0x59	; 89
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7d       	andi	r24, 0xDF	; 223
    1c7e:	8c 93       	st	X, r24
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1c8e:	e6 e4       	ldi	r30, 0x46	; 70
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1ca4:	a1 e4       	ldi	r26, 0x41	; 65
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e1 e4       	ldi	r30, 0x41	; 65
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	88 7f       	andi	r24, 0xF8	; 248
    1cb0:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1cb2:	a1 e4       	ldi	r26, 0x41	; 65
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e1 e4       	ldi	r30, 0x41	; 65
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	86 60       	ori	r24, 0x06	; 6
    1cbe:	8c 93       	st	X, r24
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    1cce:	a1 e4       	ldi	r26, 0x41	; 65
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e1 e4       	ldi	r30, 0x41	; 65
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 60       	ori	r24, 0x08	; 8
    1cda:	8c 93       	st	X, r24
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1cea:	a1 e4       	ldi	r26, 0x41	; 65
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e1 e4       	ldi	r30, 0x41	; 65
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 61       	ori	r24, 0x18	; 24
    1cf6:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1cf8:	e1 e4       	ldi	r30, 0x41	; 65
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	10 82       	st	Z, r1
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <TIMER_u8SetCallBack+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <TIMER_u8SetCallBack+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9b 83       	std	Y+3, r25	; 0x03
    1d12:	8a 83       	std	Y+2, r24	; 0x02
    1d14:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1d16:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f0       	breq	.+26     	; 0x1d3a <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e5 56       	subi	r30, 0x65	; 101
    1d2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1d4e:	1f 92       	push	r1
    1d50:	0f 92       	push	r0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	0f 92       	push	r0
    1d56:	11 24       	eor	r1, r1
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	4f 93       	push	r20
    1d5e:	5f 93       	push	r21
    1d60:	6f 93       	push	r22
    1d62:	7f 93       	push	r23
    1d64:	8f 93       	push	r24
    1d66:	9f 93       	push	r25
    1d68:	af 93       	push	r26
    1d6a:	bf 93       	push	r27
    1d6c:	ef 93       	push	r30
    1d6e:	ff 93       	push	r31
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1d78:	80 91 b1 04 	lds	r24, 0x04B1
    1d7c:	90 91 b2 04 	lds	r25, 0x04B2
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1d84:	e0 91 b1 04 	lds	r30, 0x04B1
    1d88:	f0 91 b2 04 	lds	r31, 0x04B2
    1d8c:	09 95       	icall
	}
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    1dde:	80 91 af 04 	lds	r24, 0x04AF
    1de2:	90 91 b0 04 	lds	r25, 0x04B0
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1dea:	e0 91 af 04 	lds	r30, 0x04AF
    1dee:	f0 91 b0 04 	lds	r31, 0x04B0
    1df2:	09 95       	icall
	}
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	bf 91       	pop	r27
    1dfe:	af 91       	pop	r26
    1e00:	9f 91       	pop	r25
    1e02:	8f 91       	pop	r24
    1e04:	7f 91       	pop	r23
    1e06:	6f 91       	pop	r22
    1e08:	5f 91       	pop	r21
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	2f 93       	push	r18
    1e26:	3f 93       	push	r19
    1e28:	4f 93       	push	r20
    1e2a:	5f 93       	push	r21
    1e2c:	6f 93       	push	r22
    1e2e:	7f 93       	push	r23
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	af 93       	push	r26
    1e36:	bf 93       	push	r27
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1e44:	80 91 ad 04 	lds	r24, 0x04AD
    1e48:	90 91 ae 04 	lds	r25, 0x04AE
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1e50:	e0 91 ad 04 	lds	r30, 0x04AD
    1e54:	f0 91 ae 04 	lds	r31, 0x04AE
    1e58:	09 95       	icall
	}
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1eaa:	80 91 ab 04 	lds	r24, 0x04AB
    1eae:	90 91 ac 04 	lds	r25, 0x04AC
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1eb6:	e0 91 ab 04 	lds	r30, 0x04AB
    1eba:	f0 91 ac 04 	lds	r31, 0x04AC
    1ebe:	09 95       	icall
	}
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	2f 93       	push	r18
    1ef2:	3f 93       	push	r19
    1ef4:	4f 93       	push	r20
    1ef6:	5f 93       	push	r21
    1ef8:	6f 93       	push	r22
    1efa:	7f 93       	push	r23
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1f10:	80 91 a9 04 	lds	r24, 0x04A9
    1f14:	90 91 aa 04 	lds	r25, 0x04AA
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1f1c:	e0 91 a9 04 	lds	r30, 0x04A9
    1f20:	f0 91 aa 04 	lds	r31, 0x04AA
    1f24:	09 95       	icall
	}
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1f4c:	1f 92       	push	r1
    1f4e:	0f 92       	push	r0
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	0f 92       	push	r0
    1f54:	11 24       	eor	r1, r1
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	6f 93       	push	r22
    1f60:	7f 93       	push	r23
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1f76:	80 91 a7 04 	lds	r24, 0x04A7
    1f7a:	90 91 a8 04 	lds	r25, 0x04A8
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1f82:	e0 91 a7 04 	lds	r30, 0x04A7
    1f86:	f0 91 a8 04 	lds	r31, 0x04A8
    1f8a:	09 95       	icall
	}
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	ff 91       	pop	r31
    1f92:	ef 91       	pop	r30
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	2f 93       	push	r18
    1fbe:	3f 93       	push	r19
    1fc0:	4f 93       	push	r20
    1fc2:	5f 93       	push	r21
    1fc4:	6f 93       	push	r22
    1fc6:	7f 93       	push	r23
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	af 93       	push	r26
    1fce:	bf 93       	push	r27
    1fd0:	ef 93       	push	r30
    1fd2:	ff 93       	push	r31
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1fdc:	80 91 a5 04 	lds	r24, 0x04A5
    1fe0:	90 91 a6 04 	lds	r25, 0x04A6
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1fe8:	e0 91 a5 04 	lds	r30, 0x04A5
    1fec:	f0 91 a6 04 	lds	r31, 0x04A6
    1ff0:	09 95       	icall
	}
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	ff 91       	pop	r31
    1ff8:	ef 91       	pop	r30
    1ffa:	bf 91       	pop	r27
    1ffc:	af 91       	pop	r26
    1ffe:	9f 91       	pop	r25
    2000:	8f 91       	pop	r24
    2002:	7f 91       	pop	r23
    2004:	6f 91       	pop	r22
    2006:	5f 91       	pop	r21
    2008:	4f 91       	pop	r20
    200a:	3f 91       	pop	r19
    200c:	2f 91       	pop	r18
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    2018:	1f 92       	push	r1
    201a:	0f 92       	push	r0
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	4f 93       	push	r20
    2028:	5f 93       	push	r21
    202a:	6f 93       	push	r22
    202c:	7f 93       	push	r23
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	af 93       	push	r26
    2034:	bf 93       	push	r27
    2036:	ef 93       	push	r30
    2038:	ff 93       	push	r31
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    2042:	80 91 a3 04 	lds	r24, 0x04A3
    2046:	90 91 a4 04 	lds	r25, 0x04A4
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	29 f0       	breq	.+10     	; 0x2058 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    204e:	e0 91 a3 04 	lds	r30, 0x04A3
    2052:	f0 91 a4 04 	lds	r31, 0x04A4
    2056:	09 95       	icall
	}
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    2086:	af e5       	ldi	r26, 0x5F	; 95
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	ef e5       	ldi	r30, 0x5F	; 95
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	80 68       	ori	r24, 0x80	; 128
    2092:	8c 93       	st	X, r24
}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    20a2:	af e5       	ldi	r26, 0x5F	; 95
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ef e5       	ldi	r30, 0x5F	; 95
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8f 77       	andi	r24, 0x7F	; 127
    20ae:	8c 93       	st	X, r24
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <EXTI_vInit>:
 *                                             *-----------------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void EXTI_vInit(void)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
        SET_BIT(MCUCR, 0);
        CLR_BIT(MCUCR, 1);

      #elif EXTI_SENSE_MODE == EXTI_FALLING_EDGE

        CLR_BIT(MCUCR, 0);
    20be:	a5 e5       	ldi	r26, 0x55	; 85
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e5 e5       	ldi	r30, 0x55	; 85
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8e 7f       	andi	r24, 0xFE	; 254
    20ca:	8c 93       	st	X, r24
        SET_BIT(MCUCR, 1);
    20cc:	a5 e5       	ldi	r26, 0x55	; 85
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e5 e5       	ldi	r30, 0x55	; 85
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	8c 93       	st	X, r24
        SET_BIT(MCUCSR, 6);

      #endif
    #endif
  #endif
}
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <EXTI_vSetSignal>:
 *		Copy_u8Line      => [EXTI_LINEx](x=0..2)
 *
 * return     : Nothing
 */
void EXTI_vSetSignal(u8 Copy_u8SenseMode, u8 Copy_u8Line)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <EXTI_vSetSignal+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <EXTI_vSetSignal+0x8>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <EXTI_vSetSignal+0xa>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	6a 83       	std	Y+2, r22	; 0x02
  if (Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1)
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	86 30       	cpi	r24, 0x06	; 6
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <EXTI_vSetSignal+0x1a>
    20f8:	d3 c0       	rjmp	.+422    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	08 f0       	brcs	.+2      	; 0x2102 <EXTI_vSetSignal+0x22>
    2100:	cf c0       	rjmp	.+414    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
  {
    Copy_u8Line = (6 - Copy_u8Line) * -2;
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	06 97       	sbiw	r24, 0x06	; 6
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	8a 83       	std	Y+2, r24	; 0x02

    switch (Copy_u8SenseMode)
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	3e 83       	std	Y+6, r19	; 0x06
    2118:	2d 83       	std	Y+5, r18	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	91 05       	cpc	r25, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <EXTI_vSetSignal+0x46>
    2124:	95 c0       	rjmp	.+298    	; 0x2250 <EXTI_vSetSignal+0x170>
    2126:	2d 81       	ldd	r18, Y+5	; 0x05
    2128:	3e 81       	ldd	r19, Y+6	; 0x06
    212a:	22 30       	cpi	r18, 0x02	; 2
    212c:	31 05       	cpc	r19, r1
    212e:	34 f4       	brge	.+12     	; 0x213c <EXTI_vSetSignal+0x5c>
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	09 f4       	brne	.+2      	; 0x213a <EXTI_vSetSignal+0x5a>
    2138:	61 c0       	rjmp	.+194    	; 0x21fc <EXTI_vSetSignal+0x11c>
    213a:	b2 c0       	rjmp	.+356    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
    213c:	2d 81       	ldd	r18, Y+5	; 0x05
    213e:	3e 81       	ldd	r19, Y+6	; 0x06
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	31 f0       	breq	.+12     	; 0x2152 <EXTI_vSetSignal+0x72>
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	91 05       	cpc	r25, r1
    214e:	61 f1       	breq	.+88     	; 0x21a8 <EXTI_vSetSignal+0xc8>
    2150:	a7 c0       	rjmp	.+334    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
    {
    case EXTI_LOW_LEVEL:
      CLR_BIT(MCUCR, Copy_u8Line);
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 c0       	rjmp	.+4      	; 0x216e <EXTI_vSetSignal+0x8e>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	2a 95       	dec	r18
    2170:	e2 f7       	brpl	.-8      	; 0x216a <EXTI_vSetSignal+0x8a>
    2172:	80 95       	com	r24
    2174:	84 23       	and	r24, r20
    2176:	8c 93       	st	X, r24
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    2178:	a5 e5       	ldi	r26, 0x55	; 85
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e5 e5       	ldi	r30, 0x55	; 85
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 01       	movw	r18, r24
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <EXTI_vSetSignal+0xbc>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <EXTI_vSetSignal+0xb8>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	7c c0       	rjmp	.+248    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_ON_CHANGE:
      SET_BIT(MCUCR, Copy_u8Line);
    21a8:	a5 e5       	ldi	r26, 0x55	; 85
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e5       	ldi	r30, 0x55	; 85
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <EXTI_vSetSignal+0xe4>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	2a 95       	dec	r18
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <EXTI_vSetSignal+0xe0>
    21c8:	84 2b       	or	r24, r20
    21ca:	8c 93       	st	X, r24
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    21cc:	a5 e5       	ldi	r26, 0x55	; 85
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e5       	ldi	r30, 0x55	; 85
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9c 01       	movw	r18, r24
    21e0:	2f 5f       	subi	r18, 0xFF	; 255
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <EXTI_vSetSignal+0x110>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <EXTI_vSetSignal+0x10c>
    21f4:	80 95       	com	r24
    21f6:	84 23       	and	r24, r20
    21f8:	8c 93       	st	X, r24
    21fa:	52 c0       	rjmp	.+164    	; 0x22a0 <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCR, Copy_u8Line);
    21fc:	a5 e5       	ldi	r26, 0x55	; 85
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e5 e5       	ldi	r30, 0x55	; 85
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <EXTI_vSetSignal+0x138>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	2a 95       	dec	r18
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <EXTI_vSetSignal+0x134>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2222:	a5 e5       	ldi	r26, 0x55	; 85
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e5 e5       	ldi	r30, 0x55	; 85
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 01       	movw	r18, r24
    2236:	2f 5f       	subi	r18, 0xFF	; 255
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <EXTI_vSetSignal+0x166>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <EXTI_vSetSignal+0x162>
    224a:	84 2b       	or	r24, r20
    224c:	8c 93       	st	X, r24
    224e:	28 c0       	rjmp	.+80     	; 0x22a0 <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCR, Copy_u8Line);
    2250:	a5 e5       	ldi	r26, 0x55	; 85
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e5 e5       	ldi	r30, 0x55	; 85
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <EXTI_vSetSignal+0x18c>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	2a 95       	dec	r18
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <EXTI_vSetSignal+0x188>
    2270:	84 2b       	or	r24, r20
    2272:	8c 93       	st	X, r24
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2274:	a5 e5       	ldi	r26, 0x55	; 85
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e5       	ldi	r30, 0x55	; 85
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 01       	movw	r18, r24
    2288:	2f 5f       	subi	r18, 0xFF	; 255
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	02 2e       	mov	r0, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <EXTI_vSetSignal+0x1b8>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <EXTI_vSetSignal+0x1b4>
    229c:	84 2b       	or	r24, r20
    229e:	8c 93       	st	X, r24
      break;
    }
  }
  if (Copy_u8Line == EXTI_LINE2)
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	85 30       	cpi	r24, 0x05	; 5
    22a4:	f1 f4       	brne	.+60     	; 0x22e2 <EXTI_vSetSignal+0x202>
  {
    switch (Copy_u8SenseMode)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3c 83       	std	Y+4, r19	; 0x04
    22ae:	2b 83       	std	Y+3, r18	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <EXTI_vSetSignal+0x1e4>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	21 30       	cpi	r18, 0x01	; 1
    22be:	31 05       	cpc	r19, r1
    22c0:	49 f0       	breq	.+18     	; 0x22d4 <EXTI_vSetSignal+0x1f4>
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <EXTI_vSetSignal+0x202>
    {
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCSR, 6);
    22c4:	a4 e5       	ldi	r26, 0x54	; 84
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e4 e5       	ldi	r30, 0x54	; 84
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 7b       	andi	r24, 0xBF	; 191
    22d0:	8c 93       	st	X, r24
    22d2:	07 c0       	rjmp	.+14     	; 0x22e2 <EXTI_vSetSignal+0x202>
      break;
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCSR, 6);
    22d4:	a4 e5       	ldi	r26, 0x54	; 84
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e4 e5       	ldi	r30, 0x54	; 84
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 64       	ori	r24, 0x40	; 64
    22e0:	8c 93       	st	X, r24
      break;
      ;
    }
  }
}
    22e2:	26 96       	adiw	r28, 0x06	; 6
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <EXTI_vDisableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vDisableInterrupt(u8 Copy_u8Line)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <EXTI_vDisableInterrupt+0x6>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2300:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	86 30       	cpi	r24, 0x06	; 6
    2306:	31 f0       	breq	.+12     	; 0x2314 <EXTI_vDisableInterrupt+0x20>
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	87 30       	cpi	r24, 0x07	; 7
    230c:	19 f0       	breq	.+6      	; 0x2314 <EXTI_vDisableInterrupt+0x20>
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	85 30       	cpi	r24, 0x05	; 5
    2312:	a9 f4       	brne	.+42     	; 0x233e <EXTI_vDisableInterrupt+0x4a>
  {
    /* Clear The Required BIT */
    CLR_BIT(GICR, Copy_u8Line);
    2314:	ab e5       	ldi	r26, 0x5B	; 91
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e5       	ldi	r30, 0x5B	; 91
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	48 2f       	mov	r20, r24
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	02 2e       	mov	r0, r18
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <EXTI_vDisableInterrupt+0x3e>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	0a 94       	dec	r0
    2334:	e2 f7       	brpl	.-8      	; 0x232e <EXTI_vDisableInterrupt+0x3a>
    2336:	80 95       	com	r24
    2338:	84 23       	and	r24, r20
    233a:	8c 93       	st	X, r24
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <EXTI_vDisableInterrupt+0x4e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <EXTI_vEnableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vEnableInterrupt(u8 Copy_u8Line)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <EXTI_vEnableInterrupt+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    235a:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	86 30       	cpi	r24, 0x06	; 6
    2360:	31 f0       	breq	.+12     	; 0x236e <EXTI_vEnableInterrupt+0x20>
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	87 30       	cpi	r24, 0x07	; 7
    2366:	19 f0       	breq	.+6      	; 0x236e <EXTI_vEnableInterrupt+0x20>
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	85 30       	cpi	r24, 0x05	; 5
    236c:	a1 f4       	brne	.+40     	; 0x2396 <EXTI_vEnableInterrupt+0x48>
  {
    SET_BIT(GICR, Copy_u8Line);
    236e:	ab e5       	ldi	r26, 0x5B	; 91
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	eb e5       	ldi	r30, 0x5B	; 91
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <EXTI_vEnableInterrupt+0x3e>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <EXTI_vEnableInterrupt+0x3a>
    2390:	84 2b       	or	r24, r20
    2392:	8c 93       	st	X, r24
    2394:	02 c0       	rjmp	.+4      	; 0x239a <EXTI_vEnableInterrupt+0x4c>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    239a:	89 81       	ldd	r24, Y+1	; 0x01
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <EXTI_vClearFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : nothing
 */
void EXTI_vClearFlag(u8 Copy_u8Line)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	0f 92       	push	r0
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	89 83       	std	Y+1, r24	; 0x01
  SET_BIT(GIFR, Copy_u8Line);
    23b2:	aa e5       	ldi	r26, 0x5A	; 90
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ea e5       	ldi	r30, 0x5A	; 90
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <EXTI_vClearFlag+0x2a>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <EXTI_vClearFlag+0x26>
    23d4:	84 2b       	or	r24, r20
    23d6:	8c 93       	st	X, r24
}
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <EXTI_u8GETFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Reading value
 */
u8 EXTI_u8GETFlag(u8 Copy_u8Line)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	0f 92       	push	r0
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	89 83       	std	Y+1, r24	; 0x01

  return READ_BIT(GIFR, Copy_u8Line);
    23ec:	ea e5       	ldi	r30, 0x5A	; 90
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	48 2f       	mov	r20, r24
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <EXTI_u8GETFlag+0x26>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	2a 95       	dec	r18
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <EXTI_u8GETFlag+0x22>
    240a:	9a 01       	movw	r18, r20
    240c:	28 23       	and	r18, r24
    240e:	39 23       	and	r19, r25
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a9 01       	movw	r20, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <EXTI_u8GETFlag+0x3e>
    241a:	55 95       	asr	r21
    241c:	47 95       	ror	r20
    241e:	8a 95       	dec	r24
    2420:	e2 f7       	brpl	.-8      	; 0x241a <EXTI_u8GETFlag+0x3a>
    2422:	ca 01       	movw	r24, r20
}
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <EXTI_vSetCallBack>:
 * 		Copy_u8Line        => [EXTI_LINE0 , EXTI_LINE1 , EXTI_LINE2]
 *
 * return     : Error status with type u8
 */
u8 EXTI_vSetCallBack(void (*Copy_pvCallBack)(void), u8 Copy_u8Line)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <EXTI_vSetCallBack+0x6>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <EXTI_vSetCallBack+0x8>
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	9b 83       	std	Y+3, r25	; 0x03
    243a:	8a 83       	std	Y+2, r24	; 0x02
    243c:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    243e:	19 82       	std	Y+1, r1	; 0x01
  if (Copy_pvCallBack != NULL)
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	09 f1       	breq	.+66     	; 0x248a <EXTI_vSetCallBack+0x5e>
  {
    if (Copy_u8Line == EXTI_LINE0)
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	86 30       	cpi	r24, 0x06	; 6
    244c:	39 f4       	brne	.+14     	; 0x245c <EXTI_vSetCallBack+0x30>
    {

      EXTI_CallBack[0] = Copy_pvCallBack;
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	90 93 ac 04 	sts	0x04AC, r25
    2456:	80 93 ab 04 	sts	0x04AB, r24
    245a:	19 c0       	rjmp	.+50     	; 0x248e <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE1)
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	87 30       	cpi	r24, 0x07	; 7
    2460:	39 f4       	brne	.+14     	; 0x2470 <EXTI_vSetCallBack+0x44>
    {

      EXTI_CallBack[1] = Copy_pvCallBack;
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	90 93 ae 04 	sts	0x04AE, r25
    246a:	80 93 ad 04 	sts	0x04AD, r24
    246e:	0f c0       	rjmp	.+30     	; 0x248e <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE2)
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	85 30       	cpi	r24, 0x05	; 5
    2474:	39 f4       	brne	.+14     	; 0x2484 <EXTI_vSetCallBack+0x58>
    {

      EXTI_CallBack[2] = Copy_pvCallBack;
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	9b 81       	ldd	r25, Y+3	; 0x03
    247a:	90 93 b0 04 	sts	0x04B0, r25
    247e:	80 93 af 04 	sts	0x04AF, r24
    2482:	05 c0       	rjmp	.+10     	; 0x248e <EXTI_vSetCallBack+0x62>
    }
    else
    {
      Local_u8ErrorState = NOK;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	02 c0       	rjmp	.+4      	; 0x248e <EXTI_vSetCallBack+0x62>
    }
  }
  else
  {
    Local_u8ErrorState = NOK;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <__vector_1>:

/* ISR --> Implementation */

void __vector_1(void)              __attribute__((signal));
void __vector_1(void)
{
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	0f 92       	push	r0
    24a6:	11 24       	eor	r1, r1
    24a8:	2f 93       	push	r18
    24aa:	3f 93       	push	r19
    24ac:	4f 93       	push	r20
    24ae:	5f 93       	push	r21
    24b0:	6f 93       	push	r22
    24b2:	7f 93       	push	r23
    24b4:	8f 93       	push	r24
    24b6:	9f 93       	push	r25
    24b8:	af 93       	push	r26
    24ba:	bf 93       	push	r27
    24bc:	ef 93       	push	r30
    24be:	ff 93       	push	r31
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[0] != NULL)
    24c8:	80 91 ab 04 	lds	r24, 0x04AB
    24cc:	90 91 ac 04 	lds	r25, 0x04AC
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	41 f0       	breq	.+16     	; 0x24e4 <__vector_1+0x46>
  {

    EXTI_CallBack[0]();
    24d4:	e0 91 ab 04 	lds	r30, 0x04AB
    24d8:	f0 91 ac 04 	lds	r31, 0x04AC
    24dc:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE0);
    24de:	86 e0       	ldi	r24, 0x06	; 6
    24e0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <EXTI_vClearFlag>
  }
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	ff 91       	pop	r31
    24ea:	ef 91       	pop	r30
    24ec:	bf 91       	pop	r27
    24ee:	af 91       	pop	r26
    24f0:	9f 91       	pop	r25
    24f2:	8f 91       	pop	r24
    24f4:	7f 91       	pop	r23
    24f6:	6f 91       	pop	r22
    24f8:	5f 91       	pop	r21
    24fa:	4f 91       	pop	r20
    24fc:	3f 91       	pop	r19
    24fe:	2f 91       	pop	r18
    2500:	0f 90       	pop	r0
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	0f 90       	pop	r0
    2506:	1f 90       	pop	r1
    2508:	18 95       	reti

0000250a <__vector_2>:

void __vector_2(void)            __attribute__((signal));
void __vector_2(void)
{
    250a:	1f 92       	push	r1
    250c:	0f 92       	push	r0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	0f 92       	push	r0
    2512:	11 24       	eor	r1, r1
    2514:	2f 93       	push	r18
    2516:	3f 93       	push	r19
    2518:	4f 93       	push	r20
    251a:	5f 93       	push	r21
    251c:	6f 93       	push	r22
    251e:	7f 93       	push	r23
    2520:	8f 93       	push	r24
    2522:	9f 93       	push	r25
    2524:	af 93       	push	r26
    2526:	bf 93       	push	r27
    2528:	ef 93       	push	r30
    252a:	ff 93       	push	r31
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[1] != NULL)
    2534:	80 91 ad 04 	lds	r24, 0x04AD
    2538:	90 91 ae 04 	lds	r25, 0x04AE
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	41 f0       	breq	.+16     	; 0x2550 <__vector_2+0x46>
  {

    EXTI_CallBack[1]();
    2540:	e0 91 ad 04 	lds	r30, 0x04AD
    2544:	f0 91 ae 04 	lds	r31, 0x04AE
    2548:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE1);
    254a:	87 e0       	ldi	r24, 0x07	; 7
    254c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <EXTI_vClearFlag>
  }
}
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	ff 91       	pop	r31
    2556:	ef 91       	pop	r30
    2558:	bf 91       	pop	r27
    255a:	af 91       	pop	r26
    255c:	9f 91       	pop	r25
    255e:	8f 91       	pop	r24
    2560:	7f 91       	pop	r23
    2562:	6f 91       	pop	r22
    2564:	5f 91       	pop	r21
    2566:	4f 91       	pop	r20
    2568:	3f 91       	pop	r19
    256a:	2f 91       	pop	r18
    256c:	0f 90       	pop	r0
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	0f 90       	pop	r0
    2572:	1f 90       	pop	r1
    2574:	18 95       	reti

00002576 <__vector_3>:

void __vector_3(void)              __attribute__((signal));
void __vector_3(void) 
{
    2576:	1f 92       	push	r1
    2578:	0f 92       	push	r0
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	0f 92       	push	r0
    257e:	11 24       	eor	r1, r1
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[2] != NULL)
    25a0:	80 91 af 04 	lds	r24, 0x04AF
    25a4:	90 91 b0 04 	lds	r25, 0x04B0
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	41 f0       	breq	.+16     	; 0x25bc <__vector_3+0x46>
  {

    EXTI_CallBack[2]();
    25ac:	e0 91 af 04 	lds	r30, 0x04AF
    25b0:	f0 91 b0 04 	lds	r31, 0x04B0
    25b4:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE2);
    25b6:	85 e0       	ldi	r24, 0x05	; 5
    25b8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <EXTI_vClearFlag>
  }
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	ff 91       	pop	r31
    25c2:	ef 91       	pop	r30
    25c4:	bf 91       	pop	r27
    25c6:	af 91       	pop	r26
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	7f 91       	pop	r23
    25ce:	6f 91       	pop	r22
    25d0:	5f 91       	pop	r21
    25d2:	4f 91       	pop	r20
    25d4:	3f 91       	pop	r19
    25d6:	2f 91       	pop	r18
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	0f 90       	pop	r0
    25de:	1f 90       	pop	r1
    25e0:	18 95       	reti

000025e2 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <EEPROM_vWrite+0x6>
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    25f4:	ee e3       	ldi	r30, 0x3E	; 62
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
  /*set up data register*/
  EEDR_REG = data;
    2600:	ed e3       	ldi	r30, 0x3D	; 61
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	80 83       	st	Z, r24
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    2608:	ac e3       	ldi	r26, 0x3C	; 60
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	ec e3       	ldi	r30, 0x3C	; 60
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	84 60       	ori	r24, 0x04	; 4
    2614:	8c 93       	st	X, r24
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    2616:	ac e3       	ldi	r26, 0x3C	; 60
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ec e3       	ldi	r30, 0x3C	; 60
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	82 60       	ori	r24, 0x02	; 2
    2622:	8c 93       	st	X, r24
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    2624:	ec e3       	ldi	r30, 0x3C	; 60
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	82 70       	andi	r24, 0x02	; 2
    2630:	90 70       	andi	r25, 0x00	; 0
    2632:	95 95       	asr	r25
    2634:	87 95       	ror	r24
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	a1 f3       	breq	.-24     	; 0x2624 <EEPROM_vWrite+0x42>
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <EEPROM_vRead+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    2656:	ee e3       	ldi	r30, 0x3E	; 62
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    265e:	ef e3       	ldi	r30, 0x3F	; 63
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	89 2f       	mov	r24, r25
    2668:	99 27       	eor	r25, r25
    266a:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    266c:	ac e3       	ldi	r26, 0x3C	; 60
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	ec e3       	ldi	r30, 0x3C	; 60
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	81 60       	ori	r24, 0x01	; 1
    2678:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    267a:	ed e3       	ldi	r30, 0x3D	; 61
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	28 97       	sbiw	r28, 0x08	; 8
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	8a 83       	std	Y+2, r24	; 0x02
    26a0:	6b 83       	std	Y+3, r22	; 0x03
    26a2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_errorStatus LOC_enumState = DIO_OK;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	84 30       	cpi	r24, 0x04	; 4
    26ac:	08 f0       	brcs	.+2      	; 0x26b0 <DIO_enumSetPinDir+0x26>
    26ae:	f1 c0       	rjmp	.+482    	; 0x2892 <DIO_enumSetPinDir+0x208>
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	88 30       	cpi	r24, 0x08	; 8
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <DIO_enumSetPinDir+0x2e>
    26b6:	ed c0       	rjmp	.+474    	; 0x2892 <DIO_enumSetPinDir+0x208>
	{
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <DIO_enumSetPinDir+0x36>
    26be:	6f c0       	rjmp	.+222    	; 0x279e <DIO_enumSetPinDir+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	38 87       	std	Y+8, r19	; 0x08
    26c8:	2f 83       	std	Y+7, r18	; 0x07
    26ca:	8f 81       	ldd	r24, Y+7	; 0x07
    26cc:	98 85       	ldd	r25, Y+8	; 0x08
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	91 05       	cpc	r25, r1
    26d2:	49 f1       	breq	.+82     	; 0x2726 <DIO_enumSetPinDir+0x9c>
    26d4:	2f 81       	ldd	r18, Y+7	; 0x07
    26d6:	38 85       	ldd	r19, Y+8	; 0x08
    26d8:	22 30       	cpi	r18, 0x02	; 2
    26da:	31 05       	cpc	r19, r1
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <DIO_enumSetPinDir+0x5e>
    26de:	8f 81       	ldd	r24, Y+7	; 0x07
    26e0:	98 85       	ldd	r25, Y+8	; 0x08
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	61 f0       	breq	.+24     	; 0x26fe <DIO_enumSetPinDir+0x74>
    26e6:	d6 c0       	rjmp	.+428    	; 0x2894 <DIO_enumSetPinDir+0x20a>
    26e8:	2f 81       	ldd	r18, Y+7	; 0x07
    26ea:	38 85       	ldd	r19, Y+8	; 0x08
    26ec:	22 30       	cpi	r18, 0x02	; 2
    26ee:	31 05       	cpc	r19, r1
    26f0:	71 f1       	breq	.+92     	; 0x274e <DIO_enumSetPinDir+0xc4>
    26f2:	8f 81       	ldd	r24, Y+7	; 0x07
    26f4:	98 85       	ldd	r25, Y+8	; 0x08
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	91 05       	cpc	r25, r1
    26fa:	e9 f1       	breq	.+122    	; 0x2776 <DIO_enumSetPinDir+0xec>
    26fc:	cb c0       	rjmp	.+406    	; 0x2894 <DIO_enumSetPinDir+0x20a>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_REG, Copy_u8PIN);
    26fe:	aa e3       	ldi	r26, 0x3A	; 58
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	ea e3       	ldi	r30, 0x3A	; 58
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <DIO_enumSetPinDir+0x92>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <DIO_enumSetPinDir+0x8e>
    2720:	84 2b       	or	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	b7 c0       	rjmp	.+366    	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_REG, Copy_u8PIN);
    2726:	a7 e3       	ldi	r26, 0x37	; 55
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e7 e3       	ldi	r30, 0x37	; 55
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	48 2f       	mov	r20, r24
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	02 2e       	mov	r0, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <DIO_enumSetPinDir+0xba>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <DIO_enumSetPinDir+0xb6>
    2748:	84 2b       	or	r24, r20
    274a:	8c 93       	st	X, r24
    274c:	a3 c0       	rjmp	.+326    	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_REG, Copy_u8PIN);
    274e:	a4 e3       	ldi	r26, 0x34	; 52
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e4 e3       	ldi	r30, 0x34	; 52
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	48 2f       	mov	r20, r24
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	02 2e       	mov	r0, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <DIO_enumSetPinDir+0xe2>
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	0a 94       	dec	r0
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <DIO_enumSetPinDir+0xde>
    2770:	84 2b       	or	r24, r20
    2772:	8c 93       	st	X, r24
    2774:	8f c0       	rjmp	.+286    	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_REG, Copy_u8PIN);
    2776:	a1 e3       	ldi	r26, 0x31	; 49
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e1 e3       	ldi	r30, 0x31	; 49
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	48 2f       	mov	r20, r24
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 2e       	mov	r0, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <DIO_enumSetPinDir+0x10a>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	0a 94       	dec	r0
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <DIO_enumSetPinDir+0x106>
    2798:	84 2b       	or	r24, r20
    279a:	8c 93       	st	X, r24
    279c:	7b c0       	rjmp	.+246    	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			}
		}
		else if (Copy_u8Direction == DIO_PIN_INPUT)
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	88 23       	and	r24, r24
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <DIO_enumSetPinDir+0x11c>
    27a4:	74 c0       	rjmp	.+232    	; 0x288e <DIO_enumSetPinDir+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	3e 83       	std	Y+6, r19	; 0x06
    27ae:	2d 83       	std	Y+5, r18	; 0x05
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	91 05       	cpc	r25, r1
    27b8:	59 f1       	breq	.+86     	; 0x2810 <DIO_enumSetPinDir+0x186>
    27ba:	2d 81       	ldd	r18, Y+5	; 0x05
    27bc:	3e 81       	ldd	r19, Y+6	; 0x06
    27be:	22 30       	cpi	r18, 0x02	; 2
    27c0:	31 05       	cpc	r19, r1
    27c2:	2c f4       	brge	.+10     	; 0x27ce <DIO_enumSetPinDir+0x144>
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f0       	breq	.+26     	; 0x27e6 <DIO_enumSetPinDir+0x15c>
    27cc:	63 c0       	rjmp	.+198    	; 0x2894 <DIO_enumSetPinDir+0x20a>
    27ce:	2d 81       	ldd	r18, Y+5	; 0x05
    27d0:	3e 81       	ldd	r19, Y+6	; 0x06
    27d2:	22 30       	cpi	r18, 0x02	; 2
    27d4:	31 05       	cpc	r19, r1
    27d6:	89 f1       	breq	.+98     	; 0x283a <DIO_enumSetPinDir+0x1b0>
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	83 30       	cpi	r24, 0x03	; 3
    27de:	91 05       	cpc	r25, r1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <DIO_enumSetPinDir+0x15a>
    27e2:	40 c0       	rjmp	.+128    	; 0x2864 <DIO_enumSetPinDir+0x1da>
    27e4:	57 c0       	rjmp	.+174    	; 0x2894 <DIO_enumSetPinDir+0x20a>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA_REG, Copy_u8PIN);
    27e6:	aa e3       	ldi	r26, 0x3A	; 58
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ea e3       	ldi	r30, 0x3A	; 58
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	48 2f       	mov	r20, r24
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_enumSetPinDir+0x17a>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_enumSetPinDir+0x176>
    2808:	80 95       	com	r24
    280a:	84 23       	and	r24, r20
    280c:	8c 93       	st	X, r24
    280e:	42 c0       	rjmp	.+132    	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB_REG, Copy_u8PIN);
    2810:	a7 e3       	ldi	r26, 0x37	; 55
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e7 e3       	ldi	r30, 0x37	; 55
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	48 2f       	mov	r20, r24
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	02 2e       	mov	r0, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <DIO_enumSetPinDir+0x1a4>
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	0a 94       	dec	r0
    2830:	e2 f7       	brpl	.-8      	; 0x282a <DIO_enumSetPinDir+0x1a0>
    2832:	80 95       	com	r24
    2834:	84 23       	and	r24, r20
    2836:	8c 93       	st	X, r24
    2838:	2d c0       	rjmp	.+90     	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC_REG, Copy_u8PIN);
    283a:	a4 e3       	ldi	r26, 0x34	; 52
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e4 e3       	ldi	r30, 0x34	; 52
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	48 2f       	mov	r20, r24
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 2e       	mov	r0, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <DIO_enumSetPinDir+0x1ce>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	0a 94       	dec	r0
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <DIO_enumSetPinDir+0x1ca>
    285c:	80 95       	com	r24
    285e:	84 23       	and	r24, r20
    2860:	8c 93       	st	X, r24
    2862:	18 c0       	rjmp	.+48     	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD_REG, Copy_u8PIN);
    2864:	a1 e3       	ldi	r26, 0x31	; 49
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e1 e3       	ldi	r30, 0x31	; 49
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	48 2f       	mov	r20, r24
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	02 2e       	mov	r0, r18
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <DIO_enumSetPinDir+0x1f8>
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <DIO_enumSetPinDir+0x1f4>
    2886:	80 95       	com	r24
    2888:	84 23       	and	r24, r20
    288a:	8c 93       	st	X, r24
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <DIO_enumSetPinDir+0x20a>
				break;
			}
		}
		else
		{
			LOC_enumState = DIO_NOK;
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <DIO_enumSetPinDir+0x20a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2892:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
}
    2896:	28 96       	adiw	r28, 0x08	; 8
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	28 97       	sbiw	r28, 0x08	; 8
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	8a 83       	std	Y+2, r24	; 0x02
    28be:	6b 83       	std	Y+3, r22	; 0x03
    28c0:	4c 83       	std	Y+4, r20	; 0x04
	DIO_errorStatus LOC_enumState = DIO_OK;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	84 30       	cpi	r24, 0x04	; 4
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <DIO_enumWritePinVal+0x26>
    28cc:	f1 c0       	rjmp	.+482    	; 0x2ab0 <DIO_enumWritePinVal+0x208>
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	88 30       	cpi	r24, 0x08	; 8
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <DIO_enumWritePinVal+0x2e>
    28d4:	ed c0       	rjmp	.+474    	; 0x2ab0 <DIO_enumWritePinVal+0x208>
	{
		if (Copy_u8Value == DIO_PIN_OUTPUT)
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	09 f0       	breq	.+2      	; 0x28de <DIO_enumWritePinVal+0x36>
    28dc:	6f c0       	rjmp	.+222    	; 0x29bc <DIO_enumWritePinVal+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	38 87       	std	Y+8, r19	; 0x08
    28e6:	2f 83       	std	Y+7, r18	; 0x07
    28e8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ea:	98 85       	ldd	r25, Y+8	; 0x08
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	49 f1       	breq	.+82     	; 0x2944 <DIO_enumWritePinVal+0x9c>
    28f2:	2f 81       	ldd	r18, Y+7	; 0x07
    28f4:	38 85       	ldd	r19, Y+8	; 0x08
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	2c f4       	brge	.+10     	; 0x2906 <DIO_enumWritePinVal+0x5e>
    28fc:	8f 81       	ldd	r24, Y+7	; 0x07
    28fe:	98 85       	ldd	r25, Y+8	; 0x08
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	61 f0       	breq	.+24     	; 0x291c <DIO_enumWritePinVal+0x74>
    2904:	d6 c0       	rjmp	.+428    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
    2906:	2f 81       	ldd	r18, Y+7	; 0x07
    2908:	38 85       	ldd	r19, Y+8	; 0x08
    290a:	22 30       	cpi	r18, 0x02	; 2
    290c:	31 05       	cpc	r19, r1
    290e:	71 f1       	breq	.+92     	; 0x296c <DIO_enumWritePinVal+0xc4>
    2910:	8f 81       	ldd	r24, Y+7	; 0x07
    2912:	98 85       	ldd	r25, Y+8	; 0x08
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	91 05       	cpc	r25, r1
    2918:	e9 f1       	breq	.+122    	; 0x2994 <DIO_enumWritePinVal+0xec>
    291a:	cb c0       	rjmp	.+406    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_REG, Copy_u8PIN);
    291c:	ab e3       	ldi	r26, 0x3B	; 59
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	eb e3       	ldi	r30, 0x3B	; 59
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	48 2f       	mov	r20, r24
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	02 2e       	mov	r0, r18
    2934:	02 c0       	rjmp	.+4      	; 0x293a <DIO_enumWritePinVal+0x92>
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	0a 94       	dec	r0
    293c:	e2 f7       	brpl	.-8      	; 0x2936 <DIO_enumWritePinVal+0x8e>
    293e:	84 2b       	or	r24, r20
    2940:	8c 93       	st	X, r24
    2942:	b7 c0       	rjmp	.+366    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_REG, Copy_u8PIN);
    2944:	a8 e3       	ldi	r26, 0x38	; 56
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e8 e3       	ldi	r30, 0x38	; 56
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	48 2f       	mov	r20, r24
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	02 2e       	mov	r0, r18
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <DIO_enumWritePinVal+0xba>
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	0a 94       	dec	r0
    2964:	e2 f7       	brpl	.-8      	; 0x295e <DIO_enumWritePinVal+0xb6>
    2966:	84 2b       	or	r24, r20
    2968:	8c 93       	st	X, r24
    296a:	a3 c0       	rjmp	.+326    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_REG, Copy_u8PIN);
    296c:	a5 e3       	ldi	r26, 0x35	; 53
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e5 e3       	ldi	r30, 0x35	; 53
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	48 2f       	mov	r20, r24
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	02 2e       	mov	r0, r18
    2984:	02 c0       	rjmp	.+4      	; 0x298a <DIO_enumWritePinVal+0xe2>
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	0a 94       	dec	r0
    298c:	e2 f7       	brpl	.-8      	; 0x2986 <DIO_enumWritePinVal+0xde>
    298e:	84 2b       	or	r24, r20
    2990:	8c 93       	st	X, r24
    2992:	8f c0       	rjmp	.+286    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_REG, Copy_u8PIN);
    2994:	a2 e3       	ldi	r26, 0x32	; 50
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e2 e3       	ldi	r30, 0x32	; 50
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	48 2f       	mov	r20, r24
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	02 2e       	mov	r0, r18
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <DIO_enumWritePinVal+0x10a>
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	0a 94       	dec	r0
    29b4:	e2 f7       	brpl	.-8      	; 0x29ae <DIO_enumWritePinVal+0x106>
    29b6:	84 2b       	or	r24, r20
    29b8:	8c 93       	st	X, r24
    29ba:	7b c0       	rjmp	.+246    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			}
		}
		else if (Copy_u8Value == DIO_PIN_INPUT)
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	88 23       	and	r24, r24
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <DIO_enumWritePinVal+0x11c>
    29c2:	74 c0       	rjmp	.+232    	; 0x2aac <DIO_enumWritePinVal+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	3e 83       	std	Y+6, r19	; 0x06
    29cc:	2d 83       	std	Y+5, r18	; 0x05
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	91 05       	cpc	r25, r1
    29d6:	59 f1       	breq	.+86     	; 0x2a2e <DIO_enumWritePinVal+0x186>
    29d8:	2d 81       	ldd	r18, Y+5	; 0x05
    29da:	3e 81       	ldd	r19, Y+6	; 0x06
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	2c f4       	brge	.+10     	; 0x29ec <DIO_enumWritePinVal+0x144>
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	69 f0       	breq	.+26     	; 0x2a04 <DIO_enumWritePinVal+0x15c>
    29ea:	63 c0       	rjmp	.+198    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
    29ec:	2d 81       	ldd	r18, Y+5	; 0x05
    29ee:	3e 81       	ldd	r19, Y+6	; 0x06
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	89 f1       	breq	.+98     	; 0x2a58 <DIO_enumWritePinVal+0x1b0>
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	83 30       	cpi	r24, 0x03	; 3
    29fc:	91 05       	cpc	r25, r1
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <DIO_enumWritePinVal+0x15a>
    2a00:	40 c0       	rjmp	.+128    	; 0x2a82 <DIO_enumWritePinVal+0x1da>
    2a02:	57 c0       	rjmp	.+174    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA_REG, Copy_u8PIN);
    2a04:	ab e3       	ldi	r26, 0x3B	; 59
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	eb e3       	ldi	r30, 0x3B	; 59
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	48 2f       	mov	r20, r24
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	02 2e       	mov	r0, r18
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <DIO_enumWritePinVal+0x17a>
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	0a 94       	dec	r0
    2a24:	e2 f7       	brpl	.-8      	; 0x2a1e <DIO_enumWritePinVal+0x176>
    2a26:	80 95       	com	r24
    2a28:	84 23       	and	r24, r20
    2a2a:	8c 93       	st	X, r24
    2a2c:	42 c0       	rjmp	.+132    	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB_REG, Copy_u8PIN);
    2a2e:	a8 e3       	ldi	r26, 0x38	; 56
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e8 e3       	ldi	r30, 0x38	; 56
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	48 2f       	mov	r20, r24
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	02 2e       	mov	r0, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <DIO_enumWritePinVal+0x1a4>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <DIO_enumWritePinVal+0x1a0>
    2a50:	80 95       	com	r24
    2a52:	84 23       	and	r24, r20
    2a54:	8c 93       	st	X, r24
    2a56:	2d c0       	rjmp	.+90     	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC_REG, Copy_u8PIN);
    2a58:	a5 e3       	ldi	r26, 0x35	; 53
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e5 e3       	ldi	r30, 0x35	; 53
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	48 2f       	mov	r20, r24
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 2e       	mov	r0, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <DIO_enumWritePinVal+0x1ce>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <DIO_enumWritePinVal+0x1ca>
    2a7a:	80 95       	com	r24
    2a7c:	84 23       	and	r24, r20
    2a7e:	8c 93       	st	X, r24
    2a80:	18 c0       	rjmp	.+48     	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD_REG, Copy_u8PIN);
    2a82:	a2 e3       	ldi	r26, 0x32	; 50
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e2 e3       	ldi	r30, 0x32	; 50
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 2e       	mov	r0, r18
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <DIO_enumWritePinVal+0x1f8>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	0a 94       	dec	r0
    2aa2:	e2 f7       	brpl	.-8      	; 0x2a9c <DIO_enumWritePinVal+0x1f4>
    2aa4:	80 95       	com	r24
    2aa6:	84 23       	and	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	03 c0       	rjmp	.+6      	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
				break;
			}
		}
		else
		{
			LOC_enumState = DIO_NOK;
    2aac:	19 82       	std	Y+1, r1	; 0x01
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <DIO_enumWritePinVal+0x20a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2ab0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ab4:	28 96       	adiw	r28, 0x08	; 8
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	27 97       	sbiw	r28, 0x07	; 7
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	6b 83       	std	Y+3, r22	; 0x03
    2ade:	5d 83       	std	Y+5, r21	; 0x05
    2ae0:	4c 83       	std	Y+4, r20	; 0x04
	DIO_errorStatus LOC_enumState = DIO_OK;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	84 30       	cpi	r24, 0x04	; 4
    2aea:	08 f0       	brcs	.+2      	; 0x2aee <DIO_enumReadPinVal+0x28>
    2aec:	a6 c0       	rjmp	.+332    	; 0x2c3a <DIO_enumReadPinVal+0x174>
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	88 30       	cpi	r24, 0x08	; 8
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <DIO_enumReadPinVal+0x30>
    2af4:	a2 c0       	rjmp	.+324    	; 0x2c3a <DIO_enumReadPinVal+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	3f 83       	std	Y+7, r19	; 0x07
    2afe:	2e 83       	std	Y+6, r18	; 0x06
    2b00:	4e 81       	ldd	r20, Y+6	; 0x06
    2b02:	5f 81       	ldd	r21, Y+7	; 0x07
    2b04:	41 30       	cpi	r20, 0x01	; 1
    2b06:	51 05       	cpc	r21, r1
    2b08:	c1 f1       	breq	.+112    	; 0x2b7a <DIO_enumReadPinVal+0xb4>
    2b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	91 05       	cpc	r25, r1
    2b12:	34 f4       	brge	.+12     	; 0x2b20 <DIO_enumReadPinVal+0x5a>
    2b14:	2e 81       	ldd	r18, Y+6	; 0x06
    2b16:	3f 81       	ldd	r19, Y+7	; 0x07
    2b18:	21 15       	cp	r18, r1
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	71 f0       	breq	.+28     	; 0x2b3a <DIO_enumReadPinVal+0x74>
    2b1e:	8e c0       	rjmp	.+284    	; 0x2c3c <DIO_enumReadPinVal+0x176>
    2b20:	4e 81       	ldd	r20, Y+6	; 0x06
    2b22:	5f 81       	ldd	r21, Y+7	; 0x07
    2b24:	42 30       	cpi	r20, 0x02	; 2
    2b26:	51 05       	cpc	r21, r1
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <DIO_enumReadPinVal+0x66>
    2b2a:	47 c0       	rjmp	.+142    	; 0x2bba <DIO_enumReadPinVal+0xf4>
    2b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b30:	83 30       	cpi	r24, 0x03	; 3
    2b32:	91 05       	cpc	r25, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <DIO_enumReadPinVal+0x72>
    2b36:	61 c0       	rjmp	.+194    	; 0x2bfa <DIO_enumReadPinVal+0x134>
    2b38:	81 c0       	rjmp	.+258    	; 0x2c3c <DIO_enumReadPinVal+0x176>
		{
		case DIO_PORTA:
			*Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    2b3a:	e9 e3       	ldi	r30, 0x39	; 57
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	48 2f       	mov	r20, r24
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <DIO_enumReadPinVal+0x8e>
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	2a 95       	dec	r18
    2b56:	e2 f7       	brpl	.-8      	; 0x2b50 <DIO_enumReadPinVal+0x8a>
    2b58:	9a 01       	movw	r18, r20
    2b5a:	28 23       	and	r18, r24
    2b5c:	39 23       	and	r19, r25
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a9 01       	movw	r20, r18
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <DIO_enumReadPinVal+0xa6>
    2b68:	55 95       	asr	r21
    2b6a:	47 95       	ror	r20
    2b6c:	8a 95       	dec	r24
    2b6e:	e2 f7       	brpl	.-8      	; 0x2b68 <DIO_enumReadPinVal+0xa2>
    2b70:	ca 01       	movw	r24, r20
    2b72:	ec 81       	ldd	r30, Y+4	; 0x04
    2b74:	fd 81       	ldd	r31, Y+5	; 0x05
    2b76:	80 83       	st	Z, r24
    2b78:	61 c0       	rjmp	.+194    	; 0x2c3c <DIO_enumReadPinVal+0x176>
			break;
		case DIO_PORTB:
			*Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    2b7a:	e6 e3       	ldi	r30, 0x36	; 54
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	48 2f       	mov	r20, r24
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <DIO_enumReadPinVal+0xce>
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	2a 95       	dec	r18
    2b96:	e2 f7       	brpl	.-8      	; 0x2b90 <DIO_enumReadPinVal+0xca>
    2b98:	9a 01       	movw	r18, r20
    2b9a:	28 23       	and	r18, r24
    2b9c:	39 23       	and	r19, r25
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a9 01       	movw	r20, r18
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <DIO_enumReadPinVal+0xe6>
    2ba8:	55 95       	asr	r21
    2baa:	47 95       	ror	r20
    2bac:	8a 95       	dec	r24
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <DIO_enumReadPinVal+0xe2>
    2bb0:	ca 01       	movw	r24, r20
    2bb2:	ec 81       	ldd	r30, Y+4	; 0x04
    2bb4:	fd 81       	ldd	r31, Y+5	; 0x05
    2bb6:	80 83       	st	Z, r24
    2bb8:	41 c0       	rjmp	.+130    	; 0x2c3c <DIO_enumReadPinVal+0x176>
			break;
		case DIO_PORTC:
			*Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    2bba:	e3 e3       	ldi	r30, 0x33	; 51
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	48 2f       	mov	r20, r24
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <DIO_enumReadPinVal+0x10e>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	2a 95       	dec	r18
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <DIO_enumReadPinVal+0x10a>
    2bd8:	9a 01       	movw	r18, r20
    2bda:	28 23       	and	r18, r24
    2bdc:	39 23       	and	r19, r25
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a9 01       	movw	r20, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <DIO_enumReadPinVal+0x126>
    2be8:	55 95       	asr	r21
    2bea:	47 95       	ror	r20
    2bec:	8a 95       	dec	r24
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <DIO_enumReadPinVal+0x122>
    2bf0:	ca 01       	movw	r24, r20
    2bf2:	ec 81       	ldd	r30, Y+4	; 0x04
    2bf4:	fd 81       	ldd	r31, Y+5	; 0x05
    2bf6:	80 83       	st	Z, r24
    2bf8:	21 c0       	rjmp	.+66     	; 0x2c3c <DIO_enumReadPinVal+0x176>
			break;
		case DIO_PORTD:
			*Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    2bfa:	e0 e3       	ldi	r30, 0x30	; 48
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	48 2f       	mov	r20, r24
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <DIO_enumReadPinVal+0x14e>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	2a 95       	dec	r18
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <DIO_enumReadPinVal+0x14a>
    2c18:	9a 01       	movw	r18, r20
    2c1a:	28 23       	and	r18, r24
    2c1c:	39 23       	and	r19, r25
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a9 01       	movw	r20, r18
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DIO_enumReadPinVal+0x166>
    2c28:	55 95       	asr	r21
    2c2a:	47 95       	ror	r20
    2c2c:	8a 95       	dec	r24
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <DIO_enumReadPinVal+0x162>
    2c30:	ca 01       	movw	r24, r20
    2c32:	ec 81       	ldd	r30, Y+4	; 0x04
    2c34:	fd 81       	ldd	r31, Y+5	; 0x05
    2c36:	80 83       	st	Z, r24
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <DIO_enumReadPinVal+0x176>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK;
    2c3a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c3e:	27 96       	adiw	r28, 0x07	; 7
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <DIO_enumTogglePinVal+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <DIO_enumTogglePinVal+0x8>
    2c58:	0f 92       	push	r0
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
    2c60:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	84 30       	cpi	r24, 0x04	; 4
    2c6a:	08 f0       	brcs	.+2      	; 0x2c6e <DIO_enumTogglePinVal+0x1e>
    2c6c:	73 c0       	rjmp	.+230    	; 0x2d54 <DIO_enumTogglePinVal+0x104>
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	88 30       	cpi	r24, 0x08	; 8
    2c72:	08 f0       	brcs	.+2      	; 0x2c76 <DIO_enumTogglePinVal+0x26>
    2c74:	6f c0       	rjmp	.+222    	; 0x2d54 <DIO_enumTogglePinVal+0x104>
	{
		switch (Copy_u8PORT)
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	3d 83       	std	Y+5, r19	; 0x05
    2c7e:	2c 83       	std	Y+4, r18	; 0x04
    2c80:	8c 81       	ldd	r24, Y+4	; 0x04
    2c82:	9d 81       	ldd	r25, Y+5	; 0x05
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	91 05       	cpc	r25, r1
    2c88:	49 f1       	breq	.+82     	; 0x2cdc <DIO_enumTogglePinVal+0x8c>
    2c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c8e:	22 30       	cpi	r18, 0x02	; 2
    2c90:	31 05       	cpc	r19, r1
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <DIO_enumTogglePinVal+0x4e>
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	61 f0       	breq	.+24     	; 0x2cb4 <DIO_enumTogglePinVal+0x64>
    2c9c:	5c c0       	rjmp	.+184    	; 0x2d56 <DIO_enumTogglePinVal+0x106>
    2c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca2:	22 30       	cpi	r18, 0x02	; 2
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	71 f1       	breq	.+92     	; 0x2d04 <DIO_enumTogglePinVal+0xb4>
    2ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    2caa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cac:	83 30       	cpi	r24, 0x03	; 3
    2cae:	91 05       	cpc	r25, r1
    2cb0:	e9 f1       	breq	.+122    	; 0x2d2c <DIO_enumTogglePinVal+0xdc>
    2cb2:	51 c0       	rjmp	.+162    	; 0x2d56 <DIO_enumTogglePinVal+0x106>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG, Copy_u8PIN);
    2cb4:	ab e3       	ldi	r26, 0x3B	; 59
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	eb e3       	ldi	r30, 0x3B	; 59
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	48 2f       	mov	r20, r24
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 2e       	mov	r0, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_enumTogglePinVal+0x82>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	0a 94       	dec	r0
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_enumTogglePinVal+0x7e>
    2cd6:	84 27       	eor	r24, r20
    2cd8:	8c 93       	st	X, r24
    2cda:	3d c0       	rjmp	.+122    	; 0x2d56 <DIO_enumTogglePinVal+0x106>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB_REG, Copy_u8PIN);
    2cdc:	a8 e3       	ldi	r26, 0x38	; 56
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e8 e3       	ldi	r30, 0x38	; 56
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	48 2f       	mov	r20, r24
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	02 2e       	mov	r0, r18
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <DIO_enumTogglePinVal+0xaa>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	0a 94       	dec	r0
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <DIO_enumTogglePinVal+0xa6>
    2cfe:	84 27       	eor	r24, r20
    2d00:	8c 93       	st	X, r24
    2d02:	29 c0       	rjmp	.+82     	; 0x2d56 <DIO_enumTogglePinVal+0x106>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC_REG, Copy_u8PIN);
    2d04:	a5 e3       	ldi	r26, 0x35	; 53
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e5 e3       	ldi	r30, 0x35	; 53
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	48 2f       	mov	r20, r24
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	02 2e       	mov	r0, r18
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <DIO_enumTogglePinVal+0xd2>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0a 94       	dec	r0
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <DIO_enumTogglePinVal+0xce>
    2d26:	84 27       	eor	r24, r20
    2d28:	8c 93       	st	X, r24
    2d2a:	15 c0       	rjmp	.+42     	; 0x2d56 <DIO_enumTogglePinVal+0x106>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD_REG, Copy_u8PIN);
    2d2c:	a2 e3       	ldi	r26, 0x32	; 50
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e2 e3       	ldi	r30, 0x32	; 50
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	48 2f       	mov	r20, r24
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	02 2e       	mov	r0, r18
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <DIO_enumTogglePinVal+0xfa>
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	0a 94       	dec	r0
    2d4c:	e2 f7       	brpl	.-8      	; 0x2d46 <DIO_enumTogglePinVal+0xf6>
    2d4e:	84 27       	eor	r24, r20
    2d50:	8c 93       	st	X, r24
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <DIO_enumTogglePinVal+0x106>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK;
    2d54:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <DIO_enumConnectPullUp+0x6>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <DIO_enumConnectPullUp+0x8>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <DIO_enumConnectPullUp+0xa>
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	8a 83       	std	Y+2, r24	; 0x02
    2d78:	6b 83       	std	Y+3, r22	; 0x03
    2d7a:	4c 83       	std	Y+4, r20	; 0x04
	DIO_errorStatus LOC_enumState = DIO_OK;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	84 30       	cpi	r24, 0x04	; 4
    2d84:	08 f0       	brcs	.+2      	; 0x2d88 <DIO_enumConnectPullUp+0x20>
    2d86:	3e c1       	rjmp	.+636    	; 0x3004 <DIO_enumConnectPullUp+0x29c>
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	88 30       	cpi	r24, 0x08	; 8
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <DIO_enumConnectPullUp+0x28>
    2d8e:	3a c1       	rjmp	.+628    	; 0x3004 <DIO_enumConnectPullUp+0x29c>
	{
		switch (Copy_u8PORT)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	3e 83       	std	Y+6, r19	; 0x06
    2d98:	2d 83       	std	Y+5, r18	; 0x05
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	91 05       	cpc	r25, r1
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <DIO_enumConnectPullUp+0x3e>
    2da4:	5d c0       	rjmp	.+186    	; 0x2e60 <DIO_enumConnectPullUp+0xf8>
    2da6:	2d 81       	ldd	r18, Y+5	; 0x05
    2da8:	3e 81       	ldd	r19, Y+6	; 0x06
    2daa:	22 30       	cpi	r18, 0x02	; 2
    2dac:	31 05       	cpc	r19, r1
    2dae:	2c f4       	brge	.+10     	; 0x2dba <DIO_enumConnectPullUp+0x52>
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	71 f0       	breq	.+28     	; 0x2dd4 <DIO_enumConnectPullUp+0x6c>
    2db8:	26 c1       	rjmp	.+588    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
    2dba:	2d 81       	ldd	r18, Y+5	; 0x05
    2dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    2dbe:	22 30       	cpi	r18, 0x02	; 2
    2dc0:	31 05       	cpc	r19, r1
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <DIO_enumConnectPullUp+0x5e>
    2dc4:	93 c0       	rjmp	.+294    	; 0x2eec <DIO_enumConnectPullUp+0x184>
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	83 30       	cpi	r24, 0x03	; 3
    2dcc:	91 05       	cpc	r25, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <DIO_enumConnectPullUp+0x6a>
    2dd0:	d3 c0       	rjmp	.+422    	; 0x2f78 <DIO_enumConnectPullUp+0x210>
    2dd2:	19 c1       	rjmp	.+562    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	71 f5       	brne	.+92     	; 0x2e36 <DIO_enumConnectPullUp+0xce>
			{
				CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2dda:	a0 e5       	ldi	r26, 0x50	; 80
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e0 e5       	ldi	r30, 0x50	; 80
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	8b 7f       	andi	r24, 0xFB	; 251
    2de6:	8c 93       	st	X, r24
				CLR_BIT(DDRA_REG, Copy_u8PIN);
    2de8:	aa e3       	ldi	r26, 0x3A	; 58
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	ea e3       	ldi	r30, 0x3A	; 58
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	48 2f       	mov	r20, r24
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <DIO_enumConnectPullUp+0x9c>
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	2a 95       	dec	r18
    2e06:	e2 f7       	brpl	.-8      	; 0x2e00 <DIO_enumConnectPullUp+0x98>
    2e08:	80 95       	com	r24
    2e0a:	84 23       	and	r24, r20
    2e0c:	8c 93       	st	X, r24
				SET_BIT(PORTA_REG, Copy_u8PIN);
    2e0e:	ab e3       	ldi	r26, 0x3B	; 59
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	eb e3       	ldi	r30, 0x3B	; 59
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 2e       	mov	r0, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_enumConnectPullUp+0xc4>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	0a 94       	dec	r0
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_enumConnectPullUp+0xc0>
    2e30:	84 2b       	or	r24, r20
    2e32:	8c 93       	st	X, r24
    2e34:	e8 c0       	rjmp	.+464    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_REG, Copy_u8PIN);
    2e36:	ab e3       	ldi	r26, 0x3B	; 59
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	eb e3       	ldi	r30, 0x3B	; 59
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 2e       	mov	r0, r18
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <DIO_enumConnectPullUp+0xec>
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <DIO_enumConnectPullUp+0xe8>
    2e58:	80 95       	com	r24
    2e5a:	84 23       	and	r24, r20
    2e5c:	8c 93       	st	X, r24
    2e5e:	d3 c0       	rjmp	.+422    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	71 f5       	brne	.+92     	; 0x2ec2 <DIO_enumConnectPullUp+0x15a>
			{
				CLR_BIT(SFIOR_REG, PUD);
    2e66:	a0 e5       	ldi	r26, 0x50	; 80
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e0 e5       	ldi	r30, 0x50	; 80
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8b 7f       	andi	r24, 0xFB	; 251
    2e72:	8c 93       	st	X, r24
				CLR_BIT(DDRB_REG, Copy_u8PIN);
    2e74:	a7 e3       	ldi	r26, 0x37	; 55
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e7 e3       	ldi	r30, 0x37	; 55
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	48 2f       	mov	r20, r24
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <DIO_enumConnectPullUp+0x128>
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	2a 95       	dec	r18
    2e92:	e2 f7       	brpl	.-8      	; 0x2e8c <DIO_enumConnectPullUp+0x124>
    2e94:	80 95       	com	r24
    2e96:	84 23       	and	r24, r20
    2e98:	8c 93       	st	X, r24
				SET_BIT(PORTB_REG, Copy_u8PIN);
    2e9a:	a8 e3       	ldi	r26, 0x38	; 56
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e8 e3       	ldi	r30, 0x38	; 56
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	48 2f       	mov	r20, r24
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	02 2e       	mov	r0, r18
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <DIO_enumConnectPullUp+0x150>
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	0a 94       	dec	r0
    2eba:	e2 f7       	brpl	.-8      	; 0x2eb4 <DIO_enumConnectPullUp+0x14c>
    2ebc:	84 2b       	or	r24, r20
    2ebe:	8c 93       	st	X, r24
    2ec0:	a2 c0       	rjmp	.+324    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_REG, Copy_u8PIN);
    2ec2:	a8 e3       	ldi	r26, 0x38	; 56
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e8 e3       	ldi	r30, 0x38	; 56
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	48 2f       	mov	r20, r24
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	02 2e       	mov	r0, r18
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <DIO_enumConnectPullUp+0x178>
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	0a 94       	dec	r0
    2ee2:	e2 f7       	brpl	.-8      	; 0x2edc <DIO_enumConnectPullUp+0x174>
    2ee4:	80 95       	com	r24
    2ee6:	84 23       	and	r24, r20
    2ee8:	8c 93       	st	X, r24
    2eea:	8d c0       	rjmp	.+282    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	81 30       	cpi	r24, 0x01	; 1
    2ef0:	71 f5       	brne	.+92     	; 0x2f4e <DIO_enumConnectPullUp+0x1e6>
			{
				CLR_BIT(SFIOR_REG, PUD);
    2ef2:	a0 e5       	ldi	r26, 0x50	; 80
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e0 e5       	ldi	r30, 0x50	; 80
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8b 7f       	andi	r24, 0xFB	; 251
    2efe:	8c 93       	st	X, r24
				CLR_BIT(DDRC_REG, Copy_u8PIN);
    2f00:	a4 e3       	ldi	r26, 0x34	; 52
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e4 e3       	ldi	r30, 0x34	; 52
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <DIO_enumConnectPullUp+0x1b4>
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	2a 95       	dec	r18
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <DIO_enumConnectPullUp+0x1b0>
    2f20:	80 95       	com	r24
    2f22:	84 23       	and	r24, r20
    2f24:	8c 93       	st	X, r24
				SET_BIT(PORTC_REG, Copy_u8PIN);
    2f26:	a5 e3       	ldi	r26, 0x35	; 53
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e5 e3       	ldi	r30, 0x35	; 53
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	48 2f       	mov	r20, r24
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	02 2e       	mov	r0, r18
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <DIO_enumConnectPullUp+0x1dc>
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	0a 94       	dec	r0
    2f46:	e2 f7       	brpl	.-8      	; 0x2f40 <DIO_enumConnectPullUp+0x1d8>
    2f48:	84 2b       	or	r24, r20
    2f4a:	8c 93       	st	X, r24
    2f4c:	5c c0       	rjmp	.+184    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_REG, Copy_u8PIN);
    2f4e:	a5 e3       	ldi	r26, 0x35	; 53
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e5 e3       	ldi	r30, 0x35	; 53
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	48 2f       	mov	r20, r24
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 2e       	mov	r0, r18
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <DIO_enumConnectPullUp+0x204>
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	0a 94       	dec	r0
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <DIO_enumConnectPullUp+0x200>
    2f70:	80 95       	com	r24
    2f72:	84 23       	and	r24, r20
    2f74:	8c 93       	st	X, r24
    2f76:	47 c0       	rjmp	.+142    	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	71 f5       	brne	.+92     	; 0x2fda <DIO_enumConnectPullUp+0x272>
			{
				CLR_BIT(SFIOR_REG, PUD);
    2f7e:	a0 e5       	ldi	r26, 0x50	; 80
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e0 e5       	ldi	r30, 0x50	; 80
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	8b 7f       	andi	r24, 0xFB	; 251
    2f8a:	8c 93       	st	X, r24
				CLR_BIT(DDRD_REG, Copy_u8PIN);
    2f8c:	a1 e3       	ldi	r26, 0x31	; 49
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e1 e3       	ldi	r30, 0x31	; 49
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	48 2f       	mov	r20, r24
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <DIO_enumConnectPullUp+0x240>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	2a 95       	dec	r18
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <DIO_enumConnectPullUp+0x23c>
    2fac:	80 95       	com	r24
    2fae:	84 23       	and	r24, r20
    2fb0:	8c 93       	st	X, r24
				SET_BIT(PORTD_REG, Copy_u8PIN);
    2fb2:	a2 e3       	ldi	r26, 0x32	; 50
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e2 e3       	ldi	r30, 0x32	; 50
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 2e       	mov	r0, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <DIO_enumConnectPullUp+0x268>
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	0a 94       	dec	r0
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <DIO_enumConnectPullUp+0x264>
    2fd4:	84 2b       	or	r24, r20
    2fd6:	8c 93       	st	X, r24
    2fd8:	16 c0       	rjmp	.+44     	; 0x3006 <DIO_enumConnectPullUp+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_REG, Copy_u8PIN);
    2fda:	a2 e3       	ldi	r26, 0x32	; 50
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	e2 e3       	ldi	r30, 0x32	; 50
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 2e       	mov	r0, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <DIO_enumConnectPullUp+0x290>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	0a 94       	dec	r0
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <DIO_enumConnectPullUp+0x28c>
    2ffc:	80 95       	com	r24
    2ffe:	84 23       	and	r24, r20
    3000:	8c 93       	st	X, r24
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <DIO_enumConnectPullUp+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK;
    3004:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    3006:	89 81       	ldd	r24, Y+1	; 0x01
}
    3008:	26 96       	adiw	r28, 0x06	; 6
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <DIO_enumSetPortDir+0x6>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <DIO_enumSetPortDir+0x8>
    3022:	0f 92       	push	r0
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	8a 83       	std	Y+2, r24	; 0x02
    302a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PORT <= DIO_PORTD))
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	84 30       	cpi	r24, 0x04	; 4
    3034:	a8 f5       	brcc	.+106    	; 0x30a0 <DIO_enumSetPortDir+0x86>
	{
		switch (Copy_u8PORT)
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	3d 83       	std	Y+5, r19	; 0x05
    303e:	2c 83       	std	Y+4, r18	; 0x04
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	91 05       	cpc	r25, r1
    3048:	d1 f0       	breq	.+52     	; 0x307e <DIO_enumSetPortDir+0x64>
    304a:	2c 81       	ldd	r18, Y+4	; 0x04
    304c:	3d 81       	ldd	r19, Y+5	; 0x05
    304e:	22 30       	cpi	r18, 0x02	; 2
    3050:	31 05       	cpc	r19, r1
    3052:	2c f4       	brge	.+10     	; 0x305e <DIO_enumSetPortDir+0x44>
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	9d 81       	ldd	r25, Y+5	; 0x05
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	61 f0       	breq	.+24     	; 0x3074 <DIO_enumSetPortDir+0x5a>
    305c:	1f c0       	rjmp	.+62     	; 0x309c <DIO_enumSetPortDir+0x82>
    305e:	2c 81       	ldd	r18, Y+4	; 0x04
    3060:	3d 81       	ldd	r19, Y+5	; 0x05
    3062:	22 30       	cpi	r18, 0x02	; 2
    3064:	31 05       	cpc	r19, r1
    3066:	81 f0       	breq	.+32     	; 0x3088 <DIO_enumSetPortDir+0x6e>
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	9d 81       	ldd	r25, Y+5	; 0x05
    306c:	83 30       	cpi	r24, 0x03	; 3
    306e:	91 05       	cpc	r25, r1
    3070:	81 f0       	breq	.+32     	; 0x3092 <DIO_enumSetPortDir+0x78>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <DIO_enumSetPortDir+0x82>
		{
		case DIO_PORTA:
			DDRA_REG = Copy_u8Direction;
    3074:	ea e3       	ldi	r30, 0x3A	; 58
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	80 83       	st	Z, r24
    307c:	12 c0       	rjmp	.+36     	; 0x30a2 <DIO_enumSetPortDir+0x88>
			break;
		case DIO_PORTB:
			DDRB_REG = Copy_u8Direction;
    307e:	e7 e3       	ldi	r30, 0x37	; 55
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	80 83       	st	Z, r24
    3086:	0d c0       	rjmp	.+26     	; 0x30a2 <DIO_enumSetPortDir+0x88>
			break;
		case DIO_PORTC:
			DDRC_REG = Copy_u8Direction;
    3088:	e4 e3       	ldi	r30, 0x34	; 52
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	80 83       	st	Z, r24
    3090:	08 c0       	rjmp	.+16     	; 0x30a2 <DIO_enumSetPortDir+0x88>
			break;
		case DIO_PORTD:
			DDRD_REG = Copy_u8Direction;
    3092:	e1 e3       	ldi	r30, 0x31	; 49
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	80 83       	st	Z, r24
    309a:	03 c0       	rjmp	.+6      	; 0x30a2 <DIO_enumSetPortDir+0x88>
			break;
		default:
			LOC_enumState = DIO_NOK;
    309c:	19 82       	std	Y+1, r1	; 0x01
    309e:	01 c0       	rjmp	.+2      	; 0x30a2 <DIO_enumSetPortDir+0x88>
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    30a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	08 95       	ret

000030b4 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    30b4:	df 93       	push	r29
    30b6:	cf 93       	push	r28
    30b8:	00 d0       	rcall	.+0      	; 0x30ba <DIO_enumWritePortVal+0x6>
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <DIO_enumWritePortVal+0x8>
    30bc:	0f 92       	push	r0
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	8a 83       	std	Y+2, r24	; 0x02
    30c4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	84 30       	cpi	r24, 0x04	; 4
    30ce:	a8 f5       	brcc	.+106    	; 0x313a <DIO_enumWritePortVal+0x86>
	{
		switch (Copy_u8PORT)
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	3d 83       	std	Y+5, r19	; 0x05
    30d8:	2c 83       	std	Y+4, r18	; 0x04
    30da:	8c 81       	ldd	r24, Y+4	; 0x04
    30dc:	9d 81       	ldd	r25, Y+5	; 0x05
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	91 05       	cpc	r25, r1
    30e2:	d1 f0       	breq	.+52     	; 0x3118 <DIO_enumWritePortVal+0x64>
    30e4:	2c 81       	ldd	r18, Y+4	; 0x04
    30e6:	3d 81       	ldd	r19, Y+5	; 0x05
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <DIO_enumWritePortVal+0x44>
    30ee:	8c 81       	ldd	r24, Y+4	; 0x04
    30f0:	9d 81       	ldd	r25, Y+5	; 0x05
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	61 f0       	breq	.+24     	; 0x310e <DIO_enumWritePortVal+0x5a>
    30f6:	1f c0       	rjmp	.+62     	; 0x3136 <DIO_enumWritePortVal+0x82>
    30f8:	2c 81       	ldd	r18, Y+4	; 0x04
    30fa:	3d 81       	ldd	r19, Y+5	; 0x05
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	81 f0       	breq	.+32     	; 0x3122 <DIO_enumWritePortVal+0x6e>
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	9d 81       	ldd	r25, Y+5	; 0x05
    3106:	83 30       	cpi	r24, 0x03	; 3
    3108:	91 05       	cpc	r25, r1
    310a:	81 f0       	breq	.+32     	; 0x312c <DIO_enumWritePortVal+0x78>
    310c:	14 c0       	rjmp	.+40     	; 0x3136 <DIO_enumWritePortVal+0x82>
		{
		case DIO_PORTA:
			PORTA_REG= Copy_u8Value;
    310e:	eb e3       	ldi	r30, 0x3B	; 59
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	80 83       	st	Z, r24
    3116:	12 c0       	rjmp	.+36     	; 0x313c <DIO_enumWritePortVal+0x88>
			break;
		case DIO_PORTB:
			PORTB_REG = Copy_u8Value;
    3118:	e8 e3       	ldi	r30, 0x38	; 56
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	8b 81       	ldd	r24, Y+3	; 0x03
    311e:	80 83       	st	Z, r24
    3120:	0d c0       	rjmp	.+26     	; 0x313c <DIO_enumWritePortVal+0x88>
			break;
		case DIO_PORTC:
			PORTC_REG = Copy_u8Value;
    3122:	e5 e3       	ldi	r30, 0x35	; 53
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	80 83       	st	Z, r24
    312a:	08 c0       	rjmp	.+16     	; 0x313c <DIO_enumWritePortVal+0x88>
			break;
		case DIO_PORTD:
			PORTD_REG = Copy_u8Value;
    312c:	e2 e3       	ldi	r30, 0x32	; 50
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	80 83       	st	Z, r24
    3134:	03 c0       	rjmp	.+6      	; 0x313c <DIO_enumWritePortVal+0x88>
			break;
		default:
			LOC_enumState = DIO_NOK;
    3136:	19 82       	std	Y+1, r1	; 0x01
    3138:	01 c0       	rjmp	.+2      	; 0x313c <DIO_enumWritePortVal+0x88>
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    313a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    313c:	89 81       	ldd	r24, Y+1	; 0x01
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	27 97       	sbiw	r28, 0x07	; 7
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	8a 83       	std	Y+2, r24	; 0x02
    3164:	7c 83       	std	Y+4, r23	; 0x04
    3166:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD))
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	84 30       	cpi	r24, 0x04	; 4
    3170:	08 f0       	brcs	.+2      	; 0x3174 <DIO_enumReadPorVal+0x26>
    3172:	3f c0       	rjmp	.+126    	; 0x31f2 <DIO_enumReadPorVal+0xa4>
	{
		switch (Copy_u8PORT)
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	28 2f       	mov	r18, r24
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	3f 83       	std	Y+7, r19	; 0x07
    317c:	2e 83       	std	Y+6, r18	; 0x06
    317e:	8e 81       	ldd	r24, Y+6	; 0x06
    3180:	9f 81       	ldd	r25, Y+7	; 0x07
    3182:	81 30       	cpi	r24, 0x01	; 1
    3184:	91 05       	cpc	r25, r1
    3186:	e1 f0       	breq	.+56     	; 0x31c0 <DIO_enumReadPorVal+0x72>
    3188:	2e 81       	ldd	r18, Y+6	; 0x06
    318a:	3f 81       	ldd	r19, Y+7	; 0x07
    318c:	22 30       	cpi	r18, 0x02	; 2
    318e:	31 05       	cpc	r19, r1
    3190:	2c f4       	brge	.+10     	; 0x319c <DIO_enumReadPorVal+0x4e>
    3192:	8e 81       	ldd	r24, Y+6	; 0x06
    3194:	9f 81       	ldd	r25, Y+7	; 0x07
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	61 f0       	breq	.+24     	; 0x31b2 <DIO_enumReadPorVal+0x64>
    319a:	27 c0       	rjmp	.+78     	; 0x31ea <DIO_enumReadPorVal+0x9c>
    319c:	2e 81       	ldd	r18, Y+6	; 0x06
    319e:	3f 81       	ldd	r19, Y+7	; 0x07
    31a0:	22 30       	cpi	r18, 0x02	; 2
    31a2:	31 05       	cpc	r19, r1
    31a4:	a1 f0       	breq	.+40     	; 0x31ce <DIO_enumReadPorVal+0x80>
    31a6:	8e 81       	ldd	r24, Y+6	; 0x06
    31a8:	9f 81       	ldd	r25, Y+7	; 0x07
    31aa:	83 30       	cpi	r24, 0x03	; 3
    31ac:	91 05       	cpc	r25, r1
    31ae:	b1 f0       	breq	.+44     	; 0x31dc <DIO_enumReadPorVal+0x8e>
    31b0:	1c c0       	rjmp	.+56     	; 0x31ea <DIO_enumReadPorVal+0x9c>
		{
		case DIO_PORTA:
			*Copy_Pu8Data = PINA_REG;
    31b2:	e9 e3       	ldi	r30, 0x39	; 57
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ba:	fc 81       	ldd	r31, Y+4	; 0x04
    31bc:	80 83       	st	Z, r24
    31be:	16 c0       	rjmp	.+44     	; 0x31ec <DIO_enumReadPorVal+0x9e>
			break;
		case DIO_PORTB:
			*Copy_Pu8Data = PINB_REG;
    31c0:	e6 e3       	ldi	r30, 0x36	; 54
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	eb 81       	ldd	r30, Y+3	; 0x03
    31c8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ca:	80 83       	st	Z, r24
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <DIO_enumReadPorVal+0x9e>
			break;
		case DIO_PORTC:
			*Copy_Pu8Data = PINC_REG;
    31ce:	e3 e3       	ldi	r30, 0x33	; 51
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	eb 81       	ldd	r30, Y+3	; 0x03
    31d6:	fc 81       	ldd	r31, Y+4	; 0x04
    31d8:	80 83       	st	Z, r24
    31da:	08 c0       	rjmp	.+16     	; 0x31ec <DIO_enumReadPorVal+0x9e>
			break;
		case DIO_PORTD:
			*Copy_Pu8Data = PIND_REG;
    31dc:	e0 e3       	ldi	r30, 0x30	; 48
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	eb 81       	ldd	r30, Y+3	; 0x03
    31e4:	fc 81       	ldd	r31, Y+4	; 0x04
    31e6:	80 83       	st	Z, r24
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <DIO_enumReadPorVal+0x9e>
			break;
		default:
			LOC_enumState = DIO_NOK;
    31ea:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return LOC_enumState;
    31ec:	99 81       	ldd	r25, Y+1	; 0x01
    31ee:	9d 83       	std	Y+5, r25	; 0x05
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <DIO_enumReadPorVal+0xaa>
	}
	else
	{
		LOC_enumState = DIO_NOK;
    31f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    31f4:	29 81       	ldd	r18, Y+1	; 0x01
    31f6:	2d 83       	std	Y+5, r18	; 0x05
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31fa:	27 96       	adiw	r28, 0x07	; 7
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <DIO_enumTogglePortValue+0x6>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <DIO_enumTogglePortValue+0x8>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	8a 83       	std	Y+2, r24	; 0x02
	DIO_errorStatus LOC_enumState = DIO_OK;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	08 f0       	brcs	.+2      	; 0x3226 <DIO_enumTogglePortValue+0x1a>
    3224:	3f c0       	rjmp	.+126    	; 0x32a4 <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	3c 83       	std	Y+4, r19	; 0x04
    322e:	2b 83       	std	Y+3, r18	; 0x03
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	91 05       	cpc	r25, r1
    3238:	e9 f0       	breq	.+58     	; 0x3274 <DIO_enumTogglePortValue+0x68>
    323a:	2b 81       	ldd	r18, Y+3	; 0x03
    323c:	3c 81       	ldd	r19, Y+4	; 0x04
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 05       	cpc	r19, r1
    3242:	2c f4       	brge	.+10     	; 0x324e <DIO_enumTogglePortValue+0x42>
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	61 f0       	breq	.+24     	; 0x3264 <DIO_enumTogglePortValue+0x58>
    324c:	2c c0       	rjmp	.+88     	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
    324e:	2b 81       	ldd	r18, Y+3	; 0x03
    3250:	3c 81       	ldd	r19, Y+4	; 0x04
    3252:	22 30       	cpi	r18, 0x02	; 2
    3254:	31 05       	cpc	r19, r1
    3256:	b1 f0       	breq	.+44     	; 0x3284 <DIO_enumTogglePortValue+0x78>
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	83 30       	cpi	r24, 0x03	; 3
    325e:	91 05       	cpc	r25, r1
    3260:	c9 f0       	breq	.+50     	; 0x3294 <DIO_enumTogglePortValue+0x88>
    3262:	21 c0       	rjmp	.+66     	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA:
			PORTA_REG = ~PORTA_REG;
    3264:	ab e3       	ldi	r26, 0x3B	; 59
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	eb e3       	ldi	r30, 0x3B	; 59
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 95       	com	r24
    3270:	8c 93       	st	X, r24
    3272:	19 c0       	rjmp	.+50     	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
			break;
		case DIO_PORTB:
			PORTB_REG = ~PORTB_REG;
    3274:	a8 e3       	ldi	r26, 0x38	; 56
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e8 e3       	ldi	r30, 0x38	; 56
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	80 95       	com	r24
    3280:	8c 93       	st	X, r24
    3282:	11 c0       	rjmp	.+34     	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
			break;
		case DIO_PORTC:
			PORTC_REG = ~PORTC_REG;
    3284:	a5 e3       	ldi	r26, 0x35	; 53
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e5 e3       	ldi	r30, 0x35	; 53
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	80 95       	com	r24
    3290:	8c 93       	st	X, r24
    3292:	09 c0       	rjmp	.+18     	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
			break;
		case DIO_PORTD:
			PORTD_REG = ~PORTD_REG;
    3294:	a2 e3       	ldi	r26, 0x32	; 50
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e2 e3       	ldi	r30, 0x32	; 50
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	80 95       	com	r24
    32a0:	8c 93       	st	X, r24
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <DIO_enumTogglePortValue+0x9a>
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    32a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <DIO_vWriteLowNibble+0x6>
    32bc:	00 d0       	rcall	.+0      	; 0x32be <DIO_vWriteLowNibble+0x8>
    32be:	0f 92       	push	r0
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	8a 83       	std	Y+2, r24	; 0x02
    32c6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD))
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	84 30       	cpi	r24, 0x04	; 4
    32d0:	08 f0       	brcs	.+2      	; 0x32d4 <DIO_vWriteLowNibble+0x1e>
    32d2:	62 c0       	rjmp	.+196    	; 0x3398 <DIO_vWriteLowNibble+0xe2>
	{
		value &= 0x0F;
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	8f 70       	andi	r24, 0x0F	; 15
    32d8:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PORT)
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	3d 83       	std	Y+5, r19	; 0x05
    32e2:	2c 83       	std	Y+4, r18	; 0x04
    32e4:	8c 81       	ldd	r24, Y+4	; 0x04
    32e6:	9d 81       	ldd	r25, Y+5	; 0x05
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	91 05       	cpc	r25, r1
    32ec:	29 f1       	breq	.+74     	; 0x3338 <DIO_vWriteLowNibble+0x82>
    32ee:	2c 81       	ldd	r18, Y+4	; 0x04
    32f0:	3d 81       	ldd	r19, Y+5	; 0x05
    32f2:	22 30       	cpi	r18, 0x02	; 2
    32f4:	31 05       	cpc	r19, r1
    32f6:	2c f4       	brge	.+10     	; 0x3302 <DIO_vWriteLowNibble+0x4c>
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	9d 81       	ldd	r25, Y+5	; 0x05
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	61 f0       	breq	.+24     	; 0x3318 <DIO_vWriteLowNibble+0x62>
    3300:	4c c0       	rjmp	.+152    	; 0x339a <DIO_vWriteLowNibble+0xe4>
    3302:	2c 81       	ldd	r18, Y+4	; 0x04
    3304:	3d 81       	ldd	r19, Y+5	; 0x05
    3306:	22 30       	cpi	r18, 0x02	; 2
    3308:	31 05       	cpc	r19, r1
    330a:	31 f1       	breq	.+76     	; 0x3358 <DIO_vWriteLowNibble+0xa2>
    330c:	8c 81       	ldd	r24, Y+4	; 0x04
    330e:	9d 81       	ldd	r25, Y+5	; 0x05
    3310:	83 30       	cpi	r24, 0x03	; 3
    3312:	91 05       	cpc	r25, r1
    3314:	89 f1       	breq	.+98     	; 0x3378 <DIO_vWriteLowNibble+0xc2>
    3316:	41 c0       	rjmp	.+130    	; 0x339a <DIO_vWriteLowNibble+0xe4>
		{
		case DIO_PORTA:
			PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    3318:	ab e3       	ldi	r26, 0x3B	; 59
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	eb e3       	ldi	r30, 0x3B	; 59
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	80 7f       	andi	r24, 0xF0	; 240
    3324:	8c 93       	st	X, r24
			PORTA_REG |= value;
    3326:	ab e3       	ldi	r26, 0x3B	; 59
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	eb e3       	ldi	r30, 0x3B	; 59
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	90 81       	ld	r25, Z
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	89 2b       	or	r24, r25
    3334:	8c 93       	st	X, r24
    3336:	31 c0       	rjmp	.+98     	; 0x339a <DIO_vWriteLowNibble+0xe4>
			break;
		case DIO_PORTB:
			PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    3338:	a8 e3       	ldi	r26, 0x38	; 56
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e8 e3       	ldi	r30, 0x38	; 56
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 7f       	andi	r24, 0xF0	; 240
    3344:	8c 93       	st	X, r24
			PORTB_REG |= value;
    3346:	a8 e3       	ldi	r26, 0x38	; 56
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e8 e3       	ldi	r30, 0x38	; 56
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	90 81       	ld	r25, Z
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	89 2b       	or	r24, r25
    3354:	8c 93       	st	X, r24
    3356:	21 c0       	rjmp	.+66     	; 0x339a <DIO_vWriteLowNibble+0xe4>
			break;
		case DIO_PORTC:
			PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    3358:	a5 e3       	ldi	r26, 0x35	; 53
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e5 e3       	ldi	r30, 0x35	; 53
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	80 7f       	andi	r24, 0xF0	; 240
    3364:	8c 93       	st	X, r24
			PORTC_REG |= value;
    3366:	a5 e3       	ldi	r26, 0x35	; 53
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e5 e3       	ldi	r30, 0x35	; 53
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	90 81       	ld	r25, Z
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	89 2b       	or	r24, r25
    3374:	8c 93       	st	X, r24
    3376:	11 c0       	rjmp	.+34     	; 0x339a <DIO_vWriteLowNibble+0xe4>
			break;
		case DIO_PORTD:
			PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3378:	a2 e3       	ldi	r26, 0x32	; 50
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e2 e3       	ldi	r30, 0x32	; 50
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	80 7f       	andi	r24, 0xF0	; 240
    3384:	8c 93       	st	X, r24
			PORTD_REG |= value;
    3386:	a2 e3       	ldi	r26, 0x32	; 50
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e2 e3       	ldi	r30, 0x32	; 50
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	90 81       	ld	r25, Z
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	89 2b       	or	r24, r25
    3394:	8c 93       	st	X, r24
    3396:	01 c0       	rjmp	.+2      	; 0x339a <DIO_vWriteLowNibble+0xe4>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK;
    3398:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    339a:	89 81       	ldd	r24, Y+1	; 0x01
}
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <DIO_vWriteHighNibble+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <DIO_vWriteHighNibble+0x8>
    33b4:	0f 92       	push	r0
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	8a 83       	std	Y+2, r24	; 0x02
    33bc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD))
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	84 30       	cpi	r24, 0x04	; 4
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <DIO_vWriteHighNibble+0x1e>
    33c8:	63 c0       	rjmp	.+198    	; 0x3490 <DIO_vWriteHighNibble+0xe4>
	{
		value <<= 4;
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	82 95       	swap	r24
    33ce:	80 7f       	andi	r24, 0xF0	; 240
    33d0:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PORT)
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	3d 83       	std	Y+5, r19	; 0x05
    33da:	2c 83       	std	Y+4, r18	; 0x04
    33dc:	8c 81       	ldd	r24, Y+4	; 0x04
    33de:	9d 81       	ldd	r25, Y+5	; 0x05
    33e0:	81 30       	cpi	r24, 0x01	; 1
    33e2:	91 05       	cpc	r25, r1
    33e4:	29 f1       	breq	.+74     	; 0x3430 <DIO_vWriteHighNibble+0x84>
    33e6:	2c 81       	ldd	r18, Y+4	; 0x04
    33e8:	3d 81       	ldd	r19, Y+5	; 0x05
    33ea:	22 30       	cpi	r18, 0x02	; 2
    33ec:	31 05       	cpc	r19, r1
    33ee:	2c f4       	brge	.+10     	; 0x33fa <DIO_vWriteHighNibble+0x4e>
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
    33f2:	9d 81       	ldd	r25, Y+5	; 0x05
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	61 f0       	breq	.+24     	; 0x3410 <DIO_vWriteHighNibble+0x64>
    33f8:	4c c0       	rjmp	.+152    	; 0x3492 <DIO_vWriteHighNibble+0xe6>
    33fa:	2c 81       	ldd	r18, Y+4	; 0x04
    33fc:	3d 81       	ldd	r19, Y+5	; 0x05
    33fe:	22 30       	cpi	r18, 0x02	; 2
    3400:	31 05       	cpc	r19, r1
    3402:	31 f1       	breq	.+76     	; 0x3450 <DIO_vWriteHighNibble+0xa4>
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	9d 81       	ldd	r25, Y+5	; 0x05
    3408:	83 30       	cpi	r24, 0x03	; 3
    340a:	91 05       	cpc	r25, r1
    340c:	89 f1       	breq	.+98     	; 0x3470 <DIO_vWriteHighNibble+0xc4>
    340e:	41 c0       	rjmp	.+130    	; 0x3492 <DIO_vWriteHighNibble+0xe6>
		{
		case DIO_PORTA:
			PORTA_REG &= 0x0F;
    3410:	ab e3       	ldi	r26, 0x3B	; 59
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	eb e3       	ldi	r30, 0x3B	; 59
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	8f 70       	andi	r24, 0x0F	; 15
    341c:	8c 93       	st	X, r24
			PORTA_REG|= value;
    341e:	ab e3       	ldi	r26, 0x3B	; 59
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	eb e3       	ldi	r30, 0x3B	; 59
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	90 81       	ld	r25, Z
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	89 2b       	or	r24, r25
    342c:	8c 93       	st	X, r24
    342e:	31 c0       	rjmp	.+98     	; 0x3492 <DIO_vWriteHighNibble+0xe6>
			break;
		case DIO_PORTB:
			PORTB_REG &= 0x0F;
    3430:	a8 e3       	ldi	r26, 0x38	; 56
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e8 e3       	ldi	r30, 0x38	; 56
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	8f 70       	andi	r24, 0x0F	; 15
    343c:	8c 93       	st	X, r24
			PORTB_REG |= value;
    343e:	a8 e3       	ldi	r26, 0x38	; 56
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	e8 e3       	ldi	r30, 0x38	; 56
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	90 81       	ld	r25, Z
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	89 2b       	or	r24, r25
    344c:	8c 93       	st	X, r24
    344e:	21 c0       	rjmp	.+66     	; 0x3492 <DIO_vWriteHighNibble+0xe6>
			break;
		case DIO_PORTC:
			PORTC_REG &= 0x0F;
    3450:	a5 e3       	ldi	r26, 0x35	; 53
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e5 e3       	ldi	r30, 0x35	; 53
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	8f 70       	andi	r24, 0x0F	; 15
    345c:	8c 93       	st	X, r24
			PORTC_REG |= value;
    345e:	a5 e3       	ldi	r26, 0x35	; 53
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e5 e3       	ldi	r30, 0x35	; 53
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	90 81       	ld	r25, Z
    3468:	8b 81       	ldd	r24, Y+3	; 0x03
    346a:	89 2b       	or	r24, r25
    346c:	8c 93       	st	X, r24
    346e:	11 c0       	rjmp	.+34     	; 0x3492 <DIO_vWriteHighNibble+0xe6>
			break;
		case DIO_PORTD:
			PORTD_REG &= 0x0F;
    3470:	a2 e3       	ldi	r26, 0x32	; 50
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e2 e3       	ldi	r30, 0x32	; 50
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8f 70       	andi	r24, 0x0F	; 15
    347c:	8c 93       	st	X, r24
			PORTD_REG |= value;
    347e:	a2 e3       	ldi	r26, 0x32	; 50
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e2 e3       	ldi	r30, 0x32	; 50
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	90 81       	ld	r25, Z
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	89 2b       	or	r24, r25
    348c:	8c 93       	st	X, r24
    348e:	01 c0       	rjmp	.+2      	; 0x3492 <DIO_vWriteHighNibble+0xe6>
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    3490:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    3492:	89 81       	ldd	r24, Y+1	; 0x01
}
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <DIO_vSetLowNibbleDir+0x6>
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <DIO_vSetLowNibbleDir+0x8>
    34ac:	0f 92       	push	r0
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	8a 83       	std	Y+2, r24	; 0x02
    34b4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD))
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	84 30       	cpi	r24, 0x04	; 4
    34be:	08 f0       	brcs	.+2      	; 0x34c2 <DIO_vSetLowNibbleDir+0x1e>
    34c0:	62 c0       	rjmp	.+196    	; 0x3586 <DIO_vSetLowNibbleDir+0xe2>
	{
		value &= 0x0F;
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	8f 70       	andi	r24, 0x0F	; 15
    34c6:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PORT)
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	3d 83       	std	Y+5, r19	; 0x05
    34d0:	2c 83       	std	Y+4, r18	; 0x04
    34d2:	8c 81       	ldd	r24, Y+4	; 0x04
    34d4:	9d 81       	ldd	r25, Y+5	; 0x05
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	91 05       	cpc	r25, r1
    34da:	29 f1       	breq	.+74     	; 0x3526 <DIO_vSetLowNibbleDir+0x82>
    34dc:	2c 81       	ldd	r18, Y+4	; 0x04
    34de:	3d 81       	ldd	r19, Y+5	; 0x05
    34e0:	22 30       	cpi	r18, 0x02	; 2
    34e2:	31 05       	cpc	r19, r1
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <DIO_vSetLowNibbleDir+0x4c>
    34e6:	8c 81       	ldd	r24, Y+4	; 0x04
    34e8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	61 f0       	breq	.+24     	; 0x3506 <DIO_vSetLowNibbleDir+0x62>
    34ee:	4c c0       	rjmp	.+152    	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
    34f0:	2c 81       	ldd	r18, Y+4	; 0x04
    34f2:	3d 81       	ldd	r19, Y+5	; 0x05
    34f4:	22 30       	cpi	r18, 0x02	; 2
    34f6:	31 05       	cpc	r19, r1
    34f8:	31 f1       	breq	.+76     	; 0x3546 <DIO_vSetLowNibbleDir+0xa2>
    34fa:	8c 81       	ldd	r24, Y+4	; 0x04
    34fc:	9d 81       	ldd	r25, Y+5	; 0x05
    34fe:	83 30       	cpi	r24, 0x03	; 3
    3500:	91 05       	cpc	r25, r1
    3502:	89 f1       	breq	.+98     	; 0x3566 <DIO_vSetLowNibbleDir+0xc2>
    3504:	41 c0       	rjmp	.+130    	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
		{
		case DIO_PORTA:
			DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    3506:	aa e3       	ldi	r26, 0x3A	; 58
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	ea e3       	ldi	r30, 0x3A	; 58
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	80 7f       	andi	r24, 0xF0	; 240
    3512:	8c 93       	st	X, r24
			DDRA_REG |= value;
    3514:	aa e3       	ldi	r26, 0x3A	; 58
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	ea e3       	ldi	r30, 0x3A	; 58
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	90 81       	ld	r25, Z
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	89 2b       	or	r24, r25
    3522:	8c 93       	st	X, r24
    3524:	31 c0       	rjmp	.+98     	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
			break;
		case DIO_PORTB:
			DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    3526:	a7 e3       	ldi	r26, 0x37	; 55
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e7 e3       	ldi	r30, 0x37	; 55
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	80 7f       	andi	r24, 0xF0	; 240
    3532:	8c 93       	st	X, r24
			DDRB_REG |= value;
    3534:	a7 e3       	ldi	r26, 0x37	; 55
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	e7 e3       	ldi	r30, 0x37	; 55
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	90 81       	ld	r25, Z
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	89 2b       	or	r24, r25
    3542:	8c 93       	st	X, r24
    3544:	21 c0       	rjmp	.+66     	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
			break;
		case DIO_PORTC:
			DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    3546:	a4 e3       	ldi	r26, 0x34	; 52
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	e4 e3       	ldi	r30, 0x34	; 52
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	80 7f       	andi	r24, 0xF0	; 240
    3552:	8c 93       	st	X, r24
			DDRC_REG |= value;
    3554:	a4 e3       	ldi	r26, 0x34	; 52
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e4 e3       	ldi	r30, 0x34	; 52
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	90 81       	ld	r25, Z
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	89 2b       	or	r24, r25
    3562:	8c 93       	st	X, r24
    3564:	11 c0       	rjmp	.+34     	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
			break;
		case DIO_PORTD:
			DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3566:	a1 e3       	ldi	r26, 0x31	; 49
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	e1 e3       	ldi	r30, 0x31	; 49
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	80 7f       	andi	r24, 0xF0	; 240
    3572:	8c 93       	st	X, r24
			DDRD_REG|= value;
    3574:	a1 e3       	ldi	r26, 0x31	; 49
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	e1 e3       	ldi	r30, 0x31	; 49
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	90 81       	ld	r25, Z
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	89 2b       	or	r24, r25
    3582:	8c 93       	st	X, r24
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <DIO_vSetLowNibbleDir+0xe4>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK;
    3586:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    3588:	89 81       	ldd	r24, Y+1	; 0x01
}
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <DIO_vSetHighNibbleDir+0x6>
    35a0:	00 d0       	rcall	.+0      	; 0x35a2 <DIO_vSetHighNibbleDir+0x8>
    35a2:	0f 92       	push	r0
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
    35a8:	8a 83       	std	Y+2, r24	; 0x02
    35aa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus LOC_enumState = DIO_OK;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD))
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	84 30       	cpi	r24, 0x04	; 4
    35b4:	08 f0       	brcs	.+2      	; 0x35b8 <DIO_vSetHighNibbleDir+0x1e>
    35b6:	63 c0       	rjmp	.+198    	; 0x367e <DIO_vSetHighNibbleDir+0xe4>
	{
		value <<= 4;
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	82 95       	swap	r24
    35bc:	80 7f       	andi	r24, 0xF0	; 240
    35be:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PORT)
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	3d 83       	std	Y+5, r19	; 0x05
    35c8:	2c 83       	std	Y+4, r18	; 0x04
    35ca:	8c 81       	ldd	r24, Y+4	; 0x04
    35cc:	9d 81       	ldd	r25, Y+5	; 0x05
    35ce:	81 30       	cpi	r24, 0x01	; 1
    35d0:	91 05       	cpc	r25, r1
    35d2:	29 f1       	breq	.+74     	; 0x361e <DIO_vSetHighNibbleDir+0x84>
    35d4:	2c 81       	ldd	r18, Y+4	; 0x04
    35d6:	3d 81       	ldd	r19, Y+5	; 0x05
    35d8:	22 30       	cpi	r18, 0x02	; 2
    35da:	31 05       	cpc	r19, r1
    35dc:	2c f4       	brge	.+10     	; 0x35e8 <DIO_vSetHighNibbleDir+0x4e>
    35de:	8c 81       	ldd	r24, Y+4	; 0x04
    35e0:	9d 81       	ldd	r25, Y+5	; 0x05
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	61 f0       	breq	.+24     	; 0x35fe <DIO_vSetHighNibbleDir+0x64>
    35e6:	4c c0       	rjmp	.+152    	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
    35e8:	2c 81       	ldd	r18, Y+4	; 0x04
    35ea:	3d 81       	ldd	r19, Y+5	; 0x05
    35ec:	22 30       	cpi	r18, 0x02	; 2
    35ee:	31 05       	cpc	r19, r1
    35f0:	31 f1       	breq	.+76     	; 0x363e <DIO_vSetHighNibbleDir+0xa4>
    35f2:	8c 81       	ldd	r24, Y+4	; 0x04
    35f4:	9d 81       	ldd	r25, Y+5	; 0x05
    35f6:	83 30       	cpi	r24, 0x03	; 3
    35f8:	91 05       	cpc	r25, r1
    35fa:	89 f1       	breq	.+98     	; 0x365e <DIO_vSetHighNibbleDir+0xc4>
    35fc:	41 c0       	rjmp	.+130    	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
		{
		case DIO_PORTA:
			DDRA_REG &= 0x0F;
    35fe:	aa e3       	ldi	r26, 0x3A	; 58
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ea e3       	ldi	r30, 0x3A	; 58
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	8f 70       	andi	r24, 0x0F	; 15
    360a:	8c 93       	st	X, r24
			DDRA_REG |= value;
    360c:	aa e3       	ldi	r26, 0x3A	; 58
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	ea e3       	ldi	r30, 0x3A	; 58
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	90 81       	ld	r25, Z
    3616:	8b 81       	ldd	r24, Y+3	; 0x03
    3618:	89 2b       	or	r24, r25
    361a:	8c 93       	st	X, r24
    361c:	31 c0       	rjmp	.+98     	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
			break;
		case DIO_PORTB:
			DDRB_REG &= 0x0F;
    361e:	a7 e3       	ldi	r26, 0x37	; 55
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e7 e3       	ldi	r30, 0x37	; 55
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	8f 70       	andi	r24, 0x0F	; 15
    362a:	8c 93       	st	X, r24
			DDRB_REG |= value;
    362c:	a7 e3       	ldi	r26, 0x37	; 55
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e7 e3       	ldi	r30, 0x37	; 55
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	90 81       	ld	r25, Z
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	89 2b       	or	r24, r25
    363a:	8c 93       	st	X, r24
    363c:	21 c0       	rjmp	.+66     	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
			break;
		case DIO_PORTC:
			DDRC_REG &= 0x0F;
    363e:	a4 e3       	ldi	r26, 0x34	; 52
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e4 e3       	ldi	r30, 0x34	; 52
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	8f 70       	andi	r24, 0x0F	; 15
    364a:	8c 93       	st	X, r24
			DDRC_REG |= value;
    364c:	a4 e3       	ldi	r26, 0x34	; 52
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	e4 e3       	ldi	r30, 0x34	; 52
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	90 81       	ld	r25, Z
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	89 2b       	or	r24, r25
    365a:	8c 93       	st	X, r24
    365c:	11 c0       	rjmp	.+34     	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
			break;
		case DIO_PORTD:
			DDRD_REG &= 0x0F;
    365e:	a1 e3       	ldi	r26, 0x31	; 49
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e1 e3       	ldi	r30, 0x31	; 49
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 70       	andi	r24, 0x0F	; 15
    366a:	8c 93       	st	X, r24
			DDRD_REG |= value;
    366c:	a1 e3       	ldi	r26, 0x31	; 49
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	e1 e3       	ldi	r30, 0x31	; 49
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	90 81       	ld	r25, Z
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	89 2b       	or	r24, r25
    367a:	8c 93       	st	X, r24
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <DIO_vSetHighNibbleDir+0xe6>
			break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    367e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    3680:	89 81       	ldd	r24, Y+1	; 0x01
}
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    369a:	a7 e2       	ldi	r26, 0x27	; 39
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e7 e2       	ldi	r30, 0x27	; 39
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	80 64       	ori	r24, 0x40	; 64
    36a6:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    36a8:	a7 e2       	ldi	r26, 0x27	; 39
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e7 e2       	ldi	r30, 0x27	; 39
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	8f 77       	andi	r24, 0x7F	; 127
    36b4:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    36b6:	a7 e2       	ldi	r26, 0x27	; 39
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	e7 e2       	ldi	r30, 0x27	; 39
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	8f 7d       	andi	r24, 0xDF	; 223
    36c2:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    36c4:	a6 e2       	ldi	r26, 0x26	; 38
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e6 e2       	ldi	r30, 0x26	; 38
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	88 7f       	andi	r24, 0xF8	; 248
    36d0:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    36d2:	a6 e2       	ldi	r26, 0x26	; 38
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e6 e2       	ldi	r30, 0x26	; 38
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	87 60       	ori	r24, 0x07	; 7
    36de:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    36e0:	a6 e2       	ldi	r26, 0x26	; 38
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e6 e2       	ldi	r30, 0x26	; 38
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 7d       	andi	r24, 0xDF	; 223
    36ec:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    36ee:	a6 e2       	ldi	r26, 0x26	; 38
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	e6 e2       	ldi	r30, 0x26	; 38
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	80 68       	ori	r24, 0x80	; 128
    36fa:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    36fc:	a6 e2       	ldi	r26, 0x26	; 38
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	e6 e2       	ldi	r30, 0x26	; 38
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	87 7f       	andi	r24, 0xF7	; 247
    3708:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    3718:	a6 e2       	ldi	r26, 0x26	; 38
    371a:	b0 e0       	ldi	r27, 0x00	; 0
    371c:	e6 e2       	ldi	r30, 0x26	; 38
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	80 68       	ori	r24, 0x80	; 128
    3724:	8c 93       	st	X, r24
}
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    3734:	a6 e2       	ldi	r26, 0x26	; 38
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	e6 e2       	ldi	r30, 0x26	; 38
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	8f 77       	andi	r24, 0x7F	; 127
    3740:	8c 93       	st	X, r24
}
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	08 95       	ret

00003748 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	cd b7       	in	r28, 0x3d	; 61
    374e:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    3750:	a6 e2       	ldi	r26, 0x26	; 38
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e6 e2       	ldi	r30, 0x26	; 38
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	88 60       	ori	r24, 0x08	; 8
    375c:	8c 93       	st	X, r24
}
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    376c:	a6 e2       	ldi	r26, 0x26	; 38
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e6 e2       	ldi	r30, 0x26	; 38
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	87 7f       	andi	r24, 0xF7	; 247
    3778:	8c 93       	st	X, r24
}
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	00 d0       	rcall	.+0      	; 0x3786 <ADC_u8VoltageReference+0x6>
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	88 23       	and	r24, r24
    3794:	31 f0       	breq	.+12     	; 0x37a2 <ADC_u8VoltageReference+0x22>
    3796:	8a 81       	ldd	r24, Y+2	; 0x02
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	19 f0       	breq	.+6      	; 0x37a2 <ADC_u8VoltageReference+0x22>
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	83 30       	cpi	r24, 0x03	; 3
    37a0:	e1 f4       	brne	.+56     	; 0x37da <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    37a2:	a7 e2       	ldi	r26, 0x27	; 39
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e7 e2       	ldi	r30, 0x27	; 39
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	8f 73       	andi	r24, 0x3F	; 63
    37ae:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    37b0:	a7 e2       	ldi	r26, 0x27	; 39
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	e7 e2       	ldi	r30, 0x27	; 39
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	28 2f       	mov	r18, r24
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	88 2f       	mov	r24, r24
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	00 24       	eor	r0, r0
    37c4:	96 95       	lsr	r25
    37c6:	87 95       	ror	r24
    37c8:	07 94       	ror	r0
    37ca:	96 95       	lsr	r25
    37cc:	87 95       	ror	r24
    37ce:	07 94       	ror	r0
    37d0:	98 2f       	mov	r25, r24
    37d2:	80 2d       	mov	r24, r0
    37d4:	82 2b       	or	r24, r18
    37d6:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    37d8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    37da:	89 81       	ldd	r24, Y+1	; 0x01
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <ADC_u8SetPrescaler+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	88 30       	cpi	r24, 0x08	; 8
    37fa:	80 f4       	brcc	.+32     	; 0x381c <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    37fc:	a6 e2       	ldi	r26, 0x26	; 38
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e6 e2       	ldi	r30, 0x26	; 38
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	88 7f       	andi	r24, 0xF8	; 248
    3808:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    380a:	a6 e2       	ldi	r26, 0x26	; 38
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e6 e2       	ldi	r30, 0x26	; 38
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	90 81       	ld	r25, Z
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	89 2b       	or	r24, r25
    3818:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    381a:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    381c:	89 81       	ldd	r24, Y+1	; 0x01
}
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	00 d0       	rcall	.+0      	; 0x382e <ADC_u8SetAdjustment+0x6>
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    3834:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	88 23       	and	r24, r24
    383a:	41 f4       	brne	.+16     	; 0x384c <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    383c:	a7 e2       	ldi	r26, 0x27	; 39
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e7 e2       	ldi	r30, 0x27	; 39
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	8f 7d       	andi	r24, 0xDF	; 223
    3848:	8c 93       	st	X, r24
    384a:	0d c0       	rjmp	.+26     	; 0x3866 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	41 f4       	brne	.+16     	; 0x3862 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    3852:	a7 e2       	ldi	r26, 0x27	; 39
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e7 e2       	ldi	r30, 0x27	; 39
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	80 62       	ori	r24, 0x20	; 32
    385e:	8c 93       	st	X, r24
    3860:	02 c0       	rjmp	.+4      	; 0x3866 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3866:	89 81       	ldd	r24, Y+1	; 0x01
}
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	00 d0       	rcall	.+0      	; 0x3878 <ADC_u8SetTriggerSource+0x6>
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    387e:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	88 30       	cpi	r24, 0x08	; 8
    3884:	41 f4       	brne	.+16     	; 0x3896 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    3886:	a6 e2       	ldi	r26, 0x26	; 38
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e6 e2       	ldi	r30, 0x26	; 38
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	8f 7d       	andi	r24, 0xDF	; 223
    3892:	8c 93       	st	X, r24
    3894:	1a c0       	rjmp	.+52     	; 0x38ca <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	88 30       	cpi	r24, 0x08	; 8
    389a:	a8 f4       	brcc	.+42     	; 0x38c6 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    389c:	a6 e2       	ldi	r26, 0x26	; 38
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e6 e2       	ldi	r30, 0x26	; 38
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	80 62       	ori	r24, 0x20	; 32
    38a8:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    38aa:	a0 e5       	ldi	r26, 0x50	; 80
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e0 e5       	ldi	r30, 0x50	; 80
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	8f 71       	andi	r24, 0x1F	; 31
    38b6:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    38b8:	a0 e5       	ldi	r26, 0x50	; 80
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	e0 e5       	ldi	r30, 0x50	; 80
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	8c 93       	st	X, r24
    38c4:	02 c0       	rjmp	.+4      	; 0x38ca <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	28 97       	sbiw	r28, 0x08	; 8
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	8e 83       	std	Y+6, r24	; 0x06
    38ec:	78 87       	std	Y+8, r23	; 0x08
    38ee:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    38f0:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    38f2:	19 82       	std	Y+1, r1	; 0x01
    38f4:	1a 82       	std	Y+2, r1	; 0x02
    38f6:	1b 82       	std	Y+3, r1	; 0x03
    38f8:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    38fa:	8f 81       	ldd	r24, Y+7	; 0x07
    38fc:	98 85       	ldd	r25, Y+8	; 0x08
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	09 f4       	brne	.+2      	; 0x3904 <ADC_u8GetResultSync+0x2e>
    3902:	78 c0       	rjmp	.+240    	; 0x39f4 <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    3904:	80 91 b5 04 	lds	r24, 0x04B5
    3908:	88 23       	and	r24, r24
    390a:	09 f0       	breq	.+2      	; 0x390e <ADC_u8GetResultSync+0x38>
    390c:	70 c0       	rjmp	.+224    	; 0x39ee <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	80 93 b5 04 	sts	0x04B5, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3914:	8e 81       	ldd	r24, Y+6	; 0x06
    3916:	80 32       	cpi	r24, 0x20	; 32
    3918:	78 f4       	brcc	.+30     	; 0x3938 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    391a:	a7 e2       	ldi	r26, 0x27	; 39
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	e7 e2       	ldi	r30, 0x27	; 39
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	80 7e       	andi	r24, 0xE0	; 224
    3926:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3928:	a7 e2       	ldi	r26, 0x27	; 39
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	e7 e2       	ldi	r30, 0x27	; 39
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	90 81       	ld	r25, Z
    3932:	8e 81       	ldd	r24, Y+6	; 0x06
    3934:	89 2b       	or	r24, r25
    3936:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3938:	a6 e2       	ldi	r26, 0x26	; 38
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e6 e2       	ldi	r30, 0x26	; 38
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	80 64       	ori	r24, 0x40	; 64
    3944:	8c 93       	st	X, r24
    3946:	0b c0       	rjmp	.+22     	; 0x395e <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	9a 81       	ldd	r25, Y+2	; 0x02
    394c:	ab 81       	ldd	r26, Y+3	; 0x03
    394e:	bc 81       	ldd	r27, Y+4	; 0x04
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	a1 1d       	adc	r26, r1
    3954:	b1 1d       	adc	r27, r1
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	9a 83       	std	Y+2, r25	; 0x02
    395a:	ab 83       	std	Y+3, r26	; 0x03
    395c:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    395e:	e6 e2       	ldi	r30, 0x26	; 38
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	88 2f       	mov	r24, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	80 71       	andi	r24, 0x10	; 16
    396a:	90 70       	andi	r25, 0x00	; 0
    396c:	95 95       	asr	r25
    396e:	87 95       	ror	r24
    3970:	95 95       	asr	r25
    3972:	87 95       	ror	r24
    3974:	95 95       	asr	r25
    3976:	87 95       	ror	r24
    3978:	95 95       	asr	r25
    397a:	87 95       	ror	r24
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	61 f4       	brne	.+24     	; 0x3998 <ADC_u8GetResultSync+0xc2>
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	ab 81       	ldd	r26, Y+3	; 0x03
    3986:	bc 81       	ldd	r27, Y+4	; 0x04
    3988:	80 35       	cpi	r24, 0x50	; 80
    398a:	23 ec       	ldi	r18, 0xC3	; 195
    398c:	92 07       	cpc	r25, r18
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	a2 07       	cpc	r26, r18
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	b2 07       	cpc	r27, r18
    3996:	c0 f2       	brcs	.-80     	; 0x3948 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	9a 81       	ldd	r25, Y+2	; 0x02
    399c:	ab 81       	ldd	r26, Y+3	; 0x03
    399e:	bc 81       	ldd	r27, Y+4	; 0x04
    39a0:	80 35       	cpi	r24, 0x50	; 80
    39a2:	23 ec       	ldi	r18, 0xC3	; 195
    39a4:	92 07       	cpc	r25, r18
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	a2 07       	cpc	r26, r18
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	b2 07       	cpc	r27, r18
    39ae:	19 f4       	brne	.+6      	; 0x39b6 <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	8d 83       	std	Y+5, r24	; 0x05
    39b4:	19 c0       	rjmp	.+50     	; 0x39e8 <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    39b6:	a6 e2       	ldi	r26, 0x26	; 38
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e6 e2       	ldi	r30, 0x26	; 38
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	80 61       	ori	r24, 0x10	; 16
    39c2:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    39c4:	e4 e2       	ldi	r30, 0x24	; 36
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	28 2f       	mov	r18, r24
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	e5 e2       	ldi	r30, 0x25	; 37
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	88 2f       	mov	r24, r24
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	98 2f       	mov	r25, r24
    39da:	88 27       	eor	r24, r24
    39dc:	82 2b       	or	r24, r18
    39de:	93 2b       	or	r25, r19
    39e0:	ef 81       	ldd	r30, Y+7	; 0x07
    39e2:	f8 85       	ldd	r31, Y+8	; 0x08
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    39e8:	10 92 b5 04 	sts	0x04B5, r1
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    39f8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    39fa:	28 96       	adiw	r28, 0x08	; 8
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	00 d0       	rcall	.+0      	; 0x3a12 <ADC_u8StartConversionAsynch+0x6>
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <ADC_u8StartConversionAsynch+0x8>
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <ADC_u8StartConversionAsynch+0xa>
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	8a 83       	std	Y+2, r24	; 0x02
    3a1c:	7c 83       	std	Y+4, r23	; 0x04
    3a1e:	6b 83       	std	Y+3, r22	; 0x03
    3a20:	5e 83       	std	Y+6, r21	; 0x06
    3a22:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    3a24:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	e9 f1       	breq	.+122    	; 0x3aa8 <ADC_u8StartConversionAsynch+0x9c>
    3a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a30:	9e 81       	ldd	r25, Y+6	; 0x06
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	c9 f1       	breq	.+114    	; 0x3aa8 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    3a36:	80 91 b5 04 	lds	r24, 0x04B5
    3a3a:	88 23       	and	r24, r24
    3a3c:	91 f5       	brne	.+100    	; 0x3aa2 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	80 93 b5 04 	sts	0x04B5, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    3a44:	10 92 b6 04 	sts	0x04B6, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    3a48:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4c:	90 93 b2 04 	sts	0x04B2, r25
    3a50:	80 93 b1 04 	sts	0x04B1, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	90 93 b4 04 	sts	0x04B4, r25
    3a5c:	80 93 b3 04 	sts	0x04B3, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	80 32       	cpi	r24, 0x20	; 32
    3a64:	78 f4       	brcc	.+30     	; 0x3a84 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    3a66:	a7 e2       	ldi	r26, 0x27	; 39
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	e7 e2       	ldi	r30, 0x27	; 39
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	80 81       	ld	r24, Z
    3a70:	80 7e       	andi	r24, 0xE0	; 224
    3a72:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3a74:	a7 e2       	ldi	r26, 0x27	; 39
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	e7 e2       	ldi	r30, 0x27	; 39
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	90 81       	ld	r25, Z
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	89 2b       	or	r24, r25
    3a82:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3a84:	a6 e2       	ldi	r26, 0x26	; 38
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e6 e2       	ldi	r30, 0x26	; 38
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	80 64       	ori	r24, 0x40	; 64
    3a90:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    3a92:	a6 e2       	ldi	r26, 0x26	; 38
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	e6 e2       	ldi	r30, 0x26	; 38
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	88 60       	ori	r24, 0x08	; 8
    3a9e:	8c 93       	st	X, r24
    3aa0:	05 c0       	rjmp	.+10     	; 0x3aac <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    3aa2:	83 e0       	ldi	r24, 0x03	; 3
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aae:	26 96       	adiw	r28, 0x06	; 6
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <ADC_u8StartChainAsynch+0x6>
    3ac6:	0f 92       	push	r0
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	9b 83       	std	Y+3, r25	; 0x03
    3ace:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    3ad0:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <ADC_u8StartChainAsynch+0x1c>
    3ada:	79 c0       	rjmp	.+242    	; 0x3bce <ADC_u8StartChainAsynch+0x10e>
    3adc:	ea 81       	ldd	r30, Y+2	; 0x02
    3ade:	fb 81       	ldd	r31, Y+3	; 0x03
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	09 f4       	brne	.+2      	; 0x3aea <ADC_u8StartChainAsynch+0x2a>
    3ae8:	72 c0       	rjmp	.+228    	; 0x3bce <ADC_u8StartChainAsynch+0x10e>
    3aea:	ea 81       	ldd	r30, Y+2	; 0x02
    3aec:	fb 81       	ldd	r31, Y+3	; 0x03
    3aee:	85 81       	ldd	r24, Z+5	; 0x05
    3af0:	96 81       	ldd	r25, Z+6	; 0x06
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	09 f4       	brne	.+2      	; 0x3af8 <ADC_u8StartChainAsynch+0x38>
    3af6:	6b c0       	rjmp	.+214    	; 0x3bce <ADC_u8StartChainAsynch+0x10e>
    3af8:	ea 81       	ldd	r30, Y+2	; 0x02
    3afa:	fb 81       	ldd	r31, Y+3	; 0x03
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <ADC_u8StartChainAsynch+0x46>
    3b04:	64 c0       	rjmp	.+200    	; 0x3bce <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    3b06:	80 91 b5 04 	lds	r24, 0x04B5
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f0       	breq	.+2      	; 0x3b10 <ADC_u8StartChainAsynch+0x50>
    3b0e:	5c c0       	rjmp	.+184    	; 0x3bc8 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	80 93 b5 04 	sts	0x04B5, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	80 93 b6 04 	sts	0x04B6, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    3b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b20:	82 81       	ldd	r24, Z+2	; 0x02
    3b22:	93 81       	ldd	r25, Z+3	; 0x03
    3b24:	90 93 b2 04 	sts	0x04B2, r25
    3b28:	80 93 b1 04 	sts	0x04B1, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    3b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	90 93 b8 04 	sts	0x04B8, r25
    3b38:	80 93 b7 04 	sts	0x04B7, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    3b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b40:	84 81       	ldd	r24, Z+4	; 0x04
    3b42:	80 93 b9 04 	sts	0x04B9, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    3b46:	ea 81       	ldd	r30, Y+2	; 0x02
    3b48:	fb 81       	ldd	r31, Y+3	; 0x03
    3b4a:	85 81       	ldd	r24, Z+5	; 0x05
    3b4c:	96 81       	ldd	r25, Z+6	; 0x06
    3b4e:	90 93 b4 04 	sts	0x04B4, r25
    3b52:	80 93 b3 04 	sts	0x04B3, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    3b56:	10 92 ba 04 	sts	0x04BA, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    3b5a:	20 91 b7 04 	lds	r18, 0x04B7
    3b5e:	30 91 b8 04 	lds	r19, 0x04B8
    3b62:	80 91 ba 04 	lds	r24, 0x04BA
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	f9 01       	movw	r30, r18
    3b6c:	e8 0f       	add	r30, r24
    3b6e:	f9 1f       	adc	r31, r25
    3b70:	80 81       	ld	r24, Z
    3b72:	80 32       	cpi	r24, 0x20	; 32
    3b74:	d0 f4       	brcc	.+52     	; 0x3baa <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    3b76:	a7 e2       	ldi	r26, 0x27	; 39
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	e7 e2       	ldi	r30, 0x27	; 39
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	80 7e       	andi	r24, 0xE0	; 224
    3b82:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3b84:	a7 e2       	ldi	r26, 0x27	; 39
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	e7 e2       	ldi	r30, 0x27	; 39
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	40 81       	ld	r20, Z
    3b8e:	20 91 b7 04 	lds	r18, 0x04B7
    3b92:	30 91 b8 04 	lds	r19, 0x04B8
    3b96:	80 91 ba 04 	lds	r24, 0x04BA
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	f9 01       	movw	r30, r18
    3ba0:	e8 0f       	add	r30, r24
    3ba2:	f9 1f       	adc	r31, r25
    3ba4:	80 81       	ld	r24, Z
    3ba6:	84 2b       	or	r24, r20
    3ba8:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3baa:	a6 e2       	ldi	r26, 0x26	; 38
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	e6 e2       	ldi	r30, 0x26	; 38
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 64       	ori	r24, 0x40	; 64
    3bb6:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    3bb8:	a6 e2       	ldi	r26, 0x26	; 38
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e6 e2       	ldi	r30, 0x26	; 38
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	88 60       	ori	r24, 0x08	; 8
    3bc4:	8c 93       	st	X, r24
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    3bc8:	83 e0       	ldi	r24, 0x03	; 3
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3bce:	82 e0       	ldi	r24, 0x02	; 2
    3bd0:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    3be0:	1f 92       	push	r1
    3be2:	0f 92       	push	r0
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	0f 92       	push	r0
    3be8:	11 24       	eor	r1, r1
    3bea:	2f 93       	push	r18
    3bec:	3f 93       	push	r19
    3bee:	4f 93       	push	r20
    3bf0:	5f 93       	push	r21
    3bf2:	6f 93       	push	r22
    3bf4:	7f 93       	push	r23
    3bf6:	8f 93       	push	r24
    3bf8:	9f 93       	push	r25
    3bfa:	af 93       	push	r26
    3bfc:	bf 93       	push	r27
    3bfe:	ef 93       	push	r30
    3c00:	ff 93       	push	r31
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    3c0a:	80 91 b6 04 	lds	r24, 0x04B6
    3c0e:	88 23       	and	r24, r24
    3c10:	19 f5       	brne	.+70     	; 0x3c58 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    3c12:	a0 91 b1 04 	lds	r26, 0x04B1
    3c16:	b0 91 b2 04 	lds	r27, 0x04B2
    3c1a:	e4 e2       	ldi	r30, 0x24	; 36
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	28 2f       	mov	r18, r24
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	e5 e2       	ldi	r30, 0x25	; 37
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	88 2f       	mov	r24, r24
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	98 2f       	mov	r25, r24
    3c30:	88 27       	eor	r24, r24
    3c32:	82 2b       	or	r24, r18
    3c34:	93 2b       	or	r25, r19
    3c36:	8d 93       	st	X+, r24
    3c38:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    3c3a:	10 92 b5 04 	sts	0x04B5, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    3c3e:	e0 91 b3 04 	lds	r30, 0x04B3
    3c42:	f0 91 b4 04 	lds	r31, 0x04B4
    3c46:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3c48:	a6 e2       	ldi	r26, 0x26	; 38
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e6 e2       	ldi	r30, 0x26	; 38
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	87 7f       	andi	r24, 0xF7	; 247
    3c54:	8c 93       	st	X, r24
    3c56:	6c c0       	rjmp	.+216    	; 0x3d30 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    3c58:	80 91 b6 04 	lds	r24, 0x04B6
    3c5c:	81 30       	cpi	r24, 0x01	; 1
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <__vector_16+0x82>
    3c60:	67 c0       	rjmp	.+206    	; 0x3d30 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    3c62:	20 91 b1 04 	lds	r18, 0x04B1
    3c66:	30 91 b2 04 	lds	r19, 0x04B2
    3c6a:	80 91 ba 04 	lds	r24, 0x04BA
    3c6e:	88 2f       	mov	r24, r24
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	d9 01       	movw	r26, r18
    3c78:	a8 0f       	add	r26, r24
    3c7a:	b9 1f       	adc	r27, r25
    3c7c:	e4 e2       	ldi	r30, 0x24	; 36
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	28 2f       	mov	r18, r24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	e5 e2       	ldi	r30, 0x25	; 37
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	88 2f       	mov	r24, r24
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	98 2f       	mov	r25, r24
    3c92:	88 27       	eor	r24, r24
    3c94:	82 2b       	or	r24, r18
    3c96:	93 2b       	or	r25, r19
    3c98:	11 96       	adiw	r26, 0x01	; 1
    3c9a:	9c 93       	st	X, r25
    3c9c:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    3c9e:	80 91 ba 04 	lds	r24, 0x04BA
    3ca2:	8f 5f       	subi	r24, 0xFF	; 255
    3ca4:	80 93 ba 04 	sts	0x04BA, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    3ca8:	90 91 ba 04 	lds	r25, 0x04BA
    3cac:	80 91 b9 04 	lds	r24, 0x04B9
    3cb0:	98 17       	cp	r25, r24
    3cb2:	79 f4       	brne	.+30     	; 0x3cd2 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    3cb4:	10 92 b5 04 	sts	0x04B5, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    3cb8:	e0 91 b3 04 	lds	r30, 0x04B3
    3cbc:	f0 91 b4 04 	lds	r31, 0x04B4
    3cc0:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3cc2:	a6 e2       	ldi	r26, 0x26	; 38
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	e6 e2       	ldi	r30, 0x26	; 38
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	80 81       	ld	r24, Z
    3ccc:	87 7f       	andi	r24, 0xF7	; 247
    3cce:	8c 93       	st	X, r24
    3cd0:	2f c0       	rjmp	.+94     	; 0x3d30 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    3cd2:	20 91 b7 04 	lds	r18, 0x04B7
    3cd6:	30 91 b8 04 	lds	r19, 0x04B8
    3cda:	80 91 ba 04 	lds	r24, 0x04BA
    3cde:	88 2f       	mov	r24, r24
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	f9 01       	movw	r30, r18
    3ce4:	e8 0f       	add	r30, r24
    3ce6:	f9 1f       	adc	r31, r25
    3ce8:	80 81       	ld	r24, Z
    3cea:	80 32       	cpi	r24, 0x20	; 32
    3cec:	d0 f4       	brcc	.+52     	; 0x3d22 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    3cee:	a7 e2       	ldi	r26, 0x27	; 39
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e7 e2       	ldi	r30, 0x27	; 39
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	80 7e       	andi	r24, 0xE0	; 224
    3cfa:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3cfc:	a7 e2       	ldi	r26, 0x27	; 39
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e7 e2       	ldi	r30, 0x27	; 39
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	40 81       	ld	r20, Z
    3d06:	20 91 b7 04 	lds	r18, 0x04B7
    3d0a:	30 91 b8 04 	lds	r19, 0x04B8
    3d0e:	80 91 ba 04 	lds	r24, 0x04BA
    3d12:	88 2f       	mov	r24, r24
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	f9 01       	movw	r30, r18
    3d18:	e8 0f       	add	r30, r24
    3d1a:	f9 1f       	adc	r31, r25
    3d1c:	80 81       	ld	r24, Z
    3d1e:	84 2b       	or	r24, r20
    3d20:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3d22:	a6 e2       	ldi	r26, 0x26	; 38
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	e6 e2       	ldi	r30, 0x26	; 38
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	80 81       	ld	r24, Z
    3d2c:	80 64       	ori	r24, 0x40	; 64
    3d2e:	8c 93       	st	X, r24
    }
  }
}
    3d30:	cf 91       	pop	r28
    3d32:	df 91       	pop	r29
    3d34:	ff 91       	pop	r31
    3d36:	ef 91       	pop	r30
    3d38:	bf 91       	pop	r27
    3d3a:	af 91       	pop	r26
    3d3c:	9f 91       	pop	r25
    3d3e:	8f 91       	pop	r24
    3d40:	7f 91       	pop	r23
    3d42:	6f 91       	pop	r22
    3d44:	5f 91       	pop	r21
    3d46:	4f 91       	pop	r20
    3d48:	3f 91       	pop	r19
    3d4a:	2f 91       	pop	r18
    3d4c:	0f 90       	pop	r0
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	0f 90       	pop	r0
    3d52:	1f 90       	pop	r1
    3d54:	18 95       	reti

00003d56 <SM_vInit>:

#include "../../MCAL_Layer/TIMER/TIMER_interface.h"
#include "../../MCAL_Layer/TIMER/TIMER_private.h"

void SM_vInit(void)
{
    3d56:	df 93       	push	r29
    3d58:	cf 93       	push	r28
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
  DIO_enumSetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    3d5e:	83 e0       	ldi	r24, 0x03	; 3
    3d60:	65 e0       	ldi	r22, 0x05	; 5
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
}
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	08 95       	ret

00003d6e <SM_vTimer1Degree>:

void SM_vTimer1Degree(s8 degree)
{
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	df 93       	push	r29
    3d74:	cf 93       	push	r28
    3d76:	00 d0       	rcall	.+0      	; 0x3d78 <SM_vTimer1Degree+0xa>
    3d78:	00 d0       	rcall	.+0      	; 0x3d7a <SM_vTimer1Degree+0xc>
    3d7a:	0f 92       	push	r0
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	8d 83       	std	Y+5, r24	; 0x05
  TCNT1 = 0;
    3d82:	ec e4       	ldi	r30, 0x4C	; 76
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	11 82       	std	Z+1, r1	; 0x01
    3d88:	10 82       	st	Z, r1
  double value = degree * .005555555556;
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	99 27       	eor	r25, r25
    3d8e:	87 fd       	sbrc	r24, 7
    3d90:	90 95       	com	r25
    3d92:	a9 2f       	mov	r26, r25
    3d94:	b9 2f       	mov	r27, r25
    3d96:	bc 01       	movw	r22, r24
    3d98:	cd 01       	movw	r24, r26
    3d9a:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	bc 01       	movw	r22, r24
    3da4:	cd 01       	movw	r24, r26
    3da6:	21 e6       	ldi	r18, 0x61	; 97
    3da8:	3b e0       	ldi	r19, 0x0B	; 11
    3daa:	46 eb       	ldi	r20, 0xB6	; 182
    3dac:	5b e3       	ldi	r21, 0x3B	; 59
    3dae:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	9a 83       	std	Y+2, r25	; 0x02
    3dba:	ab 83       	std	Y+3, r26	; 0x03
    3dbc:	bc 83       	std	Y+4, r27	; 0x04

  if (0 < value <= 90)
  {
    value += 1.5;
    3dbe:	69 81       	ldd	r22, Y+1	; 0x01
    3dc0:	7a 81       	ldd	r23, Y+2	; 0x02
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 ec       	ldi	r20, 0xC0	; 192
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 0e 03 	call	0x61c	; 0x61c <__addsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	9a 83       	std	Y+2, r25	; 0x02
    3dda:	ab 83       	std	Y+3, r26	; 0x03
    3ddc:	bc 83       	std	Y+4, r27	; 0x04
  }
  else if (-90 <= value < 0)
  {
    value -= 1.5;
  }
  OCR1A = value * 1000;
    3dde:	0a e4       	ldi	r16, 0x4A	; 74
    3de0:	10 e0       	ldi	r17, 0x00	; 0
    3de2:	69 81       	ldd	r22, Y+1	; 0x01
    3de4:	7a 81       	ldd	r23, Y+2	; 0x02
    3de6:	8b 81       	ldd	r24, Y+3	; 0x03
    3de8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	4a e7       	ldi	r20, 0x7A	; 122
    3df0:	54 e4       	ldi	r21, 0x44	; 68
    3df2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	bc 01       	movw	r22, r24
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	f8 01       	movw	r30, r16
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
}
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	08 95       	ret

00003e20 <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    3e20:	ef 92       	push	r14
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	2b 97       	sbiw	r28, 0x0b	; 11
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	99 87       	std	Y+9, r25	; 0x09
    3e3e:	88 87       	std	Y+8, r24	; 0x08
    3e40:	7b 87       	std	Y+11, r23	; 0x0b
    3e42:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    3e44:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3e46:	e8 85       	ldd	r30, Y+8	; 0x08
    3e48:	f9 85       	ldd	r31, Y+9	; 0x09
    3e4a:	81 81       	ldd	r24, Z+1	; 0x01
    3e4c:	28 2f       	mov	r18, r24
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	88 ee       	ldi	r24, 0xE8	; 232
    3e52:	93 e0       	ldi	r25, 0x03	; 3
    3e54:	ac 01       	movw	r20, r24
    3e56:	24 9f       	mul	r18, r20
    3e58:	c0 01       	movw	r24, r0
    3e5a:	25 9f       	mul	r18, r21
    3e5c:	90 0d       	add	r25, r0
    3e5e:	34 9f       	mul	r19, r20
    3e60:	90 0d       	add	r25, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	9a 83       	std	Y+2, r25	; 0x02
    3e66:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    3e68:	e8 85       	ldd	r30, Y+8	; 0x08
    3e6a:	f9 85       	ldd	r31, Y+9	; 0x09
    3e6c:	80 81       	ld	r24, Z
    3e6e:	9e 01       	movw	r18, r28
    3e70:	2a 5f       	subi	r18, 0xFA	; 250
    3e72:	3f 4f       	sbci	r19, 0xFF	; 255
    3e74:	b9 01       	movw	r22, r18
    3e76:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    3e7a:	e8 85       	ldd	r30, Y+8	; 0x08
    3e7c:	f9 85       	ldd	r31, Y+9	; 0x09
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	88 23       	and	r24, r24
    3e82:	e1 f4       	brne	.+56     	; 0x3ebc <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3e84:	8e 81       	ldd	r24, Y+6	; 0x06
    3e86:	9f 81       	ldd	r25, Y+7	; 0x07
    3e88:	7c 01       	movw	r14, r24
    3e8a:	00 e0       	ldi	r16, 0x00	; 0
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	9c 01       	movw	r18, r24
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	c8 01       	movw	r24, r16
    3e9a:	b7 01       	movw	r22, r14
    3e9c:	0e 94 65 3d 	call	0x7aca	; 0x7aca <__mulsi3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	07 2e       	mov	r0, r23
    3ea6:	7a e0       	ldi	r23, 0x0A	; 10
    3ea8:	b6 95       	lsr	r27
    3eaa:	a7 95       	ror	r26
    3eac:	97 95       	ror	r25
    3eae:	87 95       	ror	r24
    3eb0:	7a 95       	dec	r23
    3eb2:	d1 f7       	brne	.-12     	; 0x3ea8 <LM35_u8GetTemp+0x88>
    3eb4:	70 2d       	mov	r23, r0
    3eb6:	9c 83       	std	Y+4, r25	; 0x04
    3eb8:	8b 83       	std	Y+3, r24	; 0x03
    3eba:	1b c0       	rjmp	.+54     	; 0x3ef2 <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    3ebc:	e8 85       	ldd	r30, Y+8	; 0x08
    3ebe:	f9 85       	ldd	r31, Y+9	; 0x09
    3ec0:	82 81       	ldd	r24, Z+2	; 0x02
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	b1 f4       	brne	.+44     	; 0x3ef2 <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    3ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eca:	7c 01       	movw	r14, r24
    3ecc:	00 e0       	ldi	r16, 0x00	; 0
    3ece:	10 e0       	ldi	r17, 0x00	; 0
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed4:	9c 01       	movw	r18, r24
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	c8 01       	movw	r24, r16
    3edc:	b7 01       	movw	r22, r14
    3ede:	0e 94 65 3d 	call	0x7aca	; 0x7aca <__mulsi3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	89 2f       	mov	r24, r25
    3ee8:	9a 2f       	mov	r25, r26
    3eea:	ab 2f       	mov	r26, r27
    3eec:	bb 27       	eor	r27, r27
    3eee:	9c 83       	std	Y+4, r25	; 0x04
    3ef0:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    3ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef6:	2a e0       	ldi	r18, 0x0A	; 10
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	b9 01       	movw	r22, r18
    3efc:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <__udivmodhi4>
    3f00:	cb 01       	movw	r24, r22
    3f02:	ea 85       	ldd	r30, Y+10	; 0x0a
    3f04:	fb 85       	ldd	r31, Y+11	; 0x0b
    3f06:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    3f08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3f0a:	2b 96       	adiw	r28, 0x0b	; 11
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	08 95       	ret

00003f24 <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	29 97       	sbiw	r28, 0x09	; 9
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	9f 83       	std	Y+7, r25	; 0x07
    3f42:	8e 83       	std	Y+6, r24	; 0x06
    3f44:	79 87       	std	Y+9, r23	; 0x09
    3f46:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    3f48:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3f4a:	ee 81       	ldd	r30, Y+6	; 0x06
    3f4c:	ff 81       	ldd	r31, Y+7	; 0x07
    3f4e:	81 81       	ldd	r24, Z+1	; 0x01
    3f50:	28 2f       	mov	r18, r24
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	88 ee       	ldi	r24, 0xE8	; 232
    3f56:	93 e0       	ldi	r25, 0x03	; 3
    3f58:	ac 01       	movw	r20, r24
    3f5a:	24 9f       	mul	r18, r20
    3f5c:	c0 01       	movw	r24, r0
    3f5e:	25 9f       	mul	r18, r21
    3f60:	90 0d       	add	r25, r0
    3f62:	34 9f       	mul	r19, r20
    3f64:	90 0d       	add	r25, r0
    3f66:	11 24       	eor	r1, r1
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    3f6c:	ee 81       	ldd	r30, Y+6	; 0x06
    3f6e:	ff 81       	ldd	r31, Y+7	; 0x07
    3f70:	80 81       	ld	r24, Z
    3f72:	9e 01       	movw	r18, r28
    3f74:	2c 5f       	subi	r18, 0xFC	; 252
    3f76:	3f 4f       	sbci	r19, 0xFF	; 255
    3f78:	b9 01       	movw	r22, r18
    3f7a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    3f7e:	ee 81       	ldd	r30, Y+6	; 0x06
    3f80:	ff 81       	ldd	r31, Y+7	; 0x07
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	88 23       	and	r24, r24
    3f86:	f1 f4       	brne	.+60     	; 0x3fc4 <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    3f88:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8c:	7c 01       	movw	r14, r24
    3f8e:	00 e0       	ldi	r16, 0x00	; 0
    3f90:	10 e0       	ldi	r17, 0x00	; 0
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	9a 81       	ldd	r25, Y+2	; 0x02
    3f96:	9c 01       	movw	r18, r24
    3f98:	40 e0       	ldi	r20, 0x00	; 0
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	c8 01       	movw	r24, r16
    3f9e:	b7 01       	movw	r22, r14
    3fa0:	0e 94 65 3d 	call	0x7aca	; 0x7aca <__mulsi3>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	07 2e       	mov	r0, r23
    3faa:	7a e0       	ldi	r23, 0x0A	; 10
    3fac:	b6 95       	lsr	r27
    3fae:	a7 95       	ror	r26
    3fb0:	97 95       	ror	r25
    3fb2:	87 95       	ror	r24
    3fb4:	7a 95       	dec	r23
    3fb6:	d1 f7       	brne	.-12     	; 0x3fac <LM35_u8GetAnalogSignal+0x88>
    3fb8:	70 2d       	mov	r23, r0
    3fba:	e8 85       	ldd	r30, Y+8	; 0x08
    3fbc:	f9 85       	ldd	r31, Y+9	; 0x09
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	80 83       	st	Z, r24
    3fc2:	1d c0       	rjmp	.+58     	; 0x3ffe <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    3fc4:	ee 81       	ldd	r30, Y+6	; 0x06
    3fc6:	ff 81       	ldd	r31, Y+7	; 0x07
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	81 30       	cpi	r24, 0x01	; 1
    3fcc:	c1 f4       	brne	.+48     	; 0x3ffe <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    3fce:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3fd2:	7c 01       	movw	r14, r24
    3fd4:	00 e0       	ldi	r16, 0x00	; 0
    3fd6:	10 e0       	ldi	r17, 0x00	; 0
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	9c 01       	movw	r18, r24
    3fde:	40 e0       	ldi	r20, 0x00	; 0
    3fe0:	50 e0       	ldi	r21, 0x00	; 0
    3fe2:	c8 01       	movw	r24, r16
    3fe4:	b7 01       	movw	r22, r14
    3fe6:	0e 94 65 3d 	call	0x7aca	; 0x7aca <__mulsi3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	89 2f       	mov	r24, r25
    3ff0:	9a 2f       	mov	r25, r26
    3ff2:	ab 2f       	mov	r26, r27
    3ff4:	bb 27       	eor	r27, r27
    3ff6:	e8 85       	ldd	r30, Y+8	; 0x08
    3ff8:	f9 85       	ldd	r31, Y+9	; 0x09
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    3ffe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4000:	29 96       	adiw	r28, 0x09	; 9
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	ff 90       	pop	r15
    4016:	ef 90       	pop	r14
    4018:	08 95       	ret

0000401a <LED_vInit>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vInit(LED_config LED_Configuration)
{
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	00 d0       	rcall	.+0      	; 0x4020 <LED_vInit+0x6>
    4020:	0f 92       	push	r0
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	69 83       	std	Y+1, r22	; 0x01
    4028:	7a 83       	std	Y+2, r23	; 0x02
    402a:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumSetPinDir(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_OUTPUT);
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
    4030:	69 2f       	mov	r22, r25
    4032:	41 e0       	ldi	r20, 0x01	; 1
    4034:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
}
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <LED_vTurnOn>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vTurnOn(LED_config LED_Configuration)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <LED_vTurnOn+0x6>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	69 83       	std	Y+1, r22	; 0x01
    4052:	7a 83       	std	Y+2, r23	; 0x02
    4054:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	81 30       	cpi	r24, 0x01	; 1
    405a:	39 f4       	brne	.+14     	; 0x406a <LED_vTurnOn+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	69 2f       	mov	r22, r25
    4062:	41 e0       	ldi	r20, 0x01	; 1
    4064:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
    4068:	09 c0       	rjmp	.+18     	; 0x407c <LED_vTurnOn+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    406a:	8b 81       	ldd	r24, Y+3	; 0x03
    406c:	88 23       	and	r24, r24
    406e:	31 f4       	brne	.+12     	; 0x407c <LED_vTurnOn+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	69 2f       	mov	r22, r25
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  }
}
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	08 95       	ret

00004088 <LED_vTurnOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTurnOff(LED_config LED_Configuration)
{
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	00 d0       	rcall	.+0      	; 0x408e <LED_vTurnOff+0x6>
    408e:	0f 92       	push	r0
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	69 83       	std	Y+1, r22	; 0x01
    4096:	7a 83       	std	Y+2, r23	; 0x02
    4098:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    409a:	8b 81       	ldd	r24, Y+3	; 0x03
    409c:	81 30       	cpi	r24, 0x01	; 1
    409e:	39 f4       	brne	.+14     	; 0x40ae <LED_vTurnOff+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	9a 81       	ldd	r25, Y+2	; 0x02
    40a4:	69 2f       	mov	r22, r25
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
    40ac:	09 c0       	rjmp	.+18     	; 0x40c0 <LED_vTurnOff+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    40ae:	8b 81       	ldd	r24, Y+3	; 0x03
    40b0:	88 23       	and	r24, r24
    40b2:	31 f4       	brne	.+12     	; 0x40c0 <LED_vTurnOff+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	9a 81       	ldd	r25, Y+2	; 0x02
    40b8:	69 2f       	mov	r22, r25
    40ba:	41 e0       	ldi	r20, 0x01	; 1
    40bc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  }
}
    40c0:	0f 90       	pop	r0
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	cf 91       	pop	r28
    40c8:	df 91       	pop	r29
    40ca:	08 95       	ret

000040cc <LED_vTog>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTog(LED_config LED_Configuration)
{
    40cc:	df 93       	push	r29
    40ce:	cf 93       	push	r28
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <LED_vTog+0x6>
    40d2:	0f 92       	push	r0
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	69 83       	std	Y+1, r22	; 0x01
    40da:	7a 83       	std	Y+2, r23	; 0x02
    40dc:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumTogglePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber);
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	69 2f       	mov	r22, r25
    40e4:	0e 94 28 16 	call	0x2c50	; 0x2c50 <DIO_enumTogglePinVal>
}
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	0f 90       	pop	r0
    40ee:	cf 91       	pop	r28
    40f0:	df 91       	pop	r29
    40f2:	08 95       	ret

000040f4 <LDR_u8GetLightPres>:
            => struct has the LDR Channel, ADC VoltageReference , ADCResolution
      => Pointer to LightPrecentage Variable which will return in it
* return : Error State
*/
u8 LDR_u8GetLightPres(LDR_Config * LDR, u8 *Copy_u8LightPrec)
{
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	29 97       	sbiw	r28, 0x09	; 9
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	9f 83       	std	Y+7, r25	; 0x07
    410a:	8e 83       	std	Y+6, r24	; 0x06
    410c:	79 87       	std	Y+9, r23	; 0x09
    410e:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    4110:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  /* ADC Digital Reading */
  ADC_u8GetResultSync(LDR->Copy_u8LDRChannel, &Local_u16ADCResult);
    4112:	ee 81       	ldd	r30, Y+6	; 0x06
    4114:	ff 81       	ldd	r31, Y+7	; 0x07
    4116:	80 81       	ld	r24, Z
    4118:	9e 01       	movw	r18, r28
    411a:	2c 5f       	subi	r18, 0xFC	; 252
    411c:	3f 4f       	sbci	r19, 0xFF	; 255
    411e:	b9 01       	movw	r22, r18
    4120:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (LDR->Copy_u8ADCRes == ADC_RES_10_BIT)
    4124:	ee 81       	ldd	r30, Y+6	; 0x06
    4126:	ff 81       	ldd	r31, Y+7	; 0x07
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	88 23       	and	r24, r24
    412c:	49 f5       	brne	.+82     	; 0x4180 <LDR_u8GetLightPres+0x8c>
  {
    *Copy_u8LightPrec =  (Local_u16ADCResult / 1024.0) * 100 ;
    412e:	8c 81       	ldd	r24, Y+4	; 0x04
    4130:	9d 81       	ldd	r25, Y+5	; 0x05
    4132:	cc 01       	movw	r24, r24
    4134:	a0 e0       	ldi	r26, 0x00	; 0
    4136:	b0 e0       	ldi	r27, 0x00	; 0
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e8       	ldi	r20, 0x80	; 128
    414e:	54 e4       	ldi	r21, 0x44	; 68
    4150:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	bc 01       	movw	r22, r24
    415a:	cd 01       	movw	r24, r26
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	48 ec       	ldi	r20, 0xC8	; 200
    4162:	52 e4       	ldi	r21, 0x42	; 66
    4164:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	bc 01       	movw	r22, r24
    416e:	cd 01       	movw	r24, r26
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	e8 85       	ldd	r30, Y+8	; 0x08
    417a:	f9 85       	ldd	r31, Y+9	; 0x09
    417c:	80 83       	st	Z, r24
    417e:	2d c0       	rjmp	.+90     	; 0x41da <LDR_u8GetLightPres+0xe6>
  }
  else if (LDR->Copy_u8ADCRes == ADC_RES_8_BIT)
    4180:	ee 81       	ldd	r30, Y+6	; 0x06
    4182:	ff 81       	ldd	r31, Y+7	; 0x07
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	81 30       	cpi	r24, 0x01	; 1
    4188:	41 f5       	brne	.+80     	; 0x41da <LDR_u8GetLightPres+0xe6>
  {
    *Copy_u8LightPrec =  (Local_u16ADCResult / 256.0) * 100 ;
    418a:	8c 81       	ldd	r24, Y+4	; 0x04
    418c:	9d 81       	ldd	r25, Y+5	; 0x05
    418e:	cc 01       	movw	r24, r24
    4190:	a0 e0       	ldi	r26, 0x00	; 0
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	bc 01       	movw	r22, r24
    4196:	cd 01       	movw	r24, r26
    4198:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	bc 01       	movw	r22, r24
    41a2:	cd 01       	movw	r24, r26
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e8       	ldi	r20, 0x80	; 128
    41aa:	53 e4       	ldi	r21, 0x43	; 67
    41ac:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	bc 01       	movw	r22, r24
    41b6:	cd 01       	movw	r24, r26
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	48 ec       	ldi	r20, 0xC8	; 200
    41be:	52 e4       	ldi	r21, 0x42	; 66
    41c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	e8 85       	ldd	r30, Y+8	; 0x08
    41d6:	f9 85       	ldd	r31, Y+9	; 0x09
    41d8:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    41da:	8b 81       	ldd	r24, Y+3	; 0x03
}
    41dc:	29 96       	adiw	r28, 0x09	; 9
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	cf 91       	pop	r28
    41ea:	df 91       	pop	r29
    41ec:	08 95       	ret

000041ee <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    41ee:	df 93       	push	r29
    41f0:	cf 93       	push	r28
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    41f6:	83 e0       	ldi	r24, 0x03	; 3
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	41 e0       	ldi	r20, 0x01	; 1
    41fc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    4200:	83 e0       	ldi	r24, 0x03	; 3
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	41 e0       	ldi	r20, 0x01	; 1
    4206:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	62 e0       	ldi	r22, 0x02	; 2
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    4214:	83 e0       	ldi	r24, 0x03	; 3
    4216:	63 e0       	ldi	r22, 0x03	; 3
    4218:	41 e0       	ldi	r20, 0x01	; 1
    421a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	6f e0       	ldi	r22, 0x0F	; 15
    4222:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    4226:	83 e0       	ldi	r24, 0x03	; 3
    4228:	6f e0       	ldi	r22, 0x0F	; 15
    422a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	cd b7       	in	r28, 0x3d	; 61
    423a:	de b7       	in	r29, 0x3e	; 62
    423c:	62 97       	sbiw	r28, 0x12	; 18
    423e:	0f b6       	in	r0, 0x3f	; 63
    4240:	f8 94       	cli
    4242:	de bf       	out	0x3e, r29	; 62
    4244:	0f be       	out	0x3f, r0	; 63
    4246:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    4248:	8f ef       	ldi	r24, 0xFF	; 255
    424a:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    424c:	84 e0       	ldi	r24, 0x04	; 4
    424e:	8f 87       	std	Y+15, r24	; 0x0f
    4250:	c9 c0       	rjmp	.+402    	; 0x43e4 <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    4252:	83 e0       	ldi	r24, 0x03	; 3
    4254:	6f 85       	ldd	r22, Y+15	; 0x0f
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    425c:	18 8a       	std	Y+16, r1	; 0x10
    425e:	b6 c0       	rjmp	.+364    	; 0x43cc <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    4260:	9e 01       	movw	r18, r28
    4262:	2e 5e       	subi	r18, 0xEE	; 238
    4264:	3f 4f       	sbci	r19, 0xFF	; 255
    4266:	83 e0       	ldi	r24, 0x03	; 3
    4268:	68 89       	ldd	r22, Y+16	; 0x10
    426a:	a9 01       	movw	r20, r18
    426c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    4270:	8a 89       	ldd	r24, Y+18	; 0x12
    4272:	88 23       	and	r24, r24
    4274:	09 f0       	breq	.+2      	; 0x4278 <KPD_u8GetPressed+0x44>
    4276:	a7 c0       	rjmp	.+334    	; 0x43c6 <KPD_u8GetPressed+0x192>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	a8 e4       	ldi	r26, 0x48	; 72
    427e:	b2 e4       	ldi	r27, 0x42	; 66
    4280:	8b 87       	std	Y+11, r24	; 0x0b
    4282:	9c 87       	std	Y+12, r25	; 0x0c
    4284:	ad 87       	std	Y+13, r26	; 0x0d
    4286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4288:	6b 85       	ldd	r22, Y+11	; 0x0b
    428a:	7c 85       	ldd	r23, Y+12	; 0x0c
    428c:	8d 85       	ldd	r24, Y+13	; 0x0d
    428e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	4a ef       	ldi	r20, 0xFA	; 250
    4296:	54 e4       	ldi	r21, 0x44	; 68
    4298:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	8f 83       	std	Y+7, r24	; 0x07
    42a2:	98 87       	std	Y+8, r25	; 0x08
    42a4:	a9 87       	std	Y+9, r26	; 0x09
    42a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42a8:	6f 81       	ldd	r22, Y+7	; 0x07
    42aa:	78 85       	ldd	r23, Y+8	; 0x08
    42ac:	89 85       	ldd	r24, Y+9	; 0x09
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e8       	ldi	r20, 0x80	; 128
    42b6:	5f e3       	ldi	r21, 0x3F	; 63
    42b8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    42bc:	88 23       	and	r24, r24
    42be:	2c f4       	brge	.+10     	; 0x42ca <KPD_u8GetPressed+0x96>
		__ticks = 1;
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	9e 83       	std	Y+6, r25	; 0x06
    42c6:	8d 83       	std	Y+5, r24	; 0x05
    42c8:	3f c0       	rjmp	.+126    	; 0x4348 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    42ca:	6f 81       	ldd	r22, Y+7	; 0x07
    42cc:	78 85       	ldd	r23, Y+8	; 0x08
    42ce:	89 85       	ldd	r24, Y+9	; 0x09
    42d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	3f ef       	ldi	r19, 0xFF	; 255
    42d6:	4f e7       	ldi	r20, 0x7F	; 127
    42d8:	57 e4       	ldi	r21, 0x47	; 71
    42da:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    42de:	18 16       	cp	r1, r24
    42e0:	4c f5       	brge	.+82     	; 0x4334 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e2       	ldi	r20, 0x20	; 32
    42f0:	51 e4       	ldi	r21, 0x41	; 65
    42f2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	bc 01       	movw	r22, r24
    42fc:	cd 01       	movw	r24, r26
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9e 83       	std	Y+6, r25	; 0x06
    4308:	8d 83       	std	Y+5, r24	; 0x05
    430a:	0f c0       	rjmp	.+30     	; 0x432a <KPD_u8GetPressed+0xf6>
    430c:	88 ec       	ldi	r24, 0xC8	; 200
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9c 83       	std	Y+4, r25	; 0x04
    4312:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4314:	8b 81       	ldd	r24, Y+3	; 0x03
    4316:	9c 81       	ldd	r25, Y+4	; 0x04
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <KPD_u8GetPressed+0xe4>
    431c:	9c 83       	std	Y+4, r25	; 0x04
    431e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4320:	8d 81       	ldd	r24, Y+5	; 0x05
    4322:	9e 81       	ldd	r25, Y+6	; 0x06
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	9e 83       	std	Y+6, r25	; 0x06
    4328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432a:	8d 81       	ldd	r24, Y+5	; 0x05
    432c:	9e 81       	ldd	r25, Y+6	; 0x06
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	69 f7       	brne	.-38     	; 0x430c <KPD_u8GetPressed+0xd8>
    4332:	14 c0       	rjmp	.+40     	; 0x435c <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4334:	6f 81       	ldd	r22, Y+7	; 0x07
    4336:	78 85       	ldd	r23, Y+8	; 0x08
    4338:	89 85       	ldd	r24, Y+9	; 0x09
    433a:	9a 85       	ldd	r25, Y+10	; 0x0a
    433c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	9e 83       	std	Y+6, r25	; 0x06
    4346:	8d 83       	std	Y+5, r24	; 0x05
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	9a 83       	std	Y+2, r25	; 0x02
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	9a 81       	ldd	r25, Y+2	; 0x02
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <KPD_u8GetPressed+0x120>
    4358:	9a 83       	std	Y+2, r25	; 0x02
    435a:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    435c:	9e 01       	movw	r18, r28
    435e:	2e 5e       	subi	r18, 0xEE	; 238
    4360:	3f 4f       	sbci	r19, 0xFF	; 255
    4362:	83 e0       	ldi	r24, 0x03	; 3
    4364:	68 89       	ldd	r22, Y+16	; 0x10
    4366:	a9 01       	movw	r20, r18
    4368:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    436c:	8a 89       	ldd	r24, Y+18	; 0x12
    436e:	88 23       	and	r24, r24
    4370:	a9 f4       	brne	.+42     	; 0x439c <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    4372:	88 89       	ldd	r24, Y+16	; 0x10
    4374:	48 2f       	mov	r20, r24
    4376:	50 e0       	ldi	r21, 0x00	; 0
    4378:	8f 85       	ldd	r24, Y+15	; 0x0f
    437a:	88 2f       	mov	r24, r24
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9c 01       	movw	r18, r24
    4380:	24 50       	subi	r18, 0x04	; 4
    4382:	30 40       	sbci	r19, 0x00	; 0
    4384:	ca 01       	movw	r24, r20
    4386:	88 0f       	add	r24, r24
    4388:	99 1f       	adc	r25, r25
    438a:	88 0f       	add	r24, r24
    438c:	99 1f       	adc	r25, r25
    438e:	82 0f       	add	r24, r18
    4390:	93 1f       	adc	r25, r19
    4392:	fc 01       	movw	r30, r24
    4394:	e2 5a       	subi	r30, 0xA2	; 162
    4396:	fb 4f       	sbci	r31, 0xFB	; 251
    4398:	80 81       	ld	r24, Z
    439a:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    439c:	9e 01       	movw	r18, r28
    439e:	2e 5e       	subi	r18, 0xEE	; 238
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	68 89       	ldd	r22, Y+16	; 0x10
    43a6:	a9 01       	movw	r20, r18
    43a8:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>
    43ac:	08 c0       	rjmp	.+16     	; 0x43be <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    43ae:	9e 01       	movw	r18, r28
    43b0:	2e 5e       	subi	r18, 0xEE	; 238
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	83 e0       	ldi	r24, 0x03	; 3
    43b6:	68 89       	ldd	r22, Y+16	; 0x10
    43b8:	a9 01       	movw	r20, r18
    43ba:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    43be:	8a 89       	ldd	r24, Y+18	; 0x12
    43c0:	88 23       	and	r24, r24
    43c2:	a9 f3       	breq	.-22     	; 0x43ae <KPD_u8GetPressed+0x17a>
    43c4:	07 c0       	rjmp	.+14     	; 0x43d4 <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    43c6:	88 89       	ldd	r24, Y+16	; 0x10
    43c8:	8f 5f       	subi	r24, 0xFF	; 255
    43ca:	88 8b       	std	Y+16, r24	; 0x10
    43cc:	88 89       	ldd	r24, Y+16	; 0x10
    43ce:	84 30       	cpi	r24, 0x04	; 4
    43d0:	08 f4       	brcc	.+2      	; 0x43d4 <KPD_u8GetPressed+0x1a0>
    43d2:	46 cf       	rjmp	.-372    	; 0x4260 <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    43d4:	83 e0       	ldi	r24, 0x03	; 3
    43d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    43d8:	41 e0       	ldi	r20, 0x01	; 1
    43da:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    43de:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e0:	8f 5f       	subi	r24, 0xFF	; 255
    43e2:	8f 87       	std	Y+15, r24	; 0x0f
    43e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e6:	88 30       	cpi	r24, 0x08	; 8
    43e8:	08 f4       	brcc	.+2      	; 0x43ec <KPD_u8GetPressed+0x1b8>
    43ea:	33 cf       	rjmp	.-410    	; 0x4252 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    43ec:	89 89       	ldd	r24, Y+17	; 0x11
}
    43ee:	62 96       	adiw	r28, 0x12	; 18
    43f0:	0f b6       	in	r0, 0x3f	; 63
    43f2:	f8 94       	cli
    43f4:	de bf       	out	0x3e, r29	; 62
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	cd bf       	out	0x3d, r28	; 61
    43fa:	cf 91       	pop	r28
    43fc:	df 91       	pop	r29
    43fe:	08 95       	ret

00004400 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    4400:	0f 93       	push	r16
    4402:	1f 93       	push	r17
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	c6 54       	subi	r28, 0x46	; 70
    440e:	d0 40       	sbci	r29, 0x00	; 0
    4410:	0f b6       	in	r0, 0x3f	; 63
    4412:	f8 94       	cli
    4414:	de bf       	out	0x3e, r29	; 62
    4416:	0f be       	out	0x3f, r0	; 63
    4418:	cd bf       	out	0x3d, r28	; 61
    441a:	fe 01       	movw	r30, r28
    441c:	ed 5b       	subi	r30, 0xBD	; 189
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	a8 e4       	ldi	r26, 0x48	; 72
    4426:	b2 e4       	ldi	r27, 0x42	; 66
    4428:	80 83       	st	Z, r24
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	a2 83       	std	Z+2, r26	; 0x02
    442e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	8e 01       	movw	r16, r28
    4432:	01 5c       	subi	r16, 0xC1	; 193
    4434:	1f 4f       	sbci	r17, 0xFF	; 255
    4436:	fe 01       	movw	r30, r28
    4438:	ed 5b       	subi	r30, 0xBD	; 189
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	60 81       	ld	r22, Z
    443e:	71 81       	ldd	r23, Z+1	; 0x01
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a ef       	ldi	r20, 0xFA	; 250
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	f8 01       	movw	r30, r16
    4456:	80 83       	st	Z, r24
    4458:	91 83       	std	Z+1, r25	; 0x01
    445a:	a2 83       	std	Z+2, r26	; 0x02
    445c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    445e:	fe 01       	movw	r30, r28
    4460:	ff 96       	adiw	r30, 0x3f	; 63
    4462:	60 81       	ld	r22, Z
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	82 81       	ldd	r24, Z+2	; 0x02
    4468:	93 81       	ldd	r25, Z+3	; 0x03
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4476:	88 23       	and	r24, r24
    4478:	2c f4       	brge	.+10     	; 0x4484 <CLCD_vInit+0x84>
		__ticks = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	9e af       	std	Y+62, r25	; 0x3e
    4480:	8d af       	std	Y+61, r24	; 0x3d
    4482:	46 c0       	rjmp	.+140    	; 0x4510 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    4484:	fe 01       	movw	r30, r28
    4486:	ff 96       	adiw	r30, 0x3f	; 63
    4488:	60 81       	ld	r22, Z
    448a:	71 81       	ldd	r23, Z+1	; 0x01
    448c:	82 81       	ldd	r24, Z+2	; 0x02
    448e:	93 81       	ldd	r25, Z+3	; 0x03
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	3f ef       	ldi	r19, 0xFF	; 255
    4494:	4f e7       	ldi	r20, 0x7F	; 127
    4496:	57 e4       	ldi	r21, 0x47	; 71
    4498:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    449c:	18 16       	cp	r1, r24
    449e:	64 f5       	brge	.+88     	; 0x44f8 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a0:	fe 01       	movw	r30, r28
    44a2:	ed 5b       	subi	r30, 0xBD	; 189
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	60 81       	ld	r22, Z
    44a8:	71 81       	ldd	r23, Z+1	; 0x01
    44aa:	82 81       	ldd	r24, Z+2	; 0x02
    44ac:	93 81       	ldd	r25, Z+3	; 0x03
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e2       	ldi	r20, 0x20	; 32
    44b4:	51 e4       	ldi	r21, 0x41	; 65
    44b6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    44ba:	dc 01       	movw	r26, r24
    44bc:	cb 01       	movw	r24, r22
    44be:	bc 01       	movw	r22, r24
    44c0:	cd 01       	movw	r24, r26
    44c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	9e af       	std	Y+62, r25	; 0x3e
    44cc:	8d af       	std	Y+61, r24	; 0x3d
    44ce:	0f c0       	rjmp	.+30     	; 0x44ee <CLCD_vInit+0xee>
    44d0:	88 ec       	ldi	r24, 0xC8	; 200
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	9c af       	std	Y+60, r25	; 0x3c
    44d6:	8b af       	std	Y+59, r24	; 0x3b
    44d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    44da:	9c ad       	ldd	r25, Y+60	; 0x3c
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	f1 f7       	brne	.-4      	; 0x44dc <CLCD_vInit+0xdc>
    44e0:	9c af       	std	Y+60, r25	; 0x3c
    44e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    44e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	9e af       	std	Y+62, r25	; 0x3e
    44ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    44f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	69 f7       	brne	.-38     	; 0x44d0 <CLCD_vInit+0xd0>
    44f6:	16 c0       	rjmp	.+44     	; 0x4524 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f8:	fe 01       	movw	r30, r28
    44fa:	ff 96       	adiw	r30, 0x3f	; 63
    44fc:	60 81       	ld	r22, Z
    44fe:	71 81       	ldd	r23, Z+1	; 0x01
    4500:	82 81       	ldd	r24, Z+2	; 0x02
    4502:	93 81       	ldd	r25, Z+3	; 0x03
    4504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	9e af       	std	Y+62, r25	; 0x3e
    450e:	8d af       	std	Y+61, r24	; 0x3d
    4510:	8d ad       	ldd	r24, Y+61	; 0x3d
    4512:	9e ad       	ldd	r25, Y+62	; 0x3e
    4514:	9a af       	std	Y+58, r25	; 0x3a
    4516:	89 af       	std	Y+57, r24	; 0x39
    4518:	89 ad       	ldd	r24, Y+57	; 0x39
    451a:	9a ad       	ldd	r25, Y+58	; 0x3a
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <CLCD_vInit+0x11c>
    4520:	9a af       	std	Y+58, r25	; 0x3a
    4522:	89 af       	std	Y+57, r24	; 0x39
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    4524:	82 e0       	ldi	r24, 0x02	; 2
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	41 e0       	ldi	r20, 0x01	; 1
    452a:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    452e:	82 e0       	ldi	r24, 0x02	; 2
    4530:	61 e0       	ldi	r22, 0x01	; 1
    4532:	41 e0       	ldi	r20, 0x01	; 1
    4534:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	62 e0       	ldi	r22, 0x02	; 2
    453c:	41 e0       	ldi	r20, 0x01	; 1
    453e:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    4542:	82 e0       	ldi	r24, 0x02	; 2
    4544:	63 e0       	ldi	r22, 0x03	; 3
    4546:	41 e0       	ldi	r20, 0x01	; 1
    4548:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	66 e0       	ldi	r22, 0x06	; 6
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	65 e0       	ldi	r22, 0x05	; 5
    455a:	41 e0       	ldi	r20, 0x01	; 1
    455c:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	64 e0       	ldi	r22, 0x04	; 4
    4564:	41 e0       	ldi	r20, 0x01	; 1
    4566:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	a0 e2       	ldi	r26, 0x20	; 32
    4576:	b1 e4       	ldi	r27, 0x41	; 65
    4578:	8d ab       	std	Y+53, r24	; 0x35
    457a:	9e ab       	std	Y+54, r25	; 0x36
    457c:	af ab       	std	Y+55, r26	; 0x37
    457e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4580:	6d a9       	ldd	r22, Y+53	; 0x35
    4582:	7e a9       	ldd	r23, Y+54	; 0x36
    4584:	8f a9       	ldd	r24, Y+55	; 0x37
    4586:	98 ad       	ldd	r25, Y+56	; 0x38
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	4a ef       	ldi	r20, 0xFA	; 250
    458e:	54 e4       	ldi	r21, 0x44	; 68
    4590:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	89 ab       	std	Y+49, r24	; 0x31
    459a:	9a ab       	std	Y+50, r25	; 0x32
    459c:	ab ab       	std	Y+51, r26	; 0x33
    459e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    45a0:	69 a9       	ldd	r22, Y+49	; 0x31
    45a2:	7a a9       	ldd	r23, Y+50	; 0x32
    45a4:	8b a9       	ldd	r24, Y+51	; 0x33
    45a6:	9c a9       	ldd	r25, Y+52	; 0x34
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	40 e8       	ldi	r20, 0x80	; 128
    45ae:	5f e3       	ldi	r21, 0x3F	; 63
    45b0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    45b4:	88 23       	and	r24, r24
    45b6:	2c f4       	brge	.+10     	; 0x45c2 <CLCD_vInit+0x1c2>
		__ticks = 1;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	98 ab       	std	Y+48, r25	; 0x30
    45be:	8f a7       	std	Y+47, r24	; 0x2f
    45c0:	3f c0       	rjmp	.+126    	; 0x4640 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    45c2:	69 a9       	ldd	r22, Y+49	; 0x31
    45c4:	7a a9       	ldd	r23, Y+50	; 0x32
    45c6:	8b a9       	ldd	r24, Y+51	; 0x33
    45c8:	9c a9       	ldd	r25, Y+52	; 0x34
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	3f ef       	ldi	r19, 0xFF	; 255
    45ce:	4f e7       	ldi	r20, 0x7F	; 127
    45d0:	57 e4       	ldi	r21, 0x47	; 71
    45d2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    45d6:	18 16       	cp	r1, r24
    45d8:	4c f5       	brge	.+82     	; 0x462c <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45da:	6d a9       	ldd	r22, Y+53	; 0x35
    45dc:	7e a9       	ldd	r23, Y+54	; 0x36
    45de:	8f a9       	ldd	r24, Y+55	; 0x37
    45e0:	98 ad       	ldd	r25, Y+56	; 0x38
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e2       	ldi	r20, 0x20	; 32
    45e8:	51 e4       	ldi	r21, 0x41	; 65
    45ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	bc 01       	movw	r22, r24
    45f4:	cd 01       	movw	r24, r26
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	98 ab       	std	Y+48, r25	; 0x30
    4600:	8f a7       	std	Y+47, r24	; 0x2f
    4602:	0f c0       	rjmp	.+30     	; 0x4622 <CLCD_vInit+0x222>
    4604:	88 ec       	ldi	r24, 0xC8	; 200
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	9e a7       	std	Y+46, r25	; 0x2e
    460a:	8d a7       	std	Y+45, r24	; 0x2d
    460c:	8d a5       	ldd	r24, Y+45	; 0x2d
    460e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	f1 f7       	brne	.-4      	; 0x4610 <CLCD_vInit+0x210>
    4614:	9e a7       	std	Y+46, r25	; 0x2e
    4616:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4618:	8f a5       	ldd	r24, Y+47	; 0x2f
    461a:	98 a9       	ldd	r25, Y+48	; 0x30
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	98 ab       	std	Y+48, r25	; 0x30
    4620:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4622:	8f a5       	ldd	r24, Y+47	; 0x2f
    4624:	98 a9       	ldd	r25, Y+48	; 0x30
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	69 f7       	brne	.-38     	; 0x4604 <CLCD_vInit+0x204>
    462a:	14 c0       	rjmp	.+40     	; 0x4654 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    462c:	69 a9       	ldd	r22, Y+49	; 0x31
    462e:	7a a9       	ldd	r23, Y+50	; 0x32
    4630:	8b a9       	ldd	r24, Y+51	; 0x33
    4632:	9c a9       	ldd	r25, Y+52	; 0x34
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	98 ab       	std	Y+48, r25	; 0x30
    463e:	8f a7       	std	Y+47, r24	; 0x2f
    4640:	8f a5       	ldd	r24, Y+47	; 0x2f
    4642:	98 a9       	ldd	r25, Y+48	; 0x30
    4644:	9c a7       	std	Y+44, r25	; 0x2c
    4646:	8b a7       	std	Y+43, r24	; 0x2b
    4648:	8b a5       	ldd	r24, Y+43	; 0x2b
    464a:	9c a5       	ldd	r25, Y+44	; 0x2c
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	f1 f7       	brne	.-4      	; 0x464c <CLCD_vInit+0x24c>
    4650:	9c a7       	std	Y+44, r25	; 0x2c
    4652:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    4654:	88 e2       	ldi	r24, 0x28	; 40
    4656:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	a0 e8       	ldi	r26, 0x80	; 128
    4660:	bf e3       	ldi	r27, 0x3F	; 63
    4662:	8f a3       	std	Y+39, r24	; 0x27
    4664:	98 a7       	std	Y+40, r25	; 0x28
    4666:	a9 a7       	std	Y+41, r26	; 0x29
    4668:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    466a:	6f a1       	ldd	r22, Y+39	; 0x27
    466c:	78 a5       	ldd	r23, Y+40	; 0x28
    466e:	89 a5       	ldd	r24, Y+41	; 0x29
    4670:	9a a5       	ldd	r25, Y+42	; 0x2a
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	4a ef       	ldi	r20, 0xFA	; 250
    4678:	54 e4       	ldi	r21, 0x44	; 68
    467a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	8b a3       	std	Y+35, r24	; 0x23
    4684:	9c a3       	std	Y+36, r25	; 0x24
    4686:	ad a3       	std	Y+37, r26	; 0x25
    4688:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    468a:	6b a1       	ldd	r22, Y+35	; 0x23
    468c:	7c a1       	ldd	r23, Y+36	; 0x24
    468e:	8d a1       	ldd	r24, Y+37	; 0x25
    4690:	9e a1       	ldd	r25, Y+38	; 0x26
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	40 e8       	ldi	r20, 0x80	; 128
    4698:	5f e3       	ldi	r21, 0x3F	; 63
    469a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    469e:	88 23       	and	r24, r24
    46a0:	2c f4       	brge	.+10     	; 0x46ac <CLCD_vInit+0x2ac>
		__ticks = 1;
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	9a a3       	std	Y+34, r25	; 0x22
    46a8:	89 a3       	std	Y+33, r24	; 0x21
    46aa:	3f c0       	rjmp	.+126    	; 0x472a <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    46ac:	6b a1       	ldd	r22, Y+35	; 0x23
    46ae:	7c a1       	ldd	r23, Y+36	; 0x24
    46b0:	8d a1       	ldd	r24, Y+37	; 0x25
    46b2:	9e a1       	ldd	r25, Y+38	; 0x26
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	3f ef       	ldi	r19, 0xFF	; 255
    46b8:	4f e7       	ldi	r20, 0x7F	; 127
    46ba:	57 e4       	ldi	r21, 0x47	; 71
    46bc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    46c0:	18 16       	cp	r1, r24
    46c2:	4c f5       	brge	.+82     	; 0x4716 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c4:	6f a1       	ldd	r22, Y+39	; 0x27
    46c6:	78 a5       	ldd	r23, Y+40	; 0x28
    46c8:	89 a5       	ldd	r24, Y+41	; 0x29
    46ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e2       	ldi	r20, 0x20	; 32
    46d2:	51 e4       	ldi	r21, 0x41	; 65
    46d4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	bc 01       	movw	r22, r24
    46de:	cd 01       	movw	r24, r26
    46e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e4:	dc 01       	movw	r26, r24
    46e6:	cb 01       	movw	r24, r22
    46e8:	9a a3       	std	Y+34, r25	; 0x22
    46ea:	89 a3       	std	Y+33, r24	; 0x21
    46ec:	0f c0       	rjmp	.+30     	; 0x470c <CLCD_vInit+0x30c>
    46ee:	88 ec       	ldi	r24, 0xC8	; 200
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	98 a3       	std	Y+32, r25	; 0x20
    46f4:	8f 8f       	std	Y+31, r24	; 0x1f
    46f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46f8:	98 a1       	ldd	r25, Y+32	; 0x20
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	f1 f7       	brne	.-4      	; 0x46fa <CLCD_vInit+0x2fa>
    46fe:	98 a3       	std	Y+32, r25	; 0x20
    4700:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4702:	89 a1       	ldd	r24, Y+33	; 0x21
    4704:	9a a1       	ldd	r25, Y+34	; 0x22
    4706:	01 97       	sbiw	r24, 0x01	; 1
    4708:	9a a3       	std	Y+34, r25	; 0x22
    470a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470c:	89 a1       	ldd	r24, Y+33	; 0x21
    470e:	9a a1       	ldd	r25, Y+34	; 0x22
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	69 f7       	brne	.-38     	; 0x46ee <CLCD_vInit+0x2ee>
    4714:	14 c0       	rjmp	.+40     	; 0x473e <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4716:	6b a1       	ldd	r22, Y+35	; 0x23
    4718:	7c a1       	ldd	r23, Y+36	; 0x24
    471a:	8d a1       	ldd	r24, Y+37	; 0x25
    471c:	9e a1       	ldd	r25, Y+38	; 0x26
    471e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4722:	dc 01       	movw	r26, r24
    4724:	cb 01       	movw	r24, r22
    4726:	9a a3       	std	Y+34, r25	; 0x22
    4728:	89 a3       	std	Y+33, r24	; 0x21
    472a:	89 a1       	ldd	r24, Y+33	; 0x21
    472c:	9a a1       	ldd	r25, Y+34	; 0x22
    472e:	9e 8f       	std	Y+30, r25	; 0x1e
    4730:	8d 8f       	std	Y+29, r24	; 0x1d
    4732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4734:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	f1 f7       	brne	.-4      	; 0x4736 <CLCD_vInit+0x336>
    473a:	9e 8f       	std	Y+30, r25	; 0x1e
    473c:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    473e:	8c e0       	ldi	r24, 0x0C	; 12
    4740:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	a0 e8       	ldi	r26, 0x80	; 128
    474a:	bf e3       	ldi	r27, 0x3F	; 63
    474c:	89 8f       	std	Y+25, r24	; 0x19
    474e:	9a 8f       	std	Y+26, r25	; 0x1a
    4750:	ab 8f       	std	Y+27, r26	; 0x1b
    4752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4754:	69 8d       	ldd	r22, Y+25	; 0x19
    4756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    475a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	4a ef       	ldi	r20, 0xFA	; 250
    4762:	54 e4       	ldi	r21, 0x44	; 68
    4764:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	8d 8b       	std	Y+21, r24	; 0x15
    476e:	9e 8b       	std	Y+22, r25	; 0x16
    4770:	af 8b       	std	Y+23, r26	; 0x17
    4772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4774:	6d 89       	ldd	r22, Y+21	; 0x15
    4776:	7e 89       	ldd	r23, Y+22	; 0x16
    4778:	8f 89       	ldd	r24, Y+23	; 0x17
    477a:	98 8d       	ldd	r25, Y+24	; 0x18
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e8       	ldi	r20, 0x80	; 128
    4782:	5f e3       	ldi	r21, 0x3F	; 63
    4784:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4788:	88 23       	and	r24, r24
    478a:	2c f4       	brge	.+10     	; 0x4796 <CLCD_vInit+0x396>
		__ticks = 1;
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	9c 8b       	std	Y+20, r25	; 0x14
    4792:	8b 8b       	std	Y+19, r24	; 0x13
    4794:	3f c0       	rjmp	.+126    	; 0x4814 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    4796:	6d 89       	ldd	r22, Y+21	; 0x15
    4798:	7e 89       	ldd	r23, Y+22	; 0x16
    479a:	8f 89       	ldd	r24, Y+23	; 0x17
    479c:	98 8d       	ldd	r25, Y+24	; 0x18
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	3f ef       	ldi	r19, 0xFF	; 255
    47a2:	4f e7       	ldi	r20, 0x7F	; 127
    47a4:	57 e4       	ldi	r21, 0x47	; 71
    47a6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    47aa:	18 16       	cp	r1, r24
    47ac:	4c f5       	brge	.+82     	; 0x4800 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ae:	69 8d       	ldd	r22, Y+25	; 0x19
    47b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e2       	ldi	r20, 0x20	; 32
    47bc:	51 e4       	ldi	r21, 0x41	; 65
    47be:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	bc 01       	movw	r22, r24
    47c8:	cd 01       	movw	r24, r26
    47ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	9c 8b       	std	Y+20, r25	; 0x14
    47d4:	8b 8b       	std	Y+19, r24	; 0x13
    47d6:	0f c0       	rjmp	.+30     	; 0x47f6 <CLCD_vInit+0x3f6>
    47d8:	88 ec       	ldi	r24, 0xC8	; 200
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	9a 8b       	std	Y+18, r25	; 0x12
    47de:	89 8b       	std	Y+17, r24	; 0x11
    47e0:	89 89       	ldd	r24, Y+17	; 0x11
    47e2:	9a 89       	ldd	r25, Y+18	; 0x12
    47e4:	01 97       	sbiw	r24, 0x01	; 1
    47e6:	f1 f7       	brne	.-4      	; 0x47e4 <CLCD_vInit+0x3e4>
    47e8:	9a 8b       	std	Y+18, r25	; 0x12
    47ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ec:	8b 89       	ldd	r24, Y+19	; 0x13
    47ee:	9c 89       	ldd	r25, Y+20	; 0x14
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	9c 8b       	std	Y+20, r25	; 0x14
    47f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f6:	8b 89       	ldd	r24, Y+19	; 0x13
    47f8:	9c 89       	ldd	r25, Y+20	; 0x14
    47fa:	00 97       	sbiw	r24, 0x00	; 0
    47fc:	69 f7       	brne	.-38     	; 0x47d8 <CLCD_vInit+0x3d8>
    47fe:	14 c0       	rjmp	.+40     	; 0x4828 <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4800:	6d 89       	ldd	r22, Y+21	; 0x15
    4802:	7e 89       	ldd	r23, Y+22	; 0x16
    4804:	8f 89       	ldd	r24, Y+23	; 0x17
    4806:	98 8d       	ldd	r25, Y+24	; 0x18
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9c 8b       	std	Y+20, r25	; 0x14
    4812:	8b 8b       	std	Y+19, r24	; 0x13
    4814:	8b 89       	ldd	r24, Y+19	; 0x13
    4816:	9c 89       	ldd	r25, Y+20	; 0x14
    4818:	98 8b       	std	Y+16, r25	; 0x10
    481a:	8f 87       	std	Y+15, r24	; 0x0f
    481c:	8f 85       	ldd	r24, Y+15	; 0x0f
    481e:	98 89       	ldd	r25, Y+16	; 0x10
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <CLCD_vInit+0x420>
    4824:	98 8b       	std	Y+16, r25	; 0x10
    4826:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    4828:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    482c:	86 e0       	ldi	r24, 0x06	; 6
    482e:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	a0 e8       	ldi	r26, 0x80	; 128
    4838:	bf e3       	ldi	r27, 0x3F	; 63
    483a:	8b 87       	std	Y+11, r24	; 0x0b
    483c:	9c 87       	std	Y+12, r25	; 0x0c
    483e:	ad 87       	std	Y+13, r26	; 0x0d
    4840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4842:	6b 85       	ldd	r22, Y+11	; 0x0b
    4844:	7c 85       	ldd	r23, Y+12	; 0x0c
    4846:	8d 85       	ldd	r24, Y+13	; 0x0d
    4848:	9e 85       	ldd	r25, Y+14	; 0x0e
    484a:	20 e0       	ldi	r18, 0x00	; 0
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	4a ef       	ldi	r20, 0xFA	; 250
    4850:	54 e4       	ldi	r21, 0x44	; 68
    4852:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	8f 83       	std	Y+7, r24	; 0x07
    485c:	98 87       	std	Y+8, r25	; 0x08
    485e:	a9 87       	std	Y+9, r26	; 0x09
    4860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4862:	6f 81       	ldd	r22, Y+7	; 0x07
    4864:	78 85       	ldd	r23, Y+8	; 0x08
    4866:	89 85       	ldd	r24, Y+9	; 0x09
    4868:	9a 85       	ldd	r25, Y+10	; 0x0a
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	40 e8       	ldi	r20, 0x80	; 128
    4870:	5f e3       	ldi	r21, 0x3F	; 63
    4872:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4876:	88 23       	and	r24, r24
    4878:	2c f4       	brge	.+10     	; 0x4884 <CLCD_vInit+0x484>
		__ticks = 1;
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	9e 83       	std	Y+6, r25	; 0x06
    4880:	8d 83       	std	Y+5, r24	; 0x05
    4882:	3f c0       	rjmp	.+126    	; 0x4902 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    4884:	6f 81       	ldd	r22, Y+7	; 0x07
    4886:	78 85       	ldd	r23, Y+8	; 0x08
    4888:	89 85       	ldd	r24, Y+9	; 0x09
    488a:	9a 85       	ldd	r25, Y+10	; 0x0a
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	3f ef       	ldi	r19, 0xFF	; 255
    4890:	4f e7       	ldi	r20, 0x7F	; 127
    4892:	57 e4       	ldi	r21, 0x47	; 71
    4894:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4898:	18 16       	cp	r1, r24
    489a:	4c f5       	brge	.+82     	; 0x48ee <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    489c:	6b 85       	ldd	r22, Y+11	; 0x0b
    489e:	7c 85       	ldd	r23, Y+12	; 0x0c
    48a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	40 e2       	ldi	r20, 0x20	; 32
    48aa:	51 e4       	ldi	r21, 0x41	; 65
    48ac:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	bc 01       	movw	r22, r24
    48b6:	cd 01       	movw	r24, r26
    48b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	9e 83       	std	Y+6, r25	; 0x06
    48c2:	8d 83       	std	Y+5, r24	; 0x05
    48c4:	0f c0       	rjmp	.+30     	; 0x48e4 <CLCD_vInit+0x4e4>
    48c6:	88 ec       	ldi	r24, 0xC8	; 200
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	9c 83       	std	Y+4, r25	; 0x04
    48cc:	8b 83       	std	Y+3, r24	; 0x03
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	9c 81       	ldd	r25, Y+4	; 0x04
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	f1 f7       	brne	.-4      	; 0x48d2 <CLCD_vInit+0x4d2>
    48d6:	9c 83       	std	Y+4, r25	; 0x04
    48d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48da:	8d 81       	ldd	r24, Y+5	; 0x05
    48dc:	9e 81       	ldd	r25, Y+6	; 0x06
    48de:	01 97       	sbiw	r24, 0x01	; 1
    48e0:	9e 83       	std	Y+6, r25	; 0x06
    48e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e4:	8d 81       	ldd	r24, Y+5	; 0x05
    48e6:	9e 81       	ldd	r25, Y+6	; 0x06
    48e8:	00 97       	sbiw	r24, 0x00	; 0
    48ea:	69 f7       	brne	.-38     	; 0x48c6 <CLCD_vInit+0x4c6>
    48ec:	14 c0       	rjmp	.+40     	; 0x4916 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ee:	6f 81       	ldd	r22, Y+7	; 0x07
    48f0:	78 85       	ldd	r23, Y+8	; 0x08
    48f2:	89 85       	ldd	r24, Y+9	; 0x09
    48f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	9e 83       	std	Y+6, r25	; 0x06
    4900:	8d 83       	std	Y+5, r24	; 0x05
    4902:	8d 81       	ldd	r24, Y+5	; 0x05
    4904:	9e 81       	ldd	r25, Y+6	; 0x06
    4906:	9a 83       	std	Y+2, r25	; 0x02
    4908:	89 83       	std	Y+1, r24	; 0x01
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	9a 81       	ldd	r25, Y+2	; 0x02
    490e:	01 97       	sbiw	r24, 0x01	; 1
    4910:	f1 f7       	brne	.-4      	; 0x490e <CLCD_vInit+0x50e>
    4912:	9a 83       	std	Y+2, r25	; 0x02
    4914:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    4916:	ca 5b       	subi	r28, 0xBA	; 186
    4918:	df 4f       	sbci	r29, 0xFF	; 255
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	cf 91       	pop	r28
    4926:	df 91       	pop	r29
    4928:	1f 91       	pop	r17
    492a:	0f 91       	pop	r16
    492c:	08 95       	ret

0000492e <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    492e:	df 93       	push	r29
    4930:	cf 93       	push	r28
    4932:	0f 92       	push	r0
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	66 e0       	ldi	r22, 0x06	; 6
    493e:	41 e0       	ldi	r20, 0x01	; 1
    4940:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	65 e0       	ldi	r22, 0x05	; 5
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	98 2f       	mov	r25, r24
    4952:	92 95       	swap	r25
    4954:	9f 70       	andi	r25, 0x0F	; 15
    4956:	82 e0       	ldi	r24, 0x02	; 2
    4958:	69 2f       	mov	r22, r25
    495a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    495e:	0e 94 df 24 	call	0x49be	; 0x49be <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
    4962:	82 e0       	ldi	r24, 0x02	; 2
    4964:	69 81       	ldd	r22, Y+1	; 0x01
    4966:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    496a:	0e 94 df 24 	call	0x49be	; 0x49be <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    496e:	0f 90       	pop	r0
    4970:	cf 91       	pop	r28
    4972:	df 91       	pop	r29
    4974:	08 95       	ret

00004976 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    4976:	df 93       	push	r29
    4978:	cf 93       	push	r28
    497a:	0f 92       	push	r0
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	66 e0       	ldi	r22, 0x06	; 6
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	65 e0       	ldi	r22, 0x05	; 5
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
    4996:	89 81       	ldd	r24, Y+1	; 0x01
    4998:	98 2f       	mov	r25, r24
    499a:	92 95       	swap	r25
    499c:	9f 70       	andi	r25, 0x0F	; 15
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	69 2f       	mov	r22, r25
    49a2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    49a6:	0e 94 df 24 	call	0x49be	; 0x49be <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
    49aa:	82 e0       	ldi	r24, 0x02	; 2
    49ac:	69 81       	ldd	r22, Y+1	; 0x01
    49ae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    49b2:	0e 94 df 24 	call	0x49be	; 0x49be <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    49b6:	0f 90       	pop	r0
    49b8:	cf 91       	pop	r28
    49ba:	df 91       	pop	r29
    49bc:	08 95       	ret

000049be <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	6c 97       	sbiw	r28, 0x1c	; 28
    49c8:	0f b6       	in	r0, 0x3f	; 63
    49ca:	f8 94       	cli
    49cc:	de bf       	out	0x3e, r29	; 62
    49ce:	0f be       	out	0x3f, r0	; 63
    49d0:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	64 e0       	ldi	r22, 0x04	; 4
    49d6:	41 e0       	ldi	r20, 0x01	; 1
    49d8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	a0 e8       	ldi	r26, 0x80	; 128
    49e2:	bf e3       	ldi	r27, 0x3F	; 63
    49e4:	89 8f       	std	Y+25, r24	; 0x19
    49e6:	9a 8f       	std	Y+26, r25	; 0x1a
    49e8:	ab 8f       	std	Y+27, r26	; 0x1b
    49ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ec:	69 8d       	ldd	r22, Y+25	; 0x19
    49ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	4a ef       	ldi	r20, 0xFA	; 250
    49fa:	54 e4       	ldi	r21, 0x44	; 68
    49fc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	8d 8b       	std	Y+21, r24	; 0x15
    4a06:	9e 8b       	std	Y+22, r25	; 0x16
    4a08:	af 8b       	std	Y+23, r26	; 0x17
    4a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    4a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    4a10:	8f 89       	ldd	r24, Y+23	; 0x17
    4a12:	98 8d       	ldd	r25, Y+24	; 0x18
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e8       	ldi	r20, 0x80	; 128
    4a1a:	5f e3       	ldi	r21, 0x3F	; 63
    4a1c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4a20:	88 23       	and	r24, r24
    4a22:	2c f4       	brge	.+10     	; 0x4a2e <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	9c 8b       	std	Y+20, r25	; 0x14
    4a2a:	8b 8b       	std	Y+19, r24	; 0x13
    4a2c:	3f c0       	rjmp	.+126    	; 0x4aac <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    4a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a30:	7e 89       	ldd	r23, Y+22	; 0x16
    4a32:	8f 89       	ldd	r24, Y+23	; 0x17
    4a34:	98 8d       	ldd	r25, Y+24	; 0x18
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	3f ef       	ldi	r19, 0xFF	; 255
    4a3a:	4f e7       	ldi	r20, 0x7F	; 127
    4a3c:	57 e4       	ldi	r21, 0x47	; 71
    4a3e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4a42:	18 16       	cp	r1, r24
    4a44:	4c f5       	brge	.+82     	; 0x4a98 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a46:	69 8d       	ldd	r22, Y+25	; 0x19
    4a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	40 e2       	ldi	r20, 0x20	; 32
    4a54:	51 e4       	ldi	r21, 0x41	; 65
    4a56:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	bc 01       	movw	r22, r24
    4a60:	cd 01       	movw	r24, r26
    4a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a66:	dc 01       	movw	r26, r24
    4a68:	cb 01       	movw	r24, r22
    4a6a:	9c 8b       	std	Y+20, r25	; 0x14
    4a6c:	8b 8b       	std	Y+19, r24	; 0x13
    4a6e:	0f c0       	rjmp	.+30     	; 0x4a8e <CLCD_vSendFallingEdge+0xd0>
    4a70:	88 ec       	ldi	r24, 0xC8	; 200
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	9a 8b       	std	Y+18, r25	; 0x12
    4a76:	89 8b       	std	Y+17, r24	; 0x11
    4a78:	89 89       	ldd	r24, Y+17	; 0x11
    4a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	f1 f7       	brne	.-4      	; 0x4a7c <CLCD_vSendFallingEdge+0xbe>
    4a80:	9a 8b       	std	Y+18, r25	; 0x12
    4a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a84:	8b 89       	ldd	r24, Y+19	; 0x13
    4a86:	9c 89       	ldd	r25, Y+20	; 0x14
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	9c 8b       	std	Y+20, r25	; 0x14
    4a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a90:	9c 89       	ldd	r25, Y+20	; 0x14
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	69 f7       	brne	.-38     	; 0x4a70 <CLCD_vSendFallingEdge+0xb2>
    4a96:	14 c0       	rjmp	.+40     	; 0x4ac0 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a98:	6d 89       	ldd	r22, Y+21	; 0x15
    4a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	9c 8b       	std	Y+20, r25	; 0x14
    4aaa:	8b 8b       	std	Y+19, r24	; 0x13
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	98 8b       	std	Y+16, r25	; 0x10
    4ab2:	8f 87       	std	Y+15, r24	; 0x0f
    4ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ab6:	98 89       	ldd	r25, Y+16	; 0x10
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <CLCD_vSendFallingEdge+0xfa>
    4abc:	98 8b       	std	Y+16, r25	; 0x10
    4abe:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	64 e0       	ldi	r22, 0x04	; 4
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <DIO_enumWritePinVal>
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	a0 e8       	ldi	r26, 0x80	; 128
    4ad0:	bf e3       	ldi	r27, 0x3F	; 63
    4ad2:	8b 87       	std	Y+11, r24	; 0x0b
    4ad4:	9c 87       	std	Y+12, r25	; 0x0c
    4ad6:	ad 87       	std	Y+13, r26	; 0x0d
    4ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    4adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	4a ef       	ldi	r20, 0xFA	; 250
    4ae8:	54 e4       	ldi	r21, 0x44	; 68
    4aea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	8f 83       	std	Y+7, r24	; 0x07
    4af4:	98 87       	std	Y+8, r25	; 0x08
    4af6:	a9 87       	std	Y+9, r26	; 0x09
    4af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4afa:	6f 81       	ldd	r22, Y+7	; 0x07
    4afc:	78 85       	ldd	r23, Y+8	; 0x08
    4afe:	89 85       	ldd	r24, Y+9	; 0x09
    4b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e8       	ldi	r20, 0x80	; 128
    4b08:	5f e3       	ldi	r21, 0x3F	; 63
    4b0a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4b0e:	88 23       	and	r24, r24
    4b10:	2c f4       	brge	.+10     	; 0x4b1c <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	9e 83       	std	Y+6, r25	; 0x06
    4b18:	8d 83       	std	Y+5, r24	; 0x05
    4b1a:	3f c0       	rjmp	.+126    	; 0x4b9a <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    4b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b1e:	78 85       	ldd	r23, Y+8	; 0x08
    4b20:	89 85       	ldd	r24, Y+9	; 0x09
    4b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	3f ef       	ldi	r19, 0xFF	; 255
    4b28:	4f e7       	ldi	r20, 0x7F	; 127
    4b2a:	57 e4       	ldi	r21, 0x47	; 71
    4b2c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4b30:	18 16       	cp	r1, r24
    4b32:	4c f5       	brge	.+82     	; 0x4b86 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	40 e2       	ldi	r20, 0x20	; 32
    4b42:	51 e4       	ldi	r21, 0x41	; 65
    4b44:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b48:	dc 01       	movw	r26, r24
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	bc 01       	movw	r22, r24
    4b4e:	cd 01       	movw	r24, r26
    4b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	9e 83       	std	Y+6, r25	; 0x06
    4b5a:	8d 83       	std	Y+5, r24	; 0x05
    4b5c:	0f c0       	rjmp	.+30     	; 0x4b7c <CLCD_vSendFallingEdge+0x1be>
    4b5e:	88 ec       	ldi	r24, 0xC8	; 200
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	9c 83       	std	Y+4, r25	; 0x04
    4b64:	8b 83       	std	Y+3, r24	; 0x03
    4b66:	8b 81       	ldd	r24, Y+3	; 0x03
    4b68:	9c 81       	ldd	r25, Y+4	; 0x04
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	f1 f7       	brne	.-4      	; 0x4b6a <CLCD_vSendFallingEdge+0x1ac>
    4b6e:	9c 83       	std	Y+4, r25	; 0x04
    4b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b72:	8d 81       	ldd	r24, Y+5	; 0x05
    4b74:	9e 81       	ldd	r25, Y+6	; 0x06
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	9e 83       	std	Y+6, r25	; 0x06
    4b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	69 f7       	brne	.-38     	; 0x4b5e <CLCD_vSendFallingEdge+0x1a0>
    4b84:	14 c0       	rjmp	.+40     	; 0x4bae <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b86:	6f 81       	ldd	r22, Y+7	; 0x07
    4b88:	78 85       	ldd	r23, Y+8	; 0x08
    4b8a:	89 85       	ldd	r24, Y+9	; 0x09
    4b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	9e 83       	std	Y+6, r25	; 0x06
    4b98:	8d 83       	std	Y+5, r24	; 0x05
    4b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9e:	9a 83       	std	Y+2, r25	; 0x02
    4ba0:	89 83       	std	Y+1, r24	; 0x01
    4ba2:	89 81       	ldd	r24, Y+1	; 0x01
    4ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	f1 f7       	brne	.-4      	; 0x4ba6 <CLCD_vSendFallingEdge+0x1e8>
    4baa:	9a 83       	std	Y+2, r25	; 0x02
    4bac:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4bae:	6c 96       	adiw	r28, 0x1c	; 28
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	f8 94       	cli
    4bb4:	de bf       	out	0x3e, r29	; 62
    4bb6:	0f be       	out	0x3f, r0	; 63
    4bb8:	cd bf       	out	0x3d, r28	; 61
    4bba:	cf 91       	pop	r28
    4bbc:	df 91       	pop	r29
    4bbe:	08 95       	ret

00004bc0 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    4bc0:	df 93       	push	r29
    4bc2:	cf 93       	push	r28
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	2e 97       	sbiw	r28, 0x0e	; 14
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	a0 e2       	ldi	r26, 0x20	; 32
    4be0:	b1 e4       	ldi	r27, 0x41	; 65
    4be2:	8b 87       	std	Y+11, r24	; 0x0b
    4be4:	9c 87       	std	Y+12, r25	; 0x0c
    4be6:	ad 87       	std	Y+13, r26	; 0x0d
    4be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	4a ef       	ldi	r20, 0xFA	; 250
    4bf8:	54 e4       	ldi	r21, 0x44	; 68
    4bfa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	8f 83       	std	Y+7, r24	; 0x07
    4c04:	98 87       	std	Y+8, r25	; 0x08
    4c06:	a9 87       	std	Y+9, r26	; 0x09
    4c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c0c:	78 85       	ldd	r23, Y+8	; 0x08
    4c0e:	89 85       	ldd	r24, Y+9	; 0x09
    4c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e8       	ldi	r20, 0x80	; 128
    4c18:	5f e3       	ldi	r21, 0x3F	; 63
    4c1a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4c1e:	88 23       	and	r24, r24
    4c20:	2c f4       	brge	.+10     	; 0x4c2c <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	9e 83       	std	Y+6, r25	; 0x06
    4c28:	8d 83       	std	Y+5, r24	; 0x05
    4c2a:	3f c0       	rjmp	.+126    	; 0x4caa <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    4c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c2e:	78 85       	ldd	r23, Y+8	; 0x08
    4c30:	89 85       	ldd	r24, Y+9	; 0x09
    4c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	4f e7       	ldi	r20, 0x7F	; 127
    4c3a:	57 e4       	ldi	r21, 0x47	; 71
    4c3c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4c40:	18 16       	cp	r1, r24
    4c42:	4c f5       	brge	.+82     	; 0x4c96 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e2       	ldi	r20, 0x20	; 32
    4c52:	51 e4       	ldi	r21, 0x41	; 65
    4c54:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9e 83       	std	Y+6, r25	; 0x06
    4c6a:	8d 83       	std	Y+5, r24	; 0x05
    4c6c:	0f c0       	rjmp	.+30     	; 0x4c8c <CLCD_vClearScreen+0xcc>
    4c6e:	88 ec       	ldi	r24, 0xC8	; 200
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	9c 83       	std	Y+4, r25	; 0x04
    4c74:	8b 83       	std	Y+3, r24	; 0x03
    4c76:	8b 81       	ldd	r24, Y+3	; 0x03
    4c78:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <CLCD_vClearScreen+0xba>
    4c7e:	9c 83       	std	Y+4, r25	; 0x04
    4c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c82:	8d 81       	ldd	r24, Y+5	; 0x05
    4c84:	9e 81       	ldd	r25, Y+6	; 0x06
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	9e 83       	std	Y+6, r25	; 0x06
    4c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	69 f7       	brne	.-38     	; 0x4c6e <CLCD_vClearScreen+0xae>
    4c94:	14 c0       	rjmp	.+40     	; 0x4cbe <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c96:	6f 81       	ldd	r22, Y+7	; 0x07
    4c98:	78 85       	ldd	r23, Y+8	; 0x08
    4c9a:	89 85       	ldd	r24, Y+9	; 0x09
    4c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	9e 83       	std	Y+6, r25	; 0x06
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
    4caa:	8d 81       	ldd	r24, Y+5	; 0x05
    4cac:	9e 81       	ldd	r25, Y+6	; 0x06
    4cae:	9a 83       	std	Y+2, r25	; 0x02
    4cb0:	89 83       	std	Y+1, r24	; 0x01
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <CLCD_vClearScreen+0xf6>
    4cba:	9a 83       	std	Y+2, r25	; 0x02
    4cbc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    4cbe:	2e 96       	adiw	r28, 0x0e	; 14
    4cc0:	0f b6       	in	r0, 0x3f	; 63
    4cc2:	f8 94       	cli
    4cc4:	de bf       	out	0x3e, r29	; 62
    4cc6:	0f be       	out	0x3f, r0	; 63
    4cc8:	cd bf       	out	0x3d, r28	; 61
    4cca:	cf 91       	pop	r28
    4ccc:	df 91       	pop	r29
    4cce:	08 95       	ret

00004cd0 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    4cd0:	df 93       	push	r29
    4cd2:	cf 93       	push	r28
    4cd4:	00 d0       	rcall	.+0      	; 0x4cd6 <CLCD_vSendString+0x6>
    4cd6:	0f 92       	push	r0
    4cd8:	cd b7       	in	r28, 0x3d	; 61
    4cda:	de b7       	in	r29, 0x3e	; 62
    4cdc:	9b 83       	std	Y+3, r25	; 0x03
    4cde:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    4ce0:	19 82       	std	Y+1, r1	; 0x01
    4ce2:	0e c0       	rjmp	.+28     	; 0x4d00 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	28 2f       	mov	r18, r24
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	8a 81       	ldd	r24, Y+2	; 0x02
    4cec:	9b 81       	ldd	r25, Y+3	; 0x03
    4cee:	fc 01       	movw	r30, r24
    4cf0:	e2 0f       	add	r30, r18
    4cf2:	f3 1f       	adc	r31, r19
    4cf4:	80 81       	ld	r24, Z
    4cf6:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    LOC_u8Iterator++;
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	8f 5f       	subi	r24, 0xFF	; 255
    4cfe:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	28 2f       	mov	r18, r24
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	8a 81       	ldd	r24, Y+2	; 0x02
    4d08:	9b 81       	ldd	r25, Y+3	; 0x03
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	e2 0f       	add	r30, r18
    4d0e:	f3 1f       	adc	r31, r19
    4d10:	80 81       	ld	r24, Z
    4d12:	88 23       	and	r24, r24
    4d14:	39 f7       	brne	.-50     	; 0x4ce4 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	0f 90       	pop	r0
    4d1c:	cf 91       	pop	r28
    4d1e:	df 91       	pop	r29
    4d20:	08 95       	ret

00004d22 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	df 93       	push	r29
    4d2c:	cf 93       	push	r28
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	28 97       	sbiw	r28, 0x08	; 8
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	cd bf       	out	0x3d, r28	; 61
    4d3e:	6d 83       	std	Y+5, r22	; 0x05
    4d40:	7e 83       	std	Y+6, r23	; 0x06
    4d42:	8f 83       	std	Y+7, r24	; 0x07
    4d44:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	a0 e0       	ldi	r26, 0x00	; 0
    4d4c:	b0 e0       	ldi	r27, 0x00	; 0
    4d4e:	89 83       	std	Y+1, r24	; 0x01
    4d50:	9a 83       	std	Y+2, r25	; 0x02
    4d52:	ab 83       	std	Y+3, r26	; 0x03
    4d54:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    4d56:	8d 81       	ldd	r24, Y+5	; 0x05
    4d58:	9e 81       	ldd	r25, Y+6	; 0x06
    4d5a:	af 81       	ldd	r26, Y+7	; 0x07
    4d5c:	b8 85       	ldd	r27, Y+8	; 0x08
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	a1 05       	cpc	r26, r1
    4d62:	b1 05       	cpc	r27, r1
    4d64:	21 f4       	brne	.+8      	; 0x4d6e <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    4d66:	80 e3       	ldi	r24, 0x30	; 48
    4d68:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    4d6c:	85 c0       	rjmp	.+266    	; 0x4e78 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    4d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d70:	9e 81       	ldd	r25, Y+6	; 0x06
    4d72:	af 81       	ldd	r26, Y+7	; 0x07
    4d74:	b8 85       	ldd	r27, Y+8	; 0x08
    4d76:	bb 23       	and	r27, r27
    4d78:	0c f0       	brlt	.+2      	; 0x4d7c <CLCD_vSendIntNumber+0x5a>
    4d7a:	49 c0       	rjmp	.+146    	; 0x4e0e <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    4d7c:	8d e2       	ldi	r24, 0x2D	; 45
    4d7e:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    4d82:	8d 81       	ldd	r24, Y+5	; 0x05
    4d84:	9e 81       	ldd	r25, Y+6	; 0x06
    4d86:	af 81       	ldd	r26, Y+7	; 0x07
    4d88:	b8 85       	ldd	r27, Y+8	; 0x08
    4d8a:	b0 95       	com	r27
    4d8c:	a0 95       	com	r26
    4d8e:	90 95       	com	r25
    4d90:	81 95       	neg	r24
    4d92:	9f 4f       	sbci	r25, 0xFF	; 255
    4d94:	af 4f       	sbci	r26, 0xFF	; 255
    4d96:	bf 4f       	sbci	r27, 0xFF	; 255
    4d98:	8d 83       	std	Y+5, r24	; 0x05
    4d9a:	9e 83       	std	Y+6, r25	; 0x06
    4d9c:	af 83       	std	Y+7, r26	; 0x07
    4d9e:	b8 87       	std	Y+8, r27	; 0x08
    4da0:	36 c0       	rjmp	.+108    	; 0x4e0e <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    4da2:	89 81       	ldd	r24, Y+1	; 0x01
    4da4:	9a 81       	ldd	r25, Y+2	; 0x02
    4da6:	ab 81       	ldd	r26, Y+3	; 0x03
    4da8:	bc 81       	ldd	r27, Y+4	; 0x04
    4daa:	2a e0       	ldi	r18, 0x0A	; 10
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	50 e0       	ldi	r21, 0x00	; 0
    4db2:	bc 01       	movw	r22, r24
    4db4:	cd 01       	movw	r24, r26
    4db6:	0e 94 65 3d 	call	0x7aca	; 0x7aca <__mulsi3>
    4dba:	7b 01       	movw	r14, r22
    4dbc:	8c 01       	movw	r16, r24
    4dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc2:	af 81       	ldd	r26, Y+7	; 0x07
    4dc4:	b8 85       	ldd	r27, Y+8	; 0x08
    4dc6:	2a e0       	ldi	r18, 0x0A	; 10
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e0       	ldi	r20, 0x00	; 0
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	bc 01       	movw	r22, r24
    4dd0:	cd 01       	movw	r24, r26
    4dd2:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <__divmodsi4>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	8e 0d       	add	r24, r14
    4ddc:	9f 1d       	adc	r25, r15
    4dde:	a0 1f       	adc	r26, r16
    4de0:	b1 1f       	adc	r27, r17
    4de2:	89 83       	std	Y+1, r24	; 0x01
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	ab 83       	std	Y+3, r26	; 0x03
    4de8:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
    4dec:	9e 81       	ldd	r25, Y+6	; 0x06
    4dee:	af 81       	ldd	r26, Y+7	; 0x07
    4df0:	b8 85       	ldd	r27, Y+8	; 0x08
    4df2:	2a e0       	ldi	r18, 0x0A	; 10
    4df4:	30 e0       	ldi	r19, 0x00	; 0
    4df6:	40 e0       	ldi	r20, 0x00	; 0
    4df8:	50 e0       	ldi	r21, 0x00	; 0
    4dfa:	bc 01       	movw	r22, r24
    4dfc:	cd 01       	movw	r24, r26
    4dfe:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <__divmodsi4>
    4e02:	da 01       	movw	r26, r20
    4e04:	c9 01       	movw	r24, r18
    4e06:	8d 83       	std	Y+5, r24	; 0x05
    4e08:	9e 83       	std	Y+6, r25	; 0x06
    4e0a:	af 83       	std	Y+7, r26	; 0x07
    4e0c:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    4e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e10:	9e 81       	ldd	r25, Y+6	; 0x06
    4e12:	af 81       	ldd	r26, Y+7	; 0x07
    4e14:	b8 85       	ldd	r27, Y+8	; 0x08
    4e16:	00 97       	sbiw	r24, 0x00	; 0
    4e18:	a1 05       	cpc	r26, r1
    4e1a:	b1 05       	cpc	r27, r1
    4e1c:	11 f6       	brne	.-124    	; 0x4da2 <CLCD_vSendIntNumber+0x80>
    4e1e:	23 c0       	rjmp	.+70     	; 0x4e66 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    4e20:	89 81       	ldd	r24, Y+1	; 0x01
    4e22:	9a 81       	ldd	r25, Y+2	; 0x02
    4e24:	ab 81       	ldd	r26, Y+3	; 0x03
    4e26:	bc 81       	ldd	r27, Y+4	; 0x04
    4e28:	2a e0       	ldi	r18, 0x0A	; 10
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e0       	ldi	r20, 0x00	; 0
    4e2e:	50 e0       	ldi	r21, 0x00	; 0
    4e30:	bc 01       	movw	r22, r24
    4e32:	cd 01       	movw	r24, r26
    4e34:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__udivmodsi4>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	80 5d       	subi	r24, 0xD0	; 208
    4e3e:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	9a 81       	ldd	r25, Y+2	; 0x02
    4e46:	ab 81       	ldd	r26, Y+3	; 0x03
    4e48:	bc 81       	ldd	r27, Y+4	; 0x04
    4e4a:	2a e0       	ldi	r18, 0x0A	; 10
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	bc 01       	movw	r22, r24
    4e54:	cd 01       	movw	r24, r26
    4e56:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__udivmodsi4>
    4e5a:	da 01       	movw	r26, r20
    4e5c:	c9 01       	movw	r24, r18
    4e5e:	89 83       	std	Y+1, r24	; 0x01
    4e60:	9a 83       	std	Y+2, r25	; 0x02
    4e62:	ab 83       	std	Y+3, r26	; 0x03
    4e64:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6a:	ab 81       	ldd	r26, Y+3	; 0x03
    4e6c:	bc 81       	ldd	r27, Y+4	; 0x04
    4e6e:	81 30       	cpi	r24, 0x01	; 1
    4e70:	91 05       	cpc	r25, r1
    4e72:	a1 05       	cpc	r26, r1
    4e74:	b1 05       	cpc	r27, r1
    4e76:	a1 f6       	brne	.-88     	; 0x4e20 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    4e78:	28 96       	adiw	r28, 0x08	; 8
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	cf 91       	pop	r28
    4e86:	df 91       	pop	r29
    4e88:	1f 91       	pop	r17
    4e8a:	0f 91       	pop	r16
    4e8c:	ff 90       	pop	r15
    4e8e:	ef 90       	pop	r14
    4e90:	08 95       	ret

00004e92 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    4e92:	af 92       	push	r10
    4e94:	bf 92       	push	r11
    4e96:	cf 92       	push	r12
    4e98:	df 92       	push	r13
    4e9a:	ef 92       	push	r14
    4e9c:	ff 92       	push	r15
    4e9e:	0f 93       	push	r16
    4ea0:	1f 93       	push	r17
    4ea2:	df 93       	push	r29
    4ea4:	cf 93       	push	r28
    4ea6:	00 d0       	rcall	.+0      	; 0x4ea8 <CLCD_vSendFloatNumber+0x16>
    4ea8:	00 d0       	rcall	.+0      	; 0x4eaa <CLCD_vSendFloatNumber+0x18>
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    4eae:	69 83       	std	Y+1, r22	; 0x01
    4eb0:	7a 83       	std	Y+2, r23	; 0x02
    4eb2:	8b 83       	std	Y+3, r24	; 0x03
    4eb4:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    4eb6:	69 81       	ldd	r22, Y+1	; 0x01
    4eb8:	7a 81       	ldd	r23, Y+2	; 0x02
    4eba:	8b 81       	ldd	r24, Y+3	; 0x03
    4ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ebe:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    4ece:	69 81       	ldd	r22, Y+1	; 0x01
    4ed0:	7a 81       	ldd	r23, Y+2	; 0x02
    4ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	40 e0       	ldi	r20, 0x00	; 0
    4edc:	50 e0       	ldi	r21, 0x00	; 0
    4ede:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4ee2:	88 23       	and	r24, r24
    4ee4:	4c f4       	brge	.+18     	; 0x4ef8 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    4ee6:	89 81       	ldd	r24, Y+1	; 0x01
    4ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eea:	ab 81       	ldd	r26, Y+3	; 0x03
    4eec:	bc 81       	ldd	r27, Y+4	; 0x04
    4eee:	b0 58       	subi	r27, 0x80	; 128
    4ef0:	89 83       	std	Y+1, r24	; 0x01
    4ef2:	9a 83       	std	Y+2, r25	; 0x02
    4ef4:	ab 83       	std	Y+3, r26	; 0x03
    4ef6:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    4ef8:	69 81       	ldd	r22, Y+1	; 0x01
    4efa:	7a 81       	ldd	r23, Y+2	; 0x02
    4efc:	8b 81       	ldd	r24, Y+3	; 0x03
    4efe:	9c 81       	ldd	r25, Y+4	; 0x04
    4f00:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	bc 01       	movw	r22, r24
    4f0a:	cd 01       	movw	r24, r26
    4f0c:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    4f10:	9b 01       	movw	r18, r22
    4f12:	ac 01       	movw	r20, r24
    4f14:	69 81       	ldd	r22, Y+1	; 0x01
    4f16:	7a 81       	ldd	r23, Y+2	; 0x02
    4f18:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	89 83       	std	Y+1, r24	; 0x01
    4f26:	9a 83       	std	Y+2, r25	; 0x02
    4f28:	ab 83       	std	Y+3, r26	; 0x03
    4f2a:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    4f2c:	69 81       	ldd	r22, Y+1	; 0x01
    4f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    4f30:	8b 81       	ldd	r24, Y+3	; 0x03
    4f32:	9c 81       	ldd	r25, Y+4	; 0x04
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	30 e4       	ldi	r19, 0x40	; 64
    4f38:	4c e1       	ldi	r20, 0x1C	; 28
    4f3a:	56 e4       	ldi	r21, 0x46	; 70
    4f3c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f40:	dc 01       	movw	r26, r24
    4f42:	cb 01       	movw	r24, r22
    4f44:	89 83       	std	Y+1, r24	; 0x01
    4f46:	9a 83       	std	Y+2, r25	; 0x02
    4f48:	ab 83       	std	Y+3, r26	; 0x03
    4f4a:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    4f4c:	69 81       	ldd	r22, Y+1	; 0x01
    4f4e:	7a 81       	ldd	r23, Y+2	; 0x02
    4f50:	8b 81       	ldd	r24, Y+3	; 0x03
    4f52:	9c 81       	ldd	r25, Y+4	; 0x04
    4f54:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    4f58:	a2 2e       	mov	r10, r18
    4f5a:	b3 2e       	mov	r11, r19
    4f5c:	c4 2e       	mov	r12, r20
    4f5e:	d5 2e       	mov	r13, r21
    4f60:	e6 2e       	mov	r14, r22
    4f62:	f7 2e       	mov	r15, r23
    4f64:	08 2f       	mov	r16, r24
    4f66:	19 2f       	mov	r17, r25
    4f68:	8a 2d       	mov	r24, r10
    4f6a:	8b 29       	or	r24, r11
    4f6c:	8c 29       	or	r24, r12
    4f6e:	8d 29       	or	r24, r13
    4f70:	8e 29       	or	r24, r14
    4f72:	8f 29       	or	r24, r15
    4f74:	80 2b       	or	r24, r16
    4f76:	81 2b       	or	r24, r17
    4f78:	88 23       	and	r24, r24
    4f7a:	79 f0       	breq	.+30     	; 0x4f9a <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    4f7c:	8e e2       	ldi	r24, 0x2E	; 46
    4f7e:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    4f82:	69 81       	ldd	r22, Y+1	; 0x01
    4f84:	7a 81       	ldd	r23, Y+2	; 0x02
    4f86:	8b 81       	ldd	r24, Y+3	; 0x03
    4f88:	9c 81       	ldd	r25, Y+4	; 0x04
    4f8a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	bc 01       	movw	r22, r24
    4f94:	cd 01       	movw	r24, r26
    4f96:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
  }
}
    4f9a:	0f 90       	pop	r0
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	cf 91       	pop	r28
    4fa4:	df 91       	pop	r29
    4fa6:	1f 91       	pop	r17
    4fa8:	0f 91       	pop	r16
    4faa:	ff 90       	pop	r15
    4fac:	ef 90       	pop	r14
    4fae:	df 90       	pop	r13
    4fb0:	cf 90       	pop	r12
    4fb2:	bf 90       	pop	r11
    4fb4:	af 90       	pop	r10
    4fb6:	08 95       	ret

00004fb8 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    4fb8:	df 93       	push	r29
    4fba:	cf 93       	push	r28
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	61 97       	sbiw	r28, 0x11	; 17
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	88 8b       	std	Y+16, r24	; 0x10
    4fce:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    4fd0:	88 89       	ldd	r24, Y+16	; 0x10
    4fd2:	88 23       	and	r24, r24
    4fd4:	49 f0       	breq	.+18     	; 0x4fe8 <CLCD_vSetPosition+0x30>
    4fd6:	88 89       	ldd	r24, Y+16	; 0x10
    4fd8:	85 30       	cpi	r24, 0x05	; 5
    4fda:	30 f4       	brcc	.+12     	; 0x4fe8 <CLCD_vSetPosition+0x30>
    4fdc:	89 89       	ldd	r24, Y+17	; 0x11
    4fde:	88 23       	and	r24, r24
    4fe0:	19 f0       	breq	.+6      	; 0x4fe8 <CLCD_vSetPosition+0x30>
    4fe2:	89 89       	ldd	r24, Y+17	; 0x11
    4fe4:	85 31       	cpi	r24, 0x15	; 21
    4fe6:	18 f0       	brcs	.+6      	; 0x4fee <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    4fe8:	80 e8       	ldi	r24, 0x80	; 128
    4fea:	8f 87       	std	Y+15, r24	; 0x0f
    4fec:	1b c0       	rjmp	.+54     	; 0x5024 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    4fee:	88 89       	ldd	r24, Y+16	; 0x10
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	21 f4       	brne	.+8      	; 0x4ffc <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    4ff4:	89 89       	ldd	r24, Y+17	; 0x11
    4ff6:	81 58       	subi	r24, 0x81	; 129
    4ff8:	8f 87       	std	Y+15, r24	; 0x0f
    4ffa:	14 c0       	rjmp	.+40     	; 0x5024 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    4ffc:	88 89       	ldd	r24, Y+16	; 0x10
    4ffe:	82 30       	cpi	r24, 0x02	; 2
    5000:	21 f4       	brne	.+8      	; 0x500a <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    5002:	89 89       	ldd	r24, Y+17	; 0x11
    5004:	81 54       	subi	r24, 0x41	; 65
    5006:	8f 87       	std	Y+15, r24	; 0x0f
    5008:	0d c0       	rjmp	.+26     	; 0x5024 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    500a:	88 89       	ldd	r24, Y+16	; 0x10
    500c:	83 30       	cpi	r24, 0x03	; 3
    500e:	21 f4       	brne	.+8      	; 0x5018 <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    5010:	89 89       	ldd	r24, Y+17	; 0x11
    5012:	8d 56       	subi	r24, 0x6D	; 109
    5014:	8f 87       	std	Y+15, r24	; 0x0f
    5016:	06 c0       	rjmp	.+12     	; 0x5024 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    5018:	88 89       	ldd	r24, Y+16	; 0x10
    501a:	84 30       	cpi	r24, 0x04	; 4
    501c:	19 f4       	brne	.+6      	; 0x5024 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    501e:	89 89       	ldd	r24, Y+17	; 0x11
    5020:	8d 52       	subi	r24, 0x2D	; 45
    5022:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    5024:	8f 85       	ldd	r24, Y+15	; 0x0f
    5026:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    502a:	80 e0       	ldi	r24, 0x00	; 0
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	a0 e8       	ldi	r26, 0x80	; 128
    5030:	bf e3       	ldi	r27, 0x3F	; 63
    5032:	8b 87       	std	Y+11, r24	; 0x0b
    5034:	9c 87       	std	Y+12, r25	; 0x0c
    5036:	ad 87       	std	Y+13, r26	; 0x0d
    5038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    503a:	6b 85       	ldd	r22, Y+11	; 0x0b
    503c:	7c 85       	ldd	r23, Y+12	; 0x0c
    503e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5040:	9e 85       	ldd	r25, Y+14	; 0x0e
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	4a ef       	ldi	r20, 0xFA	; 250
    5048:	54 e4       	ldi	r21, 0x44	; 68
    504a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	8f 83       	std	Y+7, r24	; 0x07
    5054:	98 87       	std	Y+8, r25	; 0x08
    5056:	a9 87       	std	Y+9, r26	; 0x09
    5058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    505a:	6f 81       	ldd	r22, Y+7	; 0x07
    505c:	78 85       	ldd	r23, Y+8	; 0x08
    505e:	89 85       	ldd	r24, Y+9	; 0x09
    5060:	9a 85       	ldd	r25, Y+10	; 0x0a
    5062:	20 e0       	ldi	r18, 0x00	; 0
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	40 e8       	ldi	r20, 0x80	; 128
    5068:	5f e3       	ldi	r21, 0x3F	; 63
    506a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    506e:	88 23       	and	r24, r24
    5070:	2c f4       	brge	.+10     	; 0x507c <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	9e 83       	std	Y+6, r25	; 0x06
    5078:	8d 83       	std	Y+5, r24	; 0x05
    507a:	3f c0       	rjmp	.+126    	; 0x50fa <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    507c:	6f 81       	ldd	r22, Y+7	; 0x07
    507e:	78 85       	ldd	r23, Y+8	; 0x08
    5080:	89 85       	ldd	r24, Y+9	; 0x09
    5082:	9a 85       	ldd	r25, Y+10	; 0x0a
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	3f ef       	ldi	r19, 0xFF	; 255
    5088:	4f e7       	ldi	r20, 0x7F	; 127
    508a:	57 e4       	ldi	r21, 0x47	; 71
    508c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5090:	18 16       	cp	r1, r24
    5092:	4c f5       	brge	.+82     	; 0x50e6 <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5094:	6b 85       	ldd	r22, Y+11	; 0x0b
    5096:	7c 85       	ldd	r23, Y+12	; 0x0c
    5098:	8d 85       	ldd	r24, Y+13	; 0x0d
    509a:	9e 85       	ldd	r25, Y+14	; 0x0e
    509c:	20 e0       	ldi	r18, 0x00	; 0
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	40 e2       	ldi	r20, 0x20	; 32
    50a2:	51 e4       	ldi	r21, 0x41	; 65
    50a4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    50a8:	dc 01       	movw	r26, r24
    50aa:	cb 01       	movw	r24, r22
    50ac:	bc 01       	movw	r22, r24
    50ae:	cd 01       	movw	r24, r26
    50b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b4:	dc 01       	movw	r26, r24
    50b6:	cb 01       	movw	r24, r22
    50b8:	9e 83       	std	Y+6, r25	; 0x06
    50ba:	8d 83       	std	Y+5, r24	; 0x05
    50bc:	0f c0       	rjmp	.+30     	; 0x50dc <CLCD_vSetPosition+0x124>
    50be:	88 ec       	ldi	r24, 0xC8	; 200
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	9c 83       	std	Y+4, r25	; 0x04
    50c4:	8b 83       	std	Y+3, r24	; 0x03
    50c6:	8b 81       	ldd	r24, Y+3	; 0x03
    50c8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ca:	01 97       	sbiw	r24, 0x01	; 1
    50cc:	f1 f7       	brne	.-4      	; 0x50ca <CLCD_vSetPosition+0x112>
    50ce:	9c 83       	std	Y+4, r25	; 0x04
    50d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d2:	8d 81       	ldd	r24, Y+5	; 0x05
    50d4:	9e 81       	ldd	r25, Y+6	; 0x06
    50d6:	01 97       	sbiw	r24, 0x01	; 1
    50d8:	9e 83       	std	Y+6, r25	; 0x06
    50da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50dc:	8d 81       	ldd	r24, Y+5	; 0x05
    50de:	9e 81       	ldd	r25, Y+6	; 0x06
    50e0:	00 97       	sbiw	r24, 0x00	; 0
    50e2:	69 f7       	brne	.-38     	; 0x50be <CLCD_vSetPosition+0x106>
    50e4:	14 c0       	rjmp	.+40     	; 0x510e <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e6:	6f 81       	ldd	r22, Y+7	; 0x07
    50e8:	78 85       	ldd	r23, Y+8	; 0x08
    50ea:	89 85       	ldd	r24, Y+9	; 0x09
    50ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f2:	dc 01       	movw	r26, r24
    50f4:	cb 01       	movw	r24, r22
    50f6:	9e 83       	std	Y+6, r25	; 0x06
    50f8:	8d 83       	std	Y+5, r24	; 0x05
    50fa:	8d 81       	ldd	r24, Y+5	; 0x05
    50fc:	9e 81       	ldd	r25, Y+6	; 0x06
    50fe:	9a 83       	std	Y+2, r25	; 0x02
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	89 81       	ldd	r24, Y+1	; 0x01
    5104:	9a 81       	ldd	r25, Y+2	; 0x02
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	f1 f7       	brne	.-4      	; 0x5106 <CLCD_vSetPosition+0x14e>
    510a:	9a 83       	std	Y+2, r25	; 0x02
    510c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    510e:	61 96       	adiw	r28, 0x11	; 17
    5110:	0f b6       	in	r0, 0x3f	; 63
    5112:	f8 94       	cli
    5114:	de bf       	out	0x3e, r29	; 62
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	cf 91       	pop	r28
    511c:	df 91       	pop	r29
    511e:	08 95       	ret

00005120 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    5120:	df 93       	push	r29
    5122:	cf 93       	push	r28
    5124:	00 d0       	rcall	.+0      	; 0x5126 <CLCD_vSendExtraChar+0x6>
    5126:	0f 92       	push	r0
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	8a 83       	std	Y+2, r24	; 0x02
    512e:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    5130:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    5132:	80 e4       	ldi	r24, 0x40	; 64
    5134:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    5138:	19 82       	std	Y+1, r1	; 0x01
    513a:	0c c0       	rjmp	.+24     	; 0x5154 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    513c:	89 81       	ldd	r24, Y+1	; 0x01
    513e:	88 2f       	mov	r24, r24
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	fc 01       	movw	r30, r24
    5144:	e2 59       	subi	r30, 0x92	; 146
    5146:	fb 4f       	sbci	r31, 0xFB	; 251
    5148:	80 81       	ld	r24, Z
    514a:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    514e:	89 81       	ldd	r24, Y+1	; 0x01
    5150:	8f 5f       	subi	r24, 0xFF	; 255
    5152:	89 83       	std	Y+1, r24	; 0x01
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	88 30       	cpi	r24, 0x08	; 8
    5158:	88 f3       	brcs	.-30     	; 0x513c <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	6b 81       	ldd	r22, Y+3	; 0x03
    515e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    5162:	19 82       	std	Y+1, r1	; 0x01
    5164:	06 c0       	rjmp	.+12     	; 0x5172 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    5166:	89 81       	ldd	r24, Y+1	; 0x01
    5168:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	89 83       	std	Y+1, r24	; 0x01
    5172:	89 81       	ldd	r24, Y+1	; 0x01
    5174:	88 30       	cpi	r24, 0x08	; 8
    5176:	b8 f3       	brcs	.-18     	; 0x5166 <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    5178:	0f 90       	pop	r0
    517a:	0f 90       	pop	r0
    517c:	0f 90       	pop	r0
    517e:	cf 91       	pop	r28
    5180:	df 91       	pop	r29
    5182:	08 95       	ret

00005184 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    5184:	df 93       	push	r29
    5186:	cf 93       	push	r28
    5188:	cd b7       	in	r28, 0x3d	; 61
    518a:	de b7       	in	r29, 0x3e	; 62
    518c:	2e 97       	sbiw	r28, 0x0e	; 14
    518e:	0f b6       	in	r0, 0x3f	; 63
    5190:	f8 94       	cli
    5192:	de bf       	out	0x3e, r29	; 62
    5194:	0f be       	out	0x3f, r0	; 63
    5196:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    5198:	8c e1       	ldi	r24, 0x1C	; 28
    519a:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	a0 e8       	ldi	r26, 0x80	; 128
    51a4:	bf e3       	ldi	r27, 0x3F	; 63
    51a6:	8b 87       	std	Y+11, r24	; 0x0b
    51a8:	9c 87       	std	Y+12, r25	; 0x0c
    51aa:	ad 87       	std	Y+13, r26	; 0x0d
    51ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    51b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	4a ef       	ldi	r20, 0xFA	; 250
    51bc:	54 e4       	ldi	r21, 0x44	; 68
    51be:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	8f 83       	std	Y+7, r24	; 0x07
    51c8:	98 87       	std	Y+8, r25	; 0x08
    51ca:	a9 87       	std	Y+9, r26	; 0x09
    51cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51ce:	6f 81       	ldd	r22, Y+7	; 0x07
    51d0:	78 85       	ldd	r23, Y+8	; 0x08
    51d2:	89 85       	ldd	r24, Y+9	; 0x09
    51d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	40 e8       	ldi	r20, 0x80	; 128
    51dc:	5f e3       	ldi	r21, 0x3F	; 63
    51de:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    51e2:	88 23       	and	r24, r24
    51e4:	2c f4       	brge	.+10     	; 0x51f0 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	9e 83       	std	Y+6, r25	; 0x06
    51ec:	8d 83       	std	Y+5, r24	; 0x05
    51ee:	3f c0       	rjmp	.+126    	; 0x526e <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    51f0:	6f 81       	ldd	r22, Y+7	; 0x07
    51f2:	78 85       	ldd	r23, Y+8	; 0x08
    51f4:	89 85       	ldd	r24, Y+9	; 0x09
    51f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	3f ef       	ldi	r19, 0xFF	; 255
    51fc:	4f e7       	ldi	r20, 0x7F	; 127
    51fe:	57 e4       	ldi	r21, 0x47	; 71
    5200:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5204:	18 16       	cp	r1, r24
    5206:	4c f5       	brge	.+82     	; 0x525a <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5208:	6b 85       	ldd	r22, Y+11	; 0x0b
    520a:	7c 85       	ldd	r23, Y+12	; 0x0c
    520c:	8d 85       	ldd	r24, Y+13	; 0x0d
    520e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	40 e2       	ldi	r20, 0x20	; 32
    5216:	51 e4       	ldi	r21, 0x41	; 65
    5218:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	bc 01       	movw	r22, r24
    5222:	cd 01       	movw	r24, r26
    5224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5228:	dc 01       	movw	r26, r24
    522a:	cb 01       	movw	r24, r22
    522c:	9e 83       	std	Y+6, r25	; 0x06
    522e:	8d 83       	std	Y+5, r24	; 0x05
    5230:	0f c0       	rjmp	.+30     	; 0x5250 <CLCD_voidShiftDisplayRight+0xcc>
    5232:	88 ec       	ldi	r24, 0xC8	; 200
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	9c 83       	std	Y+4, r25	; 0x04
    5238:	8b 83       	std	Y+3, r24	; 0x03
    523a:	8b 81       	ldd	r24, Y+3	; 0x03
    523c:	9c 81       	ldd	r25, Y+4	; 0x04
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	f1 f7       	brne	.-4      	; 0x523e <CLCD_voidShiftDisplayRight+0xba>
    5242:	9c 83       	std	Y+4, r25	; 0x04
    5244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5246:	8d 81       	ldd	r24, Y+5	; 0x05
    5248:	9e 81       	ldd	r25, Y+6	; 0x06
    524a:	01 97       	sbiw	r24, 0x01	; 1
    524c:	9e 83       	std	Y+6, r25	; 0x06
    524e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5250:	8d 81       	ldd	r24, Y+5	; 0x05
    5252:	9e 81       	ldd	r25, Y+6	; 0x06
    5254:	00 97       	sbiw	r24, 0x00	; 0
    5256:	69 f7       	brne	.-38     	; 0x5232 <CLCD_voidShiftDisplayRight+0xae>
    5258:	14 c0       	rjmp	.+40     	; 0x5282 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525a:	6f 81       	ldd	r22, Y+7	; 0x07
    525c:	78 85       	ldd	r23, Y+8	; 0x08
    525e:	89 85       	ldd	r24, Y+9	; 0x09
    5260:	9a 85       	ldd	r25, Y+10	; 0x0a
    5262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5266:	dc 01       	movw	r26, r24
    5268:	cb 01       	movw	r24, r22
    526a:	9e 83       	std	Y+6, r25	; 0x06
    526c:	8d 83       	std	Y+5, r24	; 0x05
    526e:	8d 81       	ldd	r24, Y+5	; 0x05
    5270:	9e 81       	ldd	r25, Y+6	; 0x06
    5272:	9a 83       	std	Y+2, r25	; 0x02
    5274:	89 83       	std	Y+1, r24	; 0x01
    5276:	89 81       	ldd	r24, Y+1	; 0x01
    5278:	9a 81       	ldd	r25, Y+2	; 0x02
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	f1 f7       	brne	.-4      	; 0x527a <CLCD_voidShiftDisplayRight+0xf6>
    527e:	9a 83       	std	Y+2, r25	; 0x02
    5280:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    5282:	2e 96       	adiw	r28, 0x0e	; 14
    5284:	0f b6       	in	r0, 0x3f	; 63
    5286:	f8 94       	cli
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	cd bf       	out	0x3d, r28	; 61
    528e:	cf 91       	pop	r28
    5290:	df 91       	pop	r29
    5292:	08 95       	ret

00005294 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    5294:	df 93       	push	r29
    5296:	cf 93       	push	r28
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
    529c:	2e 97       	sbiw	r28, 0x0e	; 14
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    52a8:	88 e1       	ldi	r24, 0x18	; 24
    52aa:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	a0 e8       	ldi	r26, 0x80	; 128
    52b4:	bf e3       	ldi	r27, 0x3F	; 63
    52b6:	8b 87       	std	Y+11, r24	; 0x0b
    52b8:	9c 87       	std	Y+12, r25	; 0x0c
    52ba:	ad 87       	std	Y+13, r26	; 0x0d
    52bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52be:	6b 85       	ldd	r22, Y+11	; 0x0b
    52c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	4a ef       	ldi	r20, 0xFA	; 250
    52cc:	54 e4       	ldi	r21, 0x44	; 68
    52ce:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52d2:	dc 01       	movw	r26, r24
    52d4:	cb 01       	movw	r24, r22
    52d6:	8f 83       	std	Y+7, r24	; 0x07
    52d8:	98 87       	std	Y+8, r25	; 0x08
    52da:	a9 87       	std	Y+9, r26	; 0x09
    52dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52de:	6f 81       	ldd	r22, Y+7	; 0x07
    52e0:	78 85       	ldd	r23, Y+8	; 0x08
    52e2:	89 85       	ldd	r24, Y+9	; 0x09
    52e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	40 e8       	ldi	r20, 0x80	; 128
    52ec:	5f e3       	ldi	r21, 0x3F	; 63
    52ee:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    52f2:	88 23       	and	r24, r24
    52f4:	2c f4       	brge	.+10     	; 0x5300 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	9e 83       	std	Y+6, r25	; 0x06
    52fc:	8d 83       	std	Y+5, r24	; 0x05
    52fe:	3f c0       	rjmp	.+126    	; 0x537e <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    5300:	6f 81       	ldd	r22, Y+7	; 0x07
    5302:	78 85       	ldd	r23, Y+8	; 0x08
    5304:	89 85       	ldd	r24, Y+9	; 0x09
    5306:	9a 85       	ldd	r25, Y+10	; 0x0a
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	3f ef       	ldi	r19, 0xFF	; 255
    530c:	4f e7       	ldi	r20, 0x7F	; 127
    530e:	57 e4       	ldi	r21, 0x47	; 71
    5310:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5314:	18 16       	cp	r1, r24
    5316:	4c f5       	brge	.+82     	; 0x536a <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5318:	6b 85       	ldd	r22, Y+11	; 0x0b
    531a:	7c 85       	ldd	r23, Y+12	; 0x0c
    531c:	8d 85       	ldd	r24, Y+13	; 0x0d
    531e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	30 e0       	ldi	r19, 0x00	; 0
    5324:	40 e2       	ldi	r20, 0x20	; 32
    5326:	51 e4       	ldi	r21, 0x41	; 65
    5328:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	bc 01       	movw	r22, r24
    5332:	cd 01       	movw	r24, r26
    5334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	9e 83       	std	Y+6, r25	; 0x06
    533e:	8d 83       	std	Y+5, r24	; 0x05
    5340:	0f c0       	rjmp	.+30     	; 0x5360 <CLCD_voidShiftDisplayLeft+0xcc>
    5342:	88 ec       	ldi	r24, 0xC8	; 200
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	9c 83       	std	Y+4, r25	; 0x04
    5348:	8b 83       	std	Y+3, r24	; 0x03
    534a:	8b 81       	ldd	r24, Y+3	; 0x03
    534c:	9c 81       	ldd	r25, Y+4	; 0x04
    534e:	01 97       	sbiw	r24, 0x01	; 1
    5350:	f1 f7       	brne	.-4      	; 0x534e <CLCD_voidShiftDisplayLeft+0xba>
    5352:	9c 83       	std	Y+4, r25	; 0x04
    5354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	9e 81       	ldd	r25, Y+6	; 0x06
    535a:	01 97       	sbiw	r24, 0x01	; 1
    535c:	9e 83       	std	Y+6, r25	; 0x06
    535e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5360:	8d 81       	ldd	r24, Y+5	; 0x05
    5362:	9e 81       	ldd	r25, Y+6	; 0x06
    5364:	00 97       	sbiw	r24, 0x00	; 0
    5366:	69 f7       	brne	.-38     	; 0x5342 <CLCD_voidShiftDisplayLeft+0xae>
    5368:	14 c0       	rjmp	.+40     	; 0x5392 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    536a:	6f 81       	ldd	r22, Y+7	; 0x07
    536c:	78 85       	ldd	r23, Y+8	; 0x08
    536e:	89 85       	ldd	r24, Y+9	; 0x09
    5370:	9a 85       	ldd	r25, Y+10	; 0x0a
    5372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5376:	dc 01       	movw	r26, r24
    5378:	cb 01       	movw	r24, r22
    537a:	9e 83       	std	Y+6, r25	; 0x06
    537c:	8d 83       	std	Y+5, r24	; 0x05
    537e:	8d 81       	ldd	r24, Y+5	; 0x05
    5380:	9e 81       	ldd	r25, Y+6	; 0x06
    5382:	9a 83       	std	Y+2, r25	; 0x02
    5384:	89 83       	std	Y+1, r24	; 0x01
    5386:	89 81       	ldd	r24, Y+1	; 0x01
    5388:	9a 81       	ldd	r25, Y+2	; 0x02
    538a:	01 97       	sbiw	r24, 0x01	; 1
    538c:	f1 f7       	brne	.-4      	; 0x538a <CLCD_voidShiftDisplayLeft+0xf6>
    538e:	9a 83       	std	Y+2, r25	; 0x02
    5390:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    5392:	2e 96       	adiw	r28, 0x0e	; 14
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	de bf       	out	0x3e, r29	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	cf 91       	pop	r28
    53a0:	df 91       	pop	r29
    53a2:	08 95       	ret

000053a4 <EEPROM_vInit>:
/* to get bottom from usart and error status */
volatile u8 KPD_Press, Error_State = 1;
volatile u8 UserName[20];

void EEPROM_vInit(void)
{
    53a4:	0f 93       	push	r16
    53a6:	1f 93       	push	r17
    53a8:	df 93       	push	r29
    53aa:	cf 93       	push	r28
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	6d 97       	sbiw	r28, 0x1d	; 29
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
  /* To get Number of User Name and Password Length from EEPROM for second sign in */
  UserName_Length =  EEPROM_FunReadName(EEPROM_USNL_Location);
    53bc:	83 e1       	ldi	r24, 0x13	; 19
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    53c4:	80 93 bb 04 	sts	0x04BB, r24
  PassWord_Length =  EEPROM_FunReadName(EEPROM_PWL_Location);
    53c8:	84 e1       	ldi	r24, 0x14	; 20
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    53d0:	80 93 bc 04 	sts	0x04BC, r24

  /* To get number of tries left from EEPROM if it lost one of it Maximum */
  if (EEPROM_FunReadName(EEPROM_NoTries_Location) != NOTPRESSED)
    53d4:	82 e1       	ldi	r24, 0x12	; 18
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    53dc:	8f 3f       	cpi	r24, 0xFF	; 255
    53de:	31 f0       	breq	.+12     	; 0x53ec <EEPROM_vInit+0x48>
  {
    Tries = EEPROM_FunReadName(EEPROM_NoTries_Location);
    53e0:	82 e1       	ldi	r24, 0x12	; 18
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    53e8:	80 93 76 04 	sts	0x0476, r24
  }
  else
  {
  }
  /* check if There is UserName or Not */
  if (EEPROM_FunReadName(EEPROM_UserNameStatus) == NOTPRESSED)
    53ec:	80 e1       	ldi	r24, 0x10	; 16
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    53f4:	8f 3f       	cpi	r24, 0xFF	; 255
    53f6:	09 f0       	breq	.+2      	; 0x53fa <EEPROM_vInit+0x56>
    53f8:	7a c0       	rjmp	.+244    	; 0x54ee <EEPROM_vInit+0x14a>
  {
#if OUTPUT_SCREEN == CLCD_OUTPUT
    CLCD_SendStringFuncName("Please Sign Up");
    53fa:	80 e6       	ldi	r24, 0x60	; 96
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    5402:	80 e0       	ldi	r24, 0x00	; 0
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	aa ef       	ldi	r26, 0xFA	; 250
    5408:	b3 e4       	ldi	r27, 0x43	; 67
    540a:	89 8f       	std	Y+25, r24	; 0x19
    540c:	9a 8f       	std	Y+26, r25	; 0x1a
    540e:	ab 8f       	std	Y+27, r26	; 0x1b
    5410:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5412:	69 8d       	ldd	r22, Y+25	; 0x19
    5414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	4a ef       	ldi	r20, 0xFA	; 250
    5420:	54 e4       	ldi	r21, 0x44	; 68
    5422:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	8d 8b       	std	Y+21, r24	; 0x15
    542c:	9e 8b       	std	Y+22, r25	; 0x16
    542e:	af 8b       	std	Y+23, r26	; 0x17
    5430:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5432:	6d 89       	ldd	r22, Y+21	; 0x15
    5434:	7e 89       	ldd	r23, Y+22	; 0x16
    5436:	8f 89       	ldd	r24, Y+23	; 0x17
    5438:	98 8d       	ldd	r25, Y+24	; 0x18
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	40 e8       	ldi	r20, 0x80	; 128
    5440:	5f e3       	ldi	r21, 0x3F	; 63
    5442:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5446:	88 23       	and	r24, r24
    5448:	2c f4       	brge	.+10     	; 0x5454 <EEPROM_vInit+0xb0>
		__ticks = 1;
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	9c 8b       	std	Y+20, r25	; 0x14
    5450:	8b 8b       	std	Y+19, r24	; 0x13
    5452:	3f c0       	rjmp	.+126    	; 0x54d2 <EEPROM_vInit+0x12e>
	else if (__tmp > 65535)
    5454:	6d 89       	ldd	r22, Y+21	; 0x15
    5456:	7e 89       	ldd	r23, Y+22	; 0x16
    5458:	8f 89       	ldd	r24, Y+23	; 0x17
    545a:	98 8d       	ldd	r25, Y+24	; 0x18
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	3f ef       	ldi	r19, 0xFF	; 255
    5460:	4f e7       	ldi	r20, 0x7F	; 127
    5462:	57 e4       	ldi	r21, 0x47	; 71
    5464:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5468:	18 16       	cp	r1, r24
    546a:	4c f5       	brge	.+82     	; 0x54be <EEPROM_vInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    546c:	69 8d       	ldd	r22, Y+25	; 0x19
    546e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	40 e2       	ldi	r20, 0x20	; 32
    547a:	51 e4       	ldi	r21, 0x41	; 65
    547c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	9c 8b       	std	Y+20, r25	; 0x14
    5492:	8b 8b       	std	Y+19, r24	; 0x13
    5494:	0f c0       	rjmp	.+30     	; 0x54b4 <EEPROM_vInit+0x110>
    5496:	88 ec       	ldi	r24, 0xC8	; 200
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	9a 8b       	std	Y+18, r25	; 0x12
    549c:	89 8b       	std	Y+17, r24	; 0x11
    549e:	89 89       	ldd	r24, Y+17	; 0x11
    54a0:	9a 89       	ldd	r25, Y+18	; 0x12
    54a2:	01 97       	sbiw	r24, 0x01	; 1
    54a4:	f1 f7       	brne	.-4      	; 0x54a2 <EEPROM_vInit+0xfe>
    54a6:	9a 8b       	std	Y+18, r25	; 0x12
    54a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54aa:	8b 89       	ldd	r24, Y+19	; 0x13
    54ac:	9c 89       	ldd	r25, Y+20	; 0x14
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	9c 8b       	std	Y+20, r25	; 0x14
    54b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54b4:	8b 89       	ldd	r24, Y+19	; 0x13
    54b6:	9c 89       	ldd	r25, Y+20	; 0x14
    54b8:	00 97       	sbiw	r24, 0x00	; 0
    54ba:	69 f7       	brne	.-38     	; 0x5496 <EEPROM_vInit+0xf2>
    54bc:	14 c0       	rjmp	.+40     	; 0x54e6 <EEPROM_vInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54be:	6d 89       	ldd	r22, Y+21	; 0x15
    54c0:	7e 89       	ldd	r23, Y+22	; 0x16
    54c2:	8f 89       	ldd	r24, Y+23	; 0x17
    54c4:	98 8d       	ldd	r25, Y+24	; 0x18
    54c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ca:	dc 01       	movw	r26, r24
    54cc:	cb 01       	movw	r24, r22
    54ce:	9c 8b       	std	Y+20, r25	; 0x14
    54d0:	8b 8b       	std	Y+19, r24	; 0x13
    54d2:	8b 89       	ldd	r24, Y+19	; 0x13
    54d4:	9c 89       	ldd	r25, Y+20	; 0x14
    54d6:	98 8b       	std	Y+16, r25	; 0x10
    54d8:	8f 87       	std	Y+15, r24	; 0x0f
    54da:	8f 85       	ldd	r24, Y+15	; 0x0f
    54dc:	98 89       	ldd	r25, Y+16	; 0x10
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	f1 f7       	brne	.-4      	; 0x54de <EEPROM_vInit+0x13a>
    54e2:	98 8b       	std	Y+16, r25	; 0x10
    54e4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(500);
    CLCD_ClearScreenFuncName();
    54e6:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
    // if No User Name --> Set New User Name
    USART_SendStringFuncName("Please Sign Up");
    USART_SendDataFuncName(0X0D);
#endif
    // Go To function To Set User_Name
    UserName_Set();
    54ea:	0e 94 22 2b 	call	0x5644	; 0x5644 <UserName_Set>
  }
  // And also for Password
  if (EEPROM_FunReadName(EEPROM_PassWordStatus) == NOTPRESSED)
    54ee:	81 e1       	ldi	r24, 0x11	; 17
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    54f6:	8f 3f       	cpi	r24, 0xFF	; 255
    54f8:	09 f0       	breq	.+2      	; 0x54fc <EEPROM_vInit+0x158>
    54fa:	7c c0       	rjmp	.+248    	; 0x55f4 <EEPROM_vInit+0x250>
  {
    // Go To function To Set PassWord
    PassWord_Set();
    54fc:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <PassWord_Set>
#if OUTPUT_SCREEN == CLCD_OUTPUT
    CLCD_ClearScreenFuncName();
    5500:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
    CLCD_SendStringFuncName("Saved Successfully");
    5504:	8f e6       	ldi	r24, 0x6F	; 111
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	af e2       	ldi	r26, 0x2F	; 47
    5512:	b4 e4       	ldi	r27, 0x44	; 68
    5514:	8b 87       	std	Y+11, r24	; 0x0b
    5516:	9c 87       	std	Y+12, r25	; 0x0c
    5518:	ad 87       	std	Y+13, r26	; 0x0d
    551a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    551c:	6b 85       	ldd	r22, Y+11	; 0x0b
    551e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5520:	8d 85       	ldd	r24, Y+13	; 0x0d
    5522:	9e 85       	ldd	r25, Y+14	; 0x0e
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	4a ef       	ldi	r20, 0xFA	; 250
    552a:	54 e4       	ldi	r21, 0x44	; 68
    552c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	8f 83       	std	Y+7, r24	; 0x07
    5536:	98 87       	std	Y+8, r25	; 0x08
    5538:	a9 87       	std	Y+9, r26	; 0x09
    553a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    553c:	6f 81       	ldd	r22, Y+7	; 0x07
    553e:	78 85       	ldd	r23, Y+8	; 0x08
    5540:	89 85       	ldd	r24, Y+9	; 0x09
    5542:	9a 85       	ldd	r25, Y+10	; 0x0a
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	40 e8       	ldi	r20, 0x80	; 128
    554a:	5f e3       	ldi	r21, 0x3F	; 63
    554c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5550:	88 23       	and	r24, r24
    5552:	2c f4       	brge	.+10     	; 0x555e <EEPROM_vInit+0x1ba>
		__ticks = 1;
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	9e 83       	std	Y+6, r25	; 0x06
    555a:	8d 83       	std	Y+5, r24	; 0x05
    555c:	3f c0       	rjmp	.+126    	; 0x55dc <EEPROM_vInit+0x238>
	else if (__tmp > 65535)
    555e:	6f 81       	ldd	r22, Y+7	; 0x07
    5560:	78 85       	ldd	r23, Y+8	; 0x08
    5562:	89 85       	ldd	r24, Y+9	; 0x09
    5564:	9a 85       	ldd	r25, Y+10	; 0x0a
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	3f ef       	ldi	r19, 0xFF	; 255
    556a:	4f e7       	ldi	r20, 0x7F	; 127
    556c:	57 e4       	ldi	r21, 0x47	; 71
    556e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5572:	18 16       	cp	r1, r24
    5574:	4c f5       	brge	.+82     	; 0x55c8 <EEPROM_vInit+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5576:	6b 85       	ldd	r22, Y+11	; 0x0b
    5578:	7c 85       	ldd	r23, Y+12	; 0x0c
    557a:	8d 85       	ldd	r24, Y+13	; 0x0d
    557c:	9e 85       	ldd	r25, Y+14	; 0x0e
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	40 e2       	ldi	r20, 0x20	; 32
    5584:	51 e4       	ldi	r21, 0x41	; 65
    5586:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	bc 01       	movw	r22, r24
    5590:	cd 01       	movw	r24, r26
    5592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5596:	dc 01       	movw	r26, r24
    5598:	cb 01       	movw	r24, r22
    559a:	9e 83       	std	Y+6, r25	; 0x06
    559c:	8d 83       	std	Y+5, r24	; 0x05
    559e:	0f c0       	rjmp	.+30     	; 0x55be <EEPROM_vInit+0x21a>
    55a0:	88 ec       	ldi	r24, 0xC8	; 200
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	9c 83       	std	Y+4, r25	; 0x04
    55a6:	8b 83       	std	Y+3, r24	; 0x03
    55a8:	8b 81       	ldd	r24, Y+3	; 0x03
    55aa:	9c 81       	ldd	r25, Y+4	; 0x04
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	f1 f7       	brne	.-4      	; 0x55ac <EEPROM_vInit+0x208>
    55b0:	9c 83       	std	Y+4, r25	; 0x04
    55b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55b4:	8d 81       	ldd	r24, Y+5	; 0x05
    55b6:	9e 81       	ldd	r25, Y+6	; 0x06
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	9e 83       	std	Y+6, r25	; 0x06
    55bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55be:	8d 81       	ldd	r24, Y+5	; 0x05
    55c0:	9e 81       	ldd	r25, Y+6	; 0x06
    55c2:	00 97       	sbiw	r24, 0x00	; 0
    55c4:	69 f7       	brne	.-38     	; 0x55a0 <EEPROM_vInit+0x1fc>
    55c6:	14 c0       	rjmp	.+40     	; 0x55f0 <EEPROM_vInit+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c8:	6f 81       	ldd	r22, Y+7	; 0x07
    55ca:	78 85       	ldd	r23, Y+8	; 0x08
    55cc:	89 85       	ldd	r24, Y+9	; 0x09
    55ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    55d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9e 83       	std	Y+6, r25	; 0x06
    55da:	8d 83       	std	Y+5, r24	; 0x05
    55dc:	8d 81       	ldd	r24, Y+5	; 0x05
    55de:	9e 81       	ldd	r25, Y+6	; 0x06
    55e0:	9a 83       	std	Y+2, r25	; 0x02
    55e2:	89 83       	std	Y+1, r24	; 0x01
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	9a 81       	ldd	r25, Y+2	; 0x02
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <EEPROM_vInit+0x244>
    55ec:	9a 83       	std	Y+2, r25	; 0x02
    55ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(700);
    CLCD_ClearScreenFuncName();
    55f0:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
    USART_SendDataFuncName(0X0D);
#endif
  }
  /*___________________________________________________________________________________________________________________*/
  // check if Tries is lost or not (when user close project and reopen it when he was in time out)
  if (Tries == 0)
    55f4:	80 91 76 04 	lds	r24, 0x0476
    55f8:	88 23       	and	r24, r24
    55fa:	11 f4       	brne	.+4      	; 0x5600 <EEPROM_vInit+0x25c>
  {
    Error_TimeOut();
    55fc:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <Error_TimeOut>
  }
  else
  {
  }
  u8 i;
  for (i = 0; i < UserName_Length; i++)
    5600:	1d 8e       	std	Y+29, r1	; 0x1d
    5602:	10 c0       	rjmp	.+32     	; 0x5624 <EEPROM_vInit+0x280>
  {
    UserName[i] = EEPROM_FunReadName(EEPROM_UserNameStartLocation + i);
    5604:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5606:	08 2f       	mov	r16, r24
    5608:	10 e0       	ldi	r17, 0x00	; 0
    560a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    560c:	88 2f       	mov	r24, r24
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	81 96       	adiw	r24, 0x21	; 33
    5612:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    5616:	f8 01       	movw	r30, r16
    5618:	e9 52       	subi	r30, 0x29	; 41
    561a:	fb 4f       	sbci	r31, 0xFB	; 251
    561c:	80 83       	st	Z, r24
  }
  else
  {
  }
  u8 i;
  for (i = 0; i < UserName_Length; i++)
    561e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5620:	8f 5f       	subi	r24, 0xFF	; 255
    5622:	8d 8f       	std	Y+29, r24	; 0x1d
    5624:	90 91 bb 04 	lds	r25, 0x04BB
    5628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    562a:	89 17       	cp	r24, r25
    562c:	58 f3       	brcs	.-42     	; 0x5604 <EEPROM_vInit+0x260>
  {
    UserName[i] = EEPROM_FunReadName(EEPROM_UserNameStartLocation + i);
  }
}
    562e:	6d 96       	adiw	r28, 0x1d	; 29
    5630:	0f b6       	in	r0, 0x3f	; 63
    5632:	f8 94       	cli
    5634:	de bf       	out	0x3e, r29	; 62
    5636:	0f be       	out	0x3f, r0	; 63
    5638:	cd bf       	out	0x3d, r28	; 61
    563a:	cf 91       	pop	r28
    563c:	df 91       	pop	r29
    563e:	1f 91       	pop	r17
    5640:	0f 91       	pop	r16
    5642:	08 95       	ret

00005644 <UserName_Set>:

//======================================================================================================================================//

void UserName_Set(void)
{
    5644:	0f 93       	push	r16
    5646:	1f 93       	push	r17
    5648:	df 93       	push	r29
    564a:	cf 93       	push	r28
    564c:	0f 92       	push	r0
    564e:	cd b7       	in	r28, 0x3d	; 61
    5650:	de b7       	in	r29, 0x3e	; 62
#if OUTPUT_SCREEN == CLCD_OUTPUT
  CLCD_ClearScreenFuncName();
    5652:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_SetPositionFuncName(1, 5);
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	65 e0       	ldi	r22, 0x05	; 5
    565a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendStringFuncName("Set UserName");
    565e:	82 e8       	ldi	r24, 0x82	; 130
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SetPositionFuncName(2, 1);
    5666:	82 e0       	ldi	r24, 0x02	; 2
    5668:	61 e0       	ldi	r22, 0x01	; 1
    566a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendStringFuncName("Maximum char : ");
    566e:	8f e8       	ldi	r24, 0x8F	; 143
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SendIntNumberFuncName(USERNAME_MAX_LENGTH);
    5676:	64 e1       	ldi	r22, 0x14	; 20
    5678:	70 e0       	ldi	r23, 0x00	; 0
    567a:	80 e0       	ldi	r24, 0x00	; 0
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
  CLCD_SendExtraCharFuncName(4, 15); // To Send Enter Symbol
    5682:	84 e0       	ldi	r24, 0x04	; 4
    5684:	6f e0       	ldi	r22, 0x0F	; 15
    5686:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
  CLCD_SetPositionFuncName(4, 16);
    568a:	84 e0       	ldi	r24, 0x04	; 4
    568c:	60 e1       	ldi	r22, 0x10	; 16
    568e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendStringFuncName(" : OK");
    5692:	8f e9       	ldi	r24, 0x9F	; 159
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  // To start the line where i write the user name
  CLCD_SetPositionFuncName(3, 1);
    569a:	83 e0       	ldi	r24, 0x03	; 3
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSORON);
    56a2:	8e e0       	ldi	r24, 0x0E	; 14
    56a4:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
  USART_SendDataFuncName ((USERNAME_MAX_LENGTH / 10) + 48);
  USART_SendDataFuncName ((USERNAME_MAX_LENGTH % 10) + 48);
  USART_SendDataFuncName(0X0D);
#endif

  UserName_Length = 0;
    56a8:	10 92 bb 04 	sts	0x04BB, r1
  /*Get username from user*/
  // do while with check to make user enter user name length more than 5 char
  do
  {
    // if username is less than 5 char and User Write any thing
    if (UserName_Length != 0)
    56ac:	80 91 bb 04 	lds	r24, 0x04BB
    56b0:	88 23       	and	r24, r24
    56b2:	09 f4       	brne	.+2      	; 0x56b6 <UserName_Set+0x72>
    56b4:	5d c0       	rjmp	.+186    	; 0x5770 <UserName_Set+0x12c>
    {
#if OUTPUT_SCREEN == CLCD_OUTPUT
      CLCD_ClearScreenFuncName();
    56b6:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SendStringFuncName("UserName Must be");
    56ba:	85 ea       	ldi	r24, 0xA5	; 165
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    56c2:	82 e0       	ldi	r24, 0x02	; 2
    56c4:	61 e0       	ldi	r22, 0x01	; 1
    56c6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("More than ");
    56ca:	86 eb       	ldi	r24, 0xB6	; 182
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendDataFuncName((USERNAME_MIN_LENGTH - 1) + 48);
    56d2:	87 e3       	ldi	r24, 0x37	; 55
    56d4:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
      CLCD_SendStringFuncName(" Char");
    56d8:	81 ec       	ldi	r24, 0xC1	; 193
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendExtraCharFuncName(4, 1);
    56e0:	84 e0       	ldi	r24, 0x04	; 4
    56e2:	61 e0       	ldi	r22, 0x01	; 1
    56e4:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
      CLCD_SetPositionFuncName(4, 2);
    56e8:	84 e0       	ldi	r24, 0x04	; 4
    56ea:	62 e0       	ldi	r22, 0x02	; 2
    56ec:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName(" : Exit");
    56f0:	87 ec       	ldi	r24, 0xC7	; 199
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
            break;
          }
        }
#elif INPUT_DATA == TERMINAL_INPUT
        // wait in error page until press enter
        Error_State = USART_RecieveDataFuncName(&KPD_Press);
    56f8:	86 ed       	ldi	r24, 0xD6	; 214
    56fa:	94 e0       	ldi	r25, 0x04	; 4
    56fc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5700:	80 93 79 04 	sts	0x0479, r24
        if (Error_State == OK)
    5704:	80 91 79 04 	lds	r24, 0x0479
    5708:	88 23       	and	r24, r24
    570a:	b1 f7       	brne	.-20     	; 0x56f8 <UserName_Set+0xb4>
        {
          if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    570c:	80 91 d6 04 	lds	r24, 0x04D6
    5710:	8d 30       	cpi	r24, 0x0D	; 13
    5712:	21 f0       	breq	.+8      	; 0x571c <UserName_Set+0xd8>
    5714:	80 91 d6 04 	lds	r24, 0x04D6
    5718:	8f 30       	cpi	r24, 0x0F	; 15
    571a:	71 f7       	brne	.-36     	; 0x56f8 <UserName_Set+0xb4>
            break;
          }
        }
#endif
      }
      CLCD_ClearScreenFuncName();
    571c:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SetPositionFuncName(1, 3);
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	63 e0       	ldi	r22, 0x03	; 3
    5724:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("Re Set UserName");
    5728:	8f ec       	ldi	r24, 0xCF	; 207
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    5730:	82 e0       	ldi	r24, 0x02	; 2
    5732:	61 e0       	ldi	r22, 0x01	; 1
    5734:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("Maximum char : ");
    5738:	8f e8       	ldi	r24, 0x8F	; 143
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendIntNumberFuncName(USERNAME_MAX_LENGTH);
    5740:	64 e1       	ldi	r22, 0x14	; 20
    5742:	70 e0       	ldi	r23, 0x00	; 0
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
      CLCD_SendExtraCharFuncName(4, 15); // To Send Enter Symbol
    574c:	84 e0       	ldi	r24, 0x04	; 4
    574e:	6f e0       	ldi	r22, 0x0F	; 15
    5750:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
      CLCD_SetPositionFuncName(4, 16);
    5754:	84 e0       	ldi	r24, 0x04	; 4
    5756:	60 e1       	ldi	r22, 0x10	; 16
    5758:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName(" : OK");
    575c:	8f e9       	ldi	r24, 0x9F	; 159
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(3, 1);
    5764:	83 e0       	ldi	r24, 0x03	; 3
    5766:	61 e0       	ldi	r22, 0x01	; 1
    5768:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      USART_SendStringFuncName(" Char");
      USART_SendDataFuncName(0X0D);
      USART_SendStringFuncName("Re Enter UserName");
      USART_SendDataFuncName(0X0D);
#endif
      UserName_Length = 0;
    576c:	10 92 bb 04 	sts	0x04BB, r1
      else
      {
      }
#elif INPUT_DATA == TERMINAL_INPUT
      // get input from Laptop
      Error_State = USART_RecieveDataFuncName(&KPD_Press);
    5770:	86 ed       	ldi	r24, 0xD6	; 214
    5772:	94 e0       	ldi	r25, 0x04	; 4
    5774:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5778:	80 93 79 04 	sts	0x0479, r24
      // if user name length is valid
      // To prevent user from delete or make any thing else writing if username less is still zero and that mean user didnt write any thing
      if (Error_State == OK && UserName_Length == 0)
    577c:	80 91 79 04 	lds	r24, 0x0479
    5780:	88 23       	and	r24, r24
    5782:	21 f5       	brne	.+72     	; 0x57cc <UserName_Set+0x188>
    5784:	80 91 bb 04 	lds	r24, 0x04BB
    5788:	88 23       	and	r24, r24
    578a:	01 f5       	brne	.+64     	; 0x57cc <UserName_Set+0x188>
      {
        // if user press enter
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    578c:	80 91 d6 04 	lds	r24, 0x04D6
    5790:	8d 30       	cpi	r24, 0x0D	; 13
    5792:	71 f3       	breq	.-36     	; 0x5770 <UserName_Set+0x12c>
    5794:	80 91 d6 04 	lds	r24, 0x04D6
    5798:	8f 30       	cpi	r24, 0x0F	; 15
    579a:	51 f3       	breq	.-44     	; 0x5770 <UserName_Set+0x12c>
        {
        }
        // if user press back space
        else if (KPD_Press == 0x08)
    579c:	80 91 d6 04 	lds	r24, 0x04D6
    57a0:	88 30       	cpi	r24, 0x08	; 8
    57a2:	31 f3       	breq	.-52     	; 0x5770 <UserName_Set+0x12c>
        {
        }
        else
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendDataFuncName(KPD_Press);
    57a4:	80 91 d6 04 	lds	r24, 0x04D6
    57a8:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
          EEPROM_FunWriteName(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    57ac:	80 91 bb 04 	lds	r24, 0x04BB
    57b0:	88 2f       	mov	r24, r24
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	81 96       	adiw	r24, 0x21	; 33
    57b6:	20 91 d6 04 	lds	r18, 0x04D6
    57ba:	62 2f       	mov	r22, r18
    57bc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
          UserName_Length++;
    57c0:	80 91 bb 04 	lds	r24, 0x04BB
    57c4:	8f 5f       	subi	r24, 0xFF	; 255
    57c6:	80 93 bb 04 	sts	0x04BB, r24
    57ca:	d2 cf       	rjmp	.-92     	; 0x5770 <UserName_Set+0x12c>
        }
      }
      // if UserName length is less than 20 user can write and enter and do any thing
      else if (Error_State == OK && UserName_Length < USERNAME_MAX_LENGTH)
    57cc:	80 91 79 04 	lds	r24, 0x0479
    57d0:	88 23       	and	r24, r24
    57d2:	81 f5       	brne	.+96     	; 0x5834 <UserName_Set+0x1f0>
    57d4:	80 91 bb 04 	lds	r24, 0x04BB
    57d8:	84 31       	cpi	r24, 0x14	; 20
    57da:	60 f5       	brcc	.+88     	; 0x5834 <UserName_Set+0x1f0>
      {
        // if user press enter
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    57dc:	80 91 d6 04 	lds	r24, 0x04D6
    57e0:	8d 30       	cpi	r24, 0x0D	; 13
    57e2:	21 f0       	breq	.+8      	; 0x57ec <UserName_Set+0x1a8>
    57e4:	80 91 d6 04 	lds	r24, 0x04D6
    57e8:	8f 30       	cpi	r24, 0x0F	; 15
    57ea:	21 f4       	brne	.+8      	; 0x57f4 <UserName_Set+0x1b0>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    57ec:	8c e0       	ldi	r24, 0x0C	; 12
    57ee:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    57f2:	43 c0       	rjmp	.+134    	; 0x587a <UserName_Set+0x236>
#endif
          break;
        }
        // if user press back space
        else if (KPD_Press == 0x08)
    57f4:	80 91 d6 04 	lds	r24, 0x04D6
    57f8:	88 30       	cpi	r24, 0x08	; 8
    57fa:	41 f4       	brne	.+16     	; 0x580c <UserName_Set+0x1c8>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          Clear_Char();
    57fc:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
          UserName_Length--;
    5800:	80 91 bb 04 	lds	r24, 0x04BB
    5804:	81 50       	subi	r24, 0x01	; 1
    5806:	80 93 bb 04 	sts	0x04BB, r24
    580a:	b2 cf       	rjmp	.-156    	; 0x5770 <UserName_Set+0x12c>
        }
        else
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendDataFuncName(KPD_Press);
    580c:	80 91 d6 04 	lds	r24, 0x04D6
    5810:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
          EEPROM_FunWriteName(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    5814:	80 91 bb 04 	lds	r24, 0x04BB
    5818:	88 2f       	mov	r24, r24
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	81 96       	adiw	r24, 0x21	; 33
    581e:	20 91 d6 04 	lds	r18, 0x04D6
    5822:	62 2f       	mov	r22, r18
    5824:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
          UserName_Length++;
    5828:	80 91 bb 04 	lds	r24, 0x04BB
    582c:	8f 5f       	subi	r24, 0xFF	; 255
    582e:	80 93 bb 04 	sts	0x04BB, r24
    5832:	9e cf       	rjmp	.-196    	; 0x5770 <UserName_Set+0x12c>
        }
      }
      // if user name length is more than 20 do no thing exept enter and delete
      else if (Error_State == OK && UserName_Length >= USERNAME_MAX_LENGTH)
    5834:	80 91 79 04 	lds	r24, 0x0479
    5838:	88 23       	and	r24, r24
    583a:	09 f0       	breq	.+2      	; 0x583e <UserName_Set+0x1fa>
    583c:	99 cf       	rjmp	.-206    	; 0x5770 <UserName_Set+0x12c>
    583e:	80 91 bb 04 	lds	r24, 0x04BB
    5842:	84 31       	cpi	r24, 0x14	; 20
    5844:	08 f4       	brcc	.+2      	; 0x5848 <UserName_Set+0x204>
    5846:	94 cf       	rjmp	.-216    	; 0x5770 <UserName_Set+0x12c>
      {
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5848:	80 91 d6 04 	lds	r24, 0x04D6
    584c:	8d 30       	cpi	r24, 0x0D	; 13
    584e:	21 f0       	breq	.+8      	; 0x5858 <UserName_Set+0x214>
    5850:	80 91 d6 04 	lds	r24, 0x04D6
    5854:	8f 30       	cpi	r24, 0x0F	; 15
    5856:	21 f4       	brne	.+8      	; 0x5860 <UserName_Set+0x21c>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5858:	8c e0       	ldi	r24, 0x0C	; 12
    585a:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    585e:	0d c0       	rjmp	.+26     	; 0x587a <UserName_Set+0x236>
#endif
          break;
        }
        else if (KPD_Press == 0x08)
    5860:	80 91 d6 04 	lds	r24, 0x04D6
    5864:	88 30       	cpi	r24, 0x08	; 8
    5866:	09 f0       	breq	.+2      	; 0x586a <UserName_Set+0x226>
    5868:	83 cf       	rjmp	.-250    	; 0x5770 <UserName_Set+0x12c>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          Clear_Char();
    586a:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
          UserName_Length--;
    586e:	80 91 bb 04 	lds	r24, 0x04BB
    5872:	81 50       	subi	r24, 0x01	; 1
    5874:	80 93 bb 04 	sts	0x04BB, r24
    5878:	7b cf       	rjmp	.-266    	; 0x5770 <UserName_Set+0x12c>
      else
      {
      }
#endif
    }
  } while (UserName_Length < USERNAME_MIN_LENGTH); // didn't went out untill user enter more than 5 char
    587a:	80 91 bb 04 	lds	r24, 0x04BB
    587e:	88 30       	cpi	r24, 0x08	; 8
    5880:	08 f4       	brcc	.+2      	; 0x5884 <UserName_Set+0x240>
    5882:	14 cf       	rjmp	.-472    	; 0x56ac <UserName_Set+0x68>
  /*___________________________________________________________________________________________________________________*/

  // To write User Name length in EEPROM to dont lose it in the future and i want it in checking
  EEPROM_FunWriteName(EEPROM_UserNameStatus, 0x00);
    5884:	80 e1       	ldi	r24, 0x10	; 16
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	60 e0       	ldi	r22, 0x00	; 0
    588a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
  EEPROM_FunWriteName(EEPROM_USNL_Location, UserName_Length);
    588e:	20 91 bb 04 	lds	r18, 0x04BB
    5892:	83 e1       	ldi	r24, 0x13	; 19
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	62 2f       	mov	r22, r18
    5898:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
  for (u8 i = 0; i < UserName_Length; i++)
    589c:	19 82       	std	Y+1, r1	; 0x01
    589e:	10 c0       	rjmp	.+32     	; 0x58c0 <UserName_Set+0x27c>
  {
    UserName[i] = EEPROM_FunReadName(EEPROM_UserNameStartLocation + i);
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	08 2f       	mov	r16, r24
    58a4:	10 e0       	ldi	r17, 0x00	; 0
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	88 2f       	mov	r24, r24
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	81 96       	adiw	r24, 0x21	; 33
    58ae:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    58b2:	f8 01       	movw	r30, r16
    58b4:	e9 52       	subi	r30, 0x29	; 41
    58b6:	fb 4f       	sbci	r31, 0xFB	; 251
    58b8:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  // To write User Name length in EEPROM to dont lose it in the future and i want it in checking
  EEPROM_FunWriteName(EEPROM_UserNameStatus, 0x00);
  EEPROM_FunWriteName(EEPROM_USNL_Location, UserName_Length);
  for (u8 i = 0; i < UserName_Length; i++)
    58ba:	89 81       	ldd	r24, Y+1	; 0x01
    58bc:	8f 5f       	subi	r24, 0xFF	; 255
    58be:	89 83       	std	Y+1, r24	; 0x01
    58c0:	90 91 bb 04 	lds	r25, 0x04BB
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
    58c6:	89 17       	cp	r24, r25
    58c8:	58 f3       	brcs	.-42     	; 0x58a0 <UserName_Set+0x25c>
  {
    UserName[i] = EEPROM_FunReadName(EEPROM_UserNameStartLocation + i);
  }
  UserName[UserName_Length] = '\0';
    58ca:	80 91 bb 04 	lds	r24, 0x04BB
    58ce:	88 2f       	mov	r24, r24
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	fc 01       	movw	r30, r24
    58d4:	e9 52       	subi	r30, 0x29	; 41
    58d6:	fb 4f       	sbci	r31, 0xFB	; 251
    58d8:	10 82       	st	Z, r1
}
    58da:	0f 90       	pop	r0
    58dc:	cf 91       	pop	r28
    58de:	df 91       	pop	r29
    58e0:	1f 91       	pop	r17
    58e2:	0f 91       	pop	r16
    58e4:	08 95       	ret

000058e6 <PassWord_Set>:

//======================================================================================================================================//

void PassWord_Set(void)
{
    58e6:	df 93       	push	r29
    58e8:	cf 93       	push	r28
    58ea:	cd b7       	in	r28, 0x3d	; 61
    58ec:	de b7       	in	r29, 0x3e	; 62
  // Function to get password from user like UserName Set Function
#if OUTPUT_SCREEN == CLCD_OUTPUT
  CLCD_ClearScreenFuncName();
    58ee:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_SendStringFuncName("Set PassWord");
    58f2:	8f ed       	ldi	r24, 0xDF	; 223
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SetPositionFuncName(2, 1);
    58fa:	82 e0       	ldi	r24, 0x02	; 2
    58fc:	61 e0       	ldi	r22, 0x01	; 1
    58fe:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendStringFuncName("Maximum char : ");
    5902:	8f e8       	ldi	r24, 0x8F	; 143
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SendIntNumberFuncName(PASSWORD_MAX_LENGTH);
    590a:	6f e0       	ldi	r22, 0x0F	; 15
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
  CLCD_SendExtraCharFuncName(4, 15); // To Send Enter Symbol
    5916:	84 e0       	ldi	r24, 0x04	; 4
    5918:	6f e0       	ldi	r22, 0x0F	; 15
    591a:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
  CLCD_SetPositionFuncName(4, 16);
    591e:	84 e0       	ldi	r24, 0x04	; 4
    5920:	60 e1       	ldi	r22, 0x10	; 16
    5922:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendStringFuncName(" : OK");
    5926:	8f e9       	ldi	r24, 0x9F	; 159
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SetPositionFuncName(3, 1);
    592e:	83 e0       	ldi	r24, 0x03	; 3
    5930:	61 e0       	ldi	r22, 0x01	; 1
    5932:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  USART_SendDataFuncName ((PASSWORD_MAX_LENGTH / 10) + 48);
  USART_SendDataFuncName ((PASSWORD_MAX_LENGTH % 10) + 48);
  USART_SendDataFuncName(0X0D);
#endif

  PassWord_Length = 0;
    5936:	10 92 bc 04 	sts	0x04BC, r1
  /*Get username from user*/
  do
  {
    // if username is less than 5 char
    if (PassWord_Length != 0)
    593a:	80 91 bc 04 	lds	r24, 0x04BC
    593e:	88 23       	and	r24, r24
    5940:	09 f4       	brne	.+2      	; 0x5944 <PassWord_Set+0x5e>
    5942:	5d c0       	rjmp	.+186    	; 0x59fe <PassWord_Set+0x118>
    {
#if OUTPUT_SCREEN == CLCD_OUTPUT
      CLCD_ClearScreenFuncName();
    5944:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SendStringFuncName("PassWord Must be");
    5948:	8c ee       	ldi	r24, 0xEC	; 236
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    5950:	82 e0       	ldi	r24, 0x02	; 2
    5952:	61 e0       	ldi	r22, 0x01	; 1
    5954:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("More than ");
    5958:	86 eb       	ldi	r24, 0xB6	; 182
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendDataFuncName((PASSWORD_MIN_LENGTH - 1) + 48);
    5960:	84 e3       	ldi	r24, 0x34	; 52
    5962:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
      CLCD_SendStringFuncName(" Char");
    5966:	81 ec       	ldi	r24, 0xC1	; 193
    5968:	90 e0       	ldi	r25, 0x00	; 0
    596a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendExtraCharFuncName(4, 1);
    596e:	84 e0       	ldi	r24, 0x04	; 4
    5970:	61 e0       	ldi	r22, 0x01	; 1
    5972:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
      CLCD_SetPositionFuncName(4, 2);
    5976:	84 e0       	ldi	r24, 0x04	; 4
    5978:	62 e0       	ldi	r22, 0x02	; 2
    597a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName(" : Exit");
    597e:	87 ec       	ldi	r24, 0xC7	; 199
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
            break;
          }
        }
#elif INPUT_DATA == TERMINAL_INPUT
        // wait in error page until press enter
        Error_State = USART_RecieveDataFuncName(&KPD_Press);
    5986:	86 ed       	ldi	r24, 0xD6	; 214
    5988:	94 e0       	ldi	r25, 0x04	; 4
    598a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    598e:	80 93 79 04 	sts	0x0479, r24
        if (Error_State == OK)
    5992:	80 91 79 04 	lds	r24, 0x0479
    5996:	88 23       	and	r24, r24
    5998:	b1 f7       	brne	.-20     	; 0x5986 <PassWord_Set+0xa0>
        {
          if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    599a:	80 91 d6 04 	lds	r24, 0x04D6
    599e:	8d 30       	cpi	r24, 0x0D	; 13
    59a0:	21 f0       	breq	.+8      	; 0x59aa <PassWord_Set+0xc4>
    59a2:	80 91 d6 04 	lds	r24, 0x04D6
    59a6:	8f 30       	cpi	r24, 0x0F	; 15
    59a8:	71 f7       	brne	.-36     	; 0x5986 <PassWord_Set+0xa0>
            break;
          }
        }
#endif
      }
      CLCD_ClearScreenFuncName();
    59aa:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SetPositionFuncName(1, 5);
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	65 e0       	ldi	r22, 0x05	; 5
    59b2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("Set PassWord");
    59b6:	8f ed       	ldi	r24, 0xDF	; 223
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    59be:	82 e0       	ldi	r24, 0x02	; 2
    59c0:	61 e0       	ldi	r22, 0x01	; 1
    59c2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("Maximum char : ");
    59c6:	8f e8       	ldi	r24, 0x8F	; 143
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SendIntNumberFuncName(PASSWORD_MAX_LENGTH);
    59ce:	6f e0       	ldi	r22, 0x0F	; 15
    59d0:	70 e0       	ldi	r23, 0x00	; 0
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CLCD_vSendIntNumber>
      CLCD_SendExtraCharFuncName(4, 15); // To Send Enter Symbol
    59da:	84 e0       	ldi	r24, 0x04	; 4
    59dc:	6f e0       	ldi	r22, 0x0F	; 15
    59de:	0e 94 90 28 	call	0x5120	; 0x5120 <CLCD_vSendExtraChar>
      CLCD_SetPositionFuncName(4, 16);
    59e2:	84 e0       	ldi	r24, 0x04	; 4
    59e4:	60 e1       	ldi	r22, 0x10	; 16
    59e6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName(" : OK");
    59ea:	8f e9       	ldi	r24, 0x9F	; 159
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(3, 1);
    59f2:	83 e0       	ldi	r24, 0x03	; 3
    59f4:	61 e0       	ldi	r22, 0x01	; 1
    59f6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      USART_SendStringFuncName("Maximum char : ");
      USART_SendDataFuncName ((PASSWORD_MAX_LENGTH / 10) + 48);
      USART_SendDataFuncName ((PASSWORD_MAX_LENGTH % 10) + 48);
      USART_SendDataFuncName(0X0D);
#endif
      PassWord_Length = 0;
    59fa:	10 92 bc 04 	sts	0x04BC, r1
    }
#if OUTPUT_SCREEN == CLCD_OUTPUT
    CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSORON);
    59fe:	8e e0       	ldi	r24, 0x0E	; 14
    5a00:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
      else
      {
      }
#elif INPUT_DATA == TERMINAL_INPUT
      // get input from Laptop
      Error_State = USART_RecieveDataFuncName(&KPD_Press);
    5a04:	86 ed       	ldi	r24, 0xD6	; 214
    5a06:	94 e0       	ldi	r25, 0x04	; 4
    5a08:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5a0c:	80 93 79 04 	sts	0x0479, r24
      // if user name length is valid
      // To prevent user from delete or make any thing else writing if username less is still zero and that mean user didnt write any thing
      if (Error_State == OK && PassWord_Length == 0)
    5a10:	80 91 79 04 	lds	r24, 0x0479
    5a14:	88 23       	and	r24, r24
    5a16:	29 f5       	brne	.+74     	; 0x5a62 <PassWord_Set+0x17c>
    5a18:	80 91 bc 04 	lds	r24, 0x04BC
    5a1c:	88 23       	and	r24, r24
    5a1e:	09 f5       	brne	.+66     	; 0x5a62 <PassWord_Set+0x17c>
      {
        // if user press enter
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5a20:	80 91 d6 04 	lds	r24, 0x04D6
    5a24:	8d 30       	cpi	r24, 0x0D	; 13
    5a26:	71 f3       	breq	.-36     	; 0x5a04 <PassWord_Set+0x11e>
    5a28:	80 91 d6 04 	lds	r24, 0x04D6
    5a2c:	8f 30       	cpi	r24, 0x0F	; 15
    5a2e:	51 f3       	breq	.-44     	; 0x5a04 <PassWord_Set+0x11e>
        {
        }
        // if user press back space
        else if (KPD_Press == 0x08)
    5a30:	80 91 d6 04 	lds	r24, 0x04D6
    5a34:	88 30       	cpi	r24, 0x08	; 8
    5a36:	31 f3       	breq	.-52     	; 0x5a04 <PassWord_Set+0x11e>
        {
        }
        else
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendDataFuncName(KPD_Press);
    5a38:	80 91 d6 04 	lds	r24, 0x04D6
    5a3c:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
          EEPROM_FunWriteName(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    5a40:	80 91 bc 04 	lds	r24, 0x04BC
    5a44:	88 2f       	mov	r24, r24
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	8f 5b       	subi	r24, 0xBF	; 191
    5a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4c:	20 91 d6 04 	lds	r18, 0x04D6
    5a50:	62 2f       	mov	r22, r18
    5a52:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
          PassWord_Length++;
    5a56:	80 91 bc 04 	lds	r24, 0x04BC
    5a5a:	8f 5f       	subi	r24, 0xFF	; 255
    5a5c:	80 93 bc 04 	sts	0x04BC, r24
    5a60:	d1 cf       	rjmp	.-94     	; 0x5a04 <PassWord_Set+0x11e>
        }
      }
      // if UserName length is less than 20 user can write and enter and do any thing
      else if (Error_State == OK && PassWord_Length < PASSWORD_MAX_LENGTH)
    5a62:	80 91 79 04 	lds	r24, 0x0479
    5a66:	88 23       	and	r24, r24
    5a68:	89 f5       	brne	.+98     	; 0x5acc <PassWord_Set+0x1e6>
    5a6a:	80 91 bc 04 	lds	r24, 0x04BC
    5a6e:	8f 30       	cpi	r24, 0x0F	; 15
    5a70:	68 f5       	brcc	.+90     	; 0x5acc <PassWord_Set+0x1e6>
      {
        // if user press enter
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5a72:	80 91 d6 04 	lds	r24, 0x04D6
    5a76:	8d 30       	cpi	r24, 0x0D	; 13
    5a78:	21 f0       	breq	.+8      	; 0x5a82 <PassWord_Set+0x19c>
    5a7a:	80 91 d6 04 	lds	r24, 0x04D6
    5a7e:	8f 30       	cpi	r24, 0x0F	; 15
    5a80:	21 f4       	brne	.+8      	; 0x5a8a <PassWord_Set+0x1a4>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5a82:	8c e0       	ldi	r24, 0x0C	; 12
    5a84:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5a88:	44 c0       	rjmp	.+136    	; 0x5b12 <PassWord_Set+0x22c>
#endif
          break;
        }
        // if user press back space
        else if (KPD_Press == 0x08)
    5a8a:	80 91 d6 04 	lds	r24, 0x04D6
    5a8e:	88 30       	cpi	r24, 0x08	; 8
    5a90:	41 f4       	brne	.+16     	; 0x5aa2 <PassWord_Set+0x1bc>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          Clear_Char();
    5a92:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
          PassWord_Length--;
    5a96:	80 91 bc 04 	lds	r24, 0x04BC
    5a9a:	81 50       	subi	r24, 0x01	; 1
    5a9c:	80 93 bc 04 	sts	0x04BC, r24
    5aa0:	b1 cf       	rjmp	.-158    	; 0x5a04 <PassWord_Set+0x11e>
        }
        // if user enter valid data
        else
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendDataFuncName(KPD_Press);
    5aa2:	80 91 d6 04 	lds	r24, 0x04D6
    5aa6:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
          EEPROM_FunWriteName(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    5aaa:	80 91 bc 04 	lds	r24, 0x04BC
    5aae:	88 2f       	mov	r24, r24
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	8f 5b       	subi	r24, 0xBF	; 191
    5ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab6:	20 91 d6 04 	lds	r18, 0x04D6
    5aba:	62 2f       	mov	r22, r18
    5abc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
          PassWord_Length++;
    5ac0:	80 91 bc 04 	lds	r24, 0x04BC
    5ac4:	8f 5f       	subi	r24, 0xFF	; 255
    5ac6:	80 93 bc 04 	sts	0x04BC, r24
    5aca:	9c cf       	rjmp	.-200    	; 0x5a04 <PassWord_Set+0x11e>
        }
      }
      // if user name length is more than 20 do no thing exept enter and delete
      else if (Error_State == OK && PassWord_Length >= PASSWORD_MAX_LENGTH)
    5acc:	80 91 79 04 	lds	r24, 0x0479
    5ad0:	88 23       	and	r24, r24
    5ad2:	09 f0       	breq	.+2      	; 0x5ad6 <PassWord_Set+0x1f0>
    5ad4:	97 cf       	rjmp	.-210    	; 0x5a04 <PassWord_Set+0x11e>
    5ad6:	80 91 bc 04 	lds	r24, 0x04BC
    5ada:	8f 30       	cpi	r24, 0x0F	; 15
    5adc:	08 f4       	brcc	.+2      	; 0x5ae0 <PassWord_Set+0x1fa>
    5ade:	92 cf       	rjmp	.-220    	; 0x5a04 <PassWord_Set+0x11e>
      {
        // if user press enter
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5ae0:	80 91 d6 04 	lds	r24, 0x04D6
    5ae4:	8d 30       	cpi	r24, 0x0D	; 13
    5ae6:	21 f0       	breq	.+8      	; 0x5af0 <PassWord_Set+0x20a>
    5ae8:	80 91 d6 04 	lds	r24, 0x04D6
    5aec:	8f 30       	cpi	r24, 0x0F	; 15
    5aee:	21 f4       	brne	.+8      	; 0x5af8 <PassWord_Set+0x212>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5af0:	8c e0       	ldi	r24, 0x0C	; 12
    5af2:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5af6:	0d c0       	rjmp	.+26     	; 0x5b12 <PassWord_Set+0x22c>
#endif
          break;
        }
        // if user press back space
        else if (KPD_Press == 0x08)
    5af8:	80 91 d6 04 	lds	r24, 0x04D6
    5afc:	88 30       	cpi	r24, 0x08	; 8
    5afe:	09 f0       	breq	.+2      	; 0x5b02 <PassWord_Set+0x21c>
    5b00:	81 cf       	rjmp	.-254    	; 0x5a04 <PassWord_Set+0x11e>
        {
#if OUTPUT_SCREEN == CLCD_OUTPUT
          Clear_Char();
    5b02:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
          PassWord_Length--;
    5b06:	80 91 bc 04 	lds	r24, 0x04BC
    5b0a:	81 50       	subi	r24, 0x01	; 1
    5b0c:	80 93 bc 04 	sts	0x04BC, r24
    5b10:	79 cf       	rjmp	.-270    	; 0x5a04 <PassWord_Set+0x11e>
      else
      {
      }
#endif
    }
  } while (PassWord_Length < PASSWORD_MIN_LENGTH);
    5b12:	80 91 bc 04 	lds	r24, 0x04BC
    5b16:	85 30       	cpi	r24, 0x05	; 5
    5b18:	08 f4       	brcc	.+2      	; 0x5b1c <PassWord_Set+0x236>
    5b1a:	0f cf       	rjmp	.-482    	; 0x593a <PassWord_Set+0x54>
  /*___________________________________________________________________________________________________________________*/

  // To write passWord length in EEPROM to dont lose it in the future and i want it in checking
  EEPROM_FunWriteName(EEPROM_PassWordStatus, 0x00);
    5b1c:	81 e1       	ldi	r24, 0x11	; 17
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	60 e0       	ldi	r22, 0x00	; 0
    5b22:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
  EEPROM_FunWriteName(EEPROM_PWL_Location, PassWord_Length);
    5b26:	20 91 bc 04 	lds	r18, 0x04BC
    5b2a:	84 e1       	ldi	r24, 0x14	; 20
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	62 2f       	mov	r22, r18
    5b30:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
}
    5b34:	cf 91       	pop	r28
    5b36:	df 91       	pop	r29
    5b38:	08 95       	ret

00005b3a <UserName_Check>:

//======================================================================================================================================//

// check if user name is true or not
void UserName_Check(void)
{
    5b3a:	1f 93       	push	r17
    5b3c:	df 93       	push	r29
    5b3e:	cf 93       	push	r28
    5b40:	00 d0       	rcall	.+0      	; 0x5b42 <UserName_Check+0x8>
    5b42:	cd b7       	in	r28, 0x3d	; 61
    5b44:	de b7       	in	r29, 0x3e	; 62
#if OUTPUT_SCREEN == CLCD_OUTPUT
  CLCD_ClearScreenFuncName();
    5b46:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_SendStringFuncName("Check UserName");
    5b4a:	8d ef       	ldi	r24, 0xFD	; 253
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SetPositionFuncName(2, 1);
    5b52:	82 e0       	ldi	r24, 0x02	; 2
    5b54:	61 e0       	ldi	r22, 0x01	; 1
    5b56:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSORON);
    5b5a:	8e e0       	ldi	r24, 0x0E	; 14
    5b5c:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
#elif OUTPUT_SCREEN == TERMINAL_OUTPUT
  USART_SendStringFuncName("Check UserName");
  USART_SendDataFuncName(0X0D);
#endif
  u8 CheckLength = 0;
    5b60:	1a 82       	std	Y+2, r1	; 0x02
  UserName_Check_Flag = 1;
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	80 93 77 04 	sts	0x0477, r24
    }
    else
    {
    }
#elif INPUT_DATA == TERMINAL_INPUT
    Error_State = USART_RecieveDataFuncName(&KPD_Press);
    5b68:	86 ed       	ldi	r24, 0xD6	; 214
    5b6a:	94 e0       	ldi	r25, 0x04	; 4
    5b6c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5b70:	80 93 79 04 	sts	0x0479, r24
    // if user name length is valid
    if (Error_State == OK && CheckLength == 0)
    5b74:	80 91 79 04 	lds	r24, 0x0479
    5b78:	88 23       	and	r24, r24
    5b7a:	01 f5       	brne	.+64     	; 0x5bbc <UserName_Check+0x82>
    5b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7e:	88 23       	and	r24, r24
    5b80:	e9 f4       	brne	.+58     	; 0x5bbc <UserName_Check+0x82>
    {
      // if user press enter
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5b82:	80 91 d6 04 	lds	r24, 0x04D6
    5b86:	8d 30       	cpi	r24, 0x0D	; 13
    5b88:	79 f3       	breq	.-34     	; 0x5b68 <UserName_Check+0x2e>
    5b8a:	80 91 d6 04 	lds	r24, 0x04D6
    5b8e:	8f 30       	cpi	r24, 0x0F	; 15
    5b90:	59 f3       	breq	.-42     	; 0x5b68 <UserName_Check+0x2e>
      {
      }
      // if user press back space
      else if (KPD_Press == 0x08)
    5b92:	80 91 d6 04 	lds	r24, 0x04D6
    5b96:	88 30       	cpi	r24, 0x08	; 8
    5b98:	39 f3       	breq	.-50     	; 0x5b68 <UserName_Check+0x2e>
      }
      // if user enter valid data
      else
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendDataFuncName(KPD_Press);
    5b9a:	80 91 d6 04 	lds	r24, 0x04D6
    5b9e:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
        Check[CheckLength] = KPD_Press;
    5ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba4:	88 2f       	mov	r24, r24
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	20 91 d6 04 	lds	r18, 0x04D6
    5bac:	fc 01       	movw	r30, r24
    5bae:	ef 53       	subi	r30, 0x3F	; 63
    5bb0:	fb 4f       	sbci	r31, 0xFB	; 251
    5bb2:	20 83       	st	Z, r18
        CheckLength++;
    5bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb6:	8f 5f       	subi	r24, 0xFF	; 255
    5bb8:	8a 83       	std	Y+2, r24	; 0x02
    5bba:	d6 cf       	rjmp	.-84     	; 0x5b68 <UserName_Check+0x2e>
      }
    }
    else if (Error_State == OK && CheckLength < USERNAME_MAX_LENGTH)
    5bbc:	80 91 79 04 	lds	r24, 0x0479
    5bc0:	88 23       	and	r24, r24
    5bc2:	51 f5       	brne	.+84     	; 0x5c18 <UserName_Check+0xde>
    5bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc6:	84 31       	cpi	r24, 0x14	; 20
    5bc8:	38 f5       	brcc	.+78     	; 0x5c18 <UserName_Check+0xde>
    {
      // if user press enter
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5bca:	80 91 d6 04 	lds	r24, 0x04D6
    5bce:	8d 30       	cpi	r24, 0x0D	; 13
    5bd0:	21 f0       	breq	.+8      	; 0x5bda <UserName_Check+0xa0>
    5bd2:	80 91 d6 04 	lds	r24, 0x04D6
    5bd6:	8f 30       	cpi	r24, 0x0F	; 15
    5bd8:	21 f4       	brne	.+8      	; 0x5be2 <UserName_Check+0xa8>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5bda:	8c e0       	ldi	r24, 0x0C	; 12
    5bdc:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5be0:	3b c0       	rjmp	.+118    	; 0x5c58 <UserName_Check+0x11e>
#endif
        break;
      }
      // if user press back space
      else if (KPD_Press == 0x08)
    5be2:	80 91 d6 04 	lds	r24, 0x04D6
    5be6:	88 30       	cpi	r24, 0x08	; 8
    5be8:	31 f4       	brne	.+12     	; 0x5bf6 <UserName_Check+0xbc>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        Clear_Char();
    5bea:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
        CheckLength--;
    5bee:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf0:	81 50       	subi	r24, 0x01	; 1
    5bf2:	8a 83       	std	Y+2, r24	; 0x02
    5bf4:	b9 cf       	rjmp	.-142    	; 0x5b68 <UserName_Check+0x2e>
      }
      // if user enter valid data
      else
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendDataFuncName(KPD_Press);
    5bf6:	80 91 d6 04 	lds	r24, 0x04D6
    5bfa:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
        Check[CheckLength] = KPD_Press;
    5bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5c00:	88 2f       	mov	r24, r24
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	20 91 d6 04 	lds	r18, 0x04D6
    5c08:	fc 01       	movw	r30, r24
    5c0a:	ef 53       	subi	r30, 0x3F	; 63
    5c0c:	fb 4f       	sbci	r31, 0xFB	; 251
    5c0e:	20 83       	st	Z, r18
        CheckLength++;
    5c10:	8a 81       	ldd	r24, Y+2	; 0x02
    5c12:	8f 5f       	subi	r24, 0xFF	; 255
    5c14:	8a 83       	std	Y+2, r24	; 0x02
    5c16:	a8 cf       	rjmp	.-176    	; 0x5b68 <UserName_Check+0x2e>
      }
    }
    // if user name length is more than 20 do no thing exept enter and delete
    else if (Error_State == OK && CheckLength >= USERNAME_MAX_LENGTH)
    5c18:	80 91 79 04 	lds	r24, 0x0479
    5c1c:	88 23       	and	r24, r24
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <UserName_Check+0xe8>
    5c20:	a3 cf       	rjmp	.-186    	; 0x5b68 <UserName_Check+0x2e>
    5c22:	8a 81       	ldd	r24, Y+2	; 0x02
    5c24:	84 31       	cpi	r24, 0x14	; 20
    5c26:	08 f4       	brcc	.+2      	; 0x5c2a <UserName_Check+0xf0>
    5c28:	9f cf       	rjmp	.-194    	; 0x5b68 <UserName_Check+0x2e>
    {
      // if user press enter
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5c2a:	80 91 d6 04 	lds	r24, 0x04D6
    5c2e:	8d 30       	cpi	r24, 0x0D	; 13
    5c30:	21 f0       	breq	.+8      	; 0x5c3a <UserName_Check+0x100>
    5c32:	80 91 d6 04 	lds	r24, 0x04D6
    5c36:	8f 30       	cpi	r24, 0x0F	; 15
    5c38:	21 f4       	brne	.+8      	; 0x5c42 <UserName_Check+0x108>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5c3a:	8c e0       	ldi	r24, 0x0C	; 12
    5c3c:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5c40:	0b c0       	rjmp	.+22     	; 0x5c58 <UserName_Check+0x11e>
#endif
        break;
      }
      // if user press back space
      else if (KPD_Press == 0x08)
    5c42:	80 91 d6 04 	lds	r24, 0x04D6
    5c46:	88 30       	cpi	r24, 0x08	; 8
    5c48:	09 f0       	breq	.+2      	; 0x5c4c <UserName_Check+0x112>
    5c4a:	8e cf       	rjmp	.-228    	; 0x5b68 <UserName_Check+0x2e>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        Clear_Char();
    5c4c:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
        CheckLength--;
    5c50:	8a 81       	ldd	r24, Y+2	; 0x02
    5c52:	81 50       	subi	r24, 0x01	; 1
    5c54:	8a 83       	std	Y+2, r24	; 0x02
    5c56:	88 cf       	rjmp	.-240    	; 0x5b68 <UserName_Check+0x2e>
  }

  /*___________________________________________________________________________________________________________________*/

  // Check if UserName is correct or not
  if (CheckLength == UserName_Length)
    5c58:	90 91 bb 04 	lds	r25, 0x04BB
    5c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5e:	89 17       	cp	r24, r25
    5c60:	29 f5       	brne	.+74     	; 0x5cac <UserName_Check+0x172>
  {
    for (u8 i = 0; i <= PassWord_Length; i++)
    5c62:	19 82       	std	Y+1, r1	; 0x01
    5c64:	1d c0       	rjmp	.+58     	; 0x5ca0 <UserName_Check+0x166>
    {
      if (Check[i] == '\0')
    5c66:	89 81       	ldd	r24, Y+1	; 0x01
    5c68:	88 2f       	mov	r24, r24
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	fc 01       	movw	r30, r24
    5c6e:	ef 53       	subi	r30, 0x3F	; 63
    5c70:	fb 4f       	sbci	r31, 0xFB	; 251
    5c72:	80 81       	ld	r24, Z
    5c74:	88 23       	and	r24, r24
    5c76:	09 f1       	breq	.+66     	; 0x5cba <UserName_Check+0x180>
      {
        break;
      }
      else if (Check[i] != EEPROM_FunReadName(EEPROM_UserNameStartLocation + i))
    5c78:	89 81       	ldd	r24, Y+1	; 0x01
    5c7a:	88 2f       	mov	r24, r24
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	fc 01       	movw	r30, r24
    5c80:	ef 53       	subi	r30, 0x3F	; 63
    5c82:	fb 4f       	sbci	r31, 0xFB	; 251
    5c84:	10 81       	ld	r17, Z
    5c86:	89 81       	ldd	r24, Y+1	; 0x01
    5c88:	88 2f       	mov	r24, r24
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	81 96       	adiw	r24, 0x21	; 33
    5c8e:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    5c92:	18 17       	cp	r17, r24
    5c94:	11 f0       	breq	.+4      	; 0x5c9a <UserName_Check+0x160>
      {
        UserName_Check_Flag = 0; // if it false make this flag to zero
    5c96:	10 92 77 04 	sts	0x0477, r1
  /*___________________________________________________________________________________________________________________*/

  // Check if UserName is correct or not
  if (CheckLength == UserName_Length)
  {
    for (u8 i = 0; i <= PassWord_Length; i++)
    5c9a:	89 81       	ldd	r24, Y+1	; 0x01
    5c9c:	8f 5f       	subi	r24, 0xFF	; 255
    5c9e:	89 83       	std	Y+1, r24	; 0x01
    5ca0:	90 91 bc 04 	lds	r25, 0x04BC
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	98 17       	cp	r25, r24
    5ca8:	f0 f6       	brcc	.-68     	; 0x5c66 <UserName_Check+0x12c>
    5caa:	07 c0       	rjmp	.+14     	; 0x5cba <UserName_Check+0x180>
      else
      {
      }
    }
  }
  else if (CheckLength != UserName_Length)
    5cac:	90 91 bb 04 	lds	r25, 0x04BB
    5cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb2:	89 17       	cp	r24, r25
    5cb4:	11 f0       	breq	.+4      	; 0x5cba <UserName_Check+0x180>
  {
    UserName_Check_Flag = 0; // and if CheckLength is != username length make it false without checkin because it fale with out checking
    5cb6:	10 92 77 04 	sts	0x0477, r1
  }
  else
  {
  }
}
    5cba:	0f 90       	pop	r0
    5cbc:	0f 90       	pop	r0
    5cbe:	cf 91       	pop	r28
    5cc0:	df 91       	pop	r29
    5cc2:	1f 91       	pop	r17
    5cc4:	08 95       	ret

00005cc6 <PassWord_Check>:

//======================================================================================================================================//

void PassWord_Check(void)
{
    5cc6:	1f 93       	push	r17
    5cc8:	df 93       	push	r29
    5cca:	cf 93       	push	r28
    5ccc:	00 d0       	rcall	.+0      	; 0x5cce <PassWord_Check+0x8>
    5cce:	cd b7       	in	r28, 0x3d	; 61
    5cd0:	de b7       	in	r29, 0x3e	; 62
#if OUTPUT_SCREEN == CLCD_OUTPUT
  CLCD_ClearScreenFuncName();
    5cd2:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_SendStringFuncName("Check PassWord");
    5cd6:	8c e0       	ldi	r24, 0x0C	; 12
    5cd8:	91 e0       	ldi	r25, 0x01	; 1
    5cda:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_SetPositionFuncName(2, 1);
    5cde:	82 e0       	ldi	r24, 0x02	; 2
    5ce0:	61 e0       	ldi	r22, 0x01	; 1
    5ce2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSORON);
    5ce6:	8e e0       	ldi	r24, 0x0E	; 14
    5ce8:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
#elif OUTPUT_SCREEN == TERMINAL_OUTPUT
  USART_SendStringFuncName("Check PassWord");
  USART_SendDataFuncName(0X0D);
#endif
  u8 CheckLength = 0;
    5cec:	1a 82       	std	Y+2, r1	; 0x02
  PassWord_Check_Flag = 1;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	80 93 78 04 	sts	0x0478, r24
    }
    else
    {
    }
#elif INPUT_DATA == TERMINAL_INPUT
    Error_State = USART_RecieveDataFuncName(&KPD_Press);
    5cf4:	86 ed       	ldi	r24, 0xD6	; 214
    5cf6:	94 e0       	ldi	r25, 0x04	; 4
    5cf8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5cfc:	80 93 79 04 	sts	0x0479, r24
    // if user name length is valid
    if (Error_State == OK && CheckLength == 0)
    5d00:	80 91 79 04 	lds	r24, 0x0479
    5d04:	88 23       	and	r24, r24
    5d06:	01 f5       	brne	.+64     	; 0x5d48 <PassWord_Check+0x82>
    5d08:	8a 81       	ldd	r24, Y+2	; 0x02
    5d0a:	88 23       	and	r24, r24
    5d0c:	e9 f4       	brne	.+58     	; 0x5d48 <PassWord_Check+0x82>
    {
      // if user press enter
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5d0e:	80 91 d6 04 	lds	r24, 0x04D6
    5d12:	8d 30       	cpi	r24, 0x0D	; 13
    5d14:	79 f3       	breq	.-34     	; 0x5cf4 <PassWord_Check+0x2e>
    5d16:	80 91 d6 04 	lds	r24, 0x04D6
    5d1a:	8f 30       	cpi	r24, 0x0F	; 15
    5d1c:	59 f3       	breq	.-42     	; 0x5cf4 <PassWord_Check+0x2e>
      {
      }
      // if user press back space
      else if (KPD_Press == 0x08)
    5d1e:	80 91 d6 04 	lds	r24, 0x04D6
    5d22:	88 30       	cpi	r24, 0x08	; 8
    5d24:	39 f3       	breq	.-50     	; 0x5cf4 <PassWord_Check+0x2e>
      }
      // if user enter valid data
      else
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendDataFuncName(KPD_Press);
    5d26:	80 91 d6 04 	lds	r24, 0x04D6
    5d2a:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
        Check[CheckLength] = KPD_Press;
    5d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d30:	88 2f       	mov	r24, r24
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	20 91 d6 04 	lds	r18, 0x04D6
    5d38:	fc 01       	movw	r30, r24
    5d3a:	ef 53       	subi	r30, 0x3F	; 63
    5d3c:	fb 4f       	sbci	r31, 0xFB	; 251
    5d3e:	20 83       	st	Z, r18
        CheckLength++;
    5d40:	8a 81       	ldd	r24, Y+2	; 0x02
    5d42:	8f 5f       	subi	r24, 0xFF	; 255
    5d44:	8a 83       	std	Y+2, r24	; 0x02
    5d46:	d6 cf       	rjmp	.-84     	; 0x5cf4 <PassWord_Check+0x2e>
      }
    }
    else if (Error_State == OK && CheckLength < PASSWORD_MAX_LENGTH)
    5d48:	80 91 79 04 	lds	r24, 0x0479
    5d4c:	88 23       	and	r24, r24
    5d4e:	51 f5       	brne	.+84     	; 0x5da4 <PassWord_Check+0xde>
    5d50:	8a 81       	ldd	r24, Y+2	; 0x02
    5d52:	8f 30       	cpi	r24, 0x0F	; 15
    5d54:	38 f5       	brcc	.+78     	; 0x5da4 <PassWord_Check+0xde>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5d56:	80 91 d6 04 	lds	r24, 0x04D6
    5d5a:	8d 30       	cpi	r24, 0x0D	; 13
    5d5c:	21 f0       	breq	.+8      	; 0x5d66 <PassWord_Check+0xa0>
    5d5e:	80 91 d6 04 	lds	r24, 0x04D6
    5d62:	8f 30       	cpi	r24, 0x0F	; 15
    5d64:	21 f4       	brne	.+8      	; 0x5d6e <PassWord_Check+0xa8>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5d66:	8c e0       	ldi	r24, 0x0C	; 12
    5d68:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5d6c:	3b c0       	rjmp	.+118    	; 0x5de4 <PassWord_Check+0x11e>
#endif
        break;
      }
      else if (KPD_Press == 0x08)
    5d6e:	80 91 d6 04 	lds	r24, 0x04D6
    5d72:	88 30       	cpi	r24, 0x08	; 8
    5d74:	31 f4       	brne	.+12     	; 0x5d82 <PassWord_Check+0xbc>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        Clear_Char();
    5d76:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
        CheckLength--;
    5d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d7c:	81 50       	subi	r24, 0x01	; 1
    5d7e:	8a 83       	std	Y+2, r24	; 0x02
    5d80:	b9 cf       	rjmp	.-142    	; 0x5cf4 <PassWord_Check+0x2e>
      }
      else
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendDataFuncName(KPD_Press);
    5d82:	80 91 d6 04 	lds	r24, 0x04D6
    5d86:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
#endif
        Check[CheckLength] = KPD_Press;
    5d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8c:	88 2f       	mov	r24, r24
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	20 91 d6 04 	lds	r18, 0x04D6
    5d94:	fc 01       	movw	r30, r24
    5d96:	ef 53       	subi	r30, 0x3F	; 63
    5d98:	fb 4f       	sbci	r31, 0xFB	; 251
    5d9a:	20 83       	st	Z, r18
        CheckLength++;
    5d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9e:	8f 5f       	subi	r24, 0xFF	; 255
    5da0:	8a 83       	std	Y+2, r24	; 0x02
    5da2:	a8 cf       	rjmp	.-176    	; 0x5cf4 <PassWord_Check+0x2e>
      }
    }
    // if user name length is more than 20 do no thing exept enter and delete
    else if (Error_State == OK && CheckLength >= PASSWORD_MAX_LENGTH)
    5da4:	80 91 79 04 	lds	r24, 0x0479
    5da8:	88 23       	and	r24, r24
    5daa:	09 f0       	breq	.+2      	; 0x5dae <PassWord_Check+0xe8>
    5dac:	a3 cf       	rjmp	.-186    	; 0x5cf4 <PassWord_Check+0x2e>
    5dae:	8a 81       	ldd	r24, Y+2	; 0x02
    5db0:	8f 30       	cpi	r24, 0x0F	; 15
    5db2:	08 f4       	brcc	.+2      	; 0x5db6 <PassWord_Check+0xf0>
    5db4:	9f cf       	rjmp	.-194    	; 0x5cf4 <PassWord_Check+0x2e>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5db6:	80 91 d6 04 	lds	r24, 0x04D6
    5dba:	8d 30       	cpi	r24, 0x0D	; 13
    5dbc:	21 f0       	breq	.+8      	; 0x5dc6 <PassWord_Check+0x100>
    5dbe:	80 91 d6 04 	lds	r24, 0x04D6
    5dc2:	8f 30       	cpi	r24, 0x0F	; 15
    5dc4:	21 f4       	brne	.+8      	; 0x5dce <PassWord_Check+0x108>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SendCommandFuncName(CLCD_DISPLAYON_CURSOROFF);
    5dc6:	8c e0       	ldi	r24, 0x0C	; 12
    5dc8:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    5dcc:	0b c0       	rjmp	.+22     	; 0x5de4 <PassWord_Check+0x11e>
#endif
        break;
      }
      else if (KPD_Press == 0x08)
    5dce:	80 91 d6 04 	lds	r24, 0x04D6
    5dd2:	88 30       	cpi	r24, 0x08	; 8
    5dd4:	09 f0       	breq	.+2      	; 0x5dd8 <PassWord_Check+0x112>
    5dd6:	8e cf       	rjmp	.-228    	; 0x5cf4 <PassWord_Check+0x2e>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        Clear_Char();
    5dd8:	0e 94 94 31 	call	0x6328	; 0x6328 <Clear_Char>
#endif
        CheckLength--;
    5ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    5dde:	81 50       	subi	r24, 0x01	; 1
    5de0:	8a 83       	std	Y+2, r24	; 0x02
    5de2:	88 cf       	rjmp	.-240    	; 0x5cf4 <PassWord_Check+0x2e>
  }

  /*___________________________________________________________________________________________________________________*/

  // Check if password is correct or not
  if (CheckLength == PassWord_Length)
    5de4:	90 91 bc 04 	lds	r25, 0x04BC
    5de8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dea:	89 17       	cp	r24, r25
    5dec:	31 f5       	brne	.+76     	; 0x5e3a <PassWord_Check+0x174>
  {
    for (u8 i = 0; i < PassWord_Length; i++)
    5dee:	19 82       	std	Y+1, r1	; 0x01
    5df0:	1e c0       	rjmp	.+60     	; 0x5e2e <PassWord_Check+0x168>
    {
      if (Check[i] == '\0')
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	88 2f       	mov	r24, r24
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	fc 01       	movw	r30, r24
    5dfa:	ef 53       	subi	r30, 0x3F	; 63
    5dfc:	fb 4f       	sbci	r31, 0xFB	; 251
    5dfe:	80 81       	ld	r24, Z
    5e00:	88 23       	and	r24, r24
    5e02:	11 f1       	breq	.+68     	; 0x5e48 <PassWord_Check+0x182>
      {
        break;
      }
      if (Check[i] != EEPROM_FunReadName(EEPROM_PassWordStartLocation + i))
    5e04:	89 81       	ldd	r24, Y+1	; 0x01
    5e06:	88 2f       	mov	r24, r24
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	ef 53       	subi	r30, 0x3F	; 63
    5e0e:	fb 4f       	sbci	r31, 0xFB	; 251
    5e10:	10 81       	ld	r17, Z
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	88 2f       	mov	r24, r24
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	8f 5b       	subi	r24, 0xBF	; 191
    5e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1c:	0e 94 24 13 	call	0x2648	; 0x2648 <EEPROM_vRead>
    5e20:	18 17       	cp	r17, r24
    5e22:	11 f0       	breq	.+4      	; 0x5e28 <PassWord_Check+0x162>
      {
        PassWord_Check_Flag = 0; // if the pasword is uncorrect make this flag to zero
    5e24:	10 92 78 04 	sts	0x0478, r1
  /*___________________________________________________________________________________________________________________*/

  // Check if password is correct or not
  if (CheckLength == PassWord_Length)
  {
    for (u8 i = 0; i < PassWord_Length; i++)
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	8f 5f       	subi	r24, 0xFF	; 255
    5e2c:	89 83       	std	Y+1, r24	; 0x01
    5e2e:	90 91 bc 04 	lds	r25, 0x04BC
    5e32:	89 81       	ldd	r24, Y+1	; 0x01
    5e34:	89 17       	cp	r24, r25
    5e36:	e8 f2       	brcs	.-70     	; 0x5df2 <PassWord_Check+0x12c>
    5e38:	07 c0       	rjmp	.+14     	; 0x5e48 <PassWord_Check+0x182>
      else
      {
      }
    }
  }
  else if (CheckLength != PassWord_Length)
    5e3a:	90 91 bc 04 	lds	r25, 0x04BC
    5e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e40:	89 17       	cp	r24, r25
    5e42:	11 f0       	breq	.+4      	; 0x5e48 <PassWord_Check+0x182>
  {
    PassWord_Check_Flag = 0; // if CheckLength != PassWord_Length make it false with out checking
    5e44:	10 92 78 04 	sts	0x0478, r1
  }
  else
  {
  }
}
    5e48:	0f 90       	pop	r0
    5e4a:	0f 90       	pop	r0
    5e4c:	cf 91       	pop	r28
    5e4e:	df 91       	pop	r29
    5e50:	1f 91       	pop	r17
    5e52:	08 95       	ret

00005e54 <Sign_In>:

//======================================================================================================================================//

void Sign_In(void)
{
    5e54:	df 93       	push	r29
    5e56:	cf 93       	push	r28
    5e58:	cd b7       	in	r28, 0x3d	; 61
    5e5a:	de b7       	in	r29, 0x3e	; 62
    5e5c:	aa 97       	sbiw	r28, 0x2a	; 42
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
  while (1)
  {
    /* get username and password from user */
    UserName_Check();
    5e68:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <UserName_Check>
    PassWord_Check();
    5e6c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <PassWord_Check>
    // if any flag of them is zero that mean there is one of them is zero
    if (UserName_Check_Flag == 0 || PassWord_Check_Flag == 0)
    5e70:	80 91 77 04 	lds	r24, 0x0477
    5e74:	88 23       	and	r24, r24
    5e76:	29 f0       	breq	.+10     	; 0x5e82 <Sign_In+0x2e>
    5e78:	80 91 78 04 	lds	r24, 0x0478
    5e7c:	88 23       	and	r24, r24
    5e7e:	09 f0       	breq	.+2      	; 0x5e82 <Sign_In+0x2e>
    5e80:	26 c1       	rjmp	.+588    	; 0x60ce <Sign_In+0x27a>
    {
#if OUTPUT_SCREEN == CLCD_OUTPUT
      CLCD_ClearScreenFuncName();
    5e82:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SendStringFuncName("Invalid Username");
    5e86:	8b e1       	ldi	r24, 0x1B	; 27
    5e88:	91 e0       	ldi	r25, 0x01	; 1
    5e8a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    5e8e:	82 e0       	ldi	r24, 0x02	; 2
    5e90:	61 e0       	ldi	r22, 0x01	; 1
    5e92:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("or Password");
    5e96:	8c e2       	ldi	r24, 0x2C	; 44
    5e98:	91 e0       	ldi	r25, 0x01	; 1
    5e9a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
#elif OUTPUT_SCREEN == TERMINAL_OUTPUT
      // if it false make tries--
      USART_SendStringFuncName("Invalid Username or Password");
      USART_SendDataFuncName(0X0D);
#endif
      Tries--;
    5e9e:	80 91 76 04 	lds	r24, 0x0476
    5ea2:	81 50       	subi	r24, 0x01	; 1
    5ea4:	80 93 76 04 	sts	0x0476, r24
      EEPROM_FunWriteName(EEPROM_NoTries_Location, Tries);
    5ea8:	20 91 76 04 	lds	r18, 0x0476
    5eac:	82 e1       	ldi	r24, 0x12	; 18
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	62 2f       	mov	r22, r18
    5eb2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>

      // if there tries i can use
      if (Tries > 0)
    5eb6:	80 91 76 04 	lds	r24, 0x0476
    5eba:	88 23       	and	r24, r24
    5ebc:	09 f4       	brne	.+2      	; 0x5ec0 <Sign_In+0x6c>
    5ebe:	80 c0       	rjmp	.+256    	; 0x5fc0 <Sign_In+0x16c>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SetPositionFuncName(3, 1);
    5ec0:	83 e0       	ldi	r24, 0x03	; 3
    5ec2:	61 e0       	ldi	r22, 0x01	; 1
    5ec4:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_SendStringFuncName("Tries Left : ");
    5ec8:	88 e3       	ldi	r24, 0x38	; 56
    5eca:	91 e0       	ldi	r25, 0x01	; 1
    5ecc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_SendDataFuncName(Tries + 48);
    5ed0:	80 91 76 04 	lds	r24, 0x0476
    5ed4:	80 5d       	subi	r24, 0xD0	; 208
    5ed6:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    5eda:	80 e0       	ldi	r24, 0x00	; 0
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	af e2       	ldi	r26, 0x2F	; 47
    5ee0:	b4 e4       	ldi	r27, 0x44	; 68
    5ee2:	8f a3       	std	Y+39, r24	; 0x27
    5ee4:	98 a7       	std	Y+40, r25	; 0x28
    5ee6:	a9 a7       	std	Y+41, r26	; 0x29
    5ee8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eea:	6f a1       	ldd	r22, Y+39	; 0x27
    5eec:	78 a5       	ldd	r23, Y+40	; 0x28
    5eee:	89 a5       	ldd	r24, Y+41	; 0x29
    5ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ef2:	20 e0       	ldi	r18, 0x00	; 0
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	4a ef       	ldi	r20, 0xFA	; 250
    5ef8:	54 e4       	ldi	r21, 0x44	; 68
    5efa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5efe:	dc 01       	movw	r26, r24
    5f00:	cb 01       	movw	r24, r22
    5f02:	8b a3       	std	Y+35, r24	; 0x23
    5f04:	9c a3       	std	Y+36, r25	; 0x24
    5f06:	ad a3       	std	Y+37, r26	; 0x25
    5f08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    5f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    5f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    5f10:	9e a1       	ldd	r25, Y+38	; 0x26
    5f12:	20 e0       	ldi	r18, 0x00	; 0
    5f14:	30 e0       	ldi	r19, 0x00	; 0
    5f16:	40 e8       	ldi	r20, 0x80	; 128
    5f18:	5f e3       	ldi	r21, 0x3F	; 63
    5f1a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5f1e:	88 23       	and	r24, r24
    5f20:	2c f4       	brge	.+10     	; 0x5f2c <Sign_In+0xd8>
		__ticks = 1;
    5f22:	81 e0       	ldi	r24, 0x01	; 1
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	9a a3       	std	Y+34, r25	; 0x22
    5f28:	89 a3       	std	Y+33, r24	; 0x21
    5f2a:	3f c0       	rjmp	.+126    	; 0x5faa <Sign_In+0x156>
	else if (__tmp > 65535)
    5f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    5f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    5f30:	8d a1       	ldd	r24, Y+37	; 0x25
    5f32:	9e a1       	ldd	r25, Y+38	; 0x26
    5f34:	20 e0       	ldi	r18, 0x00	; 0
    5f36:	3f ef       	ldi	r19, 0xFF	; 255
    5f38:	4f e7       	ldi	r20, 0x7F	; 127
    5f3a:	57 e4       	ldi	r21, 0x47	; 71
    5f3c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5f40:	18 16       	cp	r1, r24
    5f42:	4c f5       	brge	.+82     	; 0x5f96 <Sign_In+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f44:	6f a1       	ldd	r22, Y+39	; 0x27
    5f46:	78 a5       	ldd	r23, Y+40	; 0x28
    5f48:	89 a5       	ldd	r24, Y+41	; 0x29
    5f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f4c:	20 e0       	ldi	r18, 0x00	; 0
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	40 e2       	ldi	r20, 0x20	; 32
    5f52:	51 e4       	ldi	r21, 0x41	; 65
    5f54:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	bc 01       	movw	r22, r24
    5f5e:	cd 01       	movw	r24, r26
    5f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f64:	dc 01       	movw	r26, r24
    5f66:	cb 01       	movw	r24, r22
    5f68:	9a a3       	std	Y+34, r25	; 0x22
    5f6a:	89 a3       	std	Y+33, r24	; 0x21
    5f6c:	0f c0       	rjmp	.+30     	; 0x5f8c <Sign_In+0x138>
    5f6e:	88 ec       	ldi	r24, 0xC8	; 200
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	98 a3       	std	Y+32, r25	; 0x20
    5f74:	8f 8f       	std	Y+31, r24	; 0x1f
    5f76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f78:	98 a1       	ldd	r25, Y+32	; 0x20
    5f7a:	01 97       	sbiw	r24, 0x01	; 1
    5f7c:	f1 f7       	brne	.-4      	; 0x5f7a <Sign_In+0x126>
    5f7e:	98 a3       	std	Y+32, r25	; 0x20
    5f80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f82:	89 a1       	ldd	r24, Y+33	; 0x21
    5f84:	9a a1       	ldd	r25, Y+34	; 0x22
    5f86:	01 97       	sbiw	r24, 0x01	; 1
    5f88:	9a a3       	std	Y+34, r25	; 0x22
    5f8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    5f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    5f90:	00 97       	sbiw	r24, 0x00	; 0
    5f92:	69 f7       	brne	.-38     	; 0x5f6e <Sign_In+0x11a>
    5f94:	69 cf       	rjmp	.-302    	; 0x5e68 <Sign_In+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f96:	6b a1       	ldd	r22, Y+35	; 0x23
    5f98:	7c a1       	ldd	r23, Y+36	; 0x24
    5f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    5f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    5f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fa2:	dc 01       	movw	r26, r24
    5fa4:	cb 01       	movw	r24, r22
    5fa6:	9a a3       	std	Y+34, r25	; 0x22
    5fa8:	89 a3       	std	Y+33, r24	; 0x21
    5faa:	89 a1       	ldd	r24, Y+33	; 0x21
    5fac:	9a a1       	ldd	r25, Y+34	; 0x22
    5fae:	9e 8f       	std	Y+30, r25	; 0x1e
    5fb0:	8d 8f       	std	Y+29, r24	; 0x1d
    5fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5fb6:	01 97       	sbiw	r24, 0x01	; 1
    5fb8:	f1 f7       	brne	.-4      	; 0x5fb6 <Sign_In+0x162>
    5fba:	9e 8f       	std	Y+30, r25	; 0x1e
    5fbc:	8d 8f       	std	Y+29, r24	; 0x1d
    5fbe:	54 cf       	rjmp	.-344    	; 0x5e68 <Sign_In+0x14>
        USART_SendDataFuncName(Tries + 48);
        USART_SendDataFuncName(0X0D);
#endif
      }
      // if there is no tries any more go to function time out to count few of seconds
      else if (Tries == 0)
    5fc0:	80 91 76 04 	lds	r24, 0x0476
    5fc4:	88 23       	and	r24, r24
    5fc6:	09 f0       	breq	.+2      	; 0x5fca <Sign_In+0x176>
    5fc8:	4f cf       	rjmp	.-354    	; 0x5e68 <Sign_In+0x14>
      {
#if OUTPUT_SCREEN == CLCD_OUTPUT
        CLCD_SetPositionFuncName(3, 1);
    5fca:	83 e0       	ldi	r24, 0x03	; 3
    5fcc:	61 e0       	ldi	r22, 0x01	; 1
    5fce:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_SendStringFuncName("Tries Left : ");
    5fd2:	88 e3       	ldi	r24, 0x38	; 56
    5fd4:	91 e0       	ldi	r25, 0x01	; 1
    5fd6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_SendDataFuncName(Tries + 48);
    5fda:	80 91 76 04 	lds	r24, 0x0476
    5fde:	80 5d       	subi	r24, 0xD0	; 208
    5fe0:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	aa ef       	ldi	r26, 0xFA	; 250
    5fea:	b3 e4       	ldi	r27, 0x43	; 67
    5fec:	89 8f       	std	Y+25, r24	; 0x19
    5fee:	9a 8f       	std	Y+26, r25	; 0x1a
    5ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    5ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    5ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ffc:	20 e0       	ldi	r18, 0x00	; 0
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	4a ef       	ldi	r20, 0xFA	; 250
    6002:	54 e4       	ldi	r21, 0x44	; 68
    6004:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6008:	dc 01       	movw	r26, r24
    600a:	cb 01       	movw	r24, r22
    600c:	8d 8b       	std	Y+21, r24	; 0x15
    600e:	9e 8b       	std	Y+22, r25	; 0x16
    6010:	af 8b       	std	Y+23, r26	; 0x17
    6012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6014:	6d 89       	ldd	r22, Y+21	; 0x15
    6016:	7e 89       	ldd	r23, Y+22	; 0x16
    6018:	8f 89       	ldd	r24, Y+23	; 0x17
    601a:	98 8d       	ldd	r25, Y+24	; 0x18
    601c:	20 e0       	ldi	r18, 0x00	; 0
    601e:	30 e0       	ldi	r19, 0x00	; 0
    6020:	40 e8       	ldi	r20, 0x80	; 128
    6022:	5f e3       	ldi	r21, 0x3F	; 63
    6024:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6028:	88 23       	and	r24, r24
    602a:	2c f4       	brge	.+10     	; 0x6036 <Sign_In+0x1e2>
		__ticks = 1;
    602c:	81 e0       	ldi	r24, 0x01	; 1
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	9c 8b       	std	Y+20, r25	; 0x14
    6032:	8b 8b       	std	Y+19, r24	; 0x13
    6034:	3f c0       	rjmp	.+126    	; 0x60b4 <Sign_In+0x260>
	else if (__tmp > 65535)
    6036:	6d 89       	ldd	r22, Y+21	; 0x15
    6038:	7e 89       	ldd	r23, Y+22	; 0x16
    603a:	8f 89       	ldd	r24, Y+23	; 0x17
    603c:	98 8d       	ldd	r25, Y+24	; 0x18
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	3f ef       	ldi	r19, 0xFF	; 255
    6042:	4f e7       	ldi	r20, 0x7F	; 127
    6044:	57 e4       	ldi	r21, 0x47	; 71
    6046:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    604a:	18 16       	cp	r1, r24
    604c:	4c f5       	brge	.+82     	; 0x60a0 <Sign_In+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    604e:	69 8d       	ldd	r22, Y+25	; 0x19
    6050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6056:	20 e0       	ldi	r18, 0x00	; 0
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	40 e2       	ldi	r20, 0x20	; 32
    605c:	51 e4       	ldi	r21, 0x41	; 65
    605e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6062:	dc 01       	movw	r26, r24
    6064:	cb 01       	movw	r24, r22
    6066:	bc 01       	movw	r22, r24
    6068:	cd 01       	movw	r24, r26
    606a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    606e:	dc 01       	movw	r26, r24
    6070:	cb 01       	movw	r24, r22
    6072:	9c 8b       	std	Y+20, r25	; 0x14
    6074:	8b 8b       	std	Y+19, r24	; 0x13
    6076:	0f c0       	rjmp	.+30     	; 0x6096 <Sign_In+0x242>
    6078:	88 ec       	ldi	r24, 0xC8	; 200
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	9a 8b       	std	Y+18, r25	; 0x12
    607e:	89 8b       	std	Y+17, r24	; 0x11
    6080:	89 89       	ldd	r24, Y+17	; 0x11
    6082:	9a 89       	ldd	r25, Y+18	; 0x12
    6084:	01 97       	sbiw	r24, 0x01	; 1
    6086:	f1 f7       	brne	.-4      	; 0x6084 <Sign_In+0x230>
    6088:	9a 8b       	std	Y+18, r25	; 0x12
    608a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    608c:	8b 89       	ldd	r24, Y+19	; 0x13
    608e:	9c 89       	ldd	r25, Y+20	; 0x14
    6090:	01 97       	sbiw	r24, 0x01	; 1
    6092:	9c 8b       	std	Y+20, r25	; 0x14
    6094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6096:	8b 89       	ldd	r24, Y+19	; 0x13
    6098:	9c 89       	ldd	r25, Y+20	; 0x14
    609a:	00 97       	sbiw	r24, 0x00	; 0
    609c:	69 f7       	brne	.-38     	; 0x6078 <Sign_In+0x224>
    609e:	14 c0       	rjmp	.+40     	; 0x60c8 <Sign_In+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60a0:	6d 89       	ldd	r22, Y+21	; 0x15
    60a2:	7e 89       	ldd	r23, Y+22	; 0x16
    60a4:	8f 89       	ldd	r24, Y+23	; 0x17
    60a6:	98 8d       	ldd	r25, Y+24	; 0x18
    60a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	9c 8b       	std	Y+20, r25	; 0x14
    60b2:	8b 8b       	std	Y+19, r24	; 0x13
    60b4:	8b 89       	ldd	r24, Y+19	; 0x13
    60b6:	9c 89       	ldd	r25, Y+20	; 0x14
    60b8:	98 8b       	std	Y+16, r25	; 0x10
    60ba:	8f 87       	std	Y+15, r24	; 0x0f
    60bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    60be:	98 89       	ldd	r25, Y+16	; 0x10
    60c0:	01 97       	sbiw	r24, 0x01	; 1
    60c2:	f1 f7       	brne	.-4      	; 0x60c0 <Sign_In+0x26c>
    60c4:	98 8b       	std	Y+16, r25	; 0x10
    60c6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        Error_TimeOut();
    60c8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <Error_TimeOut>
    60cc:	cd ce       	rjmp	.-614    	; 0x5e68 <Sign_In+0x14>
    }
    // if username and password are correct
    else
    {
#if OUTPUT_SCREEN == CLCD_OUTPUT
      CLCD_ClearScreenFuncName();
    60ce:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      CLCD_SendStringFuncName("Successfully");
    60d2:	86 e4       	ldi	r24, 0x46	; 70
    60d4:	91 e0       	ldi	r25, 0x01	; 1
    60d6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_SetPositionFuncName(2, 1);
    60da:	82 e0       	ldi	r24, 0x02	; 2
    60dc:	61 e0       	ldi	r22, 0x01	; 1
    60de:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_SendStringFuncName("Sign in");
    60e2:	83 e5       	ldi	r24, 0x53	; 83
    60e4:	91 e0       	ldi	r25, 0x01	; 1
    60e6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    60ea:	80 e0       	ldi	r24, 0x00	; 0
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	af e2       	ldi	r26, 0x2F	; 47
    60f0:	b4 e4       	ldi	r27, 0x44	; 68
    60f2:	8b 87       	std	Y+11, r24	; 0x0b
    60f4:	9c 87       	std	Y+12, r25	; 0x0c
    60f6:	ad 87       	std	Y+13, r26	; 0x0d
    60f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    60fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    60fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6100:	9e 85       	ldd	r25, Y+14	; 0x0e
    6102:	20 e0       	ldi	r18, 0x00	; 0
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	4a ef       	ldi	r20, 0xFA	; 250
    6108:	54 e4       	ldi	r21, 0x44	; 68
    610a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    610e:	dc 01       	movw	r26, r24
    6110:	cb 01       	movw	r24, r22
    6112:	8f 83       	std	Y+7, r24	; 0x07
    6114:	98 87       	std	Y+8, r25	; 0x08
    6116:	a9 87       	std	Y+9, r26	; 0x09
    6118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    611a:	6f 81       	ldd	r22, Y+7	; 0x07
    611c:	78 85       	ldd	r23, Y+8	; 0x08
    611e:	89 85       	ldd	r24, Y+9	; 0x09
    6120:	9a 85       	ldd	r25, Y+10	; 0x0a
    6122:	20 e0       	ldi	r18, 0x00	; 0
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	40 e8       	ldi	r20, 0x80	; 128
    6128:	5f e3       	ldi	r21, 0x3F	; 63
    612a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    612e:	88 23       	and	r24, r24
    6130:	2c f4       	brge	.+10     	; 0x613c <Sign_In+0x2e8>
		__ticks = 1;
    6132:	81 e0       	ldi	r24, 0x01	; 1
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	9e 83       	std	Y+6, r25	; 0x06
    6138:	8d 83       	std	Y+5, r24	; 0x05
    613a:	3f c0       	rjmp	.+126    	; 0x61ba <Sign_In+0x366>
	else if (__tmp > 65535)
    613c:	6f 81       	ldd	r22, Y+7	; 0x07
    613e:	78 85       	ldd	r23, Y+8	; 0x08
    6140:	89 85       	ldd	r24, Y+9	; 0x09
    6142:	9a 85       	ldd	r25, Y+10	; 0x0a
    6144:	20 e0       	ldi	r18, 0x00	; 0
    6146:	3f ef       	ldi	r19, 0xFF	; 255
    6148:	4f e7       	ldi	r20, 0x7F	; 127
    614a:	57 e4       	ldi	r21, 0x47	; 71
    614c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6150:	18 16       	cp	r1, r24
    6152:	4c f5       	brge	.+82     	; 0x61a6 <Sign_In+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6154:	6b 85       	ldd	r22, Y+11	; 0x0b
    6156:	7c 85       	ldd	r23, Y+12	; 0x0c
    6158:	8d 85       	ldd	r24, Y+13	; 0x0d
    615a:	9e 85       	ldd	r25, Y+14	; 0x0e
    615c:	20 e0       	ldi	r18, 0x00	; 0
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	40 e2       	ldi	r20, 0x20	; 32
    6162:	51 e4       	ldi	r21, 0x41	; 65
    6164:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6168:	dc 01       	movw	r26, r24
    616a:	cb 01       	movw	r24, r22
    616c:	bc 01       	movw	r22, r24
    616e:	cd 01       	movw	r24, r26
    6170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6174:	dc 01       	movw	r26, r24
    6176:	cb 01       	movw	r24, r22
    6178:	9e 83       	std	Y+6, r25	; 0x06
    617a:	8d 83       	std	Y+5, r24	; 0x05
    617c:	0f c0       	rjmp	.+30     	; 0x619c <Sign_In+0x348>
    617e:	88 ec       	ldi	r24, 0xC8	; 200
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	9c 83       	std	Y+4, r25	; 0x04
    6184:	8b 83       	std	Y+3, r24	; 0x03
    6186:	8b 81       	ldd	r24, Y+3	; 0x03
    6188:	9c 81       	ldd	r25, Y+4	; 0x04
    618a:	01 97       	sbiw	r24, 0x01	; 1
    618c:	f1 f7       	brne	.-4      	; 0x618a <Sign_In+0x336>
    618e:	9c 83       	std	Y+4, r25	; 0x04
    6190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6192:	8d 81       	ldd	r24, Y+5	; 0x05
    6194:	9e 81       	ldd	r25, Y+6	; 0x06
    6196:	01 97       	sbiw	r24, 0x01	; 1
    6198:	9e 83       	std	Y+6, r25	; 0x06
    619a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    619c:	8d 81       	ldd	r24, Y+5	; 0x05
    619e:	9e 81       	ldd	r25, Y+6	; 0x06
    61a0:	00 97       	sbiw	r24, 0x00	; 0
    61a2:	69 f7       	brne	.-38     	; 0x617e <Sign_In+0x32a>
    61a4:	14 c0       	rjmp	.+40     	; 0x61ce <Sign_In+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61a6:	6f 81       	ldd	r22, Y+7	; 0x07
    61a8:	78 85       	ldd	r23, Y+8	; 0x08
    61aa:	89 85       	ldd	r24, Y+9	; 0x09
    61ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61b2:	dc 01       	movw	r26, r24
    61b4:	cb 01       	movw	r24, r22
    61b6:	9e 83       	std	Y+6, r25	; 0x06
    61b8:	8d 83       	std	Y+5, r24	; 0x05
    61ba:	8d 81       	ldd	r24, Y+5	; 0x05
    61bc:	9e 81       	ldd	r25, Y+6	; 0x06
    61be:	9a 83       	std	Y+2, r25	; 0x02
    61c0:	89 83       	std	Y+1, r24	; 0x01
    61c2:	89 81       	ldd	r24, Y+1	; 0x01
    61c4:	9a 81       	ldd	r25, Y+2	; 0x02
    61c6:	01 97       	sbiw	r24, 0x01	; 1
    61c8:	f1 f7       	brne	.-4      	; 0x61c6 <Sign_In+0x372>
    61ca:	9a 83       	std	Y+2, r25	; 0x02
    61cc:	89 83       	std	Y+1, r24	; 0x01
      USART_SendDataFuncName(0X0D);
#endif
      break;
    }
  }
}
    61ce:	aa 96       	adiw	r28, 0x2a	; 42
    61d0:	0f b6       	in	r0, 0x3f	; 63
    61d2:	f8 94       	cli
    61d4:	de bf       	out	0x3e, r29	; 62
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	cd bf       	out	0x3d, r28	; 61
    61da:	cf 91       	pop	r28
    61dc:	df 91       	pop	r29
    61de:	08 95       	ret

000061e0 <Error_TimeOut>:

//======================================================================================================================================//

// to time out error
void Error_TimeOut(void)
{
    61e0:	df 93       	push	r29
    61e2:	cf 93       	push	r28
    61e4:	cd b7       	in	r28, 0x3d	; 61
    61e6:	de b7       	in	r29, 0x3e	; 62
    61e8:	2f 97       	sbiw	r28, 0x0f	; 15
    61ea:	0f b6       	in	r0, 0x3f	; 63
    61ec:	f8 94       	cli
    61ee:	de bf       	out	0x3e, r29	; 62
    61f0:	0f be       	out	0x3f, r0	; 63
    61f2:	cd bf       	out	0x3d, r28	; 61
#if OUTPUT_SCREEN == CLCD_OUTPUT
  CLCD_ClearScreenFuncName();
    61f4:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_SendStringFuncName("Time out :  ");
    61f8:	8b e5       	ldi	r24, 0x5B	; 91
    61fa:	91 e0       	ldi	r25, 0x01	; 1
    61fc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
#elif OUTPUT_SCREEN == TERMINAL_OUTPUT
  USART_SendStringFuncName("Time out :");
#endif
  for (u8 i = 5; i > 0; i--)
    6200:	85 e0       	ldi	r24, 0x05	; 5
    6202:	8f 87       	std	Y+15, r24	; 0x0f
    6204:	7c c0       	rjmp	.+248    	; 0x62fe <Error_TimeOut+0x11e>
  {
#if OUTPUT_SCREEN == CLCD_OUTPUT
    // show second left on lcd
    CLCD_SendCommandFuncName(CLCD_SHIFT_CURSOR_LEFT);
    6206:	80 e1       	ldi	r24, 0x10	; 16
    6208:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
    CLCD_SendDataFuncName(i + 48);
    620c:	8f 85       	ldd	r24, Y+15	; 0x0f
    620e:	80 5d       	subi	r24, 0xD0	; 208
    6210:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
    6214:	80 e0       	ldi	r24, 0x00	; 0
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	aa e7       	ldi	r26, 0x7A	; 122
    621a:	b4 e4       	ldi	r27, 0x44	; 68
    621c:	8b 87       	std	Y+11, r24	; 0x0b
    621e:	9c 87       	std	Y+12, r25	; 0x0c
    6220:	ad 87       	std	Y+13, r26	; 0x0d
    6222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6224:	6b 85       	ldd	r22, Y+11	; 0x0b
    6226:	7c 85       	ldd	r23, Y+12	; 0x0c
    6228:	8d 85       	ldd	r24, Y+13	; 0x0d
    622a:	9e 85       	ldd	r25, Y+14	; 0x0e
    622c:	20 e0       	ldi	r18, 0x00	; 0
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	4a ef       	ldi	r20, 0xFA	; 250
    6232:	54 e4       	ldi	r21, 0x44	; 68
    6234:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6238:	dc 01       	movw	r26, r24
    623a:	cb 01       	movw	r24, r22
    623c:	8f 83       	std	Y+7, r24	; 0x07
    623e:	98 87       	std	Y+8, r25	; 0x08
    6240:	a9 87       	std	Y+9, r26	; 0x09
    6242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6244:	6f 81       	ldd	r22, Y+7	; 0x07
    6246:	78 85       	ldd	r23, Y+8	; 0x08
    6248:	89 85       	ldd	r24, Y+9	; 0x09
    624a:	9a 85       	ldd	r25, Y+10	; 0x0a
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	40 e8       	ldi	r20, 0x80	; 128
    6252:	5f e3       	ldi	r21, 0x3F	; 63
    6254:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6258:	88 23       	and	r24, r24
    625a:	2c f4       	brge	.+10     	; 0x6266 <Error_TimeOut+0x86>
		__ticks = 1;
    625c:	81 e0       	ldi	r24, 0x01	; 1
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	9e 83       	std	Y+6, r25	; 0x06
    6262:	8d 83       	std	Y+5, r24	; 0x05
    6264:	3f c0       	rjmp	.+126    	; 0x62e4 <Error_TimeOut+0x104>
	else if (__tmp > 65535)
    6266:	6f 81       	ldd	r22, Y+7	; 0x07
    6268:	78 85       	ldd	r23, Y+8	; 0x08
    626a:	89 85       	ldd	r24, Y+9	; 0x09
    626c:	9a 85       	ldd	r25, Y+10	; 0x0a
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	3f ef       	ldi	r19, 0xFF	; 255
    6272:	4f e7       	ldi	r20, 0x7F	; 127
    6274:	57 e4       	ldi	r21, 0x47	; 71
    6276:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    627a:	18 16       	cp	r1, r24
    627c:	4c f5       	brge	.+82     	; 0x62d0 <Error_TimeOut+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    627e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6280:	7c 85       	ldd	r23, Y+12	; 0x0c
    6282:	8d 85       	ldd	r24, Y+13	; 0x0d
    6284:	9e 85       	ldd	r25, Y+14	; 0x0e
    6286:	20 e0       	ldi	r18, 0x00	; 0
    6288:	30 e0       	ldi	r19, 0x00	; 0
    628a:	40 e2       	ldi	r20, 0x20	; 32
    628c:	51 e4       	ldi	r21, 0x41	; 65
    628e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6292:	dc 01       	movw	r26, r24
    6294:	cb 01       	movw	r24, r22
    6296:	bc 01       	movw	r22, r24
    6298:	cd 01       	movw	r24, r26
    629a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    629e:	dc 01       	movw	r26, r24
    62a0:	cb 01       	movw	r24, r22
    62a2:	9e 83       	std	Y+6, r25	; 0x06
    62a4:	8d 83       	std	Y+5, r24	; 0x05
    62a6:	0f c0       	rjmp	.+30     	; 0x62c6 <Error_TimeOut+0xe6>
    62a8:	88 ec       	ldi	r24, 0xC8	; 200
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	9c 83       	std	Y+4, r25	; 0x04
    62ae:	8b 83       	std	Y+3, r24	; 0x03
    62b0:	8b 81       	ldd	r24, Y+3	; 0x03
    62b2:	9c 81       	ldd	r25, Y+4	; 0x04
    62b4:	01 97       	sbiw	r24, 0x01	; 1
    62b6:	f1 f7       	brne	.-4      	; 0x62b4 <Error_TimeOut+0xd4>
    62b8:	9c 83       	std	Y+4, r25	; 0x04
    62ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62bc:	8d 81       	ldd	r24, Y+5	; 0x05
    62be:	9e 81       	ldd	r25, Y+6	; 0x06
    62c0:	01 97       	sbiw	r24, 0x01	; 1
    62c2:	9e 83       	std	Y+6, r25	; 0x06
    62c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62c6:	8d 81       	ldd	r24, Y+5	; 0x05
    62c8:	9e 81       	ldd	r25, Y+6	; 0x06
    62ca:	00 97       	sbiw	r24, 0x00	; 0
    62cc:	69 f7       	brne	.-38     	; 0x62a8 <Error_TimeOut+0xc8>
    62ce:	14 c0       	rjmp	.+40     	; 0x62f8 <Error_TimeOut+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62d0:	6f 81       	ldd	r22, Y+7	; 0x07
    62d2:	78 85       	ldd	r23, Y+8	; 0x08
    62d4:	89 85       	ldd	r24, Y+9	; 0x09
    62d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62dc:	dc 01       	movw	r26, r24
    62de:	cb 01       	movw	r24, r22
    62e0:	9e 83       	std	Y+6, r25	; 0x06
    62e2:	8d 83       	std	Y+5, r24	; 0x05
    62e4:	8d 81       	ldd	r24, Y+5	; 0x05
    62e6:	9e 81       	ldd	r25, Y+6	; 0x06
    62e8:	9a 83       	std	Y+2, r25	; 0x02
    62ea:	89 83       	std	Y+1, r24	; 0x01
    62ec:	89 81       	ldd	r24, Y+1	; 0x01
    62ee:	9a 81       	ldd	r25, Y+2	; 0x02
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	f1 f7       	brne	.-4      	; 0x62f0 <Error_TimeOut+0x110>
    62f4:	9a 83       	std	Y+2, r25	; 0x02
    62f6:	89 83       	std	Y+1, r24	; 0x01
  CLCD_ClearScreenFuncName();
  CLCD_SendStringFuncName("Time out :  ");
#elif OUTPUT_SCREEN == TERMINAL_OUTPUT
  USART_SendStringFuncName("Time out :");
#endif
  for (u8 i = 5; i > 0; i--)
    62f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    62fa:	81 50       	subi	r24, 0x01	; 1
    62fc:	8f 87       	std	Y+15, r24	; 0x0f
    62fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    6300:	88 23       	and	r24, r24
    6302:	09 f0       	breq	.+2      	; 0x6306 <Error_TimeOut+0x126>
    6304:	80 cf       	rjmp	.-256    	; 0x6206 <Error_TimeOut+0x26>
  }
#if OUTPUT_SCREEN == TERMINAL_OUTPUT
  USART_SendDataFuncName(0X0D);
#endif
  // to make tries address Not pressed that mean i dosent spend any tries and make tries == max tries again
  EEPROM_FunWriteName(EEPROM_NoTries_Location, NOTPRESSED);
    6306:	82 e1       	ldi	r24, 0x12	; 18
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	6f ef       	ldi	r22, 0xFF	; 255
    630c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
  Tries = Tries_Max;
    6310:	83 e0       	ldi	r24, 0x03	; 3
    6312:	80 93 76 04 	sts	0x0476, r24
}
    6316:	2f 96       	adiw	r28, 0x0f	; 15
    6318:	0f b6       	in	r0, 0x3f	; 63
    631a:	f8 94       	cli
    631c:	de bf       	out	0x3e, r29	; 62
    631e:	0f be       	out	0x3f, r0	; 63
    6320:	cd bf       	out	0x3d, r28	; 61
    6322:	cf 91       	pop	r28
    6324:	df 91       	pop	r29
    6326:	08 95       	ret

00006328 <Clear_Char>:

//======================================================================================================================================//
#if OUTPUT_SCREEN == CLCD_OUTPUT
void Clear_Char()
{
    6328:	df 93       	push	r29
    632a:	cf 93       	push	r28
    632c:	cd b7       	in	r28, 0x3d	; 61
    632e:	de b7       	in	r29, 0x3e	; 62
  CLCD_SendCommandFuncName(CLCD_SHIFT_CURSOR_LEFT);
    6330:	80 e1       	ldi	r24, 0x10	; 16
    6332:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
  CLCD_SendDataFuncName(' ');
    6336:	80 e2       	ldi	r24, 0x20	; 32
    6338:	0e 94 97 24 	call	0x492e	; 0x492e <CLCD_vSendData>
  CLCD_SendCommandFuncName(CLCD_SHIFT_CURSOR_LEFT);
    633c:	80 e1       	ldi	r24, 0x10	; 16
    633e:	0e 94 bb 24 	call	0x4976	; 0x4976 <CLCD_vSendCommand>
}
    6342:	cf 91       	pop	r28
    6344:	df 91       	pop	r29
    6346:	08 95       	ret

00006348 <main>:
void ISR_EXTI0_Interrupt(void ); //ISR function name for external interrupt
void ISR_TIMER2_OVF_MODE(void );


void main()
{
    6348:	df 93       	push	r29
    634a:	cf 93       	push	r28
    634c:	cd b7       	in	r28, 0x3d	; 61
    634e:	de b7       	in	r29, 0x3e	; 62
    6350:	60 97       	sbiw	r28, 0x10	; 16
    6352:	0f b6       	in	r0, 0x3f	; 63
    6354:	f8 94       	cli
    6356:	de bf       	out	0x3e, r29	; 62
    6358:	0f be       	out	0x3f, r0	; 63
    635a:	cd bf       	out	0x3d, r28	; 61
  DIO_enumSetPinDir(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT);
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	60 e0       	ldi	r22, 0x00	; 0
    6360:	40 e0       	ldi	r20, 0x00	; 0
    6362:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>

  // Set Pin Direction
  LED_vInit(Room_Led_1);
    6366:	60 91 86 04 	lds	r22, 0x0486
    636a:	70 91 87 04 	lds	r23, 0x0487
    636e:	80 91 88 04 	lds	r24, 0x0488
    6372:	0e 94 0d 20 	call	0x401a	; 0x401a <LED_vInit>
  LED_vInit(Room_Led_2);
    6376:	60 91 89 04 	lds	r22, 0x0489
    637a:	70 91 8a 04 	lds	r23, 0x048A
    637e:	80 91 8b 04 	lds	r24, 0x048B
    6382:	0e 94 0d 20 	call	0x401a	; 0x401a <LED_vInit>
  LED_vInit(Room_Led_3);
    6386:	60 91 8c 04 	lds	r22, 0x048C
    638a:	70 91 8d 04 	lds	r23, 0x048D
    638e:	80 91 8e 04 	lds	r24, 0x048E
    6392:	0e 94 0d 20 	call	0x401a	; 0x401a <LED_vInit>

  // Initialize CLCD Pins
  CLCD_vInit();
    6396:	0e 94 00 22 	call	0x4400	; 0x4400 <CLCD_vInit>
  // initialize ADC to Convert From Analog To digital
  ADC_vInit();
    639a:	0e 94 49 1b 	call	0x3692	; 0x3692 <ADC_vInit>
  // initialize USART to communicate with laptop with Baud Rate 9600
  USART_vInit();
    639e:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_vInit>
  // Check EEPROM for password and username and tries left
  EEPROM_vInit();
    63a2:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <EEPROM_vInit>

  DIO_enumSetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    63a6:	83 e0       	ldi	r24, 0x03	; 3
    63a8:	65 e0       	ldi	r22, 0x05	; 5
    63aa:	41 e0       	ldi	r20, 0x01	; 1
    63ac:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  TIMER1_vInit(                                        );
    63b0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <TIMER1_vInit>
  // set Timer2 Output PIN
  DIO_enumSetPinDir(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
    63b4:	81 e0       	ldi	r24, 0x01	; 1
    63b6:	63 e0       	ldi	r22, 0x03	; 3
    63b8:	41 e0       	ldi	r20, 0x01	; 1
    63ba:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>
  TIMER0_vInit(                                        );
    63be:	0e 94 25 0c 	call	0x184a	; 0x184a <TIMER0_vInit>
  /*
   * Initialize TIMER2 with external clock at 32.768 KHz
   * Using division factor 128 to achieve 1 second intervals
   */
  TIMER2_vInit();
    63c2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <TIMER2_vInit>

  // Set callback function for TIMER2 overflow interrup
  TIMER_u8SetCallBack(ISR_TIMER2_OVF_MODE, TIMER2_OVF_VECTOR_ID);
    63c6:	85 ef       	ldi	r24, 0xF5	; 245
    63c8:	9c e3       	ldi	r25, 0x3C	; 60
    63ca:	65 e0       	ldi	r22, 0x05	; 5
    63cc:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <TIMER_u8SetCallBack>

  // Initialize Servo Motor
  SM_vInit(          );
    63d0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SM_vInit>
  SM_vTimer1Degree(90);
    63d4:	8a e5       	ldi	r24, 0x5A	; 90
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <SM_vTimer1Degree>

  //SET I-Bit to enable Interrupt
  GIE_vEnable();
    63dc:	0e 94 3f 10 	call	0x207e	; 0x207e <GIE_vEnable>
  //SET INT2 to execute on change on pin
  EXTI_vEnableInterrupt(EXTI_LINE0                    );
    63e0:	86 e0       	ldi	r24, 0x06	; 6
    63e2:	0e 94 a7 11 	call	0x234e	; 0x234e <EXTI_vEnableInterrupt>
  EXTI_vSetSignal      (EXTI_RISING_EDGE, EXTI_LINE0  );
    63e6:	81 e0       	ldi	r24, 0x01	; 1
    63e8:	66 e0       	ldi	r22, 0x06	; 6
    63ea:	0e 94 70 10 	call	0x20e0	; 0x20e0 <EXTI_vSetSignal>
  //Set Call Back Function for ISR to INT2
  EXTI_vSetCallBack(ISR_EXTI0_Interrupt, EXTI_LINE0   );
    63ee:	89 e9       	ldi	r24, 0x99	; 153
    63f0:	9c e3       	ldi	r25, 0x3C	; 60
    63f2:	66 e0       	ldi	r22, 0x06	; 6
    63f4:	0e 94 16 12 	call	0x242c	; 0x242c <EXTI_vSetCallBack>
  DIO_enumSetPinDir(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
    63f8:	83 e0       	ldi	r24, 0x03	; 3
    63fa:	62 e0       	ldi	r22, 0x02	; 2
    63fc:	40 e0       	ldi	r20, 0x00	; 0
    63fe:	0e 94 45 13 	call	0x268a	; 0x268a <DIO_enumSetPinDir>

  while (1)
  {
    // if System is close and user want to open system
    if (Flags.OneTimeFlag == 1)
    6402:	80 91 8f 04 	lds	r24, 0x048F
    6406:	81 70       	andi	r24, 0x01	; 1
    6408:	88 23       	and	r24, r24
    640a:	d9 f3       	breq	.-10     	; 0x6402 <main+0xba>
    {
      Error_Time_Out = 0;
    640c:	10 92 bd 04 	sts	0x04BD, r1
      Flags.STOP_Flag = 1;
    6410:	80 91 8f 04 	lds	r24, 0x048F
    6414:	82 60       	ori	r24, 0x02	; 2
    6416:	80 93 8f 04 	sts	0x048F, r24
      CLCD_vSendString("Press enter to open system");
    641a:	88 e6       	ldi	r24, 0x68	; 104
    641c:	91 e0       	ldi	r25, 0x01	; 1
    641e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      do
      {
        Error_State = USART_u8ReceiveData(&KPD_Press);
    6422:	86 ed       	ldi	r24, 0xD6	; 214
    6424:	94 e0       	ldi	r25, 0x04	; 4
    6426:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    642a:	80 93 79 04 	sts	0x0479, r24
        if (Error_State == OK)
    642e:	80 91 79 04 	lds	r24, 0x0479
    6432:	88 23       	and	r24, r24
    6434:	b1 f7       	brne	.-20     	; 0x6422 <main+0xda>
        {
          if (KPD_Press == 0X0D)
    6436:	80 91 d6 04 	lds	r24, 0x04D6
    643a:	8d 30       	cpi	r24, 0x0D	; 13
    643c:	91 f7       	brne	.-28     	; 0x6422 <main+0xda>
          }
        }
      } while (1); // go into infinite loop until press enter

      //Check username and password
      Sign_In();
    643e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <Sign_In>
      //After Successfully sign in
      CLCD_vClearScreen();
    6442:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
      // print hello message
      CLCD_vSetPosition(2, 7);
    6446:	82 e0       	ldi	r24, 0x02	; 2
    6448:	67 e0       	ldi	r22, 0x07	; 7
    644a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_vSendString("Welcome ");
    644e:	83 e8       	ldi	r24, 0x83	; 131
    6450:	91 e0       	ldi	r25, 0x01	; 1
    6452:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      CLCD_vSetPosition(3, ((20 - UserName_Length) / 2) + 1);
    6456:	80 91 bb 04 	lds	r24, 0x04BB
    645a:	28 2f       	mov	r18, r24
    645c:	30 e0       	ldi	r19, 0x00	; 0
    645e:	84 e1       	ldi	r24, 0x14	; 20
    6460:	90 e0       	ldi	r25, 0x00	; 0
    6462:	82 1b       	sub	r24, r18
    6464:	93 0b       	sbc	r25, r19
    6466:	98 8b       	std	Y+16, r25	; 0x10
    6468:	8f 87       	std	Y+15, r24	; 0x0f
    646a:	8f 85       	ldd	r24, Y+15	; 0x0f
    646c:	98 89       	ldd	r25, Y+16	; 0x10
    646e:	99 23       	and	r25, r25
    6470:	2c f4       	brge	.+10     	; 0x647c <main+0x134>
    6472:	8f 85       	ldd	r24, Y+15	; 0x0f
    6474:	98 89       	ldd	r25, Y+16	; 0x10
    6476:	01 96       	adiw	r24, 0x01	; 1
    6478:	98 8b       	std	Y+16, r25	; 0x10
    647a:	8f 87       	std	Y+15, r24	; 0x0f
    647c:	8f 85       	ldd	r24, Y+15	; 0x0f
    647e:	98 89       	ldd	r25, Y+16	; 0x10
    6480:	95 95       	asr	r25
    6482:	87 95       	ror	r24
    6484:	98 2f       	mov	r25, r24
    6486:	9f 5f       	subi	r25, 0xFF	; 255
    6488:	83 e0       	ldi	r24, 0x03	; 3
    648a:	69 2f       	mov	r22, r25
    648c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_vSendString(UserName);
    6490:	87 ed       	ldi	r24, 0xD7	; 215
    6492:	94 e0       	ldi	r25, 0x04	; 4
    6494:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6498:	80 e0       	ldi	r24, 0x00	; 0
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	aa e7       	ldi	r26, 0x7A	; 122
    649e:	b4 e4       	ldi	r27, 0x44	; 68
    64a0:	8b 87       	std	Y+11, r24	; 0x0b
    64a2:	9c 87       	std	Y+12, r25	; 0x0c
    64a4:	ad 87       	std	Y+13, r26	; 0x0d
    64a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    64aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    64ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    64ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    64b0:	20 e0       	ldi	r18, 0x00	; 0
    64b2:	30 e0       	ldi	r19, 0x00	; 0
    64b4:	4a ef       	ldi	r20, 0xFA	; 250
    64b6:	54 e4       	ldi	r21, 0x44	; 68
    64b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    64bc:	dc 01       	movw	r26, r24
    64be:	cb 01       	movw	r24, r22
    64c0:	8f 83       	std	Y+7, r24	; 0x07
    64c2:	98 87       	std	Y+8, r25	; 0x08
    64c4:	a9 87       	std	Y+9, r26	; 0x09
    64c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    64c8:	6f 81       	ldd	r22, Y+7	; 0x07
    64ca:	78 85       	ldd	r23, Y+8	; 0x08
    64cc:	89 85       	ldd	r24, Y+9	; 0x09
    64ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	30 e0       	ldi	r19, 0x00	; 0
    64d4:	40 e8       	ldi	r20, 0x80	; 128
    64d6:	5f e3       	ldi	r21, 0x3F	; 63
    64d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    64dc:	88 23       	and	r24, r24
    64de:	2c f4       	brge	.+10     	; 0x64ea <main+0x1a2>
		__ticks = 1;
    64e0:	81 e0       	ldi	r24, 0x01	; 1
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	9e 83       	std	Y+6, r25	; 0x06
    64e6:	8d 83       	std	Y+5, r24	; 0x05
    64e8:	3f c0       	rjmp	.+126    	; 0x6568 <main+0x220>
	else if (__tmp > 65535)
    64ea:	6f 81       	ldd	r22, Y+7	; 0x07
    64ec:	78 85       	ldd	r23, Y+8	; 0x08
    64ee:	89 85       	ldd	r24, Y+9	; 0x09
    64f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64f2:	20 e0       	ldi	r18, 0x00	; 0
    64f4:	3f ef       	ldi	r19, 0xFF	; 255
    64f6:	4f e7       	ldi	r20, 0x7F	; 127
    64f8:	57 e4       	ldi	r21, 0x47	; 71
    64fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    64fe:	18 16       	cp	r1, r24
    6500:	4c f5       	brge	.+82     	; 0x6554 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6502:	6b 85       	ldd	r22, Y+11	; 0x0b
    6504:	7c 85       	ldd	r23, Y+12	; 0x0c
    6506:	8d 85       	ldd	r24, Y+13	; 0x0d
    6508:	9e 85       	ldd	r25, Y+14	; 0x0e
    650a:	20 e0       	ldi	r18, 0x00	; 0
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	40 e2       	ldi	r20, 0x20	; 32
    6510:	51 e4       	ldi	r21, 0x41	; 65
    6512:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6516:	dc 01       	movw	r26, r24
    6518:	cb 01       	movw	r24, r22
    651a:	bc 01       	movw	r22, r24
    651c:	cd 01       	movw	r24, r26
    651e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6522:	dc 01       	movw	r26, r24
    6524:	cb 01       	movw	r24, r22
    6526:	9e 83       	std	Y+6, r25	; 0x06
    6528:	8d 83       	std	Y+5, r24	; 0x05
    652a:	0f c0       	rjmp	.+30     	; 0x654a <main+0x202>
    652c:	88 ec       	ldi	r24, 0xC8	; 200
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	9c 83       	std	Y+4, r25	; 0x04
    6532:	8b 83       	std	Y+3, r24	; 0x03
    6534:	8b 81       	ldd	r24, Y+3	; 0x03
    6536:	9c 81       	ldd	r25, Y+4	; 0x04
    6538:	01 97       	sbiw	r24, 0x01	; 1
    653a:	f1 f7       	brne	.-4      	; 0x6538 <main+0x1f0>
    653c:	9c 83       	std	Y+4, r25	; 0x04
    653e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6540:	8d 81       	ldd	r24, Y+5	; 0x05
    6542:	9e 81       	ldd	r25, Y+6	; 0x06
    6544:	01 97       	sbiw	r24, 0x01	; 1
    6546:	9e 83       	std	Y+6, r25	; 0x06
    6548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    654a:	8d 81       	ldd	r24, Y+5	; 0x05
    654c:	9e 81       	ldd	r25, Y+6	; 0x06
    654e:	00 97       	sbiw	r24, 0x00	; 0
    6550:	69 f7       	brne	.-38     	; 0x652c <main+0x1e4>
    6552:	14 c0       	rjmp	.+40     	; 0x657c <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6554:	6f 81       	ldd	r22, Y+7	; 0x07
    6556:	78 85       	ldd	r23, Y+8	; 0x08
    6558:	89 85       	ldd	r24, Y+9	; 0x09
    655a:	9a 85       	ldd	r25, Y+10	; 0x0a
    655c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6560:	dc 01       	movw	r26, r24
    6562:	cb 01       	movw	r24, r22
    6564:	9e 83       	std	Y+6, r25	; 0x06
    6566:	8d 83       	std	Y+5, r24	; 0x05
    6568:	8d 81       	ldd	r24, Y+5	; 0x05
    656a:	9e 81       	ldd	r25, Y+6	; 0x06
    656c:	9a 83       	std	Y+2, r25	; 0x02
    656e:	89 83       	std	Y+1, r24	; 0x01
    6570:	89 81       	ldd	r24, Y+1	; 0x01
    6572:	9a 81       	ldd	r25, Y+2	; 0x02
    6574:	01 97       	sbiw	r24, 0x01	; 1
    6576:	f1 f7       	brne	.-4      	; 0x6574 <main+0x22c>
    6578:	9a 83       	std	Y+2, r25	; 0x02
    657a:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);

      Flags.OneTimeFlag = 0; // to print it one time when system open
    657c:	80 91 8f 04 	lds	r24, 0x048F
    6580:	8e 7f       	andi	r24, 0xFE	; 254
    6582:	80 93 8f 04 	sts	0x048F, r24
      Room();
    6586:	0e 94 c6 32 	call	0x658c	; 0x658c <Room>
    658a:	3b cf       	rjmp	.-394    	; 0x6402 <main+0xba>

0000658c <Room>:
  }
}

//======================================================================================================================================//
void Room()
{
    658c:	df 93       	push	r29
    658e:	cf 93       	push	r28
    6590:	00 d0       	rcall	.+0      	; 0x6592 <Room+0x6>
    6592:	0f 92       	push	r0
    6594:	cd b7       	in	r28, 0x3d	; 61
    6596:	de b7       	in	r29, 0x3e	; 62
  if (Flags.Page_One == 0)
    6598:	80 91 8f 04 	lds	r24, 0x048F
    659c:	88 70       	andi	r24, 0x08	; 8
    659e:	88 23       	and	r24, r24
    65a0:	21 f5       	brne	.+72     	; 0x65ea <Room+0x5e>
  {
    CLCD_vClearScreen();
    65a2:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
    CLCD_vSendString("Room Options : ");
    65a6:	8c e8       	ldi	r24, 0x8C	; 140
    65a8:	91 e0       	ldi	r25, 0x01	; 1
    65aa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    65ae:	82 e0       	ldi	r24, 0x02	; 2
    65b0:	61 e0       	ldi	r22, 0x01	; 1
    65b2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("4- Room Fan");
    65b6:	8c e9       	ldi	r24, 0x9C	; 156
    65b8:	91 e0       	ldi	r25, 0x01	; 1
    65ba:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    65be:	83 e0       	ldi	r24, 0x03	; 3
    65c0:	61 e0       	ldi	r22, 0x01	; 1
    65c2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("5- Room Door");
    65c6:	88 ea       	ldi	r24, 0xA8	; 168
    65c8:	91 e0       	ldi	r25, 0x01	; 1
    65ca:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    65ce:	84 e0       	ldi	r24, 0x04	; 4
    65d0:	61 e0       	ldi	r22, 0x01	; 1
    65d2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("6- Room Setting");
    65d6:	85 eb       	ldi	r24, 0xB5	; 181
    65d8:	91 e0       	ldi	r25, 0x01	; 1
    65da:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    Flags.Page_One = 1;
    65de:	80 91 8f 04 	lds	r24, 0x048F
    65e2:	88 60       	ori	r24, 0x08	; 8
    65e4:	80 93 8f 04 	sts	0x048F, r24
    65e8:	28 c0       	rjmp	.+80     	; 0x663a <Room+0xae>
  }
  else if (Flags.Page_One == 1)
    65ea:	80 91 8f 04 	lds	r24, 0x048F
    65ee:	88 70       	andi	r24, 0x08	; 8
    65f0:	88 23       	and	r24, r24
    65f2:	19 f1       	breq	.+70     	; 0x663a <Room+0xae>
  {
    CLCD_vClearScreen();
    65f4:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
    CLCD_vSendString("Room Options : ");
    65f8:	8c e8       	ldi	r24, 0x8C	; 140
    65fa:	91 e0       	ldi	r25, 0x01	; 1
    65fc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    6600:	82 e0       	ldi	r24, 0x02	; 2
    6602:	61 e0       	ldi	r22, 0x01	; 1
    6604:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("1- Led1 ON/OFF");
    6608:	85 ec       	ldi	r24, 0xC5	; 197
    660a:	91 e0       	ldi	r25, 0x01	; 1
    660c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    6610:	83 e0       	ldi	r24, 0x03	; 3
    6612:	61 e0       	ldi	r22, 0x01	; 1
    6614:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("2- Led2 ON/OFF");
    6618:	84 ed       	ldi	r24, 0xD4	; 212
    661a:	91 e0       	ldi	r25, 0x01	; 1
    661c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    6620:	84 e0       	ldi	r24, 0x04	; 4
    6622:	61 e0       	ldi	r22, 0x01	; 1
    6624:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
    CLCD_vSendString("3- Led3 ON/OFF");
    6628:	83 ee       	ldi	r24, 0xE3	; 227
    662a:	91 e0       	ldi	r25, 0x01	; 1
    662c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    Flags.Page_One = 0;
    6630:	80 91 8f 04 	lds	r24, 0x048F
    6634:	87 7f       	andi	r24, 0xF7	; 247
    6636:	80 93 8f 04 	sts	0x048F, r24
  {
  }

  do
  {
    KPD_Press = 0XFF;
    663a:	8f ef       	ldi	r24, 0xFF	; 255
    663c:	80 93 d6 04 	sts	0x04D6, r24
    Error_State = USART_u8ReceiveData(&KPD_Press);
    6640:	86 ed       	ldi	r24, 0xD6	; 214
    6642:	94 e0       	ldi	r25, 0x04	; 4
    6644:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6648:	80 93 79 04 	sts	0x0479, r24
    if (Error_State == OK)
    664c:	80 91 79 04 	lds	r24, 0x0479
    6650:	88 23       	and	r24, r24
    6652:	09 f0       	breq	.+2      	; 0x6656 <Room+0xca>
    6654:	c9 c0       	rjmp	.+402    	; 0x67e8 <Room+0x25c>
    {
      switch (KPD_Press)
    6656:	80 91 d6 04 	lds	r24, 0x04D6
    665a:	28 2f       	mov	r18, r24
    665c:	30 e0       	ldi	r19, 0x00	; 0
    665e:	3b 83       	std	Y+3, r19	; 0x03
    6660:	2a 83       	std	Y+2, r18	; 0x02
    6662:	8a 81       	ldd	r24, Y+2	; 0x02
    6664:	9b 81       	ldd	r25, Y+3	; 0x03
    6666:	83 33       	cpi	r24, 0x33	; 51
    6668:	91 05       	cpc	r25, r1
    666a:	e1 f1       	breq	.+120    	; 0x66e4 <Room+0x158>
    666c:	2a 81       	ldd	r18, Y+2	; 0x02
    666e:	3b 81       	ldd	r19, Y+3	; 0x03
    6670:	24 33       	cpi	r18, 0x34	; 52
    6672:	31 05       	cpc	r19, r1
    6674:	bc f4       	brge	.+46     	; 0x66a4 <Room+0x118>
    6676:	8a 81       	ldd	r24, Y+2	; 0x02
    6678:	9b 81       	ldd	r25, Y+3	; 0x03
    667a:	81 33       	cpi	r24, 0x31	; 49
    667c:	91 05       	cpc	r25, r1
    667e:	11 f1       	breq	.+68     	; 0x66c4 <Room+0x138>
    6680:	2a 81       	ldd	r18, Y+2	; 0x02
    6682:	3b 81       	ldd	r19, Y+3	; 0x03
    6684:	22 33       	cpi	r18, 0x32	; 50
    6686:	31 05       	cpc	r19, r1
    6688:	2c f5       	brge	.+74     	; 0x66d4 <Room+0x148>
    668a:	8a 81       	ldd	r24, Y+2	; 0x02
    668c:	9b 81       	ldd	r25, Y+3	; 0x03
    668e:	88 30       	cpi	r24, 0x08	; 8
    6690:	91 05       	cpc	r25, r1
    6692:	09 f4       	brne	.+2      	; 0x6696 <Room+0x10a>
    6694:	9a c0       	rjmp	.+308    	; 0x67ca <Room+0x23e>
    6696:	2a 81       	ldd	r18, Y+2	; 0x02
    6698:	3b 81       	ldd	r19, Y+3	; 0x03
    669a:	20 33       	cpi	r18, 0x30	; 48
    669c:	31 05       	cpc	r19, r1
    669e:	09 f4       	brne	.+2      	; 0x66a2 <Room+0x116>
    66a0:	41 c0       	rjmp	.+130    	; 0x6724 <Room+0x198>
    66a2:	ad c0       	rjmp	.+346    	; 0x67fe <Room+0x272>
    66a4:	8a 81       	ldd	r24, Y+2	; 0x02
    66a6:	9b 81       	ldd	r25, Y+3	; 0x03
    66a8:	85 33       	cpi	r24, 0x35	; 53
    66aa:	91 05       	cpc	r25, r1
    66ac:	59 f1       	breq	.+86     	; 0x6704 <Room+0x178>
    66ae:	2a 81       	ldd	r18, Y+2	; 0x02
    66b0:	3b 81       	ldd	r19, Y+3	; 0x03
    66b2:	25 33       	cpi	r18, 0x35	; 53
    66b4:	31 05       	cpc	r19, r1
    66b6:	f4 f0       	brlt	.+60     	; 0x66f4 <Room+0x168>
    66b8:	8a 81       	ldd	r24, Y+2	; 0x02
    66ba:	9b 81       	ldd	r25, Y+3	; 0x03
    66bc:	86 33       	cpi	r24, 0x36	; 54
    66be:	91 05       	cpc	r25, r1
    66c0:	49 f1       	breq	.+82     	; 0x6714 <Room+0x188>
    66c2:	9d c0       	rjmp	.+314    	; 0x67fe <Room+0x272>
      {
      case '1':
        Error_Time_Out = 0;
    66c4:	10 92 bd 04 	sts	0x04BD, r1
        ROOM_LampOne();
    66c8:	0e 94 0a 34 	call	0x6814	; 0x6814 <ROOM_LampOne>
        KPD_Press = NOTPRESSED;
    66cc:	8f ef       	ldi	r24, 0xFF	; 255
    66ce:	80 93 d6 04 	sts	0x04D6, r24
    66d2:	95 c0       	rjmp	.+298    	; 0x67fe <Room+0x272>
        break;
      case '2':
        Error_Time_Out = 0;
    66d4:	10 92 bd 04 	sts	0x04BD, r1
        ROOM_LampTwo();
    66d8:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <ROOM_LampTwo>
        KPD_Press = NOTPRESSED;
    66dc:	8f ef       	ldi	r24, 0xFF	; 255
    66de:	80 93 d6 04 	sts	0x04D6, r24
    66e2:	8d c0       	rjmp	.+282    	; 0x67fe <Room+0x272>
        break;
      case '3':
        Error_Time_Out = 0;
    66e4:	10 92 bd 04 	sts	0x04BD, r1
        ROOM_LampThree();
    66e8:	0e 94 42 36 	call	0x6c84	; 0x6c84 <ROOM_LampThree>
        KPD_Press = NOTPRESSED;
    66ec:	8f ef       	ldi	r24, 0xFF	; 255
    66ee:	80 93 d6 04 	sts	0x04D6, r24
    66f2:	85 c0       	rjmp	.+266    	; 0x67fe <Room+0x272>
        break;
      case '4':
        Error_Time_Out = 0;
    66f4:	10 92 bd 04 	sts	0x04BD, r1
        Room_vFan();
    66f8:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <Room_vFan>
        KPD_Press = NOTPRESSED;
    66fc:	8f ef       	ldi	r24, 0xFF	; 255
    66fe:	80 93 d6 04 	sts	0x04D6, r24
    6702:	7d c0       	rjmp	.+250    	; 0x67fe <Room+0x272>
        break;
      case '5':
        Error_Time_Out = 0;
    6704:	10 92 bd 04 	sts	0x04BD, r1
        Room_Door();
    6708:	0e 94 a8 39 	call	0x7350	; 0x7350 <Room_Door>
        KPD_Press = NOTPRESSED;
    670c:	8f ef       	ldi	r24, 0xFF	; 255
    670e:	80 93 d6 04 	sts	0x04D6, r24
    6712:	75 c0       	rjmp	.+234    	; 0x67fe <Room+0x272>
        break;
      case '6':
        Error_Time_Out = 0;
    6714:	10 92 bd 04 	sts	0x04BD, r1
        Room_vSetting();
    6718:	0e 94 c8 38 	call	0x7190	; 0x7190 <Room_vSetting>
        KPD_Press = NOTPRESSED;
    671c:	8f ef       	ldi	r24, 0xFF	; 255
    671e:	80 93 d6 04 	sts	0x04D6, r24
    6722:	6d c0       	rjmp	.+218    	; 0x67fe <Room+0x272>
        break;
      case '0':
        if (Flags.Page_One == 0)
    6724:	80 91 8f 04 	lds	r24, 0x048F
    6728:	88 70       	andi	r24, 0x08	; 8
    672a:	88 23       	and	r24, r24
    672c:	21 f5       	brne	.+72     	; 0x6776 <Room+0x1ea>
        {
          CLCD_vClearScreen();
    672e:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6732:	8c e8       	ldi	r24, 0x8C	; 140
    6734:	91 e0       	ldi	r25, 0x01	; 1
    6736:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    673a:	82 e0       	ldi	r24, 0x02	; 2
    673c:	61 e0       	ldi	r22, 0x01	; 1
    673e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("4- Room Fan");
    6742:	8c e9       	ldi	r24, 0x9C	; 156
    6744:	91 e0       	ldi	r25, 0x01	; 1
    6746:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    674a:	83 e0       	ldi	r24, 0x03	; 3
    674c:	61 e0       	ldi	r22, 0x01	; 1
    674e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("5- Room Door");
    6752:	88 ea       	ldi	r24, 0xA8	; 168
    6754:	91 e0       	ldi	r25, 0x01	; 1
    6756:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    675a:	84 e0       	ldi	r24, 0x04	; 4
    675c:	61 e0       	ldi	r22, 0x01	; 1
    675e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("6- Room Setting");
    6762:	85 eb       	ldi	r24, 0xB5	; 181
    6764:	91 e0       	ldi	r25, 0x01	; 1
    6766:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          Flags.Page_One = 1;
    676a:	80 91 8f 04 	lds	r24, 0x048F
    676e:	88 60       	ori	r24, 0x08	; 8
    6770:	80 93 8f 04 	sts	0x048F, r24
    6774:	44 c0       	rjmp	.+136    	; 0x67fe <Room+0x272>
        }
        else if (Flags.Page_One == 1)
    6776:	80 91 8f 04 	lds	r24, 0x048F
    677a:	88 70       	andi	r24, 0x08	; 8
    677c:	88 23       	and	r24, r24
    677e:	09 f4       	brne	.+2      	; 0x6782 <Room+0x1f6>
    6780:	3e c0       	rjmp	.+124    	; 0x67fe <Room+0x272>
        {
          CLCD_vClearScreen();
    6782:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6786:	8c e8       	ldi	r24, 0x8C	; 140
    6788:	91 e0       	ldi	r25, 0x01	; 1
    678a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    678e:	82 e0       	ldi	r24, 0x02	; 2
    6790:	61 e0       	ldi	r22, 0x01	; 1
    6792:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6796:	85 ec       	ldi	r24, 0xC5	; 197
    6798:	91 e0       	ldi	r25, 0x01	; 1
    679a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    679e:	83 e0       	ldi	r24, 0x03	; 3
    67a0:	61 e0       	ldi	r22, 0x01	; 1
    67a2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    67a6:	84 ed       	ldi	r24, 0xD4	; 212
    67a8:	91 e0       	ldi	r25, 0x01	; 1
    67aa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    67ae:	84 e0       	ldi	r24, 0x04	; 4
    67b0:	61 e0       	ldi	r22, 0x01	; 1
    67b2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    67b6:	83 ee       	ldi	r24, 0xE3	; 227
    67b8:	91 e0       	ldi	r25, 0x01	; 1
    67ba:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          Flags.Page_One = 0;
    67be:	80 91 8f 04 	lds	r24, 0x048F
    67c2:	87 7f       	andi	r24, 0xF7	; 247
    67c4:	80 93 8f 04 	sts	0x048F, r24
    67c8:	1a c0       	rjmp	.+52     	; 0x67fe <Room+0x272>
        else
        {
        }
        break;
      case 0x08:
        Error_Time_Out = 0;
    67ca:	10 92 bd 04 	sts	0x04BD, r1
        CLCD_vClearScreen();
    67ce:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        Flags.OneTimeFlag = 1; // to print it one time which system is open
    67d2:	80 91 8f 04 	lds	r24, 0x048F
    67d6:	81 60       	ori	r24, 0x01	; 1
    67d8:	80 93 8f 04 	sts	0x048F, r24
        Flags.Page_One = 1;
    67dc:	80 91 8f 04 	lds	r24, 0x048F
    67e0:	88 60       	ori	r24, 0x08	; 8
    67e2:	80 93 8f 04 	sts	0x048F, r24
    67e6:	0b c0       	rjmp	.+22     	; 0x67fe <Room+0x272>
        break;
      default:
        break;
      }
    }
    else if (Error_State == TIMEOUT_STATE)
    67e8:	80 91 79 04 	lds	r24, 0x0479
    67ec:	84 30       	cpi	r24, 0x04	; 4
    67ee:	39 f4       	brne	.+14     	; 0x67fe <Room+0x272>
    {
      if (Error_Time_Out == Time_Out)
    67f0:	90 91 bd 04 	lds	r25, 0x04BD
          CLCD_vClearScreen();
        }
        Flags.OneTimeFlag = 1;
        break;
      }
      Error_Time_Out++;
    67f4:	80 91 bd 04 	lds	r24, 0x04BD
    67f8:	8f 5f       	subi	r24, 0xFF	; 255
    67fa:	80 93 bd 04 	sts	0x04BD, r24
    }
  } while (KPD_Press != 0X08);
    67fe:	80 91 d6 04 	lds	r24, 0x04D6
    6802:	88 30       	cpi	r24, 0x08	; 8
    6804:	09 f0       	breq	.+2      	; 0x6808 <Room+0x27c>
    6806:	19 cf       	rjmp	.-462    	; 0x663a <Room+0xae>
}
    6808:	0f 90       	pop	r0
    680a:	0f 90       	pop	r0
    680c:	0f 90       	pop	r0
    680e:	cf 91       	pop	r28
    6810:	df 91       	pop	r29
    6812:	08 95       	ret

00006814 <ROOM_LampOne>:

//======================================================================================================================================//
void ROOM_LampOne(void)
{
    6814:	df 93       	push	r29
    6816:	cf 93       	push	r28
    6818:	00 d0       	rcall	.+0      	; 0x681a <ROOM_LampOne+0x6>
    681a:	00 d0       	rcall	.+0      	; 0x681c <ROOM_LampOne+0x8>
    681c:	00 d0       	rcall	.+0      	; 0x681e <ROOM_LampOne+0xa>
    681e:	cd b7       	in	r28, 0x3d	; 61
    6820:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    6822:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Lamp1 Option :");
    6826:	82 ef       	ldi	r24, 0xF2	; 242
    6828:	91 e0       	ldi	r25, 0x01	; 1
    682a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    682e:	82 e0       	ldi	r24, 0x02	; 2
    6830:	61 e0       	ldi	r22, 0x01	; 1
    6832:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1 : ON       2 : OFF");
    6836:	81 e0       	ldi	r24, 0x01	; 1
    6838:	92 e0       	ldi	r25, 0x02	; 2
    683a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  KPD_Press = NOTPRESSED;
    683e:	8f ef       	ldi	r24, 0xFF	; 255
    6840:	80 93 d6 04 	sts	0x04D6, r24
  do
  {
    LDR_u8GetLightPres(&LDR1, &LDR_LightPrec);
    6844:	8d e7       	ldi	r24, 0x7D	; 125
    6846:	94 e0       	ldi	r25, 0x04	; 4
    6848:	2b ee       	ldi	r18, 0xEB	; 235
    684a:	34 e0       	ldi	r19, 0x04	; 4
    684c:	b9 01       	movw	r22, r18
    684e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (KPD_Press == '1' && LDR_LightPrec < 50)
    6852:	80 91 d6 04 	lds	r24, 0x04D6
    6856:	81 33       	cpi	r24, 0x31	; 49
    6858:	b1 f4       	brne	.+44     	; 0x6886 <ROOM_LampOne+0x72>
    685a:	80 91 eb 04 	lds	r24, 0x04EB
    685e:	82 33       	cpi	r24, 0x32	; 50
    6860:	90 f4       	brcc	.+36     	; 0x6886 <ROOM_LampOne+0x72>
    {
      if (Flags.Lamp_One == 0)
    6862:	80 91 8f 04 	lds	r24, 0x048F
    6866:	80 71       	andi	r24, 0x10	; 16
    6868:	88 23       	and	r24, r24
    686a:	69 f4       	brne	.+26     	; 0x6886 <ROOM_LampOne+0x72>
      {
        CLCD_vSetPosition(4, 5);
    686c:	84 e0       	ldi	r24, 0x04	; 4
    686e:	65 e0       	ldi	r22, 0x05	; 5
    6870:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("  Lamp has Error");
    6874:	86 e1       	ldi	r24, 0x16	; 22
    6876:	92 e0       	ldi	r25, 0x02	; 2
    6878:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Flags.Lamp_One = 1;
    687c:	80 91 8f 04 	lds	r24, 0x048F
    6880:	80 61       	ori	r24, 0x10	; 16
    6882:	80 93 8f 04 	sts	0x048F, r24
      }
    }
    if (LDR_LightPrec > 50)
    6886:	80 91 eb 04 	lds	r24, 0x04EB
    688a:	83 33       	cpi	r24, 0x33	; 51
    688c:	08 f4       	brcc	.+2      	; 0x6890 <ROOM_LampOne+0x7c>
    688e:	64 c0       	rjmp	.+200    	; 0x6958 <ROOM_LampOne+0x144>
    {
      Flags.Lamp_One = 0;
    6890:	80 91 8f 04 	lds	r24, 0x048F
    6894:	8f 7e       	andi	r24, 0xEF	; 239
    6896:	80 93 8f 04 	sts	0x048F, r24
      CLCD_vSetPosition(4, 5);
    689a:	84 e0       	ldi	r24, 0x04	; 4
    689c:	65 e0       	ldi	r22, 0x05	; 5
    689e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_vSendString("LED Status : ON ");
    68a2:	87 e2       	ldi	r24, 0x27	; 39
    68a4:	92 e0       	ldi	r25, 0x02	; 2
    68a6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      Error_State = USART_u8ReceiveData(&KPD_Press);
    68aa:	86 ed       	ldi	r24, 0xD6	; 214
    68ac:	94 e0       	ldi	r25, 0x04	; 4
    68ae:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    68b2:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    68b6:	80 91 79 04 	lds	r24, 0x0479
    68ba:	88 23       	and	r24, r24
    68bc:	09 f0       	breq	.+2      	; 0x68c0 <ROOM_LampOne+0xac>
    68be:	3f c0       	rjmp	.+126    	; 0x693e <ROOM_LampOne+0x12a>
      {
        switch (KPD_Press)
    68c0:	80 91 d6 04 	lds	r24, 0x04D6
    68c4:	28 2f       	mov	r18, r24
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	3e 83       	std	Y+6, r19	; 0x06
    68ca:	2d 83       	std	Y+5, r18	; 0x05
    68cc:	8d 81       	ldd	r24, Y+5	; 0x05
    68ce:	9e 81       	ldd	r25, Y+6	; 0x06
    68d0:	81 33       	cpi	r24, 0x31	; 49
    68d2:	91 05       	cpc	r25, r1
    68d4:	09 f4       	brne	.+2      	; 0x68d8 <ROOM_LampOne+0xc4>
    68d6:	ac c0       	rjmp	.+344    	; 0x6a30 <ROOM_LampOne+0x21c>
    68d8:	2d 81       	ldd	r18, Y+5	; 0x05
    68da:	3e 81       	ldd	r19, Y+6	; 0x06
    68dc:	22 33       	cpi	r18, 0x32	; 50
    68de:	31 05       	cpc	r19, r1
    68e0:	31 f0       	breq	.+12     	; 0x68ee <ROOM_LampOne+0xda>
    68e2:	8d 81       	ldd	r24, Y+5	; 0x05
    68e4:	9e 81       	ldd	r25, Y+6	; 0x06
    68e6:	88 30       	cpi	r24, 0x08	; 8
    68e8:	91 05       	cpc	r25, r1
    68ea:	51 f0       	breq	.+20     	; 0x6900 <ROOM_LampOne+0xec>
    68ec:	a1 c0       	rjmp	.+322    	; 0x6a30 <ROOM_LampOne+0x21c>
        {
        case '1':
          break;
        case '2':
          LED_vTog(Room_Led_1);
    68ee:	60 91 86 04 	lds	r22, 0x0486
    68f2:	70 91 87 04 	lds	r23, 0x0487
    68f6:	80 91 88 04 	lds	r24, 0x0488
    68fa:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    68fe:	98 c0       	rjmp	.+304    	; 0x6a30 <ROOM_LampOne+0x21c>
          break;
        case 0X08:
          CLCD_vClearScreen();
    6900:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6904:	8c e8       	ldi	r24, 0x8C	; 140
    6906:	91 e0       	ldi	r25, 0x01	; 1
    6908:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    690c:	82 e0       	ldi	r24, 0x02	; 2
    690e:	61 e0       	ldi	r22, 0x01	; 1
    6910:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6914:	85 ec       	ldi	r24, 0xC5	; 197
    6916:	91 e0       	ldi	r25, 0x01	; 1
    6918:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    691c:	83 e0       	ldi	r24, 0x03	; 3
    691e:	61 e0       	ldi	r22, 0x01	; 1
    6920:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6924:	84 ed       	ldi	r24, 0xD4	; 212
    6926:	91 e0       	ldi	r25, 0x01	; 1
    6928:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    692c:	84 e0       	ldi	r24, 0x04	; 4
    692e:	61 e0       	ldi	r22, 0x01	; 1
    6930:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6934:	83 ee       	ldi	r24, 0xE3	; 227
    6936:	91 e0       	ldi	r25, 0x01	; 1
    6938:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    693c:	79 c0       	rjmp	.+242    	; 0x6a30 <ROOM_LampOne+0x21c>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    693e:	80 91 79 04 	lds	r24, 0x0479
    6942:	84 30       	cpi	r24, 0x04	; 4
    6944:	09 f0       	breq	.+2      	; 0x6948 <ROOM_LampOne+0x134>
    6946:	74 c0       	rjmp	.+232    	; 0x6a30 <ROOM_LampOne+0x21c>
      {
        if (Error_Time_Out == Time_Out)
    6948:	90 91 bd 04 	lds	r25, 0x04BD
          }
          USART_u8SendData(0X0D);
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    694c:	80 91 bd 04 	lds	r24, 0x04BD
    6950:	8f 5f       	subi	r24, 0xFF	; 255
    6952:	80 93 bd 04 	sts	0x04BD, r24
    6956:	6c c0       	rjmp	.+216    	; 0x6a30 <ROOM_LampOne+0x21c>
      }
    }
    else if (LDR_LightPrec < 50)
    6958:	80 91 eb 04 	lds	r24, 0x04EB
    695c:	82 33       	cpi	r24, 0x32	; 50
    695e:	08 f0       	brcs	.+2      	; 0x6962 <ROOM_LampOne+0x14e>
    6960:	67 c0       	rjmp	.+206    	; 0x6a30 <ROOM_LampOne+0x21c>
    {
      CLCD_vSetPosition(4, 5);
    6962:	84 e0       	ldi	r24, 0x04	; 4
    6964:	65 e0       	ldi	r22, 0x05	; 5
    6966:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      if (Flags.Lamp_One == 0)
    696a:	80 91 8f 04 	lds	r24, 0x048F
    696e:	80 71       	andi	r24, 0x10	; 16
    6970:	88 23       	and	r24, r24
    6972:	21 f4       	brne	.+8      	; 0x697c <ROOM_LampOne+0x168>
      {
        CLCD_vSendString("LED Status : OFF");
    6974:	88 e3       	ldi	r24, 0x38	; 56
    6976:	92 e0       	ldi	r25, 0x02	; 2
    6978:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      }
      Error_State = USART_u8ReceiveData(&KPD_Press);
    697c:	86 ed       	ldi	r24, 0xD6	; 214
    697e:	94 e0       	ldi	r25, 0x04	; 4
    6980:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6984:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    6988:	80 91 79 04 	lds	r24, 0x0479
    698c:	88 23       	and	r24, r24
    698e:	09 f0       	breq	.+2      	; 0x6992 <ROOM_LampOne+0x17e>
    6990:	44 c0       	rjmp	.+136    	; 0x6a1a <ROOM_LampOne+0x206>
      {
        switch (KPD_Press)
    6992:	80 91 d6 04 	lds	r24, 0x04D6
    6996:	28 2f       	mov	r18, r24
    6998:	30 e0       	ldi	r19, 0x00	; 0
    699a:	3b 83       	std	Y+3, r19	; 0x03
    699c:	2a 83       	std	Y+2, r18	; 0x02
    699e:	8a 81       	ldd	r24, Y+2	; 0x02
    69a0:	9b 81       	ldd	r25, Y+3	; 0x03
    69a2:	81 33       	cpi	r24, 0x31	; 49
    69a4:	91 05       	cpc	r25, r1
    69a6:	59 f0       	breq	.+22     	; 0x69be <ROOM_LampOne+0x1aa>
    69a8:	2a 81       	ldd	r18, Y+2	; 0x02
    69aa:	3b 81       	ldd	r19, Y+3	; 0x03
    69ac:	22 33       	cpi	r18, 0x32	; 50
    69ae:	31 05       	cpc	r19, r1
    69b0:	79 f0       	breq	.+30     	; 0x69d0 <ROOM_LampOne+0x1bc>
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	9b 81       	ldd	r25, Y+3	; 0x03
    69b6:	88 30       	cpi	r24, 0x08	; 8
    69b8:	91 05       	cpc	r25, r1
    69ba:	81 f0       	breq	.+32     	; 0x69dc <ROOM_LampOne+0x1c8>
    69bc:	39 c0       	rjmp	.+114    	; 0x6a30 <ROOM_LampOne+0x21c>
        {
        case '1':
          LED_vTog(Room_Led_1);
    69be:	60 91 86 04 	lds	r22, 0x0486
    69c2:	70 91 87 04 	lds	r23, 0x0487
    69c6:	80 91 88 04 	lds	r24, 0x0488
    69ca:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    69ce:	30 c0       	rjmp	.+96     	; 0x6a30 <ROOM_LampOne+0x21c>
          break;
        case '2':
          Flags.Lamp_One = 0;
    69d0:	80 91 8f 04 	lds	r24, 0x048F
    69d4:	8f 7e       	andi	r24, 0xEF	; 239
    69d6:	80 93 8f 04 	sts	0x048F, r24
    69da:	2a c0       	rjmp	.+84     	; 0x6a30 <ROOM_LampOne+0x21c>
          break;
        case 0X08:
          CLCD_vClearScreen();
    69dc:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    69e0:	8c e8       	ldi	r24, 0x8C	; 140
    69e2:	91 e0       	ldi	r25, 0x01	; 1
    69e4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    69e8:	82 e0       	ldi	r24, 0x02	; 2
    69ea:	61 e0       	ldi	r22, 0x01	; 1
    69ec:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    69f0:	85 ec       	ldi	r24, 0xC5	; 197
    69f2:	91 e0       	ldi	r25, 0x01	; 1
    69f4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    69f8:	83 e0       	ldi	r24, 0x03	; 3
    69fa:	61 e0       	ldi	r22, 0x01	; 1
    69fc:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6a00:	84 ed       	ldi	r24, 0xD4	; 212
    6a02:	91 e0       	ldi	r25, 0x01	; 1
    6a04:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    6a08:	84 e0       	ldi	r24, 0x04	; 4
    6a0a:	61 e0       	ldi	r22, 0x01	; 1
    6a0c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6a10:	83 ee       	ldi	r24, 0xE3	; 227
    6a12:	91 e0       	ldi	r25, 0x01	; 1
    6a14:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6a18:	0b c0       	rjmp	.+22     	; 0x6a30 <ROOM_LampOne+0x21c>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    6a1a:	80 91 79 04 	lds	r24, 0x0479
    6a1e:	84 30       	cpi	r24, 0x04	; 4
    6a20:	39 f4       	brne	.+14     	; 0x6a30 <ROOM_LampOne+0x21c>
      {
        if (Error_Time_Out == Time_Out)
    6a22:	90 91 bd 04 	lds	r25, 0x04BD
            CLCD_vClearScreen();
          }
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    6a26:	80 91 bd 04 	lds	r24, 0x04BD
    6a2a:	8f 5f       	subi	r24, 0xFF	; 255
    6a2c:	80 93 bd 04 	sts	0x04BD, r24
      }
    }
    else
    {
    }
  } while (KPD_Press != 0X08);
    6a30:	80 91 d6 04 	lds	r24, 0x04D6
    6a34:	88 30       	cpi	r24, 0x08	; 8
    6a36:	09 f0       	breq	.+2      	; 0x6a3a <ROOM_LampOne+0x226>
    6a38:	05 cf       	rjmp	.-502    	; 0x6844 <ROOM_LampOne+0x30>
}
    6a3a:	26 96       	adiw	r28, 0x06	; 6
    6a3c:	0f b6       	in	r0, 0x3f	; 63
    6a3e:	f8 94       	cli
    6a40:	de bf       	out	0x3e, r29	; 62
    6a42:	0f be       	out	0x3f, r0	; 63
    6a44:	cd bf       	out	0x3d, r28	; 61
    6a46:	cf 91       	pop	r28
    6a48:	df 91       	pop	r29
    6a4a:	08 95       	ret

00006a4c <ROOM_LampTwo>:
//======================================================================================================================================//
void ROOM_LampTwo(void)
{
    6a4c:	df 93       	push	r29
    6a4e:	cf 93       	push	r28
    6a50:	00 d0       	rcall	.+0      	; 0x6a52 <ROOM_LampTwo+0x6>
    6a52:	00 d0       	rcall	.+0      	; 0x6a54 <ROOM_LampTwo+0x8>
    6a54:	00 d0       	rcall	.+0      	; 0x6a56 <ROOM_LampTwo+0xa>
    6a56:	cd b7       	in	r28, 0x3d	; 61
    6a58:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    6a5a:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Lamp2 Option :");
    6a5e:	89 e4       	ldi	r24, 0x49	; 73
    6a60:	92 e0       	ldi	r25, 0x02	; 2
    6a62:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6a66:	82 e0       	ldi	r24, 0x02	; 2
    6a68:	61 e0       	ldi	r22, 0x01	; 1
    6a6a:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1 : ON       2 : OFF");
    6a6e:	81 e0       	ldi	r24, 0x01	; 1
    6a70:	92 e0       	ldi	r25, 0x02	; 2
    6a72:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  KPD_Press = NOTPRESSED;
    6a76:	8f ef       	ldi	r24, 0xFF	; 255
    6a78:	80 93 d6 04 	sts	0x04D6, r24
  do
  {
    LDR_u8GetLightPres(&LDR2, &LDR_LightPrec);
    6a7c:	80 e8       	ldi	r24, 0x80	; 128
    6a7e:	94 e0       	ldi	r25, 0x04	; 4
    6a80:	2b ee       	ldi	r18, 0xEB	; 235
    6a82:	34 e0       	ldi	r19, 0x04	; 4
    6a84:	b9 01       	movw	r22, r18
    6a86:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (KPD_Press == '1' && LDR_LightPrec < 50)
    6a8a:	80 91 d6 04 	lds	r24, 0x04D6
    6a8e:	81 33       	cpi	r24, 0x31	; 49
    6a90:	b1 f4       	brne	.+44     	; 0x6abe <ROOM_LampTwo+0x72>
    6a92:	80 91 eb 04 	lds	r24, 0x04EB
    6a96:	82 33       	cpi	r24, 0x32	; 50
    6a98:	90 f4       	brcc	.+36     	; 0x6abe <ROOM_LampTwo+0x72>
    {
      if (Flags.Lamp_Two == 0)
    6a9a:	80 91 8f 04 	lds	r24, 0x048F
    6a9e:	80 72       	andi	r24, 0x20	; 32
    6aa0:	88 23       	and	r24, r24
    6aa2:	69 f4       	brne	.+26     	; 0x6abe <ROOM_LampTwo+0x72>
      {
        CLCD_vSetPosition(4, 5);
    6aa4:	84 e0       	ldi	r24, 0x04	; 4
    6aa6:	65 e0       	ldi	r22, 0x05	; 5
    6aa8:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("  Lamp has Error");
    6aac:	86 e1       	ldi	r24, 0x16	; 22
    6aae:	92 e0       	ldi	r25, 0x02	; 2
    6ab0:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Flags.Lamp_Two = 1;
    6ab4:	80 91 8f 04 	lds	r24, 0x048F
    6ab8:	80 62       	ori	r24, 0x20	; 32
    6aba:	80 93 8f 04 	sts	0x048F, r24
      }
    }
    if (LDR_LightPrec > 50)
    6abe:	80 91 eb 04 	lds	r24, 0x04EB
    6ac2:	83 33       	cpi	r24, 0x33	; 51
    6ac4:	08 f4       	brcc	.+2      	; 0x6ac8 <ROOM_LampTwo+0x7c>
    6ac6:	64 c0       	rjmp	.+200    	; 0x6b90 <ROOM_LampTwo+0x144>
    {
      Flags.Lamp_Two = 0;
    6ac8:	80 91 8f 04 	lds	r24, 0x048F
    6acc:	8f 7d       	andi	r24, 0xDF	; 223
    6ace:	80 93 8f 04 	sts	0x048F, r24
      CLCD_vSetPosition(4, 5);
    6ad2:	84 e0       	ldi	r24, 0x04	; 4
    6ad4:	65 e0       	ldi	r22, 0x05	; 5
    6ad6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_vSendString("LED Status : ON ");
    6ada:	87 e2       	ldi	r24, 0x27	; 39
    6adc:	92 e0       	ldi	r25, 0x02	; 2
    6ade:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      Error_State = USART_u8ReceiveData(&KPD_Press);
    6ae2:	86 ed       	ldi	r24, 0xD6	; 214
    6ae4:	94 e0       	ldi	r25, 0x04	; 4
    6ae6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6aea:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    6aee:	80 91 79 04 	lds	r24, 0x0479
    6af2:	88 23       	and	r24, r24
    6af4:	09 f0       	breq	.+2      	; 0x6af8 <ROOM_LampTwo+0xac>
    6af6:	3f c0       	rjmp	.+126    	; 0x6b76 <ROOM_LampTwo+0x12a>
      {
        switch (KPD_Press)
    6af8:	80 91 d6 04 	lds	r24, 0x04D6
    6afc:	28 2f       	mov	r18, r24
    6afe:	30 e0       	ldi	r19, 0x00	; 0
    6b00:	3e 83       	std	Y+6, r19	; 0x06
    6b02:	2d 83       	std	Y+5, r18	; 0x05
    6b04:	8d 81       	ldd	r24, Y+5	; 0x05
    6b06:	9e 81       	ldd	r25, Y+6	; 0x06
    6b08:	81 33       	cpi	r24, 0x31	; 49
    6b0a:	91 05       	cpc	r25, r1
    6b0c:	09 f4       	brne	.+2      	; 0x6b10 <ROOM_LampTwo+0xc4>
    6b0e:	ac c0       	rjmp	.+344    	; 0x6c68 <ROOM_LampTwo+0x21c>
    6b10:	2d 81       	ldd	r18, Y+5	; 0x05
    6b12:	3e 81       	ldd	r19, Y+6	; 0x06
    6b14:	22 33       	cpi	r18, 0x32	; 50
    6b16:	31 05       	cpc	r19, r1
    6b18:	31 f0       	breq	.+12     	; 0x6b26 <ROOM_LampTwo+0xda>
    6b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b1e:	88 30       	cpi	r24, 0x08	; 8
    6b20:	91 05       	cpc	r25, r1
    6b22:	51 f0       	breq	.+20     	; 0x6b38 <ROOM_LampTwo+0xec>
    6b24:	a1 c0       	rjmp	.+322    	; 0x6c68 <ROOM_LampTwo+0x21c>
        {
        case '1':
          break;
        case '2':
          LED_vTog(Room_Led_2);
    6b26:	60 91 89 04 	lds	r22, 0x0489
    6b2a:	70 91 8a 04 	lds	r23, 0x048A
    6b2e:	80 91 8b 04 	lds	r24, 0x048B
    6b32:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    6b36:	98 c0       	rjmp	.+304    	; 0x6c68 <ROOM_LampTwo+0x21c>
          break;
        case 0X08:
          CLCD_vClearScreen();
    6b38:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6b3c:	8c e8       	ldi	r24, 0x8C	; 140
    6b3e:	91 e0       	ldi	r25, 0x01	; 1
    6b40:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    6b44:	82 e0       	ldi	r24, 0x02	; 2
    6b46:	61 e0       	ldi	r22, 0x01	; 1
    6b48:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6b4c:	85 ec       	ldi	r24, 0xC5	; 197
    6b4e:	91 e0       	ldi	r25, 0x01	; 1
    6b50:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    6b54:	83 e0       	ldi	r24, 0x03	; 3
    6b56:	61 e0       	ldi	r22, 0x01	; 1
    6b58:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6b5c:	84 ed       	ldi	r24, 0xD4	; 212
    6b5e:	91 e0       	ldi	r25, 0x01	; 1
    6b60:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    6b64:	84 e0       	ldi	r24, 0x04	; 4
    6b66:	61 e0       	ldi	r22, 0x01	; 1
    6b68:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6b6c:	83 ee       	ldi	r24, 0xE3	; 227
    6b6e:	91 e0       	ldi	r25, 0x01	; 1
    6b70:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6b74:	79 c0       	rjmp	.+242    	; 0x6c68 <ROOM_LampTwo+0x21c>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    6b76:	80 91 79 04 	lds	r24, 0x0479
    6b7a:	84 30       	cpi	r24, 0x04	; 4
    6b7c:	09 f0       	breq	.+2      	; 0x6b80 <ROOM_LampTwo+0x134>
    6b7e:	74 c0       	rjmp	.+232    	; 0x6c68 <ROOM_LampTwo+0x21c>
      {
        if (Error_Time_Out == Time_Out)
    6b80:	90 91 bd 04 	lds	r25, 0x04BD
          }
          USART_u8SendData(0X0D);
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    6b84:	80 91 bd 04 	lds	r24, 0x04BD
    6b88:	8f 5f       	subi	r24, 0xFF	; 255
    6b8a:	80 93 bd 04 	sts	0x04BD, r24
    6b8e:	6c c0       	rjmp	.+216    	; 0x6c68 <ROOM_LampTwo+0x21c>
      }
    }
    else if (LDR_LightPrec < 50)
    6b90:	80 91 eb 04 	lds	r24, 0x04EB
    6b94:	82 33       	cpi	r24, 0x32	; 50
    6b96:	08 f0       	brcs	.+2      	; 0x6b9a <ROOM_LampTwo+0x14e>
    6b98:	67 c0       	rjmp	.+206    	; 0x6c68 <ROOM_LampTwo+0x21c>
    {
      CLCD_vSetPosition(4, 5);
    6b9a:	84 e0       	ldi	r24, 0x04	; 4
    6b9c:	65 e0       	ldi	r22, 0x05	; 5
    6b9e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      if (Flags.Lamp_Two == 0)
    6ba2:	80 91 8f 04 	lds	r24, 0x048F
    6ba6:	80 72       	andi	r24, 0x20	; 32
    6ba8:	88 23       	and	r24, r24
    6baa:	21 f4       	brne	.+8      	; 0x6bb4 <ROOM_LampTwo+0x168>
      {
        CLCD_vSendString("LED Status : OFF");
    6bac:	88 e3       	ldi	r24, 0x38	; 56
    6bae:	92 e0       	ldi	r25, 0x02	; 2
    6bb0:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      }
      Error_State = USART_u8ReceiveData(&KPD_Press);
    6bb4:	86 ed       	ldi	r24, 0xD6	; 214
    6bb6:	94 e0       	ldi	r25, 0x04	; 4
    6bb8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6bbc:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    6bc0:	80 91 79 04 	lds	r24, 0x0479
    6bc4:	88 23       	and	r24, r24
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <ROOM_LampTwo+0x17e>
    6bc8:	44 c0       	rjmp	.+136    	; 0x6c52 <ROOM_LampTwo+0x206>
      {
        switch (KPD_Press)
    6bca:	80 91 d6 04 	lds	r24, 0x04D6
    6bce:	28 2f       	mov	r18, r24
    6bd0:	30 e0       	ldi	r19, 0x00	; 0
    6bd2:	3b 83       	std	Y+3, r19	; 0x03
    6bd4:	2a 83       	std	Y+2, r18	; 0x02
    6bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bda:	81 33       	cpi	r24, 0x31	; 49
    6bdc:	91 05       	cpc	r25, r1
    6bde:	59 f0       	breq	.+22     	; 0x6bf6 <ROOM_LampTwo+0x1aa>
    6be0:	2a 81       	ldd	r18, Y+2	; 0x02
    6be2:	3b 81       	ldd	r19, Y+3	; 0x03
    6be4:	22 33       	cpi	r18, 0x32	; 50
    6be6:	31 05       	cpc	r19, r1
    6be8:	79 f0       	breq	.+30     	; 0x6c08 <ROOM_LampTwo+0x1bc>
    6bea:	8a 81       	ldd	r24, Y+2	; 0x02
    6bec:	9b 81       	ldd	r25, Y+3	; 0x03
    6bee:	88 30       	cpi	r24, 0x08	; 8
    6bf0:	91 05       	cpc	r25, r1
    6bf2:	81 f0       	breq	.+32     	; 0x6c14 <ROOM_LampTwo+0x1c8>
    6bf4:	39 c0       	rjmp	.+114    	; 0x6c68 <ROOM_LampTwo+0x21c>
        {
        case '1':
          LED_vTog(Room_Led_2);
    6bf6:	60 91 89 04 	lds	r22, 0x0489
    6bfa:	70 91 8a 04 	lds	r23, 0x048A
    6bfe:	80 91 8b 04 	lds	r24, 0x048B
    6c02:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    6c06:	30 c0       	rjmp	.+96     	; 0x6c68 <ROOM_LampTwo+0x21c>
          break;
        case '2':
          Flags.Lamp_Two = 0;
    6c08:	80 91 8f 04 	lds	r24, 0x048F
    6c0c:	8f 7d       	andi	r24, 0xDF	; 223
    6c0e:	80 93 8f 04 	sts	0x048F, r24
    6c12:	2a c0       	rjmp	.+84     	; 0x6c68 <ROOM_LampTwo+0x21c>
          break;
        case 0X08:
          CLCD_vClearScreen();
    6c14:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6c18:	8c e8       	ldi	r24, 0x8C	; 140
    6c1a:	91 e0       	ldi	r25, 0x01	; 1
    6c1c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    6c20:	82 e0       	ldi	r24, 0x02	; 2
    6c22:	61 e0       	ldi	r22, 0x01	; 1
    6c24:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6c28:	85 ec       	ldi	r24, 0xC5	; 197
    6c2a:	91 e0       	ldi	r25, 0x01	; 1
    6c2c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    6c30:	83 e0       	ldi	r24, 0x03	; 3
    6c32:	61 e0       	ldi	r22, 0x01	; 1
    6c34:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6c38:	84 ed       	ldi	r24, 0xD4	; 212
    6c3a:	91 e0       	ldi	r25, 0x01	; 1
    6c3c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    6c40:	84 e0       	ldi	r24, 0x04	; 4
    6c42:	61 e0       	ldi	r22, 0x01	; 1
    6c44:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6c48:	83 ee       	ldi	r24, 0xE3	; 227
    6c4a:	91 e0       	ldi	r25, 0x01	; 1
    6c4c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6c50:	0b c0       	rjmp	.+22     	; 0x6c68 <ROOM_LampTwo+0x21c>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    6c52:	80 91 79 04 	lds	r24, 0x0479
    6c56:	84 30       	cpi	r24, 0x04	; 4
    6c58:	39 f4       	brne	.+14     	; 0x6c68 <ROOM_LampTwo+0x21c>
      {
        if (Error_Time_Out == Time_Out)
    6c5a:	90 91 bd 04 	lds	r25, 0x04BD
            CLCD_vClearScreen();
          }
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    6c5e:	80 91 bd 04 	lds	r24, 0x04BD
    6c62:	8f 5f       	subi	r24, 0xFF	; 255
    6c64:	80 93 bd 04 	sts	0x04BD, r24
      }
    }
    else
    {
    }
  } while (KPD_Press != 0X08);
    6c68:	80 91 d6 04 	lds	r24, 0x04D6
    6c6c:	88 30       	cpi	r24, 0x08	; 8
    6c6e:	09 f0       	breq	.+2      	; 0x6c72 <ROOM_LampTwo+0x226>
    6c70:	05 cf       	rjmp	.-502    	; 0x6a7c <ROOM_LampTwo+0x30>
}
    6c72:	26 96       	adiw	r28, 0x06	; 6
    6c74:	0f b6       	in	r0, 0x3f	; 63
    6c76:	f8 94       	cli
    6c78:	de bf       	out	0x3e, r29	; 62
    6c7a:	0f be       	out	0x3f, r0	; 63
    6c7c:	cd bf       	out	0x3d, r28	; 61
    6c7e:	cf 91       	pop	r28
    6c80:	df 91       	pop	r29
    6c82:	08 95       	ret

00006c84 <ROOM_LampThree>:
//======================================================================================================================================//
void ROOM_LampThree(void)
{
    6c84:	df 93       	push	r29
    6c86:	cf 93       	push	r28
    6c88:	00 d0       	rcall	.+0      	; 0x6c8a <ROOM_LampThree+0x6>
    6c8a:	00 d0       	rcall	.+0      	; 0x6c8c <ROOM_LampThree+0x8>
    6c8c:	00 d0       	rcall	.+0      	; 0x6c8e <ROOM_LampThree+0xa>
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    6c92:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Lamp3 Option :");
    6c96:	88 e5       	ldi	r24, 0x58	; 88
    6c98:	92 e0       	ldi	r25, 0x02	; 2
    6c9a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6c9e:	82 e0       	ldi	r24, 0x02	; 2
    6ca0:	61 e0       	ldi	r22, 0x01	; 1
    6ca2:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1 : ON       2 : OFF");
    6ca6:	81 e0       	ldi	r24, 0x01	; 1
    6ca8:	92 e0       	ldi	r25, 0x02	; 2
    6caa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  KPD_Press = NOTPRESSED;
    6cae:	8f ef       	ldi	r24, 0xFF	; 255
    6cb0:	80 93 d6 04 	sts	0x04D6, r24
  do
  {
    LDR_u8GetLightPres(&LDR3, &LDR_LightPrec);
    6cb4:	83 e8       	ldi	r24, 0x83	; 131
    6cb6:	94 e0       	ldi	r25, 0x04	; 4
    6cb8:	2b ee       	ldi	r18, 0xEB	; 235
    6cba:	34 e0       	ldi	r19, 0x04	; 4
    6cbc:	b9 01       	movw	r22, r18
    6cbe:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (KPD_Press == '1' && LDR_LightPrec < 50)
    6cc2:	80 91 d6 04 	lds	r24, 0x04D6
    6cc6:	81 33       	cpi	r24, 0x31	; 49
    6cc8:	b1 f4       	brne	.+44     	; 0x6cf6 <ROOM_LampThree+0x72>
    6cca:	80 91 eb 04 	lds	r24, 0x04EB
    6cce:	82 33       	cpi	r24, 0x32	; 50
    6cd0:	90 f4       	brcc	.+36     	; 0x6cf6 <ROOM_LampThree+0x72>
    {
      if (Flags.Lamp_Three == 0)
    6cd2:	80 91 8f 04 	lds	r24, 0x048F
    6cd6:	80 74       	andi	r24, 0x40	; 64
    6cd8:	88 23       	and	r24, r24
    6cda:	69 f4       	brne	.+26     	; 0x6cf6 <ROOM_LampThree+0x72>
      {
        CLCD_vSetPosition(4, 5);
    6cdc:	84 e0       	ldi	r24, 0x04	; 4
    6cde:	65 e0       	ldi	r22, 0x05	; 5
    6ce0:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("  Lamp has Error");
    6ce4:	86 e1       	ldi	r24, 0x16	; 22
    6ce6:	92 e0       	ldi	r25, 0x02	; 2
    6ce8:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Flags.Lamp_Three = 1;
    6cec:	80 91 8f 04 	lds	r24, 0x048F
    6cf0:	80 64       	ori	r24, 0x40	; 64
    6cf2:	80 93 8f 04 	sts	0x048F, r24
      }
    }
    if (LDR_LightPrec > 50)
    6cf6:	80 91 eb 04 	lds	r24, 0x04EB
    6cfa:	83 33       	cpi	r24, 0x33	; 51
    6cfc:	08 f4       	brcc	.+2      	; 0x6d00 <ROOM_LampThree+0x7c>
    6cfe:	64 c0       	rjmp	.+200    	; 0x6dc8 <ROOM_LampThree+0x144>
    {
      Flags.Lamp_Three = 0;
    6d00:	80 91 8f 04 	lds	r24, 0x048F
    6d04:	8f 7b       	andi	r24, 0xBF	; 191
    6d06:	80 93 8f 04 	sts	0x048F, r24
      CLCD_vSetPosition(4, 5);
    6d0a:	84 e0       	ldi	r24, 0x04	; 4
    6d0c:	65 e0       	ldi	r22, 0x05	; 5
    6d0e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      CLCD_vSendString("LED Status : ON ");
    6d12:	87 e2       	ldi	r24, 0x27	; 39
    6d14:	92 e0       	ldi	r25, 0x02	; 2
    6d16:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      Error_State = USART_u8ReceiveData(&KPD_Press);
    6d1a:	86 ed       	ldi	r24, 0xD6	; 214
    6d1c:	94 e0       	ldi	r25, 0x04	; 4
    6d1e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6d22:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    6d26:	80 91 79 04 	lds	r24, 0x0479
    6d2a:	88 23       	and	r24, r24
    6d2c:	09 f0       	breq	.+2      	; 0x6d30 <ROOM_LampThree+0xac>
    6d2e:	3f c0       	rjmp	.+126    	; 0x6dae <ROOM_LampThree+0x12a>
      {
        switch (KPD_Press)
    6d30:	80 91 d6 04 	lds	r24, 0x04D6
    6d34:	28 2f       	mov	r18, r24
    6d36:	30 e0       	ldi	r19, 0x00	; 0
    6d38:	3e 83       	std	Y+6, r19	; 0x06
    6d3a:	2d 83       	std	Y+5, r18	; 0x05
    6d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    6d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    6d40:	81 33       	cpi	r24, 0x31	; 49
    6d42:	91 05       	cpc	r25, r1
    6d44:	09 f4       	brne	.+2      	; 0x6d48 <ROOM_LampThree+0xc4>
    6d46:	a6 c0       	rjmp	.+332    	; 0x6e94 <ROOM_LampThree+0x210>
    6d48:	2d 81       	ldd	r18, Y+5	; 0x05
    6d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    6d4c:	22 33       	cpi	r18, 0x32	; 50
    6d4e:	31 05       	cpc	r19, r1
    6d50:	31 f0       	breq	.+12     	; 0x6d5e <ROOM_LampThree+0xda>
    6d52:	8d 81       	ldd	r24, Y+5	; 0x05
    6d54:	9e 81       	ldd	r25, Y+6	; 0x06
    6d56:	88 30       	cpi	r24, 0x08	; 8
    6d58:	91 05       	cpc	r25, r1
    6d5a:	51 f0       	breq	.+20     	; 0x6d70 <ROOM_LampThree+0xec>
    6d5c:	9b c0       	rjmp	.+310    	; 0x6e94 <ROOM_LampThree+0x210>
        {
        case '1':
          break;
        case '2':
          LED_vTog(Room_Led_3);
    6d5e:	60 91 8c 04 	lds	r22, 0x048C
    6d62:	70 91 8d 04 	lds	r23, 0x048D
    6d66:	80 91 8e 04 	lds	r24, 0x048E
    6d6a:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    6d6e:	92 c0       	rjmp	.+292    	; 0x6e94 <ROOM_LampThree+0x210>
          break;
        case 0X08:
          CLCD_vClearScreen();
    6d70:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6d74:	8c e8       	ldi	r24, 0x8C	; 140
    6d76:	91 e0       	ldi	r25, 0x01	; 1
    6d78:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    6d7c:	82 e0       	ldi	r24, 0x02	; 2
    6d7e:	61 e0       	ldi	r22, 0x01	; 1
    6d80:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6d84:	85 ec       	ldi	r24, 0xC5	; 197
    6d86:	91 e0       	ldi	r25, 0x01	; 1
    6d88:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    6d8c:	83 e0       	ldi	r24, 0x03	; 3
    6d8e:	61 e0       	ldi	r22, 0x01	; 1
    6d90:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6d94:	84 ed       	ldi	r24, 0xD4	; 212
    6d96:	91 e0       	ldi	r25, 0x01	; 1
    6d98:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    6d9c:	84 e0       	ldi	r24, 0x04	; 4
    6d9e:	61 e0       	ldi	r22, 0x01	; 1
    6da0:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6da4:	83 ee       	ldi	r24, 0xE3	; 227
    6da6:	91 e0       	ldi	r25, 0x01	; 1
    6da8:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6dac:	73 c0       	rjmp	.+230    	; 0x6e94 <ROOM_LampThree+0x210>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    6dae:	80 91 79 04 	lds	r24, 0x0479
    6db2:	84 30       	cpi	r24, 0x04	; 4
    6db4:	09 f0       	breq	.+2      	; 0x6db8 <ROOM_LampThree+0x134>
    6db6:	6e c0       	rjmp	.+220    	; 0x6e94 <ROOM_LampThree+0x210>
      {
        if (Error_Time_Out == Time_Out)
    6db8:	90 91 bd 04 	lds	r25, 0x04BD
          }
          USART_u8SendData(0X0D);
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    6dbc:	80 91 bd 04 	lds	r24, 0x04BD
    6dc0:	8f 5f       	subi	r24, 0xFF	; 255
    6dc2:	80 93 bd 04 	sts	0x04BD, r24
    6dc6:	66 c0       	rjmp	.+204    	; 0x6e94 <ROOM_LampThree+0x210>
      }
    }
    else if (LDR_LightPrec < 50)
    6dc8:	80 91 eb 04 	lds	r24, 0x04EB
    6dcc:	82 33       	cpi	r24, 0x32	; 50
    6dce:	08 f0       	brcs	.+2      	; 0x6dd2 <ROOM_LampThree+0x14e>
    6dd0:	61 c0       	rjmp	.+194    	; 0x6e94 <ROOM_LampThree+0x210>
    {
      CLCD_vSetPosition(4, 5);
    6dd2:	84 e0       	ldi	r24, 0x04	; 4
    6dd4:	65 e0       	ldi	r22, 0x05	; 5
    6dd6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
      if (Flags.Lamp_Three == 0)
    6dda:	80 91 8f 04 	lds	r24, 0x048F
    6dde:	80 74       	andi	r24, 0x40	; 64
    6de0:	88 23       	and	r24, r24
    6de2:	21 f4       	brne	.+8      	; 0x6dec <ROOM_LampThree+0x168>
      {
        CLCD_vSendString("LED Status : OFF");
    6de4:	88 e3       	ldi	r24, 0x38	; 56
    6de6:	92 e0       	ldi	r25, 0x02	; 2
    6de8:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
      }
      Error_State = USART_u8ReceiveData(&KPD_Press);
    6dec:	86 ed       	ldi	r24, 0xD6	; 214
    6dee:	94 e0       	ldi	r25, 0x04	; 4
    6df0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6df4:	80 93 79 04 	sts	0x0479, r24
      if (Error_State == OK)
    6df8:	80 91 79 04 	lds	r24, 0x0479
    6dfc:	88 23       	and	r24, r24
    6dfe:	09 f0       	breq	.+2      	; 0x6e02 <ROOM_LampThree+0x17e>
    6e00:	3e c0       	rjmp	.+124    	; 0x6e7e <ROOM_LampThree+0x1fa>
      {
        switch (KPD_Press)
    6e02:	80 91 d6 04 	lds	r24, 0x04D6
    6e06:	28 2f       	mov	r18, r24
    6e08:	30 e0       	ldi	r19, 0x00	; 0
    6e0a:	3b 83       	std	Y+3, r19	; 0x03
    6e0c:	2a 83       	std	Y+2, r18	; 0x02
    6e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e10:	9b 81       	ldd	r25, Y+3	; 0x03
    6e12:	81 33       	cpi	r24, 0x31	; 49
    6e14:	91 05       	cpc	r25, r1
    6e16:	59 f0       	breq	.+22     	; 0x6e2e <ROOM_LampThree+0x1aa>
    6e18:	2a 81       	ldd	r18, Y+2	; 0x02
    6e1a:	3b 81       	ldd	r19, Y+3	; 0x03
    6e1c:	22 33       	cpi	r18, 0x32	; 50
    6e1e:	31 05       	cpc	r19, r1
    6e20:	c9 f1       	breq	.+114    	; 0x6e94 <ROOM_LampThree+0x210>
    6e22:	8a 81       	ldd	r24, Y+2	; 0x02
    6e24:	9b 81       	ldd	r25, Y+3	; 0x03
    6e26:	88 30       	cpi	r24, 0x08	; 8
    6e28:	91 05       	cpc	r25, r1
    6e2a:	51 f0       	breq	.+20     	; 0x6e40 <ROOM_LampThree+0x1bc>
    6e2c:	33 c0       	rjmp	.+102    	; 0x6e94 <ROOM_LampThree+0x210>
        {
        case '1':
          LED_vTog(Room_Led_3);
    6e2e:	60 91 8c 04 	lds	r22, 0x048C
    6e32:	70 91 8d 04 	lds	r23, 0x048D
    6e36:	80 91 8e 04 	lds	r24, 0x048E
    6e3a:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    6e3e:	2a c0       	rjmp	.+84     	; 0x6e94 <ROOM_LampThree+0x210>
          break;
        case '2':
          break;
        case 0X08:
          CLCD_vClearScreen();
    6e40:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
          CLCD_vSendString("Room Options : ");
    6e44:	8c e8       	ldi	r24, 0x8C	; 140
    6e46:	91 e0       	ldi	r25, 0x01	; 1
    6e48:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(2, 1);
    6e4c:	82 e0       	ldi	r24, 0x02	; 2
    6e4e:	61 e0       	ldi	r22, 0x01	; 1
    6e50:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("1- Led1 ON/OFF");
    6e54:	85 ec       	ldi	r24, 0xC5	; 197
    6e56:	91 e0       	ldi	r25, 0x01	; 1
    6e58:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(3, 1);
    6e5c:	83 e0       	ldi	r24, 0x03	; 3
    6e5e:	61 e0       	ldi	r22, 0x01	; 1
    6e60:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("2- Led2 ON/OFF");
    6e64:	84 ed       	ldi	r24, 0xD4	; 212
    6e66:	91 e0       	ldi	r25, 0x01	; 1
    6e68:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
          CLCD_vSetPosition(4, 1);
    6e6c:	84 e0       	ldi	r24, 0x04	; 4
    6e6e:	61 e0       	ldi	r22, 0x01	; 1
    6e70:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
          CLCD_vSendString("3- Led3 ON/OFF");
    6e74:	83 ee       	ldi	r24, 0xE3	; 227
    6e76:	91 e0       	ldi	r25, 0x01	; 1
    6e78:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    6e7c:	0b c0       	rjmp	.+22     	; 0x6e94 <ROOM_LampThree+0x210>
          break;
        default:
          break;
        }
      }
      else if (Error_State == TIMEOUT_STATE)
    6e7e:	80 91 79 04 	lds	r24, 0x0479
    6e82:	84 30       	cpi	r24, 0x04	; 4
    6e84:	39 f4       	brne	.+14     	; 0x6e94 <ROOM_LampThree+0x210>
      {
        if (Error_Time_Out == Time_Out)
    6e86:	90 91 bd 04 	lds	r25, 0x04BD
            CLCD_vClearScreen();
          }
          Flags.OneTimeFlag = 1;
          break;
        }
        Error_Time_Out++;
    6e8a:	80 91 bd 04 	lds	r24, 0x04BD
    6e8e:	8f 5f       	subi	r24, 0xFF	; 255
    6e90:	80 93 bd 04 	sts	0x04BD, r24
      }
    }
    else
    {
    }
  } while (KPD_Press != 0X08);
    6e94:	80 91 d6 04 	lds	r24, 0x04D6
    6e98:	88 30       	cpi	r24, 0x08	; 8
    6e9a:	09 f0       	breq	.+2      	; 0x6e9e <ROOM_LampThree+0x21a>
    6e9c:	0b cf       	rjmp	.-490    	; 0x6cb4 <ROOM_LampThree+0x30>
}
    6e9e:	26 96       	adiw	r28, 0x06	; 6
    6ea0:	0f b6       	in	r0, 0x3f	; 63
    6ea2:	f8 94       	cli
    6ea4:	de bf       	out	0x3e, r29	; 62
    6ea6:	0f be       	out	0x3f, r0	; 63
    6ea8:	cd bf       	out	0x3d, r28	; 61
    6eaa:	cf 91       	pop	r28
    6eac:	df 91       	pop	r29
    6eae:	08 95       	ret

00006eb0 <Room_vFan>:
//======================================================================================================================================//
void Room_vFan()
{
    6eb0:	df 93       	push	r29
    6eb2:	cf 93       	push	r28
    6eb4:	cd b7       	in	r28, 0x3d	; 61
    6eb6:	de b7       	in	r29, 0x3e	; 62
    6eb8:	61 97       	sbiw	r28, 0x11	; 17
    6eba:	0f b6       	in	r0, 0x3f	; 63
    6ebc:	f8 94       	cli
    6ebe:	de bf       	out	0x3e, r29	; 62
    6ec0:	0f be       	out	0x3f, r0	; 63
    6ec2:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    6ec4:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Fan Control : ");
    6ec8:	87 e6       	ldi	r24, 0x67	; 103
    6eca:	92 e0       	ldi	r25, 0x02	; 2
    6ecc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6ed0:	82 e0       	ldi	r24, 0x02	; 2
    6ed2:	61 e0       	ldi	r22, 0x01	; 1
    6ed4:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1- Off    ");
    6ed8:	86 e7       	ldi	r24, 0x76	; 118
    6eda:	92 e0       	ldi	r25, 0x02	; 2
    6edc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSendString("2- S 1");
    6ee0:	81 e8       	ldi	r24, 0x81	; 129
    6ee2:	92 e0       	ldi	r25, 0x02	; 2
    6ee4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(3, 1);
    6ee8:	83 e0       	ldi	r24, 0x03	; 3
    6eea:	61 e0       	ldi	r22, 0x01	; 1
    6eec:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("3- S 2    ");
    6ef0:	88 e8       	ldi	r24, 0x88	; 136
    6ef2:	92 e0       	ldi	r25, 0x02	; 2
    6ef4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSendString("4- S 3");
    6ef8:	83 e9       	ldi	r24, 0x93	; 147
    6efa:	92 e0       	ldi	r25, 0x02	; 2
    6efc:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(4, 1);
    6f00:	84 e0       	ldi	r24, 0x04	; 4
    6f02:	61 e0       	ldi	r22, 0x01	; 1
    6f04:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("5- S 4    ");
    6f08:	8a e9       	ldi	r24, 0x9A	; 154
    6f0a:	92 e0       	ldi	r25, 0x02	; 2
    6f0c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>

  if (Flags.Auto_Fan == 1)
    6f10:	80 91 8f 04 	lds	r24, 0x048F
    6f14:	84 70       	andi	r24, 0x04	; 4
    6f16:	88 23       	and	r24, r24
    6f18:	21 f0       	breq	.+8      	; 0x6f22 <Room_vFan+0x72>
  {
    CLCD_vSendString("Auto Fan Control is Enabled");
    6f1a:	85 ea       	ldi	r24, 0xA5	; 165
    6f1c:	92 e0       	ldi	r25, 0x02	; 2
    6f1e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  }
  do
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    6f22:	86 ed       	ldi	r24, 0xD6	; 214
    6f24:	94 e0       	ldi	r25, 0x04	; 4
    6f26:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6f2a:	80 93 79 04 	sts	0x0479, r24
    if (Error_State == OK)
    6f2e:	80 91 79 04 	lds	r24, 0x0479
    6f32:	88 23       	and	r24, r24
    6f34:	09 f0       	breq	.+2      	; 0x6f38 <Room_vFan+0x88>
    6f36:	13 c1       	rjmp	.+550    	; 0x715e <Room_vFan+0x2ae>
    {
      switch (KPD_Press)
    6f38:	80 91 d6 04 	lds	r24, 0x04D6
    6f3c:	28 2f       	mov	r18, r24
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
    6f40:	39 8b       	std	Y+17, r19	; 0x11
    6f42:	28 8b       	std	Y+16, r18	; 0x10
    6f44:	88 89       	ldd	r24, Y+16	; 0x10
    6f46:	99 89       	ldd	r25, Y+17	; 0x11
    6f48:	83 33       	cpi	r24, 0x33	; 51
    6f4a:	91 05       	cpc	r25, r1
    6f4c:	09 f4       	brne	.+2      	; 0x6f50 <Room_vFan+0xa0>
    6f4e:	b1 c0       	rjmp	.+354    	; 0x70b2 <Room_vFan+0x202>
    6f50:	28 89       	ldd	r18, Y+16	; 0x10
    6f52:	39 89       	ldd	r19, Y+17	; 0x11
    6f54:	24 33       	cpi	r18, 0x34	; 52
    6f56:	31 05       	cpc	r19, r1
    6f58:	94 f4       	brge	.+36     	; 0x6f7e <Room_vFan+0xce>
    6f5a:	88 89       	ldd	r24, Y+16	; 0x10
    6f5c:	99 89       	ldd	r25, Y+17	; 0x11
    6f5e:	81 33       	cpi	r24, 0x31	; 49
    6f60:	91 05       	cpc	r25, r1
    6f62:	d1 f0       	breq	.+52     	; 0x6f98 <Room_vFan+0xe8>
    6f64:	28 89       	ldd	r18, Y+16	; 0x10
    6f66:	39 89       	ldd	r19, Y+17	; 0x11
    6f68:	22 33       	cpi	r18, 0x32	; 50
    6f6a:	31 05       	cpc	r19, r1
    6f6c:	0c f0       	brlt	.+2      	; 0x6f70 <Room_vFan+0xc0>
    6f6e:	91 c0       	rjmp	.+290    	; 0x7092 <Room_vFan+0x1e2>
    6f70:	88 89       	ldd	r24, Y+16	; 0x10
    6f72:	99 89       	ldd	r25, Y+17	; 0x11
    6f74:	88 30       	cpi	r24, 0x08	; 8
    6f76:	91 05       	cpc	r25, r1
    6f78:	09 f4       	brne	.+2      	; 0x6f7c <Room_vFan+0xcc>
    6f7a:	cb c0       	rjmp	.+406    	; 0x7112 <Room_vFan+0x262>
    6f7c:	fb c0       	rjmp	.+502    	; 0x7174 <Room_vFan+0x2c4>
    6f7e:	28 89       	ldd	r18, Y+16	; 0x10
    6f80:	39 89       	ldd	r19, Y+17	; 0x11
    6f82:	24 33       	cpi	r18, 0x34	; 52
    6f84:	31 05       	cpc	r19, r1
    6f86:	09 f4       	brne	.+2      	; 0x6f8a <Room_vFan+0xda>
    6f88:	a4 c0       	rjmp	.+328    	; 0x70d2 <Room_vFan+0x222>
    6f8a:	88 89       	ldd	r24, Y+16	; 0x10
    6f8c:	99 89       	ldd	r25, Y+17	; 0x11
    6f8e:	85 33       	cpi	r24, 0x35	; 53
    6f90:	91 05       	cpc	r25, r1
    6f92:	09 f4       	brne	.+2      	; 0x6f96 <Room_vFan+0xe6>
    6f94:	ae c0       	rjmp	.+348    	; 0x70f2 <Room_vFan+0x242>
    6f96:	ee c0       	rjmp	.+476    	; 0x7174 <Room_vFan+0x2c4>
      {
      case '1':
        Error_Time_Out = 0;
    6f98:	10 92 bd 04 	sts	0x04BD, r1
        TIMER0_vSetCTC(0);
    6f9c:	80 e0       	ldi	r24, 0x00	; 0
    6f9e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    6fa2:	80 e0       	ldi	r24, 0x00	; 0
    6fa4:	90 e0       	ldi	r25, 0x00	; 0
    6fa6:	a8 ec       	ldi	r26, 0xC8	; 200
    6fa8:	b2 e4       	ldi	r27, 0x42	; 66
    6faa:	8b 87       	std	Y+11, r24	; 0x0b
    6fac:	9c 87       	std	Y+12, r25	; 0x0c
    6fae:	ad 87       	std	Y+13, r26	; 0x0d
    6fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fba:	20 e0       	ldi	r18, 0x00	; 0
    6fbc:	30 e0       	ldi	r19, 0x00	; 0
    6fbe:	4a ef       	ldi	r20, 0xFA	; 250
    6fc0:	54 e4       	ldi	r21, 0x44	; 68
    6fc2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6fc6:	dc 01       	movw	r26, r24
    6fc8:	cb 01       	movw	r24, r22
    6fca:	8f 83       	std	Y+7, r24	; 0x07
    6fcc:	98 87       	std	Y+8, r25	; 0x08
    6fce:	a9 87       	std	Y+9, r26	; 0x09
    6fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    6fd4:	78 85       	ldd	r23, Y+8	; 0x08
    6fd6:	89 85       	ldd	r24, Y+9	; 0x09
    6fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fda:	20 e0       	ldi	r18, 0x00	; 0
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
    6fde:	40 e8       	ldi	r20, 0x80	; 128
    6fe0:	5f e3       	ldi	r21, 0x3F	; 63
    6fe2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6fe6:	88 23       	and	r24, r24
    6fe8:	2c f4       	brge	.+10     	; 0x6ff4 <Room_vFan+0x144>
		__ticks = 1;
    6fea:	81 e0       	ldi	r24, 0x01	; 1
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	9e 83       	std	Y+6, r25	; 0x06
    6ff0:	8d 83       	std	Y+5, r24	; 0x05
    6ff2:	3f c0       	rjmp	.+126    	; 0x7072 <Room_vFan+0x1c2>
	else if (__tmp > 65535)
    6ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    6ff6:	78 85       	ldd	r23, Y+8	; 0x08
    6ff8:	89 85       	ldd	r24, Y+9	; 0x09
    6ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ffc:	20 e0       	ldi	r18, 0x00	; 0
    6ffe:	3f ef       	ldi	r19, 0xFF	; 255
    7000:	4f e7       	ldi	r20, 0x7F	; 127
    7002:	57 e4       	ldi	r21, 0x47	; 71
    7004:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7008:	18 16       	cp	r1, r24
    700a:	4c f5       	brge	.+82     	; 0x705e <Room_vFan+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    700c:	6b 85       	ldd	r22, Y+11	; 0x0b
    700e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7010:	8d 85       	ldd	r24, Y+13	; 0x0d
    7012:	9e 85       	ldd	r25, Y+14	; 0x0e
    7014:	20 e0       	ldi	r18, 0x00	; 0
    7016:	30 e0       	ldi	r19, 0x00	; 0
    7018:	40 e2       	ldi	r20, 0x20	; 32
    701a:	51 e4       	ldi	r21, 0x41	; 65
    701c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7020:	dc 01       	movw	r26, r24
    7022:	cb 01       	movw	r24, r22
    7024:	bc 01       	movw	r22, r24
    7026:	cd 01       	movw	r24, r26
    7028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    702c:	dc 01       	movw	r26, r24
    702e:	cb 01       	movw	r24, r22
    7030:	9e 83       	std	Y+6, r25	; 0x06
    7032:	8d 83       	std	Y+5, r24	; 0x05
    7034:	0f c0       	rjmp	.+30     	; 0x7054 <Room_vFan+0x1a4>
    7036:	88 ec       	ldi	r24, 0xC8	; 200
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	9c 83       	std	Y+4, r25	; 0x04
    703c:	8b 83       	std	Y+3, r24	; 0x03
    703e:	8b 81       	ldd	r24, Y+3	; 0x03
    7040:	9c 81       	ldd	r25, Y+4	; 0x04
    7042:	01 97       	sbiw	r24, 0x01	; 1
    7044:	f1 f7       	brne	.-4      	; 0x7042 <Room_vFan+0x192>
    7046:	9c 83       	std	Y+4, r25	; 0x04
    7048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    704a:	8d 81       	ldd	r24, Y+5	; 0x05
    704c:	9e 81       	ldd	r25, Y+6	; 0x06
    704e:	01 97       	sbiw	r24, 0x01	; 1
    7050:	9e 83       	std	Y+6, r25	; 0x06
    7052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7054:	8d 81       	ldd	r24, Y+5	; 0x05
    7056:	9e 81       	ldd	r25, Y+6	; 0x06
    7058:	00 97       	sbiw	r24, 0x00	; 0
    705a:	69 f7       	brne	.-38     	; 0x7036 <Room_vFan+0x186>
    705c:	14 c0       	rjmp	.+40     	; 0x7086 <Room_vFan+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    705e:	6f 81       	ldd	r22, Y+7	; 0x07
    7060:	78 85       	ldd	r23, Y+8	; 0x08
    7062:	89 85       	ldd	r24, Y+9	; 0x09
    7064:	9a 85       	ldd	r25, Y+10	; 0x0a
    7066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    706a:	dc 01       	movw	r26, r24
    706c:	cb 01       	movw	r24, r22
    706e:	9e 83       	std	Y+6, r25	; 0x06
    7070:	8d 83       	std	Y+5, r24	; 0x05
    7072:	8d 81       	ldd	r24, Y+5	; 0x05
    7074:	9e 81       	ldd	r25, Y+6	; 0x06
    7076:	9a 83       	std	Y+2, r25	; 0x02
    7078:	89 83       	std	Y+1, r24	; 0x01
    707a:	89 81       	ldd	r24, Y+1	; 0x01
    707c:	9a 81       	ldd	r25, Y+2	; 0x02
    707e:	01 97       	sbiw	r24, 0x01	; 1
    7080:	f1 f7       	brne	.-4      	; 0x707e <Room_vFan+0x1ce>
    7082:	9a 83       	std	Y+2, r25	; 0x02
    7084:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);
        Timer0_vSetPrescaler(TIMER_NO_CLOCK_SOURCE);
    7086:	80 e0       	ldi	r24, 0x00	; 0
    7088:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
        Prescaler_Falg = 0;
    708c:	10 92 be 04 	sts	0x04BE, r1
    7090:	71 c0       	rjmp	.+226    	; 0x7174 <Room_vFan+0x2c4>
        break;
      case '2':
        Error_Time_Out = 0;
    7092:	10 92 bd 04 	sts	0x04BD, r1
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    7096:	80 91 be 04 	lds	r24, 0x04BE
    709a:	88 23       	and	r24, r24
    709c:	31 f4       	brne	.+12     	; 0x70aa <Room_vFan+0x1fa>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    709e:	84 e0       	ldi	r24, 0x04	; 4
    70a0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    70a4:	81 e0       	ldi	r24, 0x01	; 1
    70a6:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(63);
    70aa:	8f e3       	ldi	r24, 0x3F	; 63
    70ac:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    70b0:	61 c0       	rjmp	.+194    	; 0x7174 <Room_vFan+0x2c4>
        break;
      case '3':
        Error_Time_Out = 0;
    70b2:	10 92 bd 04 	sts	0x04BD, r1
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    70b6:	80 91 be 04 	lds	r24, 0x04BE
    70ba:	88 23       	and	r24, r24
    70bc:	31 f4       	brne	.+12     	; 0x70ca <Room_vFan+0x21a>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    70be:	84 e0       	ldi	r24, 0x04	; 4
    70c0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    70c4:	81 e0       	ldi	r24, 0x01	; 1
    70c6:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(126);
    70ca:	8e e7       	ldi	r24, 0x7E	; 126
    70cc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    70d0:	51 c0       	rjmp	.+162    	; 0x7174 <Room_vFan+0x2c4>
        break;
      case '4':
        Error_Time_Out = 0;
    70d2:	10 92 bd 04 	sts	0x04BD, r1
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    70d6:	80 91 be 04 	lds	r24, 0x04BE
    70da:	88 23       	and	r24, r24
    70dc:	31 f4       	brne	.+12     	; 0x70ea <Room_vFan+0x23a>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    70de:	84 e0       	ldi	r24, 0x04	; 4
    70e0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    70e4:	81 e0       	ldi	r24, 0x01	; 1
    70e6:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(189);
    70ea:	8d eb       	ldi	r24, 0xBD	; 189
    70ec:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    70f0:	41 c0       	rjmp	.+130    	; 0x7174 <Room_vFan+0x2c4>
        break;
      case '5':
        Error_Time_Out = 0;
    70f2:	10 92 bd 04 	sts	0x04BD, r1
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    70f6:	80 91 be 04 	lds	r24, 0x04BE
    70fa:	88 23       	and	r24, r24
    70fc:	31 f4       	brne	.+12     	; 0x710a <Room_vFan+0x25a>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    70fe:	84 e0       	ldi	r24, 0x04	; 4
    7100:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    7104:	81 e0       	ldi	r24, 0x01	; 1
    7106:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(255);
    710a:	8f ef       	ldi	r24, 0xFF	; 255
    710c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    7110:	31 c0       	rjmp	.+98     	; 0x7174 <Room_vFan+0x2c4>
        break;
      case 0x08:
        Error_Time_Out = 0;
    7112:	10 92 bd 04 	sts	0x04BD, r1
        Flags.Page_One = 0;
    7116:	80 91 8f 04 	lds	r24, 0x048F
    711a:	87 7f       	andi	r24, 0xF7	; 247
    711c:	80 93 8f 04 	sts	0x048F, r24
        CLCD_vClearScreen();
    7120:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        CLCD_vSendString("Room Options : ");
    7124:	8c e8       	ldi	r24, 0x8C	; 140
    7126:	91 e0       	ldi	r25, 0x01	; 1
    7128:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    712c:	82 e0       	ldi	r24, 0x02	; 2
    712e:	61 e0       	ldi	r22, 0x01	; 1
    7130:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("1- Led1 ON/OFF");
    7134:	85 ec       	ldi	r24, 0xC5	; 197
    7136:	91 e0       	ldi	r25, 0x01	; 1
    7138:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    713c:	83 e0       	ldi	r24, 0x03	; 3
    713e:	61 e0       	ldi	r22, 0x01	; 1
    7140:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("2- Led2 ON/OFF");
    7144:	84 ed       	ldi	r24, 0xD4	; 212
    7146:	91 e0       	ldi	r25, 0x01	; 1
    7148:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    714c:	84 e0       	ldi	r24, 0x04	; 4
    714e:	61 e0       	ldi	r22, 0x01	; 1
    7150:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("3- Led3 ON/OFF");
    7154:	83 ee       	ldi	r24, 0xE3	; 227
    7156:	91 e0       	ldi	r25, 0x01	; 1
    7158:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    715c:	0b c0       	rjmp	.+22     	; 0x7174 <Room_vFan+0x2c4>
        break;
      default:
        break;
      }
    }
    else if (Error_State == TIMEOUT_STATE)
    715e:	80 91 79 04 	lds	r24, 0x0479
    7162:	84 30       	cpi	r24, 0x04	; 4
    7164:	39 f4       	brne	.+14     	; 0x7174 <Room_vFan+0x2c4>
    {
      if (Error_Time_Out == Time_Out)
    7166:	90 91 bd 04 	lds	r25, 0x04BD
          CLCD_vClearScreen();
        }
        Flags.OneTimeFlag = 1;
        break;
      }
      Error_Time_Out++;
    716a:	80 91 bd 04 	lds	r24, 0x04BD
    716e:	8f 5f       	subi	r24, 0xFF	; 255
    7170:	80 93 bd 04 	sts	0x04BD, r24
    }
  } while (KPD_Press != 0X08);
    7174:	80 91 d6 04 	lds	r24, 0x04D6
    7178:	88 30       	cpi	r24, 0x08	; 8
    717a:	09 f0       	breq	.+2      	; 0x717e <Room_vFan+0x2ce>
    717c:	d2 ce       	rjmp	.-604    	; 0x6f22 <Room_vFan+0x72>
}
    717e:	61 96       	adiw	r28, 0x11	; 17
    7180:	0f b6       	in	r0, 0x3f	; 63
    7182:	f8 94       	cli
    7184:	de bf       	out	0x3e, r29	; 62
    7186:	0f be       	out	0x3f, r0	; 63
    7188:	cd bf       	out	0x3d, r28	; 61
    718a:	cf 91       	pop	r28
    718c:	df 91       	pop	r29
    718e:	08 95       	ret

00007190 <Room_vSetting>:
//======================================================================================================================================//
void Room_vSetting()
{
    7190:	df 93       	push	r29
    7192:	cf 93       	push	r28
    7194:	00 d0       	rcall	.+0      	; 0x7196 <Room_vSetting+0x6>
    7196:	0f 92       	push	r0
    7198:	cd b7       	in	r28, 0x3d	; 61
    719a:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    719c:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Setting:");
    71a0:	81 ec       	ldi	r24, 0xC1	; 193
    71a2:	92 e0       	ldi	r25, 0x02	; 2
    71a4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    71a8:	82 e0       	ldi	r24, 0x02	; 2
    71aa:	61 e0       	ldi	r22, 0x01	; 1
    71ac:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1- Change UserName");
    71b0:	8a ec       	ldi	r24, 0xCA	; 202
    71b2:	92 e0       	ldi	r25, 0x02	; 2
    71b4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(3, 1);
    71b8:	83 e0       	ldi	r24, 0x03	; 3
    71ba:	61 e0       	ldi	r22, 0x01	; 1
    71bc:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("2- Change PassWord");
    71c0:	8d ed       	ldi	r24, 0xDD	; 221
    71c2:	92 e0       	ldi	r25, 0x02	; 2
    71c4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(4, 1);
    71c8:	84 e0       	ldi	r24, 0x04	; 4
    71ca:	61 e0       	ldi	r22, 0x01	; 1
    71cc:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("3- Auto Fan Control");
    71d0:	80 ef       	ldi	r24, 0xF0	; 240
    71d2:	92 e0       	ldi	r25, 0x02	; 2
    71d4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  do
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    71d8:	86 ed       	ldi	r24, 0xD6	; 214
    71da:	94 e0       	ldi	r25, 0x04	; 4
    71dc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    71e0:	80 93 79 04 	sts	0x0479, r24
    if (Error_State == OK)
    71e4:	80 91 79 04 	lds	r24, 0x0479
    71e8:	88 23       	and	r24, r24
    71ea:	09 f0       	breq	.+2      	; 0x71ee <Room_vSetting+0x5e>
    71ec:	9b c0       	rjmp	.+310    	; 0x7324 <Room_vSetting+0x194>
    {
      switch (KPD_Press)
    71ee:	80 91 d6 04 	lds	r24, 0x04D6
    71f2:	28 2f       	mov	r18, r24
    71f4:	30 e0       	ldi	r19, 0x00	; 0
    71f6:	3b 83       	std	Y+3, r19	; 0x03
    71f8:	2a 83       	std	Y+2, r18	; 0x02
    71fa:	8a 81       	ldd	r24, Y+2	; 0x02
    71fc:	9b 81       	ldd	r25, Y+3	; 0x03
    71fe:	82 33       	cpi	r24, 0x32	; 50
    7200:	91 05       	cpc	r25, r1
    7202:	09 f4       	brne	.+2      	; 0x7206 <Room_vSetting+0x76>
    7204:	40 c0       	rjmp	.+128    	; 0x7286 <Room_vSetting+0xf6>
    7206:	2a 81       	ldd	r18, Y+2	; 0x02
    7208:	3b 81       	ldd	r19, Y+3	; 0x03
    720a:	23 33       	cpi	r18, 0x33	; 51
    720c:	31 05       	cpc	r19, r1
    720e:	64 f4       	brge	.+24     	; 0x7228 <Room_vSetting+0x98>
    7210:	8a 81       	ldd	r24, Y+2	; 0x02
    7212:	9b 81       	ldd	r25, Y+3	; 0x03
    7214:	88 30       	cpi	r24, 0x08	; 8
    7216:	91 05       	cpc	r25, r1
    7218:	09 f4       	brne	.+2      	; 0x721c <Room_vSetting+0x8c>
    721a:	63 c0       	rjmp	.+198    	; 0x72e2 <Room_vSetting+0x152>
    721c:	2a 81       	ldd	r18, Y+2	; 0x02
    721e:	3b 81       	ldd	r19, Y+3	; 0x03
    7220:	21 33       	cpi	r18, 0x31	; 49
    7222:	31 05       	cpc	r19, r1
    7224:	41 f0       	breq	.+16     	; 0x7236 <Room_vSetting+0xa6>
    7226:	89 c0       	rjmp	.+274    	; 0x733a <Room_vSetting+0x1aa>
    7228:	8a 81       	ldd	r24, Y+2	; 0x02
    722a:	9b 81       	ldd	r25, Y+3	; 0x03
    722c:	83 33       	cpi	r24, 0x33	; 51
    722e:	91 05       	cpc	r25, r1
    7230:	09 f4       	brne	.+2      	; 0x7234 <Room_vSetting+0xa4>
    7232:	54 c0       	rjmp	.+168    	; 0x72dc <Room_vSetting+0x14c>
    7234:	82 c0       	rjmp	.+260    	; 0x733a <Room_vSetting+0x1aa>
      {
      case '1':
        EEPROM_vWrite(EEPROM_UserNameStatus, 0XFF);
    7236:	80 e1       	ldi	r24, 0x10	; 16
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	6f ef       	ldi	r22, 0xFF	; 255
    723c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
        UserName_Set();
    7240:	0e 94 22 2b 	call	0x5644	; 0x5644 <UserName_Set>
        CLCD_vClearScreen();
    7244:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        CLCD_vSendString("Setting:");
    7248:	81 ec       	ldi	r24, 0xC1	; 193
    724a:	92 e0       	ldi	r25, 0x02	; 2
    724c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    7250:	82 e0       	ldi	r24, 0x02	; 2
    7252:	61 e0       	ldi	r22, 0x01	; 1
    7254:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("1- Change UserName");
    7258:	8a ec       	ldi	r24, 0xCA	; 202
    725a:	92 e0       	ldi	r25, 0x02	; 2
    725c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    7260:	83 e0       	ldi	r24, 0x03	; 3
    7262:	61 e0       	ldi	r22, 0x01	; 1
    7264:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("2- Change PassWord");
    7268:	8d ed       	ldi	r24, 0xDD	; 221
    726a:	92 e0       	ldi	r25, 0x02	; 2
    726c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    7270:	84 e0       	ldi	r24, 0x04	; 4
    7272:	61 e0       	ldi	r22, 0x01	; 1
    7274:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("3- Auto Fan Control");
    7278:	80 ef       	ldi	r24, 0xF0	; 240
    727a:	92 e0       	ldi	r25, 0x02	; 2
    727c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Error_Time_Out = 0;
    7280:	10 92 bd 04 	sts	0x04BD, r1
    7284:	5a c0       	rjmp	.+180    	; 0x733a <Room_vSetting+0x1aa>
        break;
      case '2':
        USART_u8SendData(0X0D);
    7286:	8d e0       	ldi	r24, 0x0D	; 13
    7288:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
        EEPROM_vWrite(EEPROM_PassWordStatus, 0XFF);
    728c:	81 e1       	ldi	r24, 0x11	; 17
    728e:	90 e0       	ldi	r25, 0x00	; 0
    7290:	6f ef       	ldi	r22, 0xFF	; 255
    7292:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <EEPROM_vWrite>
        PassWord_Set();
    7296:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <PassWord_Set>
        CLCD_vClearScreen();
    729a:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        CLCD_vSendString("Setting:");
    729e:	81 ec       	ldi	r24, 0xC1	; 193
    72a0:	92 e0       	ldi	r25, 0x02	; 2
    72a2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    72a6:	82 e0       	ldi	r24, 0x02	; 2
    72a8:	61 e0       	ldi	r22, 0x01	; 1
    72aa:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("1- Change UserName");
    72ae:	8a ec       	ldi	r24, 0xCA	; 202
    72b0:	92 e0       	ldi	r25, 0x02	; 2
    72b2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    72b6:	83 e0       	ldi	r24, 0x03	; 3
    72b8:	61 e0       	ldi	r22, 0x01	; 1
    72ba:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("2- Change PassWord");
    72be:	8d ed       	ldi	r24, 0xDD	; 221
    72c0:	92 e0       	ldi	r25, 0x02	; 2
    72c2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    72c6:	84 e0       	ldi	r24, 0x04	; 4
    72c8:	61 e0       	ldi	r22, 0x01	; 1
    72ca:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("3- Auto Fan Control");
    72ce:	80 ef       	ldi	r24, 0xF0	; 240
    72d0:	92 e0       	ldi	r25, 0x02	; 2
    72d2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Error_Time_Out = 0;
    72d6:	10 92 bd 04 	sts	0x04BD, r1
    72da:	2f c0       	rjmp	.+94     	; 0x733a <Room_vSetting+0x1aa>
        break;
      case '3':
        Auto_Fan_Control();
    72dc:	0e 94 29 3a 	call	0x7452	; 0x7452 <Auto_Fan_Control>
    72e0:	2c c0       	rjmp	.+88     	; 0x733a <Room_vSetting+0x1aa>
        break;
      case 0x08:
        Error_Time_Out = 0;
    72e2:	10 92 bd 04 	sts	0x04BD, r1
        CLCD_vClearScreen();
    72e6:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        CLCD_vSendString("Room Options : ");
    72ea:	8c e8       	ldi	r24, 0x8C	; 140
    72ec:	91 e0       	ldi	r25, 0x01	; 1
    72ee:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    72f2:	82 e0       	ldi	r24, 0x02	; 2
    72f4:	61 e0       	ldi	r22, 0x01	; 1
    72f6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("4- Room Fan");
    72fa:	8c e9       	ldi	r24, 0x9C	; 156
    72fc:	91 e0       	ldi	r25, 0x01	; 1
    72fe:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    7302:	83 e0       	ldi	r24, 0x03	; 3
    7304:	61 e0       	ldi	r22, 0x01	; 1
    7306:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("5- Room Door");
    730a:	88 ea       	ldi	r24, 0xA8	; 168
    730c:	91 e0       	ldi	r25, 0x01	; 1
    730e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    7312:	84 e0       	ldi	r24, 0x04	; 4
    7314:	61 e0       	ldi	r22, 0x01	; 1
    7316:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("6- Room Setting");
    731a:	85 eb       	ldi	r24, 0xB5	; 181
    731c:	91 e0       	ldi	r25, 0x01	; 1
    731e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
    7322:	0b c0       	rjmp	.+22     	; 0x733a <Room_vSetting+0x1aa>
        break;
      default:
        break;
      }
    }
    else if (Error_State == TIMEOUT_STATE)
    7324:	80 91 79 04 	lds	r24, 0x0479
    7328:	84 30       	cpi	r24, 0x04	; 4
    732a:	39 f4       	brne	.+14     	; 0x733a <Room_vSetting+0x1aa>
    {
      if (Error_Time_Out == Time_Out)
    732c:	90 91 bd 04 	lds	r25, 0x04BD
          CLCD_vClearScreen();
        }
        Flags.OneTimeFlag = 1;
        break;
      }
      Error_Time_Out++;
    7330:	80 91 bd 04 	lds	r24, 0x04BD
    7334:	8f 5f       	subi	r24, 0xFF	; 255
    7336:	80 93 bd 04 	sts	0x04BD, r24
    }
  } while (KPD_Press != 0X08);
    733a:	80 91 d6 04 	lds	r24, 0x04D6
    733e:	88 30       	cpi	r24, 0x08	; 8
    7340:	09 f0       	breq	.+2      	; 0x7344 <Room_vSetting+0x1b4>
    7342:	4a cf       	rjmp	.-364    	; 0x71d8 <Room_vSetting+0x48>
}
    7344:	0f 90       	pop	r0
    7346:	0f 90       	pop	r0
    7348:	0f 90       	pop	r0
    734a:	cf 91       	pop	r28
    734c:	df 91       	pop	r29
    734e:	08 95       	ret

00007350 <Room_Door>:

//======================================================================================================================================//
void Room_Door(void)
{
    7350:	df 93       	push	r29
    7352:	cf 93       	push	r28
    7354:	00 d0       	rcall	.+0      	; 0x7356 <Room_Door+0x6>
    7356:	0f 92       	push	r0
    7358:	cd b7       	in	r28, 0x3d	; 61
    735a:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    735c:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Reception Door : ");
    7360:	84 e0       	ldi	r24, 0x04	; 4
    7362:	93 e0       	ldi	r25, 0x03	; 3
    7364:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    7368:	82 e0       	ldi	r24, 0x02	; 2
    736a:	61 e0       	ldi	r22, 0x01	; 1
    736c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1- Open      ");
    7370:	86 e1       	ldi	r24, 0x16	; 22
    7372:	93 e0       	ldi	r25, 0x03	; 3
    7374:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSendString("2- Lock");
    7378:	84 e2       	ldi	r24, 0x24	; 36
    737a:	93 e0       	ldi	r25, 0x03	; 3
    737c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  do
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    7380:	86 ed       	ldi	r24, 0xD6	; 214
    7382:	94 e0       	ldi	r25, 0x04	; 4
    7384:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    7388:	80 93 79 04 	sts	0x0479, r24
    if (Error_State == OK)
    738c:	80 91 79 04 	lds	r24, 0x0479
    7390:	88 23       	and	r24, r24
    7392:	09 f0       	breq	.+2      	; 0x7396 <Room_Door+0x46>
    7394:	48 c0       	rjmp	.+144    	; 0x7426 <Room_Door+0xd6>
    {
      switch (KPD_Press)
    7396:	80 91 d6 04 	lds	r24, 0x04D6
    739a:	28 2f       	mov	r18, r24
    739c:	30 e0       	ldi	r19, 0x00	; 0
    739e:	3b 83       	std	Y+3, r19	; 0x03
    73a0:	2a 83       	std	Y+2, r18	; 0x02
    73a2:	8a 81       	ldd	r24, Y+2	; 0x02
    73a4:	9b 81       	ldd	r25, Y+3	; 0x03
    73a6:	81 33       	cpi	r24, 0x31	; 49
    73a8:	91 05       	cpc	r25, r1
    73aa:	59 f0       	breq	.+22     	; 0x73c2 <Room_Door+0x72>
    73ac:	2a 81       	ldd	r18, Y+2	; 0x02
    73ae:	3b 81       	ldd	r19, Y+3	; 0x03
    73b0:	22 33       	cpi	r18, 0x32	; 50
    73b2:	31 05       	cpc	r19, r1
    73b4:	69 f0       	breq	.+26     	; 0x73d0 <Room_Door+0x80>
    73b6:	8a 81       	ldd	r24, Y+2	; 0x02
    73b8:	9b 81       	ldd	r25, Y+3	; 0x03
    73ba:	88 30       	cpi	r24, 0x08	; 8
    73bc:	91 05       	cpc	r25, r1
    73be:	79 f0       	breq	.+30     	; 0x73de <Room_Door+0x8e>
    73c0:	3d c0       	rjmp	.+122    	; 0x743c <Room_Door+0xec>
      {
      case '1':
        SM_vTimer1Degree(0);
    73c2:	80 e0       	ldi	r24, 0x00	; 0
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <SM_vTimer1Degree>
        Error_Time_Out = 0;
    73ca:	10 92 bd 04 	sts	0x04BD, r1
    73ce:	36 c0       	rjmp	.+108    	; 0x743c <Room_Door+0xec>
        break;
      case '2':
        SM_vTimer1Degree(90);
    73d0:	8a e5       	ldi	r24, 0x5A	; 90
    73d2:	90 e0       	ldi	r25, 0x00	; 0
    73d4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <SM_vTimer1Degree>
        Error_Time_Out = 0;
    73d8:	10 92 bd 04 	sts	0x04BD, r1
    73dc:	2f c0       	rjmp	.+94     	; 0x743c <Room_Door+0xec>
        break;
      case 0x08:
        CLCD_vClearScreen();
    73de:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
        CLCD_vSendString("Room Options : ");
    73e2:	8c e8       	ldi	r24, 0x8C	; 140
    73e4:	91 e0       	ldi	r25, 0x01	; 1
    73e6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    73ea:	82 e0       	ldi	r24, 0x02	; 2
    73ec:	61 e0       	ldi	r22, 0x01	; 1
    73ee:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("1- Led1 ON/OFF");
    73f2:	85 ec       	ldi	r24, 0xC5	; 197
    73f4:	91 e0       	ldi	r25, 0x01	; 1
    73f6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    73fa:	83 e0       	ldi	r24, 0x03	; 3
    73fc:	61 e0       	ldi	r22, 0x01	; 1
    73fe:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("2- Led2 ON/OFF");
    7402:	84 ed       	ldi	r24, 0xD4	; 212
    7404:	91 e0       	ldi	r25, 0x01	; 1
    7406:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    740a:	84 e0       	ldi	r24, 0x04	; 4
    740c:	61 e0       	ldi	r22, 0x01	; 1
    740e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
        CLCD_vSendString("3- Led3 ON/OFF");
    7412:	83 ee       	ldi	r24, 0xE3	; 227
    7414:	91 e0       	ldi	r25, 0x01	; 1
    7416:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
        Flags.Page_One = 0;
    741a:	80 91 8f 04 	lds	r24, 0x048F
    741e:	87 7f       	andi	r24, 0xF7	; 247
    7420:	80 93 8f 04 	sts	0x048F, r24
    7424:	0b c0       	rjmp	.+22     	; 0x743c <Room_Door+0xec>
        break;
      default:
        break;
      }
    }
    else if (Error_State == TIMEOUT_STATE)
    7426:	80 91 79 04 	lds	r24, 0x0479
    742a:	84 30       	cpi	r24, 0x04	; 4
    742c:	39 f4       	brne	.+14     	; 0x743c <Room_Door+0xec>
    {
      if (Error_Time_Out == Time_Out)
    742e:	90 91 bd 04 	lds	r25, 0x04BD
          CLCD_vClearScreen();
        }
        Flags.OneTimeFlag = 1;
        break;
      }
      Error_Time_Out++;
    7432:	80 91 bd 04 	lds	r24, 0x04BD
    7436:	8f 5f       	subi	r24, 0xFF	; 255
    7438:	80 93 bd 04 	sts	0x04BD, r24
    }
  } while (KPD_Press != 0X08);
    743c:	80 91 d6 04 	lds	r24, 0x04D6
    7440:	88 30       	cpi	r24, 0x08	; 8
    7442:	09 f0       	breq	.+2      	; 0x7446 <Room_Door+0xf6>
    7444:	9d cf       	rjmp	.-198    	; 0x7380 <Room_Door+0x30>
}
    7446:	0f 90       	pop	r0
    7448:	0f 90       	pop	r0
    744a:	0f 90       	pop	r0
    744c:	cf 91       	pop	r28
    744e:	df 91       	pop	r29
    7450:	08 95       	ret

00007452 <Auto_Fan_Control>:
//======================================================================================================================================//
void Auto_Fan_Control()
{
    7452:	df 93       	push	r29
    7454:	cf 93       	push	r28
    7456:	00 d0       	rcall	.+0      	; 0x7458 <Auto_Fan_Control+0x6>
    7458:	0f 92       	push	r0
    745a:	cd b7       	in	r28, 0x3d	; 61
    745c:	de b7       	in	r29, 0x3e	; 62
  CLCD_vClearScreen();
    745e:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <CLCD_vClearScreen>
  CLCD_vSendString("Auto Fan Control");
    7462:	8c e2       	ldi	r24, 0x2C	; 44
    7464:	93 e0       	ldi	r25, 0x03	; 3
    7466:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    746a:	82 e0       	ldi	r24, 0x02	; 2
    746c:	61 e0       	ldi	r22, 0x01	; 1
    746e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <CLCD_vSetPosition>
  CLCD_vSendString("1- Open        ");
    7472:	8d e3       	ldi	r24, 0x3D	; 61
    7474:	93 e0       	ldi	r25, 0x03	; 3
    7476:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>
  CLCD_vSendString("2- Close");
    747a:	8d e4       	ldi	r24, 0x4D	; 77
    747c:	93 e0       	ldi	r25, 0x03	; 3
    747e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <CLCD_vSendString>

  do
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    7482:	86 ed       	ldi	r24, 0xD6	; 214
    7484:	94 e0       	ldi	r25, 0x04	; 4
    7486:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    748a:	80 93 79 04 	sts	0x0479, r24
    if (Error_State == OK)
    748e:	80 91 79 04 	lds	r24, 0x0479
    7492:	88 23       	and	r24, r24
    7494:	61 f5       	brne	.+88     	; 0x74ee <Auto_Fan_Control+0x9c>
    {
      switch (KPD_Press)
    7496:	80 91 d6 04 	lds	r24, 0x04D6
    749a:	28 2f       	mov	r18, r24
    749c:	30 e0       	ldi	r19, 0x00	; 0
    749e:	3b 83       	std	Y+3, r19	; 0x03
    74a0:	2a 83       	std	Y+2, r18	; 0x02
    74a2:	8a 81       	ldd	r24, Y+2	; 0x02
    74a4:	9b 81       	ldd	r25, Y+3	; 0x03
    74a6:	81 33       	cpi	r24, 0x31	; 49
    74a8:	91 05       	cpc	r25, r1
    74aa:	59 f0       	breq	.+22     	; 0x74c2 <Auto_Fan_Control+0x70>
    74ac:	2a 81       	ldd	r18, Y+2	; 0x02
    74ae:	3b 81       	ldd	r19, Y+3	; 0x03
    74b0:	22 33       	cpi	r18, 0x32	; 50
    74b2:	31 05       	cpc	r19, r1
    74b4:	71 f0       	breq	.+28     	; 0x74d2 <Auto_Fan_Control+0x80>
    74b6:	8a 81       	ldd	r24, Y+2	; 0x02
    74b8:	9b 81       	ldd	r25, Y+3	; 0x03
    74ba:	88 30       	cpi	r24, 0x08	; 8
    74bc:	91 05       	cpc	r25, r1
    74be:	89 f0       	breq	.+34     	; 0x74e2 <Auto_Fan_Control+0x90>
    74c0:	21 c0       	rjmp	.+66     	; 0x7504 <Auto_Fan_Control+0xb2>
      {
      case '1':
        Flags.Auto_Fan = 1;
    74c2:	80 91 8f 04 	lds	r24, 0x048F
    74c6:	84 60       	ori	r24, 0x04	; 4
    74c8:	80 93 8f 04 	sts	0x048F, r24
        Error_Time_Out = 0;
    74cc:	10 92 bd 04 	sts	0x04BD, r1
    74d0:	19 c0       	rjmp	.+50     	; 0x7504 <Auto_Fan_Control+0xb2>
        break;
      case '2':
        Flags.Auto_Fan = 0;
    74d2:	80 91 8f 04 	lds	r24, 0x048F
    74d6:	8b 7f       	andi	r24, 0xFB	; 251
    74d8:	80 93 8f 04 	sts	0x048F, r24
        Error_Time_Out = 0;
    74dc:	10 92 bd 04 	sts	0x04BD, r1
    74e0:	11 c0       	rjmp	.+34     	; 0x7504 <Auto_Fan_Control+0xb2>
        break;
      case 0x08:
        USART_u8SendData(0X0D);
    74e2:	8d e0       	ldi	r24, 0x0D	; 13
    74e4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
        Error_Time_Out = 0;
    74e8:	10 92 bd 04 	sts	0x04BD, r1
    74ec:	0b c0       	rjmp	.+22     	; 0x7504 <Auto_Fan_Control+0xb2>
        break;
      default:
        break;
      }
    }
    else if (Error_State == TIMEOUT_STATE)
    74ee:	80 91 79 04 	lds	r24, 0x0479
    74f2:	84 30       	cpi	r24, 0x04	; 4
    74f4:	39 f4       	brne	.+14     	; 0x7504 <Auto_Fan_Control+0xb2>
    {
      if (Error_Time_Out == Time_Out)
    74f6:	90 91 bd 04 	lds	r25, 0x04BD
          CLCD_vClearScreen();
        }
        Flags.OneTimeFlag = 1;
        break;
      }
      Error_Time_Out++;
    74fa:	80 91 bd 04 	lds	r24, 0x04BD
    74fe:	8f 5f       	subi	r24, 0xFF	; 255
    7500:	80 93 bd 04 	sts	0x04BD, r24
    }
  } while (KPD_Press != 0x08);
    7504:	80 91 d6 04 	lds	r24, 0x04D6
    7508:	88 30       	cpi	r24, 0x08	; 8
    750a:	09 f0       	breq	.+2      	; 0x750e <Auto_Fan_Control+0xbc>
    750c:	ba cf       	rjmp	.-140    	; 0x7482 <Auto_Fan_Control+0x30>
}
    750e:	0f 90       	pop	r0
    7510:	0f 90       	pop	r0
    7512:	0f 90       	pop	r0
    7514:	cf 91       	pop	r28
    7516:	df 91       	pop	r29
    7518:	08 95       	ret

0000751a <Fan_Speed>:

//======================================================================================================================================//
void Fan_Speed()
{
    751a:	df 93       	push	r29
    751c:	cf 93       	push	r28
    751e:	cd b7       	in	r28, 0x3d	; 61
    7520:	de b7       	in	r29, 0x3e	; 62
    7522:	60 97       	sbiw	r28, 0x10	; 16
    7524:	0f b6       	in	r0, 0x3f	; 63
    7526:	f8 94       	cli
    7528:	de bf       	out	0x3e, r29	; 62
    752a:	0f be       	out	0x3f, r0	; 63
    752c:	cd bf       	out	0x3d, r28	; 61
  LM35_u8GetTemp(&LM35, &LM35_Degree);
    752e:	8a e7       	ldi	r24, 0x7A	; 122
    7530:	94 e0       	ldi	r25, 0x04	; 4
    7532:	2c ee       	ldi	r18, 0xEC	; 236
    7534:	34 e0       	ldi	r19, 0x04	; 4
    7536:	b9 01       	movw	r22, r18
    7538:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <LM35_u8GetTemp>
  if (Flags.Auto_Fan == 0)
    753c:	80 91 8f 04 	lds	r24, 0x048F
    7540:	84 70       	andi	r24, 0x04	; 4
    7542:	88 23       	and	r24, r24
    7544:	09 f0       	breq	.+2      	; 0x7548 <Fan_Speed+0x2e>
    7546:	58 c0       	rjmp	.+176    	; 0x75f8 <Fan_Speed+0xde>
  {
    if (Flags.Fan_ReturnSpeed == 1)
    7548:	80 91 90 04 	lds	r24, 0x0490
    754c:	84 70       	andi	r24, 0x04	; 4
    754e:	88 23       	and	r24, r24
    7550:	09 f4       	brne	.+2      	; 0x7554 <Fan_Speed+0x3a>
    7552:	e6 c1       	rjmp	.+972    	; 0x7920 <Fan_Speed+0x406>
    {
      Flags.Temp_Detect = 0;
    7554:	80 91 8f 04 	lds	r24, 0x048F
    7558:	8f 77       	andi	r24, 0x7F	; 127
    755a:	80 93 8f 04 	sts	0x048F, r24
    755e:	80 91 90 04 	lds	r24, 0x0490
    7562:	8c 7f       	andi	r24, 0xFC	; 252
    7564:	80 93 90 04 	sts	0x0490, r24
      switch(Fan_SaveSpeed)
    7568:	80 91 c0 04 	lds	r24, 0x04C0
    756c:	28 2f       	mov	r18, r24
    756e:	30 e0       	ldi	r19, 0x00	; 0
    7570:	38 8b       	std	Y+16, r19	; 0x10
    7572:	2f 87       	std	Y+15, r18	; 0x0f
    7574:	8f 85       	ldd	r24, Y+15	; 0x0f
    7576:	98 89       	ldd	r25, Y+16	; 0x10
    7578:	82 30       	cpi	r24, 0x02	; 2
    757a:	91 05       	cpc	r25, r1
    757c:	31 f1       	breq	.+76     	; 0x75ca <Fan_Speed+0xb0>
    757e:	2f 85       	ldd	r18, Y+15	; 0x0f
    7580:	38 89       	ldd	r19, Y+16	; 0x10
    7582:	23 30       	cpi	r18, 0x03	; 3
    7584:	31 05       	cpc	r19, r1
    7586:	54 f4       	brge	.+20     	; 0x759c <Fan_Speed+0x82>
    7588:	8f 85       	ldd	r24, Y+15	; 0x0f
    758a:	98 89       	ldd	r25, Y+16	; 0x10
    758c:	00 97       	sbiw	r24, 0x00	; 0
    758e:	89 f0       	breq	.+34     	; 0x75b2 <Fan_Speed+0x98>
    7590:	2f 85       	ldd	r18, Y+15	; 0x0f
    7592:	38 89       	ldd	r19, Y+16	; 0x10
    7594:	21 30       	cpi	r18, 0x01	; 1
    7596:	31 05       	cpc	r19, r1
    7598:	91 f0       	breq	.+36     	; 0x75be <Fan_Speed+0xa4>
    759a:	28 c0       	rjmp	.+80     	; 0x75ec <Fan_Speed+0xd2>
    759c:	8f 85       	ldd	r24, Y+15	; 0x0f
    759e:	98 89       	ldd	r25, Y+16	; 0x10
    75a0:	83 30       	cpi	r24, 0x03	; 3
    75a2:	91 05       	cpc	r25, r1
    75a4:	c1 f0       	breq	.+48     	; 0x75d6 <Fan_Speed+0xbc>
    75a6:	2f 85       	ldd	r18, Y+15	; 0x0f
    75a8:	38 89       	ldd	r19, Y+16	; 0x10
    75aa:	24 30       	cpi	r18, 0x04	; 4
    75ac:	31 05       	cpc	r19, r1
    75ae:	c9 f0       	breq	.+50     	; 0x75e2 <Fan_Speed+0xc8>
    75b0:	1d c0       	rjmp	.+58     	; 0x75ec <Fan_Speed+0xd2>
      {
      case 0:
        TIMER0_vSetCTC(0);
    75b2:	80 e0       	ldi	r24, 0x00	; 0
    75b4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Fan_SaveSpeed = 0;
    75b8:	10 92 c0 04 	sts	0x04C0, r1
    75bc:	17 c0       	rjmp	.+46     	; 0x75ec <Fan_Speed+0xd2>
        break;
      case 1:
        TIMER0_vSetCTC(63);
    75be:	8f e3       	ldi	r24, 0x3F	; 63
    75c0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Fan_SaveSpeed = 0;
    75c4:	10 92 c0 04 	sts	0x04C0, r1
    75c8:	11 c0       	rjmp	.+34     	; 0x75ec <Fan_Speed+0xd2>
        break;
      case 2:
        TIMER0_vSetCTC(126);
    75ca:	8e e7       	ldi	r24, 0x7E	; 126
    75cc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Fan_SaveSpeed = 0;
    75d0:	10 92 c0 04 	sts	0x04C0, r1
    75d4:	0b c0       	rjmp	.+22     	; 0x75ec <Fan_Speed+0xd2>
        break;
      case 3:
        TIMER0_vSetCTC(189);
    75d6:	8d eb       	ldi	r24, 0xBD	; 189
    75d8:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Fan_SaveSpeed = 0;
    75dc:	10 92 c0 04 	sts	0x04C0, r1
    75e0:	05 c0       	rjmp	.+10     	; 0x75ec <Fan_Speed+0xd2>
        break;
      case 4:
        TIMER0_vSetCTC(255);
    75e2:	8f ef       	ldi	r24, 0xFF	; 255
    75e4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Fan_SaveSpeed = 0;
    75e8:	10 92 c0 04 	sts	0x04C0, r1
        break;
      default :
        break;
      }
      Flags.Fan_ReturnSpeed = 0;
    75ec:	80 91 90 04 	lds	r24, 0x0490
    75f0:	8b 7f       	andi	r24, 0xFB	; 251
    75f2:	80 93 90 04 	sts	0x0490, r24
    75f6:	94 c1       	rjmp	.+808    	; 0x7920 <Fan_Speed+0x406>
    }
  }
  else if (Flags.Auto_Fan == 1)
    75f8:	80 91 8f 04 	lds	r24, 0x048F
    75fc:	84 70       	andi	r24, 0x04	; 4
    75fe:	88 23       	and	r24, r24
    7600:	09 f4       	brne	.+2      	; 0x7604 <Fan_Speed+0xea>
    7602:	8e c1       	rjmp	.+796    	; 0x7920 <Fan_Speed+0x406>
  {
    if (LM35_Degree < 20)
    7604:	80 91 ec 04 	lds	r24, 0x04EC
    7608:	84 31       	cpi	r24, 0x14	; 20
    760a:	08 f0       	brcs	.+2      	; 0x760e <Fan_Speed+0xf4>
    760c:	88 c0       	rjmp	.+272    	; 0x771e <Fan_Speed+0x204>
    {
      Flags.Temp_Detect = 0;
    760e:	80 91 8f 04 	lds	r24, 0x048F
    7612:	8f 77       	andi	r24, 0x7F	; 127
    7614:	80 93 8f 04 	sts	0x048F, r24
    7618:	80 91 90 04 	lds	r24, 0x0490
    761c:	8c 7f       	andi	r24, 0xFC	; 252
    761e:	80 93 90 04 	sts	0x0490, r24
      TIMER0_vSetCTC(0);
    7622:	80 e0       	ldi	r24, 0x00	; 0
    7624:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	a8 ec       	ldi	r26, 0xC8	; 200
    762e:	b2 e4       	ldi	r27, 0x42	; 66
    7630:	8b 87       	std	Y+11, r24	; 0x0b
    7632:	9c 87       	std	Y+12, r25	; 0x0c
    7634:	ad 87       	std	Y+13, r26	; 0x0d
    7636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7638:	6b 85       	ldd	r22, Y+11	; 0x0b
    763a:	7c 85       	ldd	r23, Y+12	; 0x0c
    763c:	8d 85       	ldd	r24, Y+13	; 0x0d
    763e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7640:	20 e0       	ldi	r18, 0x00	; 0
    7642:	30 e0       	ldi	r19, 0x00	; 0
    7644:	4a ef       	ldi	r20, 0xFA	; 250
    7646:	54 e4       	ldi	r21, 0x44	; 68
    7648:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    764c:	dc 01       	movw	r26, r24
    764e:	cb 01       	movw	r24, r22
    7650:	8f 83       	std	Y+7, r24	; 0x07
    7652:	98 87       	std	Y+8, r25	; 0x08
    7654:	a9 87       	std	Y+9, r26	; 0x09
    7656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7658:	6f 81       	ldd	r22, Y+7	; 0x07
    765a:	78 85       	ldd	r23, Y+8	; 0x08
    765c:	89 85       	ldd	r24, Y+9	; 0x09
    765e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7660:	20 e0       	ldi	r18, 0x00	; 0
    7662:	30 e0       	ldi	r19, 0x00	; 0
    7664:	40 e8       	ldi	r20, 0x80	; 128
    7666:	5f e3       	ldi	r21, 0x3F	; 63
    7668:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    766c:	88 23       	and	r24, r24
    766e:	2c f4       	brge	.+10     	; 0x767a <Fan_Speed+0x160>
		__ticks = 1;
    7670:	81 e0       	ldi	r24, 0x01	; 1
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	9e 83       	std	Y+6, r25	; 0x06
    7676:	8d 83       	std	Y+5, r24	; 0x05
    7678:	3f c0       	rjmp	.+126    	; 0x76f8 <Fan_Speed+0x1de>
	else if (__tmp > 65535)
    767a:	6f 81       	ldd	r22, Y+7	; 0x07
    767c:	78 85       	ldd	r23, Y+8	; 0x08
    767e:	89 85       	ldd	r24, Y+9	; 0x09
    7680:	9a 85       	ldd	r25, Y+10	; 0x0a
    7682:	20 e0       	ldi	r18, 0x00	; 0
    7684:	3f ef       	ldi	r19, 0xFF	; 255
    7686:	4f e7       	ldi	r20, 0x7F	; 127
    7688:	57 e4       	ldi	r21, 0x47	; 71
    768a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    768e:	18 16       	cp	r1, r24
    7690:	4c f5       	brge	.+82     	; 0x76e4 <Fan_Speed+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7692:	6b 85       	ldd	r22, Y+11	; 0x0b
    7694:	7c 85       	ldd	r23, Y+12	; 0x0c
    7696:	8d 85       	ldd	r24, Y+13	; 0x0d
    7698:	9e 85       	ldd	r25, Y+14	; 0x0e
    769a:	20 e0       	ldi	r18, 0x00	; 0
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	40 e2       	ldi	r20, 0x20	; 32
    76a0:	51 e4       	ldi	r21, 0x41	; 65
    76a2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    76a6:	dc 01       	movw	r26, r24
    76a8:	cb 01       	movw	r24, r22
    76aa:	bc 01       	movw	r22, r24
    76ac:	cd 01       	movw	r24, r26
    76ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76b2:	dc 01       	movw	r26, r24
    76b4:	cb 01       	movw	r24, r22
    76b6:	9e 83       	std	Y+6, r25	; 0x06
    76b8:	8d 83       	std	Y+5, r24	; 0x05
    76ba:	0f c0       	rjmp	.+30     	; 0x76da <Fan_Speed+0x1c0>
    76bc:	88 ec       	ldi	r24, 0xC8	; 200
    76be:	90 e0       	ldi	r25, 0x00	; 0
    76c0:	9c 83       	std	Y+4, r25	; 0x04
    76c2:	8b 83       	std	Y+3, r24	; 0x03
    76c4:	8b 81       	ldd	r24, Y+3	; 0x03
    76c6:	9c 81       	ldd	r25, Y+4	; 0x04
    76c8:	01 97       	sbiw	r24, 0x01	; 1
    76ca:	f1 f7       	brne	.-4      	; 0x76c8 <Fan_Speed+0x1ae>
    76cc:	9c 83       	std	Y+4, r25	; 0x04
    76ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76d0:	8d 81       	ldd	r24, Y+5	; 0x05
    76d2:	9e 81       	ldd	r25, Y+6	; 0x06
    76d4:	01 97       	sbiw	r24, 0x01	; 1
    76d6:	9e 83       	std	Y+6, r25	; 0x06
    76d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76da:	8d 81       	ldd	r24, Y+5	; 0x05
    76dc:	9e 81       	ldd	r25, Y+6	; 0x06
    76de:	00 97       	sbiw	r24, 0x00	; 0
    76e0:	69 f7       	brne	.-38     	; 0x76bc <Fan_Speed+0x1a2>
    76e2:	14 c0       	rjmp	.+40     	; 0x770c <Fan_Speed+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76e4:	6f 81       	ldd	r22, Y+7	; 0x07
    76e6:	78 85       	ldd	r23, Y+8	; 0x08
    76e8:	89 85       	ldd	r24, Y+9	; 0x09
    76ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    76ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76f0:	dc 01       	movw	r26, r24
    76f2:	cb 01       	movw	r24, r22
    76f4:	9e 83       	std	Y+6, r25	; 0x06
    76f6:	8d 83       	std	Y+5, r24	; 0x05
    76f8:	8d 81       	ldd	r24, Y+5	; 0x05
    76fa:	9e 81       	ldd	r25, Y+6	; 0x06
    76fc:	9a 83       	std	Y+2, r25	; 0x02
    76fe:	89 83       	std	Y+1, r24	; 0x01
    7700:	89 81       	ldd	r24, Y+1	; 0x01
    7702:	9a 81       	ldd	r25, Y+2	; 0x02
    7704:	01 97       	sbiw	r24, 0x01	; 1
    7706:	f1 f7       	brne	.-4      	; 0x7704 <Fan_Speed+0x1ea>
    7708:	9a 83       	std	Y+2, r25	; 0x02
    770a:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(100);
      Timer0_vSetPrescaler(TIMER_NO_CLOCK_SOURCE);
    770c:	80 e0       	ldi	r24, 0x00	; 0
    770e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
      Flags.Fan_ReturnSpeed = 1;
    7712:	80 91 90 04 	lds	r24, 0x0490
    7716:	84 60       	ori	r24, 0x04	; 4
    7718:	80 93 90 04 	sts	0x0490, r24
    771c:	01 c1       	rjmp	.+514    	; 0x7920 <Fan_Speed+0x406>
    }
    else if (LM35_Degree >= 20 && LM35_Degree <= 25)
    771e:	80 91 ec 04 	lds	r24, 0x04EC
    7722:	84 31       	cpi	r24, 0x14	; 20
    7724:	78 f1       	brcs	.+94     	; 0x7784 <Fan_Speed+0x26a>
    7726:	80 91 ec 04 	lds	r24, 0x04EC
    772a:	8a 31       	cpi	r24, 0x1A	; 26
    772c:	58 f5       	brcc	.+86     	; 0x7784 <Fan_Speed+0x26a>
    {
      if (Flags.Temp_Detect != 1)
    772e:	80 91 8f 04 	lds	r24, 0x048F
    7732:	98 2f       	mov	r25, r24
    7734:	99 1f       	adc	r25, r25
    7736:	99 27       	eor	r25, r25
    7738:	99 1f       	adc	r25, r25
    773a:	80 91 90 04 	lds	r24, 0x0490
    773e:	83 70       	andi	r24, 0x03	; 3
    7740:	88 0f       	add	r24, r24
    7742:	89 2b       	or	r24, r25
    7744:	81 30       	cpi	r24, 0x01	; 1
    7746:	09 f4       	brne	.+2      	; 0x774a <Fan_Speed+0x230>
    7748:	eb c0       	rjmp	.+470    	; 0x7920 <Fan_Speed+0x406>
      {
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    774a:	80 91 be 04 	lds	r24, 0x04BE
    774e:	88 23       	and	r24, r24
    7750:	31 f4       	brne	.+12     	; 0x775e <Fan_Speed+0x244>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    7752:	84 e0       	ldi	r24, 0x04	; 4
    7754:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    7758:	81 e0       	ldi	r24, 0x01	; 1
    775a:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(50);
    775e:	82 e3       	ldi	r24, 0x32	; 50
    7760:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Flags.Temp_Detect = 1;
    7764:	80 91 8f 04 	lds	r24, 0x048F
    7768:	80 68       	ori	r24, 0x80	; 128
    776a:	80 93 8f 04 	sts	0x048F, r24
    776e:	80 91 90 04 	lds	r24, 0x0490
    7772:	8c 7f       	andi	r24, 0xFC	; 252
    7774:	80 93 90 04 	sts	0x0490, r24
        Flags.Fan_ReturnSpeed = 1;
    7778:	80 91 90 04 	lds	r24, 0x0490
    777c:	84 60       	ori	r24, 0x04	; 4
    777e:	80 93 90 04 	sts	0x0490, r24
    7782:	ce c0       	rjmp	.+412    	; 0x7920 <Fan_Speed+0x406>
      }
    }
    else if (LM35_Degree >= 26 && LM35_Degree <= 30)
    7784:	80 91 ec 04 	lds	r24, 0x04EC
    7788:	8a 31       	cpi	r24, 0x1A	; 26
    778a:	80 f1       	brcs	.+96     	; 0x77ec <Fan_Speed+0x2d2>
    778c:	80 91 ec 04 	lds	r24, 0x04EC
    7790:	8f 31       	cpi	r24, 0x1F	; 31
    7792:	60 f5       	brcc	.+88     	; 0x77ec <Fan_Speed+0x2d2>
    {
      if (Flags.Temp_Detect != 2)
    7794:	80 91 8f 04 	lds	r24, 0x048F
    7798:	98 2f       	mov	r25, r24
    779a:	99 1f       	adc	r25, r25
    779c:	99 27       	eor	r25, r25
    779e:	99 1f       	adc	r25, r25
    77a0:	80 91 90 04 	lds	r24, 0x0490
    77a4:	83 70       	andi	r24, 0x03	; 3
    77a6:	88 0f       	add	r24, r24
    77a8:	89 2b       	or	r24, r25
    77aa:	82 30       	cpi	r24, 0x02	; 2
    77ac:	09 f4       	brne	.+2      	; 0x77b0 <Fan_Speed+0x296>
    77ae:	b8 c0       	rjmp	.+368    	; 0x7920 <Fan_Speed+0x406>
      {
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    77b0:	80 91 be 04 	lds	r24, 0x04BE
    77b4:	88 23       	and	r24, r24
    77b6:	31 f4       	brne	.+12     	; 0x77c4 <Fan_Speed+0x2aa>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    77b8:	84 e0       	ldi	r24, 0x04	; 4
    77ba:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    77be:	81 e0       	ldi	r24, 0x01	; 1
    77c0:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(100);
    77c4:	84 e6       	ldi	r24, 0x64	; 100
    77c6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Flags.Temp_Detect = 2;
    77ca:	80 91 8f 04 	lds	r24, 0x048F
    77ce:	8f 77       	andi	r24, 0x7F	; 127
    77d0:	80 93 8f 04 	sts	0x048F, r24
    77d4:	80 91 90 04 	lds	r24, 0x0490
    77d8:	8c 7f       	andi	r24, 0xFC	; 252
    77da:	81 60       	ori	r24, 0x01	; 1
    77dc:	80 93 90 04 	sts	0x0490, r24
        Flags.Fan_ReturnSpeed = 1;
    77e0:	80 91 90 04 	lds	r24, 0x0490
    77e4:	84 60       	ori	r24, 0x04	; 4
    77e6:	80 93 90 04 	sts	0x0490, r24
    77ea:	9a c0       	rjmp	.+308    	; 0x7920 <Fan_Speed+0x406>
      }
    }
    else if (LM35_Degree >= 31 && LM35_Degree <= 35)
    77ec:	80 91 ec 04 	lds	r24, 0x04EC
    77f0:	8f 31       	cpi	r24, 0x1F	; 31
    77f2:	80 f1       	brcs	.+96     	; 0x7854 <Fan_Speed+0x33a>
    77f4:	80 91 ec 04 	lds	r24, 0x04EC
    77f8:	84 32       	cpi	r24, 0x24	; 36
    77fa:	60 f5       	brcc	.+88     	; 0x7854 <Fan_Speed+0x33a>
    {

      if (Flags.Temp_Detect != 3)
    77fc:	80 91 8f 04 	lds	r24, 0x048F
    7800:	98 2f       	mov	r25, r24
    7802:	99 1f       	adc	r25, r25
    7804:	99 27       	eor	r25, r25
    7806:	99 1f       	adc	r25, r25
    7808:	80 91 90 04 	lds	r24, 0x0490
    780c:	83 70       	andi	r24, 0x03	; 3
    780e:	88 0f       	add	r24, r24
    7810:	89 2b       	or	r24, r25
    7812:	83 30       	cpi	r24, 0x03	; 3
    7814:	09 f4       	brne	.+2      	; 0x7818 <Fan_Speed+0x2fe>
    7816:	84 c0       	rjmp	.+264    	; 0x7920 <Fan_Speed+0x406>
      {
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    7818:	80 91 be 04 	lds	r24, 0x04BE
    781c:	88 23       	and	r24, r24
    781e:	31 f4       	brne	.+12     	; 0x782c <Fan_Speed+0x312>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    7820:	84 e0       	ldi	r24, 0x04	; 4
    7822:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    7826:	81 e0       	ldi	r24, 0x01	; 1
    7828:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(150);
    782c:	86 e9       	ldi	r24, 0x96	; 150
    782e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Flags.Temp_Detect = 3;
    7832:	80 91 8f 04 	lds	r24, 0x048F
    7836:	80 68       	ori	r24, 0x80	; 128
    7838:	80 93 8f 04 	sts	0x048F, r24
    783c:	80 91 90 04 	lds	r24, 0x0490
    7840:	8c 7f       	andi	r24, 0xFC	; 252
    7842:	81 60       	ori	r24, 0x01	; 1
    7844:	80 93 90 04 	sts	0x0490, r24
        Flags.Fan_ReturnSpeed = 1;
    7848:	80 91 90 04 	lds	r24, 0x0490
    784c:	84 60       	ori	r24, 0x04	; 4
    784e:	80 93 90 04 	sts	0x0490, r24
    7852:	66 c0       	rjmp	.+204    	; 0x7920 <Fan_Speed+0x406>
      }
    }
    else if (LM35_Degree >= 36 && LM35_Degree <= 40)
    7854:	80 91 ec 04 	lds	r24, 0x04EC
    7858:	84 32       	cpi	r24, 0x24	; 36
    785a:	80 f1       	brcs	.+96     	; 0x78bc <Fan_Speed+0x3a2>
    785c:	80 91 ec 04 	lds	r24, 0x04EC
    7860:	89 32       	cpi	r24, 0x29	; 41
    7862:	60 f5       	brcc	.+88     	; 0x78bc <Fan_Speed+0x3a2>
    {
      if (Flags.Temp_Detect != 4)
    7864:	80 91 8f 04 	lds	r24, 0x048F
    7868:	98 2f       	mov	r25, r24
    786a:	99 1f       	adc	r25, r25
    786c:	99 27       	eor	r25, r25
    786e:	99 1f       	adc	r25, r25
    7870:	80 91 90 04 	lds	r24, 0x0490
    7874:	83 70       	andi	r24, 0x03	; 3
    7876:	88 0f       	add	r24, r24
    7878:	89 2b       	or	r24, r25
    787a:	84 30       	cpi	r24, 0x04	; 4
    787c:	09 f4       	brne	.+2      	; 0x7880 <Fan_Speed+0x366>
    787e:	50 c0       	rjmp	.+160    	; 0x7920 <Fan_Speed+0x406>
      {
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    7880:	80 91 be 04 	lds	r24, 0x04BE
    7884:	88 23       	and	r24, r24
    7886:	31 f4       	brne	.+12     	; 0x7894 <Fan_Speed+0x37a>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    7888:	84 e0       	ldi	r24, 0x04	; 4
    788a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(200);
    7894:	88 ec       	ldi	r24, 0xC8	; 200
    7896:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Flags.Temp_Detect = 4;
    789a:	80 91 8f 04 	lds	r24, 0x048F
    789e:	8f 77       	andi	r24, 0x7F	; 127
    78a0:	80 93 8f 04 	sts	0x048F, r24
    78a4:	80 91 90 04 	lds	r24, 0x0490
    78a8:	8c 7f       	andi	r24, 0xFC	; 252
    78aa:	82 60       	ori	r24, 0x02	; 2
    78ac:	80 93 90 04 	sts	0x0490, r24
        Flags.Fan_ReturnSpeed = 1;
    78b0:	80 91 90 04 	lds	r24, 0x0490
    78b4:	84 60       	ori	r24, 0x04	; 4
    78b6:	80 93 90 04 	sts	0x0490, r24
    78ba:	32 c0       	rjmp	.+100    	; 0x7920 <Fan_Speed+0x406>
      }
    }
    else if (LM35_Degree >= 41 && LM35_Degree <= 45)
    78bc:	80 91 ec 04 	lds	r24, 0x04EC
    78c0:	89 32       	cpi	r24, 0x29	; 41
    78c2:	70 f1       	brcs	.+92     	; 0x7920 <Fan_Speed+0x406>
    78c4:	80 91 ec 04 	lds	r24, 0x04EC
    78c8:	8e 32       	cpi	r24, 0x2E	; 46
    78ca:	50 f5       	brcc	.+84     	; 0x7920 <Fan_Speed+0x406>
    {

      if (Flags.Temp_Detect != 5)
    78cc:	80 91 8f 04 	lds	r24, 0x048F
    78d0:	98 2f       	mov	r25, r24
    78d2:	99 1f       	adc	r25, r25
    78d4:	99 27       	eor	r25, r25
    78d6:	99 1f       	adc	r25, r25
    78d8:	80 91 90 04 	lds	r24, 0x0490
    78dc:	83 70       	andi	r24, 0x03	; 3
    78de:	88 0f       	add	r24, r24
    78e0:	89 2b       	or	r24, r25
    78e2:	85 30       	cpi	r24, 0x05	; 5
    78e4:	e9 f0       	breq	.+58     	; 0x7920 <Fan_Speed+0x406>
      {
        if (Prescaler_Falg == 0) // To Set Prescaler One Time
    78e6:	80 91 be 04 	lds	r24, 0x04BE
    78ea:	88 23       	and	r24, r24
    78ec:	31 f4       	brne	.+12     	; 0x78fa <Fan_Speed+0x3e0>
        {
          Timer0_vSetPrescaler(TIMER_DIVISION_FACTOR_256);
    78ee:	84 e0       	ldi	r24, 0x04	; 4
    78f0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_vSetPrescaler>
          Prescaler_Falg = 1;
    78f4:	81 e0       	ldi	r24, 0x01	; 1
    78f6:	80 93 be 04 	sts	0x04BE, r24
        }
        TIMER0_vSetCTC(255);
    78fa:	8f ef       	ldi	r24, 0xFF	; 255
    78fc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TIMER0_vSetCTC>
        Flags.Temp_Detect = 5;
    7900:	80 91 8f 04 	lds	r24, 0x048F
    7904:	80 68       	ori	r24, 0x80	; 128
    7906:	80 93 8f 04 	sts	0x048F, r24
    790a:	80 91 90 04 	lds	r24, 0x0490
    790e:	8c 7f       	andi	r24, 0xFC	; 252
    7910:	82 60       	ori	r24, 0x02	; 2
    7912:	80 93 90 04 	sts	0x0490, r24
        Flags.Fan_ReturnSpeed = 1;
    7916:	80 91 90 04 	lds	r24, 0x0490
    791a:	84 60       	ori	r24, 0x04	; 4
    791c:	80 93 90 04 	sts	0x0490, r24
    else
    {

    }
  }
}
    7920:	60 96       	adiw	r28, 0x10	; 16
    7922:	0f b6       	in	r0, 0x3f	; 63
    7924:	f8 94       	cli
    7926:	de bf       	out	0x3e, r29	; 62
    7928:	0f be       	out	0x3f, r0	; 63
    792a:	cd bf       	out	0x3d, r28	; 61
    792c:	cf 91       	pop	r28
    792e:	df 91       	pop	r29
    7930:	08 95       	ret

00007932 <ISR_EXTI0_Interrupt>:


//======================================================================================================================================//

void ISR_EXTI0_Interrupt(void)
{
    7932:	df 93       	push	r29
    7934:	cf 93       	push	r28
    7936:	0f 92       	push	r0
    7938:	cd b7       	in	r28, 0x3d	; 61
    793a:	de b7       	in	r29, 0x3e	; 62
  u8 LS_Status= 0;
    793c:	19 82       	std	Y+1, r1	; 0x01
  DIO_enumReadPinVal(DIO_PORTB, LS_Pin, &LS_Status);
    793e:	81 e0       	ldi	r24, 0x01	; 1
    7940:	60 e0       	ldi	r22, 0x00	; 0
    7942:	9e 01       	movw	r18, r28
    7944:	2f 5f       	subi	r18, 0xFF	; 255
    7946:	3f 4f       	sbci	r19, 0xFF	; 255
    7948:	a9 01       	movw	r20, r18
    794a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>
  if (LS_Status == 1)
    794e:	89 81       	ldd	r24, Y+1	; 0x01
    7950:	81 30       	cpi	r24, 0x01	; 1
    7952:	09 f4       	brne	.+2      	; 0x7956 <ISR_EXTI0_Interrupt+0x24>
    7954:	46 c0       	rjmp	.+140    	; 0x79e2 <ISR_EXTI0_Interrupt+0xb0>
  {

  }
  else if (LS_Status == 0)
    7956:	89 81       	ldd	r24, Y+1	; 0x01
    7958:	88 23       	and	r24, r24
    795a:	09 f0       	breq	.+2      	; 0x795e <ISR_EXTI0_Interrupt+0x2c>
    795c:	42 c0       	rjmp	.+132    	; 0x79e2 <ISR_EXTI0_Interrupt+0xb0>
  {
    //Turn on Led one when it is Dark
    LDR_LightPrec = 0XFF;
    795e:	8f ef       	ldi	r24, 0xFF	; 255
    7960:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR1, &LDR_LightPrec);
    7964:	8d e7       	ldi	r24, 0x7D	; 125
    7966:	94 e0       	ldi	r25, 0x04	; 4
    7968:	2b ee       	ldi	r18, 0xEB	; 235
    796a:	34 e0       	ldi	r19, 0x04	; 4
    796c:	b9 01       	movw	r22, r18
    796e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec < 50)
    7972:	80 91 eb 04 	lds	r24, 0x04EB
    7976:	82 33       	cpi	r24, 0x32	; 50
    7978:	40 f4       	brcc	.+16     	; 0x798a <ISR_EXTI0_Interrupt+0x58>
    {
      LED_vTog(Room_Led_1);
    797a:	60 91 86 04 	lds	r22, 0x0486
    797e:	70 91 87 04 	lds	r23, 0x0487
    7982:	80 91 88 04 	lds	r24, 0x0488
    7986:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    else
    {

    }
    //Turn on Led two when it is Dark
    LDR_LightPrec = 0XFF;
    798a:	8f ef       	ldi	r24, 0xFF	; 255
    798c:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR2, &LDR_LightPrec);
    7990:	80 e8       	ldi	r24, 0x80	; 128
    7992:	94 e0       	ldi	r25, 0x04	; 4
    7994:	2b ee       	ldi	r18, 0xEB	; 235
    7996:	34 e0       	ldi	r19, 0x04	; 4
    7998:	b9 01       	movw	r22, r18
    799a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec < 50)
    799e:	80 91 eb 04 	lds	r24, 0x04EB
    79a2:	82 33       	cpi	r24, 0x32	; 50
    79a4:	40 f4       	brcc	.+16     	; 0x79b6 <ISR_EXTI0_Interrupt+0x84>
    {
      LED_vTog(Room_Led_2);
    79a6:	60 91 89 04 	lds	r22, 0x0489
    79aa:	70 91 8a 04 	lds	r23, 0x048A
    79ae:	80 91 8b 04 	lds	r24, 0x048B
    79b2:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
    else
    {

    }
    //Turn on Led three when it is Dark
    LDR_LightPrec = 0XFF;
    79b6:	8f ef       	ldi	r24, 0xFF	; 255
    79b8:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR3, &LDR_LightPrec);
    79bc:	83 e8       	ldi	r24, 0x83	; 131
    79be:	94 e0       	ldi	r25, 0x04	; 4
    79c0:	2b ee       	ldi	r18, 0xEB	; 235
    79c2:	34 e0       	ldi	r19, 0x04	; 4
    79c4:	b9 01       	movw	r22, r18
    79c6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec < 50)
    79ca:	80 91 eb 04 	lds	r24, 0x04EB
    79ce:	82 33       	cpi	r24, 0x32	; 50
    79d0:	40 f4       	brcc	.+16     	; 0x79e2 <ISR_EXTI0_Interrupt+0xb0>
    {
      LED_vTog(Room_Led_3);
    79d2:	60 91 8c 04 	lds	r22, 0x048C
    79d6:	70 91 8d 04 	lds	r23, 0x048D
    79da:	80 91 8e 04 	lds	r24, 0x048E
    79de:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
  {

  }


}
    79e2:	0f 90       	pop	r0
    79e4:	cf 91       	pop	r28
    79e6:	df 91       	pop	r29
    79e8:	08 95       	ret

000079ea <ISR_TIMER2_OVF_MODE>:
//======================================================================================================================================//
void ISR_TIMER2_OVF_MODE()
{
    79ea:	df 93       	push	r29
    79ec:	cf 93       	push	r28
    79ee:	0f 92       	push	r0
    79f0:	cd b7       	in	r28, 0x3d	; 61
    79f2:	de b7       	in	r29, 0x3e	; 62
  Timer_Counter++;
    79f4:	80 91 bf 04 	lds	r24, 0x04BF
    79f8:	8f 5f       	subi	r24, 0xFF	; 255
    79fa:	80 93 bf 04 	sts	0x04BF, r24
  u8 IR_PinRead = 0;
    79fe:	19 82       	std	Y+1, r1	; 0x01
  Fan_Speed();
    7a00:	0e 94 8d 3a 	call	0x751a	; 0x751a <Fan_Speed>

  DIO_enumReadPinVal(DIO_PORTD, IR_Pin, &IR_PinRead);
    7a04:	83 e0       	ldi	r24, 0x03	; 3
    7a06:	62 e0       	ldi	r22, 0x02	; 2
    7a08:	9e 01       	movw	r18, r28
    7a0a:	2f 5f       	subi	r18, 0xFF	; 255
    7a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a0e:	a9 01       	movw	r20, r18
    7a10:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <DIO_enumReadPinVal>
  if (IR_PinRead == 1)
    7a14:	89 81       	ldd	r24, Y+1	; 0x01
    7a16:	81 30       	cpi	r24, 0x01	; 1
    7a18:	19 f4       	brne	.+6      	; 0x7a20 <ISR_TIMER2_OVF_MODE+0x36>
  {
    Timer_Counter = 0;
    7a1a:	10 92 bf 04 	sts	0x04BF, r1
    7a1e:	51 c0       	rjmp	.+162    	; 0x7ac2 <ISR_TIMER2_OVF_MODE+0xd8>
  }
  else if (IR_PinRead == 0 && Timer_Counter == 3)
    7a20:	89 81       	ldd	r24, Y+1	; 0x01
    7a22:	88 23       	and	r24, r24
    7a24:	09 f0       	breq	.+2      	; 0x7a28 <ISR_TIMER2_OVF_MODE+0x3e>
    7a26:	4d c0       	rjmp	.+154    	; 0x7ac2 <ISR_TIMER2_OVF_MODE+0xd8>
    7a28:	80 91 bf 04 	lds	r24, 0x04BF
    7a2c:	83 30       	cpi	r24, 0x03	; 3
    7a2e:	09 f0       	breq	.+2      	; 0x7a32 <ISR_TIMER2_OVF_MODE+0x48>
    7a30:	48 c0       	rjmp	.+144    	; 0x7ac2 <ISR_TIMER2_OVF_MODE+0xd8>
  {
    //Turn on Led one when it is Dark
    LDR_LightPrec = 0XFF;
    7a32:	8f ef       	ldi	r24, 0xFF	; 255
    7a34:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR1, &LDR_LightPrec);
    7a38:	8d e7       	ldi	r24, 0x7D	; 125
    7a3a:	94 e0       	ldi	r25, 0x04	; 4
    7a3c:	2b ee       	ldi	r18, 0xEB	; 235
    7a3e:	34 e0       	ldi	r19, 0x04	; 4
    7a40:	b9 01       	movw	r22, r18
    7a42:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec > 50)
    7a46:	80 91 eb 04 	lds	r24, 0x04EB
    7a4a:	83 33       	cpi	r24, 0x33	; 51
    7a4c:	50 f0       	brcs	.+20     	; 0x7a62 <ISR_TIMER2_OVF_MODE+0x78>
    {
      LED_vTog(Room_Led_1);
    7a4e:	60 91 86 04 	lds	r22, 0x0486
    7a52:	70 91 87 04 	lds	r23, 0x0487
    7a56:	80 91 88 04 	lds	r24, 0x0488
    7a5a:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
      Timer_Counter = 0;
    7a5e:	10 92 bf 04 	sts	0x04BF, r1
    else
    {

    }
    //Turn on Led two when it is Dark
    LDR_LightPrec = 0XFF;
    7a62:	8f ef       	ldi	r24, 0xFF	; 255
    7a64:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR2, &LDR_LightPrec);
    7a68:	80 e8       	ldi	r24, 0x80	; 128
    7a6a:	94 e0       	ldi	r25, 0x04	; 4
    7a6c:	2b ee       	ldi	r18, 0xEB	; 235
    7a6e:	34 e0       	ldi	r19, 0x04	; 4
    7a70:	b9 01       	movw	r22, r18
    7a72:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec > 50)
    7a76:	80 91 eb 04 	lds	r24, 0x04EB
    7a7a:	83 33       	cpi	r24, 0x33	; 51
    7a7c:	50 f0       	brcs	.+20     	; 0x7a92 <ISR_TIMER2_OVF_MODE+0xa8>
    {
      LED_vTog(Room_Led_2);
    7a7e:	60 91 89 04 	lds	r22, 0x0489
    7a82:	70 91 8a 04 	lds	r23, 0x048A
    7a86:	80 91 8b 04 	lds	r24, 0x048B
    7a8a:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
      Timer_Counter = 0;
    7a8e:	10 92 bf 04 	sts	0x04BF, r1
    else
    {

    }
    //Turn on Led three when it is Dark
    LDR_LightPrec = 0XFF;
    7a92:	8f ef       	ldi	r24, 0xFF	; 255
    7a94:	80 93 eb 04 	sts	0x04EB, r24
    LDR_u8GetLightPres(&LDR3, &LDR_LightPrec);
    7a98:	83 e8       	ldi	r24, 0x83	; 131
    7a9a:	94 e0       	ldi	r25, 0x04	; 4
    7a9c:	2b ee       	ldi	r18, 0xEB	; 235
    7a9e:	34 e0       	ldi	r19, 0x04	; 4
    7aa0:	b9 01       	movw	r22, r18
    7aa2:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <LDR_u8GetLightPres>
    if (LDR_LightPrec > 50)
    7aa6:	80 91 eb 04 	lds	r24, 0x04EB
    7aaa:	83 33       	cpi	r24, 0x33	; 51
    7aac:	50 f0       	brcs	.+20     	; 0x7ac2 <ISR_TIMER2_OVF_MODE+0xd8>
    {
      LED_vTog(Room_Led_3);
    7aae:	60 91 8c 04 	lds	r22, 0x048C
    7ab2:	70 91 8d 04 	lds	r23, 0x048D
    7ab6:	80 91 8e 04 	lds	r24, 0x048E
    7aba:	0e 94 66 20 	call	0x40cc	; 0x40cc <LED_vTog>
      Timer_Counter = 0;
    7abe:	10 92 bf 04 	sts	0x04BF, r1

    }
  }


}
    7ac2:	0f 90       	pop	r0
    7ac4:	cf 91       	pop	r28
    7ac6:	df 91       	pop	r29
    7ac8:	08 95       	ret

00007aca <__mulsi3>:
    7aca:	62 9f       	mul	r22, r18
    7acc:	d0 01       	movw	r26, r0
    7ace:	73 9f       	mul	r23, r19
    7ad0:	f0 01       	movw	r30, r0
    7ad2:	82 9f       	mul	r24, r18
    7ad4:	e0 0d       	add	r30, r0
    7ad6:	f1 1d       	adc	r31, r1
    7ad8:	64 9f       	mul	r22, r20
    7ada:	e0 0d       	add	r30, r0
    7adc:	f1 1d       	adc	r31, r1
    7ade:	92 9f       	mul	r25, r18
    7ae0:	f0 0d       	add	r31, r0
    7ae2:	83 9f       	mul	r24, r19
    7ae4:	f0 0d       	add	r31, r0
    7ae6:	74 9f       	mul	r23, r20
    7ae8:	f0 0d       	add	r31, r0
    7aea:	65 9f       	mul	r22, r21
    7aec:	f0 0d       	add	r31, r0
    7aee:	99 27       	eor	r25, r25
    7af0:	72 9f       	mul	r23, r18
    7af2:	b0 0d       	add	r27, r0
    7af4:	e1 1d       	adc	r30, r1
    7af6:	f9 1f       	adc	r31, r25
    7af8:	63 9f       	mul	r22, r19
    7afa:	b0 0d       	add	r27, r0
    7afc:	e1 1d       	adc	r30, r1
    7afe:	f9 1f       	adc	r31, r25
    7b00:	bd 01       	movw	r22, r26
    7b02:	cf 01       	movw	r24, r30
    7b04:	11 24       	eor	r1, r1
    7b06:	08 95       	ret

00007b08 <__udivmodhi4>:
    7b08:	aa 1b       	sub	r26, r26
    7b0a:	bb 1b       	sub	r27, r27
    7b0c:	51 e1       	ldi	r21, 0x11	; 17
    7b0e:	07 c0       	rjmp	.+14     	; 0x7b1e <__udivmodhi4_ep>

00007b10 <__udivmodhi4_loop>:
    7b10:	aa 1f       	adc	r26, r26
    7b12:	bb 1f       	adc	r27, r27
    7b14:	a6 17       	cp	r26, r22
    7b16:	b7 07       	cpc	r27, r23
    7b18:	10 f0       	brcs	.+4      	; 0x7b1e <__udivmodhi4_ep>
    7b1a:	a6 1b       	sub	r26, r22
    7b1c:	b7 0b       	sbc	r27, r23

00007b1e <__udivmodhi4_ep>:
    7b1e:	88 1f       	adc	r24, r24
    7b20:	99 1f       	adc	r25, r25
    7b22:	5a 95       	dec	r21
    7b24:	a9 f7       	brne	.-22     	; 0x7b10 <__udivmodhi4_loop>
    7b26:	80 95       	com	r24
    7b28:	90 95       	com	r25
    7b2a:	bc 01       	movw	r22, r24
    7b2c:	cd 01       	movw	r24, r26
    7b2e:	08 95       	ret

00007b30 <__udivmodsi4>:
    7b30:	a1 e2       	ldi	r26, 0x21	; 33
    7b32:	1a 2e       	mov	r1, r26
    7b34:	aa 1b       	sub	r26, r26
    7b36:	bb 1b       	sub	r27, r27
    7b38:	fd 01       	movw	r30, r26
    7b3a:	0d c0       	rjmp	.+26     	; 0x7b56 <__udivmodsi4_ep>

00007b3c <__udivmodsi4_loop>:
    7b3c:	aa 1f       	adc	r26, r26
    7b3e:	bb 1f       	adc	r27, r27
    7b40:	ee 1f       	adc	r30, r30
    7b42:	ff 1f       	adc	r31, r31
    7b44:	a2 17       	cp	r26, r18
    7b46:	b3 07       	cpc	r27, r19
    7b48:	e4 07       	cpc	r30, r20
    7b4a:	f5 07       	cpc	r31, r21
    7b4c:	20 f0       	brcs	.+8      	; 0x7b56 <__udivmodsi4_ep>
    7b4e:	a2 1b       	sub	r26, r18
    7b50:	b3 0b       	sbc	r27, r19
    7b52:	e4 0b       	sbc	r30, r20
    7b54:	f5 0b       	sbc	r31, r21

00007b56 <__udivmodsi4_ep>:
    7b56:	66 1f       	adc	r22, r22
    7b58:	77 1f       	adc	r23, r23
    7b5a:	88 1f       	adc	r24, r24
    7b5c:	99 1f       	adc	r25, r25
    7b5e:	1a 94       	dec	r1
    7b60:	69 f7       	brne	.-38     	; 0x7b3c <__udivmodsi4_loop>
    7b62:	60 95       	com	r22
    7b64:	70 95       	com	r23
    7b66:	80 95       	com	r24
    7b68:	90 95       	com	r25
    7b6a:	9b 01       	movw	r18, r22
    7b6c:	ac 01       	movw	r20, r24
    7b6e:	bd 01       	movw	r22, r26
    7b70:	cf 01       	movw	r24, r30
    7b72:	08 95       	ret

00007b74 <__divmodsi4>:
    7b74:	97 fb       	bst	r25, 7
    7b76:	09 2e       	mov	r0, r25
    7b78:	05 26       	eor	r0, r21
    7b7a:	0e d0       	rcall	.+28     	; 0x7b98 <__divmodsi4_neg1>
    7b7c:	57 fd       	sbrc	r21, 7
    7b7e:	04 d0       	rcall	.+8      	; 0x7b88 <__divmodsi4_neg2>
    7b80:	d7 df       	rcall	.-82     	; 0x7b30 <__udivmodsi4>
    7b82:	0a d0       	rcall	.+20     	; 0x7b98 <__divmodsi4_neg1>
    7b84:	00 1c       	adc	r0, r0
    7b86:	38 f4       	brcc	.+14     	; 0x7b96 <__divmodsi4_exit>

00007b88 <__divmodsi4_neg2>:
    7b88:	50 95       	com	r21
    7b8a:	40 95       	com	r20
    7b8c:	30 95       	com	r19
    7b8e:	21 95       	neg	r18
    7b90:	3f 4f       	sbci	r19, 0xFF	; 255
    7b92:	4f 4f       	sbci	r20, 0xFF	; 255
    7b94:	5f 4f       	sbci	r21, 0xFF	; 255

00007b96 <__divmodsi4_exit>:
    7b96:	08 95       	ret

00007b98 <__divmodsi4_neg1>:
    7b98:	f6 f7       	brtc	.-4      	; 0x7b96 <__divmodsi4_exit>
    7b9a:	90 95       	com	r25
    7b9c:	80 95       	com	r24
    7b9e:	70 95       	com	r23
    7ba0:	61 95       	neg	r22
    7ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    7ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba8:	08 95       	ret

00007baa <__prologue_saves__>:
    7baa:	2f 92       	push	r2
    7bac:	3f 92       	push	r3
    7bae:	4f 92       	push	r4
    7bb0:	5f 92       	push	r5
    7bb2:	6f 92       	push	r6
    7bb4:	7f 92       	push	r7
    7bb6:	8f 92       	push	r8
    7bb8:	9f 92       	push	r9
    7bba:	af 92       	push	r10
    7bbc:	bf 92       	push	r11
    7bbe:	cf 92       	push	r12
    7bc0:	df 92       	push	r13
    7bc2:	ef 92       	push	r14
    7bc4:	ff 92       	push	r15
    7bc6:	0f 93       	push	r16
    7bc8:	1f 93       	push	r17
    7bca:	cf 93       	push	r28
    7bcc:	df 93       	push	r29
    7bce:	cd b7       	in	r28, 0x3d	; 61
    7bd0:	de b7       	in	r29, 0x3e	; 62
    7bd2:	ca 1b       	sub	r28, r26
    7bd4:	db 0b       	sbc	r29, r27
    7bd6:	0f b6       	in	r0, 0x3f	; 63
    7bd8:	f8 94       	cli
    7bda:	de bf       	out	0x3e, r29	; 62
    7bdc:	0f be       	out	0x3f, r0	; 63
    7bde:	cd bf       	out	0x3d, r28	; 61
    7be0:	09 94       	ijmp

00007be2 <__epilogue_restores__>:
    7be2:	2a 88       	ldd	r2, Y+18	; 0x12
    7be4:	39 88       	ldd	r3, Y+17	; 0x11
    7be6:	48 88       	ldd	r4, Y+16	; 0x10
    7be8:	5f 84       	ldd	r5, Y+15	; 0x0f
    7bea:	6e 84       	ldd	r6, Y+14	; 0x0e
    7bec:	7d 84       	ldd	r7, Y+13	; 0x0d
    7bee:	8c 84       	ldd	r8, Y+12	; 0x0c
    7bf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    7bf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    7bf4:	b9 84       	ldd	r11, Y+9	; 0x09
    7bf6:	c8 84       	ldd	r12, Y+8	; 0x08
    7bf8:	df 80       	ldd	r13, Y+7	; 0x07
    7bfa:	ee 80       	ldd	r14, Y+6	; 0x06
    7bfc:	fd 80       	ldd	r15, Y+5	; 0x05
    7bfe:	0c 81       	ldd	r16, Y+4	; 0x04
    7c00:	1b 81       	ldd	r17, Y+3	; 0x03
    7c02:	aa 81       	ldd	r26, Y+2	; 0x02
    7c04:	b9 81       	ldd	r27, Y+1	; 0x01
    7c06:	ce 0f       	add	r28, r30
    7c08:	d1 1d       	adc	r29, r1
    7c0a:	0f b6       	in	r0, 0x3f	; 63
    7c0c:	f8 94       	cli
    7c0e:	de bf       	out	0x3e, r29	; 62
    7c10:	0f be       	out	0x3f, r0	; 63
    7c12:	cd bf       	out	0x3d, r28	; 61
    7c14:	ed 01       	movw	r28, r26
    7c16:	08 95       	ret

00007c18 <_exit>:
    7c18:	f8 94       	cli

00007c1a <__stop_program>:
    7c1a:	ff cf       	rjmp	.-2      	; 0x7c1a <__stop_program>
