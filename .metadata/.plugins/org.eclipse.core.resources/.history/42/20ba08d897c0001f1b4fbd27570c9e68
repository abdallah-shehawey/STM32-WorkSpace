
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031a  00800060  00007a9a  00007b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080037a  0080037a  00007e48  2**0
                  ALLOC
  3 .stab         00007194  00000000  00000000  00007e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000224c  00000000  00000000  0000efdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00011448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  000116bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  00014012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  000156c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00016c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00016e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  000171e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__vector_4>
      14:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_5>
      18:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_6>
      1c:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_7>
      20:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_8>
      24:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_9>
      28:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_10>
      2c:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 23 	call	0x473e	; 0x473e <main>
      8a:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 30 3d 	jmp	0x7a60	; 0x7a60 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	ab ef       	ldi	r26, 0xFB	; 251
     360:	b1 e0       	ldi	r27, 0x01	; 1
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 30 3d 	jmp	0x7a60	; 0x7a60 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	8b ef       	ldi	r24, 0xFB	; 251
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 30 3d 	jmp	0x7a60	; 0x7a60 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 1c 3d 	jmp	0x7a38	; 0x7a38 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	6b ef       	ldi	r22, 0xFB	; 251
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 38 3d 	jmp	0x7a70	; 0x7a70 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 1d 3d 	jmp	0x7a3a	; 0x7a3a <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 39 3d 	jmp	0x7a72	; 0x7a72 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 24 3d 	jmp	0x7a48	; 0x7a48 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 40 3d 	jmp	0x7a80	; 0x7a80 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 1c 3d 	jmp	0x7a38	; 0x7a38 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 38 3d 	jmp	0x7a70	; 0x7a70 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	ed 5f       	subi	r30, 0xFD	; 253
     ebc:	fd 4f       	sbci	r31, 0xFD	; 253
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR0 , TCCR0_WGM00) ;
    1228:	a3 e5       	ldi	r26, 0x53	; 83
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e3 e5       	ldi	r30, 0x53	; 83
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    1236:	a3 e5       	ldi	r26, 0x53	; 83
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e3 e5       	ldi	r30, 0x53	; 83
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 60       	ori	r24, 0x08	; 8
    1242:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
					CLR_BIT(TCCR0 , TCCR0_COM01) ;
			#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
    1244:	a3 e5       	ldi	r26, 0x53	; 83
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e3 e5       	ldi	r30, 0x53	; 83
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7e       	andi	r24, 0xEF	; 239
    1250:	8c 93       	st	X, r24
					SET_BIT(TCCR0 , TCCR0_COM01) ;
    1252:	a3 e5       	ldi	r26, 0x53	; 83
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e3 e5       	ldi	r30, 0x53	; 83
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 62       	ori	r24, 0x20	; 32
    125e:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER0_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    1260:	ec e5       	ldi	r30, 0x5C	; 92
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	10 82       	st	Z, r1
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	88 7f       	andi	r24, 0xF8	; 248
    1272:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8c 93       	st	X, r24
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    128e:	af e4       	ldi	r26, 0x4F	; 79
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ef e4       	ldi	r30, 0x4F	; 79
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8e 7f       	andi	r24, 0xFE	; 254
    129a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    129c:	af e4       	ldi	r26, 0x4F	; 79
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e4       	ldi	r30, 0x4F	; 79
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    12aa:	ae e4       	ldi	r26, 0x4E	; 78
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ee e4       	ldi	r30, 0x4E	; 78
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    12b8:	ae e4       	ldi	r26, 0x4E	; 78
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ee e4       	ldi	r30, 0x4E	; 78
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 61       	ori	r24, 0x10	; 16
    12c4:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    12c6:	ea e4       	ldi	r30, 0x4A	; 74
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	11 82       	std	Z+1, r1	; 0x01
    12cc:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    12ce:	e8 e4       	ldi	r30, 0x48	; 72
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	11 82       	std	Z+1, r1	; 0x01
    12d4:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    12d6:	e6 e4       	ldi	r30, 0x46	; 70
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	9e e4       	ldi	r25, 0x4E	; 78
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 64       	ori	r24, 0x40	; 64
    12ee:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    12f0:	af e4       	ldi	r26, 0x4F	; 79
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e4       	ldi	r30, 0x4F	; 79
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7b       	andi	r24, 0xBF	; 191
    12fc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    12fe:	af e4       	ldi	r26, 0x4F	; 79
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e4       	ldi	r30, 0x4F	; 79
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    130c:	af e4       	ldi	r26, 0x4F	; 79
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ef e4       	ldi	r30, 0x4F	; 79
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 7e       	andi	r24, 0xEF	; 239
    1318:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    131a:	af e4       	ldi	r26, 0x4F	; 79
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ef e4       	ldi	r30, 0x4F	; 79
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 62       	ori	r24, 0x20	; 32
    1326:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8b 7f       	andi	r24, 0xFB	; 251
    1334:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1336:	a9 e5       	ldi	r26, 0x59	; 89
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e9 e5       	ldi	r30, 0x59	; 89
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8f 7e       	andi	r24, 0xEF	; 239
    1342:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1344:	a9 e5       	ldi	r26, 0x59	; 89
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e9 e5       	ldi	r30, 0x59	; 89
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	87 7f       	andi	r24, 0xF7	; 247
    1350:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    1352:	a9 e5       	ldi	r26, 0x59	; 89
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e9 e5       	ldi	r30, 0x59	; 89
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8f 7d       	andi	r24, 0xDF	; 223
    135e:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1360:	ae e4       	ldi	r26, 0x4E	; 78
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ee e4       	ldi	r30, 0x4E	; 78
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	88 7f       	andi	r24, 0xF8	; 248
    136c:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    136e:	ae e4       	ldi	r26, 0x4E	; 78
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ee e4       	ldi	r30, 0x4E	; 78
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	82 60       	ori	r24, 0x02	; 2
    137a:	8c 93       	st	X, r24


}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    138a:	a2 e4       	ldi	r26, 0x42	; 66
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e2 e4       	ldi	r30, 0x42	; 66
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1398:	a5 e4       	ldi	r26, 0x45	; 69
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e4       	ldi	r30, 0x45	; 69
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 7b       	andi	r24, 0xBF	; 191
    13a4:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    13a6:	a5 e4       	ldi	r26, 0x45	; 69
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e4       	ldi	r30, 0x45	; 69
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	87 7f       	andi	r24, 0xF7	; 247
    13b2:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    13b4:	e4 e4       	ldi	r30, 0x44	; 68
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    13ba:	a9 e5       	ldi	r26, 0x59	; 89
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e9 e5       	ldi	r30, 0x59	; 89
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 64       	ori	r24, 0x40	; 64
    13c6:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

			/*Set the Required Prescaler*/
		TCCR2 &= TIMER_PRESCALER_MASK ;
    13c8:	a5 e4       	ldi	r26, 0x45	; 69
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e4       	ldi	r30, 0x45	; 69
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
    13d6:	a5 e4       	ldi	r26, 0x45	; 69
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e4       	ldi	r30, 0x45	; 69
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	85 60       	ori	r24, 0x05	; 5
    13e2:	8c 93       	st	X, r24
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    13f6:	e2 e5       	ldi	r30, 0x52	; 82
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	80 83       	st	Z, r24
}
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <TIMER1_vSetPreload+0x6>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1414:	ec e4       	ldi	r30, 0x4C	; 76
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1436:	e4 e4       	ldi	r30, 0x44	; 68
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	80 83       	st	Z, r24
}
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	0f 92       	push	r0
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1452:	ec e5       	ldi	r30, 0x5C	; 92
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	80 83       	st	Z, r24
}
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <TIMER1_vSetCTCA+0x6>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1470:	ea e4       	ldi	r30, 0x4A	; 74
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <TIMER1_vSetCTCB+0x6>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1494:	e8 e4       	ldi	r30, 0x48	; 72
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    14b6:	e3 e4       	ldi	r30, 0x43	; 67
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <TIMER1_vSetICR1+0x6>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    14d4:	e6 e4       	ldi	r30, 0x46	; 70
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    14f2:	e2 e5       	ldi	r30, 0x52	; 82
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1506:	ec e4       	ldi	r30, 0x4C	; 76
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    151c:	e4 e4       	ldi	r30, 0x44	; 68
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
}
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <TIMER_vSetPWM+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1536:	ea e4       	ldi	r30, 0x4A	; 74
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Timer2_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer2_vSetPrescaler(u8 Prescaler)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1558:	a5 e4       	ldi	r26, 0x45	; 69
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e4       	ldi	r30, 0x45	; 69
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 7f       	andi	r24, 0xF8	; 248
    1564:	8c 93       	st	X, r24
	TCCR2 |= Prescaler ;
    1566:	a5 e4       	ldi	r26, 0x45	; 69
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e4       	ldi	r30, 0x45	; 69
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	90 81       	ld	r25, Z
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	89 2b       	or	r24, r25
    1574:	8c 93       	st	X, r24
}
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <Timer0_vSetPrescaler>:
/*******************************************************************************************************************/
void Timer0_vSetPrescaler(u8 Prescaler)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    158a:	a3 e5       	ldi	r26, 0x53	; 83
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e3 e5       	ldi	r30, 0x53	; 83
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	88 7f       	andi	r24, 0xF8	; 248
    1596:	8c 93       	st	X, r24
	TCCR0 |= Prescaler ;
    1598:	a3 e5       	ldi	r26, 0x53	; 83
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e3 e5       	ldi	r30, 0x53	; 83
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	90 81       	ld	r25, Z
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	89 2b       	or	r24, r25
    15a6:	8c 93       	st	X, r24
}
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    15b8:	ae e4       	ldi	r26, 0x4E	; 78
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ee e4       	ldi	r30, 0x4E	; 78
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 64       	ori	r24, 0x40	; 64
    15c4:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    15c6:	a9 e5       	ldi	r26, 0x59	; 89
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 e5       	ldi	r30, 0x59	; 89
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 62       	ori	r24, 0x20	; 32
    15d2:	8c 93       	st	X, r24
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <TIMER_vICUSetTriggerEdge+0x6>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    15e6:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	41 f4       	brne	.+16     	; 0x15fe <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    15ee:	ae e4       	ldi	r26, 0x4E	; 78
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ee e4       	ldi	r30, 0x4E	; 78
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 64       	ori	r24, 0x40	; 64
    15fa:	8c 93       	st	X, r24
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 23       	and	r24, r24
    1602:	41 f4       	brne	.+16     	; 0x1614 <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7b       	andi	r24, 0xBF	; 191
    1610:	8c 93       	st	X, r24
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    162c:	a9 e5       	ldi	r26, 0x59	; 89
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e9 e5       	ldi	r30, 0x59	; 89
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 62       	ori	r24, 0x20	; 32
    1638:	8c 93       	st	X, r24
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1648:	a9 e5       	ldi	r26, 0x59	; 89
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e9 e5       	ldi	r30, 0x59	; 89
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7d       	andi	r24, 0xDF	; 223
    1654:	8c 93       	st	X, r24
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1664:	e6 e4       	ldi	r30, 0x46	; 70
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    167a:	a1 e4       	ldi	r26, 0x41	; 65
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e1 e4       	ldi	r30, 0x41	; 65
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 7f       	andi	r24, 0xF8	; 248
    1686:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1688:	a1 e4       	ldi	r26, 0x41	; 65
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e1 e4       	ldi	r30, 0x41	; 65
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	86 60       	ori	r24, 0x06	; 6
    1694:	8c 93       	st	X, r24
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    16a4:	a1 e4       	ldi	r26, 0x41	; 65
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e1 e4       	ldi	r30, 0x41	; 65
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 60       	ori	r24, 0x08	; 8
    16b0:	8c 93       	st	X, r24
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    16c0:	a1 e4       	ldi	r26, 0x41	; 65
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e1 e4       	ldi	r30, 0x41	; 65
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	88 61       	ori	r24, 0x18	; 24
    16cc:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    16ce:	e1 e4       	ldi	r30, 0x41	; 65
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	10 82       	st	Z, r1
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <TIMER_u8SetCallBack+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <TIMER_u8SetCallBack+0x8>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    16ec:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f0       	breq	.+26     	; 0x1710 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	fc 01       	movw	r30, r24
    1702:	e6 58       	subi	r30, 0x86	; 134
    1704:	fc 4f       	sbci	r31, 0xFC	; 252
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	2f 93       	push	r18
    1730:	3f 93       	push	r19
    1732:	4f 93       	push	r20
    1734:	5f 93       	push	r21
    1736:	6f 93       	push	r22
    1738:	7f 93       	push	r23
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	af 93       	push	r26
    1740:	bf 93       	push	r27
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    174e:	80 91 90 03 	lds	r24, 0x0390
    1752:	90 91 91 03 	lds	r25, 0x0391
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	29 f0       	breq	.+10     	; 0x1764 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    175a:	e0 91 90 03 	lds	r30, 0x0390
    175e:	f0 91 91 03 	lds	r31, 0x0391
    1762:	09 95       	icall
	}
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    17b4:	80 91 8e 03 	lds	r24, 0x038E
    17b8:	90 91 8f 03 	lds	r25, 0x038F
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	29 f0       	breq	.+10     	; 0x17ca <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    17c0:	e0 91 8e 03 	lds	r30, 0x038E
    17c4:	f0 91 8f 03 	lds	r31, 0x038F
    17c8:	09 95       	icall
	}
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    181a:	80 91 8c 03 	lds	r24, 0x038C
    181e:	90 91 8d 03 	lds	r25, 0x038D
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	29 f0       	breq	.+10     	; 0x1830 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1826:	e0 91 8c 03 	lds	r30, 0x038C
    182a:	f0 91 8d 03 	lds	r31, 0x038D
    182e:	09 95       	icall
	}
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	0f 92       	push	r0
    185e:	11 24       	eor	r1, r1
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1880:	80 91 8a 03 	lds	r24, 0x038A
    1884:	90 91 8b 03 	lds	r25, 0x038B
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	29 f0       	breq	.+10     	; 0x1896 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    188c:	e0 91 8a 03 	lds	r30, 0x038A
    1890:	f0 91 8b 03 	lds	r31, 0x038B
    1894:	09 95       	icall
	}
}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	ff 91       	pop	r31
    189c:	ef 91       	pop	r30
    189e:	bf 91       	pop	r27
    18a0:	af 91       	pop	r26
    18a2:	9f 91       	pop	r25
    18a4:	8f 91       	pop	r24
    18a6:	7f 91       	pop	r23
    18a8:	6f 91       	pop	r22
    18aa:	5f 91       	pop	r21
    18ac:	4f 91       	pop	r20
    18ae:	3f 91       	pop	r19
    18b0:	2f 91       	pop	r18
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	11 24       	eor	r1, r1
    18c6:	2f 93       	push	r18
    18c8:	3f 93       	push	r19
    18ca:	4f 93       	push	r20
    18cc:	5f 93       	push	r21
    18ce:	6f 93       	push	r22
    18d0:	7f 93       	push	r23
    18d2:	8f 93       	push	r24
    18d4:	9f 93       	push	r25
    18d6:	af 93       	push	r26
    18d8:	bf 93       	push	r27
    18da:	ef 93       	push	r30
    18dc:	ff 93       	push	r31
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    18e6:	80 91 88 03 	lds	r24, 0x0388
    18ea:	90 91 89 03 	lds	r25, 0x0389
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	29 f0       	breq	.+10     	; 0x18fc <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    18f2:	e0 91 88 03 	lds	r30, 0x0388
    18f6:	f0 91 89 03 	lds	r31, 0x0389
    18fa:	09 95       	icall
	}
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    194c:	80 91 86 03 	lds	r24, 0x0386
    1950:	90 91 87 03 	lds	r25, 0x0387
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	29 f0       	breq	.+10     	; 0x1962 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1958:	e0 91 86 03 	lds	r30, 0x0386
    195c:	f0 91 87 03 	lds	r31, 0x0387
    1960:	09 95       	icall
	}
}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	ff 91       	pop	r31
    1968:	ef 91       	pop	r30
    196a:	bf 91       	pop	r27
    196c:	af 91       	pop	r26
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	7f 91       	pop	r23
    1974:	6f 91       	pop	r22
    1976:	5f 91       	pop	r21
    1978:	4f 91       	pop	r20
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    19b2:	80 91 84 03 	lds	r24, 0x0384
    19b6:	90 91 85 03 	lds	r25, 0x0385
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    19be:	e0 91 84 03 	lds	r30, 0x0384
    19c2:	f0 91 85 03 	lds	r31, 0x0385
    19c6:	09 95       	icall
	}
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    19ee:	1f 92       	push	r1
    19f0:	0f 92       	push	r0
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	0f 92       	push	r0
    19f6:	11 24       	eor	r1, r1
    19f8:	2f 93       	push	r18
    19fa:	3f 93       	push	r19
    19fc:	4f 93       	push	r20
    19fe:	5f 93       	push	r21
    1a00:	6f 93       	push	r22
    1a02:	7f 93       	push	r23
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	af 93       	push	r26
    1a0a:	bf 93       	push	r27
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1a18:	80 91 82 03 	lds	r24, 0x0382
    1a1c:	90 91 83 03 	lds	r25, 0x0383
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1a24:	e0 91 82 03 	lds	r30, 0x0382
    1a28:	f0 91 83 03 	lds	r31, 0x0383
    1a2c:	09 95       	icall
	}
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	ff 91       	pop	r31
    1a34:	ef 91       	pop	r30
    1a36:	bf 91       	pop	r27
    1a38:	af 91       	pop	r26
    1a3a:	9f 91       	pop	r25
    1a3c:	8f 91       	pop	r24
    1a3e:	7f 91       	pop	r23
    1a40:	6f 91       	pop	r22
    1a42:	5f 91       	pop	r21
    1a44:	4f 91       	pop	r20
    1a46:	3f 91       	pop	r19
    1a48:	2f 91       	pop	r18
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    1a5c:	af e5       	ldi	r26, 0x5F	; 95
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ef e5       	ldi	r30, 0x5F	; 95
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    1a78:	af e5       	ldi	r26, 0x5F	; 95
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	ef e5       	ldi	r30, 0x5F	; 95
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 77       	andi	r24, 0x7F	; 127
    1a84:	8c 93       	st	X, r24
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	28 97       	sbiw	r28, 0x08	; 8
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
    1aa2:	6b 83       	std	Y+3, r22	; 0x03
    1aa4:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <DIO_enumSetPinDir+0x26>
    1ab0:	f1 c0       	rjmp	.+482    	; 0x1c94 <DIO_enumSetPinDir+0x208>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 30       	cpi	r24, 0x08	; 8
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <DIO_enumSetPinDir+0x2e>
    1ab8:	ed c0       	rjmp	.+474    	; 0x1c94 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <DIO_enumSetPinDir+0x36>
    1ac0:	6f c0       	rjmp	.+222    	; 0x1ba0 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	38 87       	std	Y+8, r19	; 0x08
    1aca:	2f 83       	std	Y+7, r18	; 0x07
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	98 85       	ldd	r25, Y+8	; 0x08
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	49 f1       	breq	.+82     	; 0x1b28 <DIO_enumSetPinDir+0x9c>
    1ad6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad8:	38 85       	ldd	r19, Y+8	; 0x08
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <DIO_enumSetPinDir+0x5e>
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	98 85       	ldd	r25, Y+8	; 0x08
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <DIO_enumSetPinDir+0x74>
    1ae8:	d6 c0       	rjmp	.+428    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
    1aea:	2f 81       	ldd	r18, Y+7	; 0x07
    1aec:	38 85       	ldd	r19, Y+8	; 0x08
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	71 f1       	breq	.+92     	; 0x1b50 <DIO_enumSetPinDir+0xc4>
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	e9 f1       	breq	.+122    	; 0x1b78 <DIO_enumSetPinDir+0xec>
    1afe:	cb c0       	rjmp	.+406    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1b00:	aa e3       	ldi	r26, 0x3A	; 58
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	ea e3       	ldi	r30, 0x3A	; 58
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_enumSetPinDir+0x92>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_enumSetPinDir+0x8e>
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	b7 c0       	rjmp	.+366    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1b28:	a7 e3       	ldi	r26, 0x37	; 55
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e3       	ldi	r30, 0x37	; 55
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_enumSetPinDir+0xba>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <DIO_enumSetPinDir+0xb6>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	a3 c0       	rjmp	.+326    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    1b50:	a4 e3       	ldi	r26, 0x34	; 52
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e4 e3       	ldi	r30, 0x34	; 52
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_enumSetPinDir+0xe2>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <DIO_enumSetPinDir+0xde>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	8f c0       	rjmp	.+286    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    1b78:	a1 e3       	ldi	r26, 0x31	; 49
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e1 e3       	ldi	r30, 0x31	; 49
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_enumSetPinDir+0x10a>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_enumSetPinDir+0x106>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	7b c0       	rjmp	.+246    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <DIO_enumSetPinDir+0x11c>
    1ba6:	74 c0       	rjmp	.+232    	; 0x1c90 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3e 83       	std	Y+6, r19	; 0x06
    1bb0:	2d 83       	std	Y+5, r18	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	59 f1       	breq	.+86     	; 0x1c12 <DIO_enumSetPinDir+0x186>
    1bbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <DIO_enumSetPinDir+0x144>
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f0       	breq	.+26     	; 0x1be8 <DIO_enumSetPinDir+0x15c>
    1bce:	63 c0       	rjmp	.+198    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
    1bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	89 f1       	breq	.+98     	; 0x1c3c <DIO_enumSetPinDir+0x1b0>
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <DIO_enumSetPinDir+0x15a>
    1be4:	40 c0       	rjmp	.+128    	; 0x1c66 <DIO_enumSetPinDir+0x1da>
    1be6:	57 c0       	rjmp	.+174    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1be8:	aa e3       	ldi	r26, 0x3A	; 58
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_enumSetPinDir+0x17a>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_enumSetPinDir+0x176>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	42 c0       	rjmp	.+132    	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1c12:	a7 e3       	ldi	r26, 0x37	; 55
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e7 e3       	ldi	r30, 0x37	; 55
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_enumSetPinDir+0x1a4>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_enumSetPinDir+0x1a0>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	2d c0       	rjmp	.+90     	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1c3c:	a4 e3       	ldi	r26, 0x34	; 52
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e4 e3       	ldi	r30, 0x34	; 52
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_enumSetPinDir+0x1ce>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_enumSetPinDir+0x1ca>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	18 c0       	rjmp	.+48     	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1c66:	a1 e3       	ldi	r26, 0x31	; 49
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e1 e3       	ldi	r30, 0x31	; 49
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_enumSetPinDir+0x1f8>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_enumSetPinDir+0x1f4>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1c90:	19 82       	std	Y+1, r1	; 0x01
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1c94:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	28 96       	adiw	r28, 0x08	; 8
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	28 97       	sbiw	r28, 0x08	; 8
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	6b 83       	std	Y+3, r22	; 0x03
    1cc2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <DIO_enumWritePinVal+0x26>
    1cce:	f1 c0       	rjmp	.+482    	; 0x1eb2 <DIO_enumWritePinVal+0x208>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 30       	cpi	r24, 0x08	; 8
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <DIO_enumWritePinVal+0x2e>
    1cd6:	ed c0       	rjmp	.+474    	; 0x1eb2 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <DIO_enumWritePinVal+0x36>
    1cde:	6f c0       	rjmp	.+222    	; 0x1dbe <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	38 87       	std	Y+8, r19	; 0x08
    1ce8:	2f 83       	std	Y+7, r18	; 0x07
    1cea:	8f 81       	ldd	r24, Y+7	; 0x07
    1cec:	98 85       	ldd	r25, Y+8	; 0x08
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	49 f1       	breq	.+82     	; 0x1d46 <DIO_enumWritePinVal+0x9c>
    1cf4:	2f 81       	ldd	r18, Y+7	; 0x07
    1cf6:	38 85       	ldd	r19, Y+8	; 0x08
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <DIO_enumWritePinVal+0x5e>
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	98 85       	ldd	r25, Y+8	; 0x08
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <DIO_enumWritePinVal+0x74>
    1d06:	d6 c0       	rjmp	.+428    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
    1d08:	2f 81       	ldd	r18, Y+7	; 0x07
    1d0a:	38 85       	ldd	r19, Y+8	; 0x08
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	71 f1       	breq	.+92     	; 0x1d6e <DIO_enumWritePinVal+0xc4>
    1d12:	8f 81       	ldd	r24, Y+7	; 0x07
    1d14:	98 85       	ldd	r25, Y+8	; 0x08
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	e9 f1       	breq	.+122    	; 0x1d96 <DIO_enumWritePinVal+0xec>
    1d1c:	cb c0       	rjmp	.+406    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1d1e:	ab e3       	ldi	r26, 0x3B	; 59
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_enumWritePinVal+0x92>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_enumWritePinVal+0x8e>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	b7 c0       	rjmp	.+366    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1d46:	a8 e3       	ldi	r26, 0x38	; 56
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e3       	ldi	r30, 0x38	; 56
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_enumWritePinVal+0xba>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_enumWritePinVal+0xb6>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	a3 c0       	rjmp	.+326    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1d6e:	a5 e3       	ldi	r26, 0x35	; 53
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e3       	ldi	r30, 0x35	; 53
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_enumWritePinVal+0xe2>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_enumWritePinVal+0xde>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	8f c0       	rjmp	.+286    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1d96:	a2 e3       	ldi	r26, 0x32	; 50
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e2 e3       	ldi	r30, 0x32	; 50
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_enumWritePinVal+0x10a>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_enumWritePinVal+0x106>
    1db8:	84 2b       	or	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	7b c0       	rjmp	.+246    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	88 23       	and	r24, r24
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <DIO_enumWritePinVal+0x11c>
    1dc4:	74 c0       	rjmp	.+232    	; 0x1eae <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3e 83       	std	Y+6, r19	; 0x06
    1dce:	2d 83       	std	Y+5, r18	; 0x05
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	59 f1       	breq	.+86     	; 0x1e30 <DIO_enumWritePinVal+0x186>
    1dda:	2d 81       	ldd	r18, Y+5	; 0x05
    1ddc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	2c f4       	brge	.+10     	; 0x1dee <DIO_enumWritePinVal+0x144>
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f0       	breq	.+26     	; 0x1e06 <DIO_enumWritePinVal+0x15c>
    1dec:	63 c0       	rjmp	.+198    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
    1dee:	2d 81       	ldd	r18, Y+5	; 0x05
    1df0:	3e 81       	ldd	r19, Y+6	; 0x06
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	89 f1       	breq	.+98     	; 0x1e5a <DIO_enumWritePinVal+0x1b0>
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <DIO_enumWritePinVal+0x15a>
    1e02:	40 c0       	rjmp	.+128    	; 0x1e84 <DIO_enumWritePinVal+0x1da>
    1e04:	57 c0       	rjmp	.+174    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1e06:	ab e3       	ldi	r26, 0x3B	; 59
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	eb e3       	ldi	r30, 0x3B	; 59
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_enumWritePinVal+0x17a>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_enumWritePinVal+0x176>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	42 c0       	rjmp	.+132    	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1e30:	a8 e3       	ldi	r26, 0x38	; 56
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_enumWritePinVal+0x1a4>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_enumWritePinVal+0x1a0>
    1e52:	80 95       	com	r24
    1e54:	84 23       	and	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	2d c0       	rjmp	.+90     	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1e5a:	a5 e3       	ldi	r26, 0x35	; 53
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e3       	ldi	r30, 0x35	; 53
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_enumWritePinVal+0x1ce>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_enumWritePinVal+0x1ca>
    1e7c:	80 95       	com	r24
    1e7e:	84 23       	and	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	18 c0       	rjmp	.+48     	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1e84:	a2 e3       	ldi	r26, 0x32	; 50
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e2 e3       	ldi	r30, 0x32	; 50
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_enumWritePinVal+0x1f8>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_enumWritePinVal+0x1f4>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb6:	28 96       	adiw	r28, 0x08	; 8
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	27 97       	sbiw	r28, 0x07	; 7
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    1ee0:	5d 83       	std	Y+5, r21	; 0x05
    1ee2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <DIO_enumReadPinVal+0x28>
    1eee:	a6 c0       	rjmp	.+332    	; 0x203c <DIO_enumReadPinVal+0x174>
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <DIO_enumReadPinVal+0x30>
    1ef6:	a2 c0       	rjmp	.+324    	; 0x203c <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	3f 83       	std	Y+7, r19	; 0x07
    1f00:	2e 83       	std	Y+6, r18	; 0x06
    1f02:	4e 81       	ldd	r20, Y+6	; 0x06
    1f04:	5f 81       	ldd	r21, Y+7	; 0x07
    1f06:	41 30       	cpi	r20, 0x01	; 1
    1f08:	51 05       	cpc	r21, r1
    1f0a:	c1 f1       	breq	.+112    	; 0x1f7c <DIO_enumReadPinVal+0xb4>
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	91 05       	cpc	r25, r1
    1f14:	34 f4       	brge	.+12     	; 0x1f22 <DIO_enumReadPinVal+0x5a>
    1f16:	2e 81       	ldd	r18, Y+6	; 0x06
    1f18:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1a:	21 15       	cp	r18, r1
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	71 f0       	breq	.+28     	; 0x1f3c <DIO_enumReadPinVal+0x74>
    1f20:	8e c0       	rjmp	.+284    	; 0x203e <DIO_enumReadPinVal+0x176>
    1f22:	4e 81       	ldd	r20, Y+6	; 0x06
    1f24:	5f 81       	ldd	r21, Y+7	; 0x07
    1f26:	42 30       	cpi	r20, 0x02	; 2
    1f28:	51 05       	cpc	r21, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <DIO_enumReadPinVal+0x66>
    1f2c:	47 c0       	rjmp	.+142    	; 0x1fbc <DIO_enumReadPinVal+0xf4>
    1f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f30:	9f 81       	ldd	r25, Y+7	; 0x07
    1f32:	83 30       	cpi	r24, 0x03	; 3
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <DIO_enumReadPinVal+0x72>
    1f38:	61 c0       	rjmp	.+194    	; 0x1ffc <DIO_enumReadPinVal+0x134>
    1f3a:	81 c0       	rjmp	.+258    	; 0x203e <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1f3c:	e9 e3       	ldi	r30, 0x39	; 57
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_enumReadPinVal+0x8e>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	2a 95       	dec	r18
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_enumReadPinVal+0x8a>
    1f5a:	9a 01       	movw	r18, r20
    1f5c:	28 23       	and	r18, r24
    1f5e:	39 23       	and	r19, r25
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a9 01       	movw	r20, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_enumReadPinVal+0xa6>
    1f6a:	55 95       	asr	r21
    1f6c:	47 95       	ror	r20
    1f6e:	8a 95       	dec	r24
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_enumReadPinVal+0xa2>
    1f72:	ca 01       	movw	r24, r20
    1f74:	ec 81       	ldd	r30, Y+4	; 0x04
    1f76:	fd 81       	ldd	r31, Y+5	; 0x05
    1f78:	80 83       	st	Z, r24
    1f7a:	61 c0       	rjmp	.+194    	; 0x203e <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1f7c:	e6 e3       	ldi	r30, 0x36	; 54
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <DIO_enumReadPinVal+0xce>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	2a 95       	dec	r18
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <DIO_enumReadPinVal+0xca>
    1f9a:	9a 01       	movw	r18, r20
    1f9c:	28 23       	and	r18, r24
    1f9e:	39 23       	and	r19, r25
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a9 01       	movw	r20, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_enumReadPinVal+0xe6>
    1faa:	55 95       	asr	r21
    1fac:	47 95       	ror	r20
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_enumReadPinVal+0xe2>
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	ec 81       	ldd	r30, Y+4	; 0x04
    1fb6:	fd 81       	ldd	r31, Y+5	; 0x05
    1fb8:	80 83       	st	Z, r24
    1fba:	41 c0       	rjmp	.+130    	; 0x203e <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1fbc:	e3 e3       	ldi	r30, 0x33	; 51
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	48 2f       	mov	r20, r24
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_enumReadPinVal+0x10e>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	2a 95       	dec	r18
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_enumReadPinVal+0x10a>
    1fda:	9a 01       	movw	r18, r20
    1fdc:	28 23       	and	r18, r24
    1fde:	39 23       	and	r19, r25
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_enumReadPinVal+0x126>
    1fea:	55 95       	asr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_enumReadPinVal+0x122>
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ff6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ff8:	80 83       	st	Z, r24
    1ffa:	21 c0       	rjmp	.+66     	; 0x203e <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1ffc:	e0 e3       	ldi	r30, 0x30	; 48
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_enumReadPinVal+0x14e>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	2a 95       	dec	r18
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_enumReadPinVal+0x14a>
    201a:	9a 01       	movw	r18, r20
    201c:	28 23       	and	r18, r24
    201e:	39 23       	and	r19, r25
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a9 01       	movw	r20, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_enumReadPinVal+0x166>
    202a:	55 95       	asr	r21
    202c:	47 95       	ror	r20
    202e:	8a 95       	dec	r24
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_enumReadPinVal+0x162>
    2032:	ca 01       	movw	r24, r20
    2034:	ec 81       	ldd	r30, Y+4	; 0x04
    2036:	fd 81       	ldd	r31, Y+5	; 0x05
    2038:	80 83       	st	Z, r24
    203a:	01 c0       	rjmp	.+2      	; 0x203e <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    203c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2040:	27 96       	adiw	r28, 0x07	; 7
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <DIO_enumTogglePinVal+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <DIO_enumTogglePinVal+0x8>
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	08 f0       	brcs	.+2      	; 0x2070 <DIO_enumTogglePinVal+0x1e>
    206e:	73 c0       	rjmp	.+230    	; 0x2156 <DIO_enumTogglePinVal+0x104>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	08 f0       	brcs	.+2      	; 0x2078 <DIO_enumTogglePinVal+0x26>
    2076:	6f c0       	rjmp	.+222    	; 0x2156 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	3d 83       	std	Y+5, r19	; 0x05
    2080:	2c 83       	std	Y+4, r18	; 0x04
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	9d 81       	ldd	r25, Y+5	; 0x05
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	49 f1       	breq	.+82     	; 0x20de <DIO_enumTogglePinVal+0x8c>
    208c:	2c 81       	ldd	r18, Y+4	; 0x04
    208e:	3d 81       	ldd	r19, Y+5	; 0x05
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	2c f4       	brge	.+10     	; 0x20a0 <DIO_enumTogglePinVal+0x4e>
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	61 f0       	breq	.+24     	; 0x20b6 <DIO_enumTogglePinVal+0x64>
    209e:	5c c0       	rjmp	.+184    	; 0x2158 <DIO_enumTogglePinVal+0x106>
    20a0:	2c 81       	ldd	r18, Y+4	; 0x04
    20a2:	3d 81       	ldd	r19, Y+5	; 0x05
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	71 f1       	breq	.+92     	; 0x2106 <DIO_enumTogglePinVal+0xb4>
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	91 05       	cpc	r25, r1
    20b2:	e9 f1       	breq	.+122    	; 0x212e <DIO_enumTogglePinVal+0xdc>
    20b4:	51 c0       	rjmp	.+162    	; 0x2158 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    20b6:	ab e3       	ldi	r26, 0x3B	; 59
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	eb e3       	ldi	r30, 0x3B	; 59
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	48 2f       	mov	r20, r24
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 2e       	mov	r0, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <DIO_enumTogglePinVal+0x82>
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	0a 94       	dec	r0
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <DIO_enumTogglePinVal+0x7e>
    20d8:	84 27       	eor	r24, r20
    20da:	8c 93       	st	X, r24
    20dc:	3d c0       	rjmp	.+122    	; 0x2158 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    20de:	a8 e3       	ldi	r26, 0x38	; 56
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e8 e3       	ldi	r30, 0x38	; 56
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_enumTogglePinVal+0xaa>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_enumTogglePinVal+0xa6>
    2100:	84 27       	eor	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	29 c0       	rjmp	.+82     	; 0x2158 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2106:	a5 e3       	ldi	r26, 0x35	; 53
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e3       	ldi	r30, 0x35	; 53
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <DIO_enumTogglePinVal+0xd2>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <DIO_enumTogglePinVal+0xce>
    2128:	84 27       	eor	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	15 c0       	rjmp	.+42     	; 0x2158 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    212e:	a2 e3       	ldi	r26, 0x32	; 50
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e2 e3       	ldi	r30, 0x32	; 50
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <DIO_enumTogglePinVal+0xfa>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <DIO_enumTogglePinVal+0xf6>
    2150:	84 27       	eor	r24, r20
    2152:	8c 93       	st	X, r24
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2156:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DIO_enumConnectPullUp+0x6>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <DIO_enumConnectPullUp+0x8>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <DIO_enumConnectPullUp+0xa>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	6b 83       	std	Y+3, r22	; 0x03
    217c:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	08 f0       	brcs	.+2      	; 0x218a <DIO_enumConnectPullUp+0x20>
    2188:	3e c1       	rjmp	.+636    	; 0x2406 <DIO_enumConnectPullUp+0x29c>
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 30       	cpi	r24, 0x08	; 8
    218e:	08 f0       	brcs	.+2      	; 0x2192 <DIO_enumConnectPullUp+0x28>
    2190:	3a c1       	rjmp	.+628    	; 0x2406 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	3e 83       	std	Y+6, r19	; 0x06
    219a:	2d 83       	std	Y+5, r18	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <DIO_enumConnectPullUp+0x3e>
    21a6:	5d c0       	rjmp	.+186    	; 0x2262 <DIO_enumConnectPullUp+0xf8>
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	3e 81       	ldd	r19, Y+6	; 0x06
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	2c f4       	brge	.+10     	; 0x21bc <DIO_enumConnectPullUp+0x52>
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	71 f0       	breq	.+28     	; 0x21d6 <DIO_enumConnectPullUp+0x6c>
    21ba:	26 c1       	rjmp	.+588    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
    21bc:	2d 81       	ldd	r18, Y+5	; 0x05
    21be:	3e 81       	ldd	r19, Y+6	; 0x06
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <DIO_enumConnectPullUp+0x5e>
    21c6:	93 c0       	rjmp	.+294    	; 0x22ee <DIO_enumConnectPullUp+0x184>
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	83 30       	cpi	r24, 0x03	; 3
    21ce:	91 05       	cpc	r25, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <DIO_enumConnectPullUp+0x6a>
    21d2:	d3 c0       	rjmp	.+422    	; 0x237a <DIO_enumConnectPullUp+0x210>
    21d4:	19 c1       	rjmp	.+562    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	71 f5       	brne	.+92     	; 0x2238 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    21dc:	a0 e5       	ldi	r26, 0x50	; 80
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e0 e5       	ldi	r30, 0x50	; 80
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8b 7f       	andi	r24, 0xFB	; 251
    21e8:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    21ea:	aa e3       	ldi	r26, 0x3A	; 58
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ea e3       	ldi	r30, 0x3A	; 58
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <DIO_enumConnectPullUp+0x9c>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	2a 95       	dec	r18
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <DIO_enumConnectPullUp+0x98>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2210:	ab e3       	ldi	r26, 0x3B	; 59
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	eb e3       	ldi	r30, 0x3B	; 59
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	48 2f       	mov	r20, r24
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 2e       	mov	r0, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_enumConnectPullUp+0xc4>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_enumConnectPullUp+0xc0>
    2232:	84 2b       	or	r24, r20
    2234:	8c 93       	st	X, r24
    2236:	e8 c0       	rjmp	.+464    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2238:	ab e3       	ldi	r26, 0x3B	; 59
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	eb e3       	ldi	r30, 0x3B	; 59
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	48 2f       	mov	r20, r24
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_enumConnectPullUp+0xec>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_enumConnectPullUp+0xe8>
    225a:	80 95       	com	r24
    225c:	84 23       	and	r24, r20
    225e:	8c 93       	st	X, r24
    2260:	d3 c0       	rjmp	.+422    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	71 f5       	brne	.+92     	; 0x22c4 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2268:	a0 e5       	ldi	r26, 0x50	; 80
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e0 e5       	ldi	r30, 0x50	; 80
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8b 7f       	andi	r24, 0xFB	; 251
    2274:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    2276:	a7 e3       	ldi	r26, 0x37	; 55
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e7 e3       	ldi	r30, 0x37	; 55
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	48 2f       	mov	r20, r24
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_enumConnectPullUp+0x128>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	2a 95       	dec	r18
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_enumConnectPullUp+0x124>
    2296:	80 95       	com	r24
    2298:	84 23       	and	r24, r20
    229a:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    229c:	a8 e3       	ldi	r26, 0x38	; 56
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e8 e3       	ldi	r30, 0x38	; 56
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_enumConnectPullUp+0x150>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_enumConnectPullUp+0x14c>
    22be:	84 2b       	or	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	a2 c0       	rjmp	.+324    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    22c4:	a8 e3       	ldi	r26, 0x38	; 56
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e8 e3       	ldi	r30, 0x38	; 56
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	48 2f       	mov	r20, r24
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_enumConnectPullUp+0x178>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <DIO_enumConnectPullUp+0x174>
    22e6:	80 95       	com	r24
    22e8:	84 23       	and	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	8d c0       	rjmp	.+282    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	71 f5       	brne	.+92     	; 0x2350 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    22f4:	a0 e5       	ldi	r26, 0x50	; 80
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e5       	ldi	r30, 0x50	; 80
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8b 7f       	andi	r24, 0xFB	; 251
    2300:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2302:	a4 e3       	ldi	r26, 0x34	; 52
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e4 e3       	ldi	r30, 0x34	; 52
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <DIO_enumConnectPullUp+0x1b4>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	2a 95       	dec	r18
    2320:	e2 f7       	brpl	.-8      	; 0x231a <DIO_enumConnectPullUp+0x1b0>
    2322:	80 95       	com	r24
    2324:	84 23       	and	r24, r20
    2326:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2328:	a5 e3       	ldi	r26, 0x35	; 53
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e5 e3       	ldi	r30, 0x35	; 53
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <DIO_enumConnectPullUp+0x1dc>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <DIO_enumConnectPullUp+0x1d8>
    234a:	84 2b       	or	r24, r20
    234c:	8c 93       	st	X, r24
    234e:	5c c0       	rjmp	.+184    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2350:	a5 e3       	ldi	r26, 0x35	; 53
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e3       	ldi	r30, 0x35	; 53
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	48 2f       	mov	r20, r24
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 2e       	mov	r0, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_enumConnectPullUp+0x204>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <DIO_enumConnectPullUp+0x200>
    2372:	80 95       	com	r24
    2374:	84 23       	and	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	47 c0       	rjmp	.+142    	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	71 f5       	brne	.+92     	; 0x23dc <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2380:	a0 e5       	ldi	r26, 0x50	; 80
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e0 e5       	ldi	r30, 0x50	; 80
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8b 7f       	andi	r24, 0xFB	; 251
    238c:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    238e:	a1 e3       	ldi	r26, 0x31	; 49
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e1 e3       	ldi	r30, 0x31	; 49
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_enumConnectPullUp+0x240>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	2a 95       	dec	r18
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_enumConnectPullUp+0x23c>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    23b4:	a2 e3       	ldi	r26, 0x32	; 50
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e2 e3       	ldi	r30, 0x32	; 50
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_enumConnectPullUp+0x268>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <DIO_enumConnectPullUp+0x264>
    23d6:	84 2b       	or	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	16 c0       	rjmp	.+44     	; 0x2408 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    23dc:	a2 e3       	ldi	r26, 0x32	; 50
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e2 e3       	ldi	r30, 0x32	; 50
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <DIO_enumConnectPullUp+0x290>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <DIO_enumConnectPullUp+0x28c>
    23fe:	80 95       	com	r24
    2400:	84 23       	and	r24, r20
    2402:	8c 93       	st	X, r24
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2406:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
}
    240a:	26 96       	adiw	r28, 0x06	; 6
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <DIO_enumSetPortDir+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <DIO_enumSetPortDir+0x8>
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	8a 83       	std	Y+2, r24	; 0x02
    242c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	a8 f5       	brcc	.+106    	; 0x24a2 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	3d 83       	std	Y+5, r19	; 0x05
    2440:	2c 83       	std	Y+4, r18	; 0x04
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	91 05       	cpc	r25, r1
    244a:	d1 f0       	breq	.+52     	; 0x2480 <DIO_enumSetPortDir+0x64>
    244c:	2c 81       	ldd	r18, Y+4	; 0x04
    244e:	3d 81       	ldd	r19, Y+5	; 0x05
    2450:	22 30       	cpi	r18, 0x02	; 2
    2452:	31 05       	cpc	r19, r1
    2454:	2c f4       	brge	.+10     	; 0x2460 <DIO_enumSetPortDir+0x44>
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	9d 81       	ldd	r25, Y+5	; 0x05
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	61 f0       	breq	.+24     	; 0x2476 <DIO_enumSetPortDir+0x5a>
    245e:	1f c0       	rjmp	.+62     	; 0x249e <DIO_enumSetPortDir+0x82>
    2460:	2c 81       	ldd	r18, Y+4	; 0x04
    2462:	3d 81       	ldd	r19, Y+5	; 0x05
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	31 05       	cpc	r19, r1
    2468:	81 f0       	breq	.+32     	; 0x248a <DIO_enumSetPortDir+0x6e>
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	83 30       	cpi	r24, 0x03	; 3
    2470:	91 05       	cpc	r25, r1
    2472:	81 f0       	breq	.+32     	; 0x2494 <DIO_enumSetPortDir+0x78>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    2476:	ea e3       	ldi	r30, 0x3A	; 58
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	80 83       	st	Z, r24
    247e:	12 c0       	rjmp	.+36     	; 0x24a4 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    2480:	e7 e3       	ldi	r30, 0x37	; 55
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	80 83       	st	Z, r24
    2488:	0d c0       	rjmp	.+26     	; 0x24a4 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    248a:	e4 e3       	ldi	r30, 0x34	; 52
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	80 83       	st	Z, r24
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    2494:	e1 e3       	ldi	r30, 0x31	; 49
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	80 83       	st	Z, r24
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    24a2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <DIO_enumWritePortVal+0x6>
    24bc:	00 d0       	rcall	.+0      	; 0x24be <DIO_enumWritePortVal+0x8>
    24be:	0f 92       	push	r0
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	84 30       	cpi	r24, 0x04	; 4
    24d0:	a8 f5       	brcc	.+106    	; 0x253c <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	3d 83       	std	Y+5, r19	; 0x05
    24da:	2c 83       	std	Y+4, r18	; 0x04
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	91 05       	cpc	r25, r1
    24e4:	d1 f0       	breq	.+52     	; 0x251a <DIO_enumWritePortVal+0x64>
    24e6:	2c 81       	ldd	r18, Y+4	; 0x04
    24e8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ea:	22 30       	cpi	r18, 0x02	; 2
    24ec:	31 05       	cpc	r19, r1
    24ee:	2c f4       	brge	.+10     	; 0x24fa <DIO_enumWritePortVal+0x44>
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	9d 81       	ldd	r25, Y+5	; 0x05
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	61 f0       	breq	.+24     	; 0x2510 <DIO_enumWritePortVal+0x5a>
    24f8:	1f c0       	rjmp	.+62     	; 0x2538 <DIO_enumWritePortVal+0x82>
    24fa:	2c 81       	ldd	r18, Y+4	; 0x04
    24fc:	3d 81       	ldd	r19, Y+5	; 0x05
    24fe:	22 30       	cpi	r18, 0x02	; 2
    2500:	31 05       	cpc	r19, r1
    2502:	81 f0       	breq	.+32     	; 0x2524 <DIO_enumWritePortVal+0x6e>
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	83 30       	cpi	r24, 0x03	; 3
    250a:	91 05       	cpc	r25, r1
    250c:	81 f0       	breq	.+32     	; 0x252e <DIO_enumWritePortVal+0x78>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    2510:	eb e3       	ldi	r30, 0x3B	; 59
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	80 83       	st	Z, r24
    2518:	12 c0       	rjmp	.+36     	; 0x253e <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    251a:	e8 e3       	ldi	r30, 0x38	; 56
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	80 83       	st	Z, r24
    2522:	0d c0       	rjmp	.+26     	; 0x253e <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    2524:	e5 e3       	ldi	r30, 0x35	; 53
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	80 83       	st	Z, r24
    252c:	08 c0       	rjmp	.+16     	; 0x253e <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    252e:	e2 e3       	ldi	r30, 0x32	; 50
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	80 83       	st	Z, r24
    2536:	03 c0       	rjmp	.+6      	; 0x253e <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2538:	19 82       	std	Y+1, r1	; 0x01
    253a:	01 c0       	rjmp	.+2      	; 0x253e <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    253c:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	27 97       	sbiw	r28, 0x07	; 7
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	8a 83       	std	Y+2, r24	; 0x02
    2566:	7c 83       	std	Y+4, r23	; 0x04
    2568:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	84 30       	cpi	r24, 0x04	; 4
    2572:	08 f0       	brcs	.+2      	; 0x2576 <DIO_enumReadPorVal+0x26>
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3f 83       	std	Y+7, r19	; 0x07
    257e:	2e 83       	std	Y+6, r18	; 0x06
    2580:	8e 81       	ldd	r24, Y+6	; 0x06
    2582:	9f 81       	ldd	r25, Y+7	; 0x07
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	e1 f0       	breq	.+56     	; 0x25c2 <DIO_enumReadPorVal+0x72>
    258a:	2e 81       	ldd	r18, Y+6	; 0x06
    258c:	3f 81       	ldd	r19, Y+7	; 0x07
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <DIO_enumReadPorVal+0x4e>
    2594:	8e 81       	ldd	r24, Y+6	; 0x06
    2596:	9f 81       	ldd	r25, Y+7	; 0x07
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <DIO_enumReadPorVal+0x64>
    259c:	27 c0       	rjmp	.+78     	; 0x25ec <DIO_enumReadPorVal+0x9c>
    259e:	2e 81       	ldd	r18, Y+6	; 0x06
    25a0:	3f 81       	ldd	r19, Y+7	; 0x07
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	a1 f0       	breq	.+40     	; 0x25d0 <DIO_enumReadPorVal+0x80>
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	b1 f0       	breq	.+44     	; 0x25de <DIO_enumReadPorVal+0x8e>
    25b2:	1c c0       	rjmp	.+56     	; 0x25ec <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    25b4:	e9 e3       	ldi	r30, 0x39	; 57
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	80 83       	st	Z, r24
    25c0:	16 c0       	rjmp	.+44     	; 0x25ee <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    25c2:	e6 e3       	ldi	r30, 0x36	; 54
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	eb 81       	ldd	r30, Y+3	; 0x03
    25ca:	fc 81       	ldd	r31, Y+4	; 0x04
    25cc:	80 83       	st	Z, r24
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    25d0:	e3 e3       	ldi	r30, 0x33	; 51
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	eb 81       	ldd	r30, Y+3	; 0x03
    25d8:	fc 81       	ldd	r31, Y+4	; 0x04
    25da:	80 83       	st	Z, r24
    25dc:	08 c0       	rjmp	.+16     	; 0x25ee <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    25de:	e0 e3       	ldi	r30, 0x30	; 48
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	eb 81       	ldd	r30, Y+3	; 0x03
    25e6:	fc 81       	ldd	r31, Y+4	; 0x04
    25e8:	80 83       	st	Z, r24
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    25ec:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    25ee:	99 81       	ldd	r25, Y+1	; 0x01
    25f0:	9d 83       	std	Y+5, r25	; 0x05
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    25f4:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    25f6:	29 81       	ldd	r18, Y+1	; 0x01
    25f8:	2d 83       	std	Y+5, r18	; 0x05
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25fc:	27 96       	adiw	r28, 0x07	; 7
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <DIO_enumTogglePortValue+0x6>
    2614:	00 d0       	rcall	.+0      	; 0x2616 <DIO_enumTogglePortValue+0x8>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	08 f0       	brcs	.+2      	; 0x2628 <DIO_enumTogglePortValue+0x1a>
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3c 83       	std	Y+4, r19	; 0x04
    2630:	2b 83       	std	Y+3, r18	; 0x03
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	e9 f0       	breq	.+58     	; 0x2676 <DIO_enumTogglePortValue+0x68>
    263c:	2b 81       	ldd	r18, Y+3	; 0x03
    263e:	3c 81       	ldd	r19, Y+4	; 0x04
    2640:	22 30       	cpi	r18, 0x02	; 2
    2642:	31 05       	cpc	r19, r1
    2644:	2c f4       	brge	.+10     	; 0x2650 <DIO_enumTogglePortValue+0x42>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	61 f0       	breq	.+24     	; 0x2666 <DIO_enumTogglePortValue+0x58>
    264e:	2c c0       	rjmp	.+88     	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
    2650:	2b 81       	ldd	r18, Y+3	; 0x03
    2652:	3c 81       	ldd	r19, Y+4	; 0x04
    2654:	22 30       	cpi	r18, 0x02	; 2
    2656:	31 05       	cpc	r19, r1
    2658:	b1 f0       	breq	.+44     	; 0x2686 <DIO_enumTogglePortValue+0x78>
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	91 05       	cpc	r25, r1
    2662:	c9 f0       	breq	.+50     	; 0x2696 <DIO_enumTogglePortValue+0x88>
    2664:	21 c0       	rjmp	.+66     	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    2666:	ab e3       	ldi	r26, 0x3B	; 59
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	eb e3       	ldi	r30, 0x3B	; 59
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	80 95       	com	r24
    2672:	8c 93       	st	X, r24
    2674:	19 c0       	rjmp	.+50     	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    2676:	a8 e3       	ldi	r26, 0x38	; 56
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e8 e3       	ldi	r30, 0x38	; 56
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 95       	com	r24
    2682:	8c 93       	st	X, r24
    2684:	11 c0       	rjmp	.+34     	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    2686:	a5 e3       	ldi	r26, 0x35	; 53
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e5 e3       	ldi	r30, 0x35	; 53
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	80 95       	com	r24
    2692:	8c 93       	st	X, r24
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    2696:	a2 e3       	ldi	r26, 0x32	; 50
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e2 e3       	ldi	r30, 0x32	; 50
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 95       	com	r24
    26a2:	8c 93       	st	X, r24
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    26a6:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <DIO_vWriteLowNibble+0x6>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <DIO_vWriteLowNibble+0x8>
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	8a 83       	std	Y+2, r24	; 0x02
    26c8:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <DIO_vWriteLowNibble+0x1e>
    26d4:	62 c0       	rjmp	.+196    	; 0x279a <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	8f 70       	andi	r24, 0x0F	; 15
    26da:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	3d 83       	std	Y+5, r19	; 0x05
    26e4:	2c 83       	std	Y+4, r18	; 0x04
    26e6:	8c 81       	ldd	r24, Y+4	; 0x04
    26e8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	91 05       	cpc	r25, r1
    26ee:	29 f1       	breq	.+74     	; 0x273a <DIO_vWriteLowNibble+0x82>
    26f0:	2c 81       	ldd	r18, Y+4	; 0x04
    26f2:	3d 81       	ldd	r19, Y+5	; 0x05
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	2c f4       	brge	.+10     	; 0x2704 <DIO_vWriteLowNibble+0x4c>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	61 f0       	breq	.+24     	; 0x271a <DIO_vWriteLowNibble+0x62>
    2702:	4c c0       	rjmp	.+152    	; 0x279c <DIO_vWriteLowNibble+0xe4>
    2704:	2c 81       	ldd	r18, Y+4	; 0x04
    2706:	3d 81       	ldd	r19, Y+5	; 0x05
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	31 05       	cpc	r19, r1
    270c:	31 f1       	breq	.+76     	; 0x275a <DIO_vWriteLowNibble+0xa2>
    270e:	8c 81       	ldd	r24, Y+4	; 0x04
    2710:	9d 81       	ldd	r25, Y+5	; 0x05
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	91 05       	cpc	r25, r1
    2716:	89 f1       	breq	.+98     	; 0x277a <DIO_vWriteLowNibble+0xc2>
    2718:	41 c0       	rjmp	.+130    	; 0x279c <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    271a:	ab e3       	ldi	r26, 0x3B	; 59
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 7f       	andi	r24, 0xF0	; 240
    2726:	8c 93       	st	X, r24
      PORTA_REG |= value;
    2728:	ab e3       	ldi	r26, 0x3B	; 59
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	eb e3       	ldi	r30, 0x3B	; 59
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	90 81       	ld	r25, Z
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	89 2b       	or	r24, r25
    2736:	8c 93       	st	X, r24
    2738:	31 c0       	rjmp	.+98     	; 0x279c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    273a:	a8 e3       	ldi	r26, 0x38	; 56
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e8 e3       	ldi	r30, 0x38	; 56
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	80 7f       	andi	r24, 0xF0	; 240
    2746:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2748:	a8 e3       	ldi	r26, 0x38	; 56
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e8 e3       	ldi	r30, 0x38	; 56
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	90 81       	ld	r25, Z
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	89 2b       	or	r24, r25
    2756:	8c 93       	st	X, r24
    2758:	21 c0       	rjmp	.+66     	; 0x279c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    275a:	a5 e3       	ldi	r26, 0x35	; 53
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e5 e3       	ldi	r30, 0x35	; 53
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	80 7f       	andi	r24, 0xF0	; 240
    2766:	8c 93       	st	X, r24
      PORTC_REG |= value;
    2768:	a5 e3       	ldi	r26, 0x35	; 53
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e5 e3       	ldi	r30, 0x35	; 53
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	90 81       	ld	r25, Z
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	89 2b       	or	r24, r25
    2776:	8c 93       	st	X, r24
    2778:	11 c0       	rjmp	.+34     	; 0x279c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    277a:	a2 e3       	ldi	r26, 0x32	; 50
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e2 e3       	ldi	r30, 0x32	; 50
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 7f       	andi	r24, 0xF0	; 240
    2786:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2788:	a2 e3       	ldi	r26, 0x32	; 50
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e2 e3       	ldi	r30, 0x32	; 50
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	90 81       	ld	r25, Z
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	89 2b       	or	r24, r25
    2796:	8c 93       	st	X, r24
    2798:	01 c0       	rjmp	.+2      	; 0x279c <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    279a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <DIO_vWriteHighNibble+0x6>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <DIO_vWriteHighNibble+0x8>
    27b6:	0f 92       	push	r0
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	8a 83       	std	Y+2, r24	; 0x02
    27be:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	84 30       	cpi	r24, 0x04	; 4
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <DIO_vWriteHighNibble+0x1e>
    27ca:	63 c0       	rjmp	.+198    	; 0x2892 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	82 95       	swap	r24
    27d0:	80 7f       	andi	r24, 0xF0	; 240
    27d2:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	3d 83       	std	Y+5, r19	; 0x05
    27dc:	2c 83       	std	Y+4, r18	; 0x04
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	91 05       	cpc	r25, r1
    27e6:	29 f1       	breq	.+74     	; 0x2832 <DIO_vWriteHighNibble+0x84>
    27e8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ea:	3d 81       	ldd	r19, Y+5	; 0x05
    27ec:	22 30       	cpi	r18, 0x02	; 2
    27ee:	31 05       	cpc	r19, r1
    27f0:	2c f4       	brge	.+10     	; 0x27fc <DIO_vWriteHighNibble+0x4e>
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	9d 81       	ldd	r25, Y+5	; 0x05
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	61 f0       	breq	.+24     	; 0x2812 <DIO_vWriteHighNibble+0x64>
    27fa:	4c c0       	rjmp	.+152    	; 0x2894 <DIO_vWriteHighNibble+0xe6>
    27fc:	2c 81       	ldd	r18, Y+4	; 0x04
    27fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2800:	22 30       	cpi	r18, 0x02	; 2
    2802:	31 05       	cpc	r19, r1
    2804:	31 f1       	breq	.+76     	; 0x2852 <DIO_vWriteHighNibble+0xa4>
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	9d 81       	ldd	r25, Y+5	; 0x05
    280a:	83 30       	cpi	r24, 0x03	; 3
    280c:	91 05       	cpc	r25, r1
    280e:	89 f1       	breq	.+98     	; 0x2872 <DIO_vWriteHighNibble+0xc4>
    2810:	41 c0       	rjmp	.+130    	; 0x2894 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    2812:	ab e3       	ldi	r26, 0x3B	; 59
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	eb e3       	ldi	r30, 0x3B	; 59
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	8f 70       	andi	r24, 0x0F	; 15
    281e:	8c 93       	st	X, r24
      PORTA_REG|= value;
    2820:	ab e3       	ldi	r26, 0x3B	; 59
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	eb e3       	ldi	r30, 0x3B	; 59
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	90 81       	ld	r25, Z
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	89 2b       	or	r24, r25
    282e:	8c 93       	st	X, r24
    2830:	31 c0       	rjmp	.+98     	; 0x2894 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    2832:	a8 e3       	ldi	r26, 0x38	; 56
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e8 e3       	ldi	r30, 0x38	; 56
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8f 70       	andi	r24, 0x0F	; 15
    283e:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2840:	a8 e3       	ldi	r26, 0x38	; 56
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e8 e3       	ldi	r30, 0x38	; 56
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	90 81       	ld	r25, Z
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	89 2b       	or	r24, r25
    284e:	8c 93       	st	X, r24
    2850:	21 c0       	rjmp	.+66     	; 0x2894 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    2852:	a5 e3       	ldi	r26, 0x35	; 53
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e5 e3       	ldi	r30, 0x35	; 53
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8f 70       	andi	r24, 0x0F	; 15
    285e:	8c 93       	st	X, r24
      PORTC_REG |= value;
    2860:	a5 e3       	ldi	r26, 0x35	; 53
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e5 e3       	ldi	r30, 0x35	; 53
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	90 81       	ld	r25, Z
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	89 2b       	or	r24, r25
    286e:	8c 93       	st	X, r24
    2870:	11 c0       	rjmp	.+34     	; 0x2894 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    2872:	a2 e3       	ldi	r26, 0x32	; 50
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e2 e3       	ldi	r30, 0x32	; 50
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	8f 70       	andi	r24, 0x0F	; 15
    287e:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2880:	a2 e3       	ldi	r26, 0x32	; 50
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e2 e3       	ldi	r30, 0x32	; 50
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	90 81       	ld	r25, Z
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	89 2b       	or	r24, r25
    288e:	8c 93       	st	X, r24
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2892:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <DIO_vSetLowNibbleDir+0x6>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <DIO_vSetLowNibbleDir+0x8>
    28ae:	0f 92       	push	r0
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	8a 83       	std	Y+2, r24	; 0x02
    28b6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	08 f0       	brcs	.+2      	; 0x28c4 <DIO_vSetLowNibbleDir+0x1e>
    28c2:	62 c0       	rjmp	.+196    	; 0x2988 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	8f 70       	andi	r24, 0x0F	; 15
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	3d 83       	std	Y+5, r19	; 0x05
    28d2:	2c 83       	std	Y+4, r18	; 0x04
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	91 05       	cpc	r25, r1
    28dc:	29 f1       	breq	.+74     	; 0x2928 <DIO_vSetLowNibbleDir+0x82>
    28de:	2c 81       	ldd	r18, Y+4	; 0x04
    28e0:	3d 81       	ldd	r19, Y+5	; 0x05
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <DIO_vSetLowNibbleDir+0x4c>
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	61 f0       	breq	.+24     	; 0x2908 <DIO_vSetLowNibbleDir+0x62>
    28f0:	4c c0       	rjmp	.+152    	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
    28f2:	2c 81       	ldd	r18, Y+4	; 0x04
    28f4:	3d 81       	ldd	r19, Y+5	; 0x05
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	31 f1       	breq	.+76     	; 0x2948 <DIO_vSetLowNibbleDir+0xa2>
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	91 05       	cpc	r25, r1
    2904:	89 f1       	breq	.+98     	; 0x2968 <DIO_vSetLowNibbleDir+0xc2>
    2906:	41 c0       	rjmp	.+130    	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2908:	aa e3       	ldi	r26, 0x3A	; 58
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ea e3       	ldi	r30, 0x3A	; 58
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 7f       	andi	r24, 0xF0	; 240
    2914:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2916:	aa e3       	ldi	r26, 0x3A	; 58
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	ea e3       	ldi	r30, 0x3A	; 58
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	90 81       	ld	r25, Z
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	89 2b       	or	r24, r25
    2924:	8c 93       	st	X, r24
    2926:	31 c0       	rjmp	.+98     	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2928:	a7 e3       	ldi	r26, 0x37	; 55
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e7 e3       	ldi	r30, 0x37	; 55
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	80 7f       	andi	r24, 0xF0	; 240
    2934:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2936:	a7 e3       	ldi	r26, 0x37	; 55
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e7 e3       	ldi	r30, 0x37	; 55
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	90 81       	ld	r25, Z
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	89 2b       	or	r24, r25
    2944:	8c 93       	st	X, r24
    2946:	21 c0       	rjmp	.+66     	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2948:	a4 e3       	ldi	r26, 0x34	; 52
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e4 e3       	ldi	r30, 0x34	; 52
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	80 7f       	andi	r24, 0xF0	; 240
    2954:	8c 93       	st	X, r24
      DDRC_REG |= value;
    2956:	a4 e3       	ldi	r26, 0x34	; 52
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e4 e3       	ldi	r30, 0x34	; 52
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	90 81       	ld	r25, Z
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	89 2b       	or	r24, r25
    2964:	8c 93       	st	X, r24
    2966:	11 c0       	rjmp	.+34     	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    2968:	a1 e3       	ldi	r26, 0x31	; 49
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e1 e3       	ldi	r30, 0x31	; 49
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	80 7f       	andi	r24, 0xF0	; 240
    2974:	8c 93       	st	X, r24
      DDRD_REG|= value;
    2976:	a1 e3       	ldi	r26, 0x31	; 49
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e1 e3       	ldi	r30, 0x31	; 49
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	90 81       	ld	r25, Z
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	89 2b       	or	r24, r25
    2984:	8c 93       	st	X, r24
    2986:	01 c0       	rjmp	.+2      	; 0x298a <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2988:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <DIO_vSetHighNibbleDir+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <DIO_vSetHighNibbleDir+0x8>
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	84 30       	cpi	r24, 0x04	; 4
    29b6:	08 f0       	brcs	.+2      	; 0x29ba <DIO_vSetHighNibbleDir+0x1e>
    29b8:	63 c0       	rjmp	.+198    	; 0x2a80 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	82 95       	swap	r24
    29be:	80 7f       	andi	r24, 0xF0	; 240
    29c0:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	3d 83       	std	Y+5, r19	; 0x05
    29ca:	2c 83       	std	Y+4, r18	; 0x04
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	91 05       	cpc	r25, r1
    29d4:	29 f1       	breq	.+74     	; 0x2a20 <DIO_vSetHighNibbleDir+0x84>
    29d6:	2c 81       	ldd	r18, Y+4	; 0x04
    29d8:	3d 81       	ldd	r19, Y+5	; 0x05
    29da:	22 30       	cpi	r18, 0x02	; 2
    29dc:	31 05       	cpc	r19, r1
    29de:	2c f4       	brge	.+10     	; 0x29ea <DIO_vSetHighNibbleDir+0x4e>
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	9d 81       	ldd	r25, Y+5	; 0x05
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	61 f0       	breq	.+24     	; 0x2a00 <DIO_vSetHighNibbleDir+0x64>
    29e8:	4c c0       	rjmp	.+152    	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
    29ea:	2c 81       	ldd	r18, Y+4	; 0x04
    29ec:	3d 81       	ldd	r19, Y+5	; 0x05
    29ee:	22 30       	cpi	r18, 0x02	; 2
    29f0:	31 05       	cpc	r19, r1
    29f2:	31 f1       	breq	.+76     	; 0x2a40 <DIO_vSetHighNibbleDir+0xa4>
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
    29f6:	9d 81       	ldd	r25, Y+5	; 0x05
    29f8:	83 30       	cpi	r24, 0x03	; 3
    29fa:	91 05       	cpc	r25, r1
    29fc:	89 f1       	breq	.+98     	; 0x2a60 <DIO_vSetHighNibbleDir+0xc4>
    29fe:	41 c0       	rjmp	.+130    	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    2a00:	aa e3       	ldi	r26, 0x3A	; 58
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	ea e3       	ldi	r30, 0x3A	; 58
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	8f 70       	andi	r24, 0x0F	; 15
    2a0c:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2a0e:	aa e3       	ldi	r26, 0x3A	; 58
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ea e3       	ldi	r30, 0x3A	; 58
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	90 81       	ld	r25, Z
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	89 2b       	or	r24, r25
    2a1c:	8c 93       	st	X, r24
    2a1e:	31 c0       	rjmp	.+98     	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    2a20:	a7 e3       	ldi	r26, 0x37	; 55
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e7 e3       	ldi	r30, 0x37	; 55
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 70       	andi	r24, 0x0F	; 15
    2a2c:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2a2e:	a7 e3       	ldi	r26, 0x37	; 55
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e7 e3       	ldi	r30, 0x37	; 55
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	90 81       	ld	r25, Z
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	89 2b       	or	r24, r25
    2a3c:	8c 93       	st	X, r24
    2a3e:	21 c0       	rjmp	.+66     	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    2a40:	a4 e3       	ldi	r26, 0x34	; 52
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e4 e3       	ldi	r30, 0x34	; 52
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 70       	andi	r24, 0x0F	; 15
    2a4c:	8c 93       	st	X, r24
      DDRC_REG |= value;
    2a4e:	a4 e3       	ldi	r26, 0x34	; 52
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e4 e3       	ldi	r30, 0x34	; 52
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	90 81       	ld	r25, Z
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	89 2b       	or	r24, r25
    2a5c:	8c 93       	st	X, r24
    2a5e:	11 c0       	rjmp	.+34     	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    2a60:	a1 e3       	ldi	r26, 0x31	; 49
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e1 e3       	ldi	r30, 0x31	; 49
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8f 70       	andi	r24, 0x0F	; 15
    2a6c:	8c 93       	st	X, r24
      DDRD_REG |= value;
    2a6e:	a1 e3       	ldi	r26, 0x31	; 49
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e1 e3       	ldi	r30, 0x31	; 49
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	90 81       	ld	r25, Z
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	89 2b       	or	r24, r25
    2a7c:	8c 93       	st	X, r24
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2a80:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    2a9c:	a7 e2       	ldi	r26, 0x27	; 39
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e7 e2       	ldi	r30, 0x27	; 39
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	80 64       	ori	r24, 0x40	; 64
    2aa8:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    2aaa:	a7 e2       	ldi	r26, 0x27	; 39
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e7 e2       	ldi	r30, 0x27	; 39
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8f 77       	andi	r24, 0x7F	; 127
    2ab6:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    2ab8:	a7 e2       	ldi	r26, 0x27	; 39
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e7 e2       	ldi	r30, 0x27	; 39
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8f 7d       	andi	r24, 0xDF	; 223
    2ac4:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    2ac6:	a6 e2       	ldi	r26, 0x26	; 38
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e6 e2       	ldi	r30, 0x26	; 38
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 7f       	andi	r24, 0xF8	; 248
    2ad2:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    2ad4:	a6 e2       	ldi	r26, 0x26	; 38
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e6 e2       	ldi	r30, 0x26	; 38
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	87 60       	ori	r24, 0x07	; 7
    2ae0:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2ae2:	a6 e2       	ldi	r26, 0x26	; 38
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e6 e2       	ldi	r30, 0x26	; 38
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 7d       	andi	r24, 0xDF	; 223
    2aee:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    2af0:	a6 e2       	ldi	r26, 0x26	; 38
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e6 e2       	ldi	r30, 0x26	; 38
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	80 68       	ori	r24, 0x80	; 128
    2afc:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2afe:	a6 e2       	ldi	r26, 0x26	; 38
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e6 e2       	ldi	r30, 0x26	; 38
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	87 7f       	andi	r24, 0xF7	; 247
    2b0a:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    2b1a:	a6 e2       	ldi	r26, 0x26	; 38
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e6 e2       	ldi	r30, 0x26	; 38
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 68       	ori	r24, 0x80	; 128
    2b26:	8c 93       	st	X, r24
}
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    2b36:	a6 e2       	ldi	r26, 0x26	; 38
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e6 e2       	ldi	r30, 0x26	; 38
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	8f 77       	andi	r24, 0x7F	; 127
    2b42:	8c 93       	st	X, r24
}
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    2b52:	a6 e2       	ldi	r26, 0x26	; 38
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e6 e2       	ldi	r30, 0x26	; 38
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 60       	ori	r24, 0x08	; 8
    2b5e:	8c 93       	st	X, r24
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    2b6e:	a6 e2       	ldi	r26, 0x26	; 38
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e6 e2       	ldi	r30, 0x26	; 38
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	87 7f       	andi	r24, 0xF7	; 247
    2b7a:	8c 93       	st	X, r24
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <ADC_u8VoltageReference+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	88 23       	and	r24, r24
    2b96:	31 f0       	breq	.+12     	; 0x2ba4 <ADC_u8VoltageReference+0x22>
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	19 f0       	breq	.+6      	; 0x2ba4 <ADC_u8VoltageReference+0x22>
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	83 30       	cpi	r24, 0x03	; 3
    2ba2:	e1 f4       	brne	.+56     	; 0x2bdc <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    2ba4:	a7 e2       	ldi	r26, 0x27	; 39
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e7 e2       	ldi	r30, 0x27	; 39
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	8f 73       	andi	r24, 0x3F	; 63
    2bb0:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    2bb2:	a7 e2       	ldi	r26, 0x27	; 39
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e7 e2       	ldi	r30, 0x27	; 39
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	88 2f       	mov	r24, r24
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	00 24       	eor	r0, r0
    2bc6:	96 95       	lsr	r25
    2bc8:	87 95       	ror	r24
    2bca:	07 94       	ror	r0
    2bcc:	96 95       	lsr	r25
    2bce:	87 95       	ror	r24
    2bd0:	07 94       	ror	r0
    2bd2:	98 2f       	mov	r25, r24
    2bd4:	80 2d       	mov	r24, r0
    2bd6:	82 2b       	or	r24, r18
    2bd8:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2bda:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <ADC_u8SetPrescaler+0x6>
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	88 30       	cpi	r24, 0x08	; 8
    2bfc:	80 f4       	brcc	.+32     	; 0x2c1e <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    2bfe:	a6 e2       	ldi	r26, 0x26	; 38
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e6 e2       	ldi	r30, 0x26	; 38
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	88 7f       	andi	r24, 0xF8	; 248
    2c0a:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    2c0c:	a6 e2       	ldi	r26, 0x26	; 38
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e6 e2       	ldi	r30, 0x26	; 38
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	90 81       	ld	r25, Z
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	89 2b       	or	r24, r25
    2c1a:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    2c1c:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <ADC_u8SetAdjustment+0x6>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    2c36:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	88 23       	and	r24, r24
    2c3c:	41 f4       	brne	.+16     	; 0x2c4e <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    2c3e:	a7 e2       	ldi	r26, 0x27	; 39
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e7 e2       	ldi	r30, 0x27	; 39
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7d       	andi	r24, 0xDF	; 223
    2c4a:	8c 93       	st	X, r24
    2c4c:	0d c0       	rjmp	.+26     	; 0x2c68 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	41 f4       	brne	.+16     	; 0x2c64 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 62       	ori	r24, 0x20	; 32
    2c60:	8c 93       	st	X, r24
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <ADC_u8SetTriggerSource+0x6>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2c80:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 30       	cpi	r24, 0x08	; 8
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    2c88:	a6 e2       	ldi	r26, 0x26	; 38
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e6 e2       	ldi	r30, 0x26	; 38
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	8f 7d       	andi	r24, 0xDF	; 223
    2c94:	8c 93       	st	X, r24
    2c96:	1a c0       	rjmp	.+52     	; 0x2ccc <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	88 30       	cpi	r24, 0x08	; 8
    2c9c:	a8 f4       	brcc	.+42     	; 0x2cc8 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    2c9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e6 e2       	ldi	r30, 0x26	; 38
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	80 62       	ori	r24, 0x20	; 32
    2caa:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    2cac:	a0 e5       	ldi	r26, 0x50	; 80
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e0 e5       	ldi	r30, 0x50	; 80
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8f 71       	andi	r24, 0x1F	; 31
    2cb8:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    2cba:	a0 e5       	ldi	r26, 0x50	; 80
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e0 e5       	ldi	r30, 0x50	; 80
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	8c 93       	st	X, r24
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	28 97       	sbiw	r28, 0x08	; 8
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	8e 83       	std	Y+6, r24	; 0x06
    2cee:	78 87       	std	Y+8, r23	; 0x08
    2cf0:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    2cf2:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    2cf4:	19 82       	std	Y+1, r1	; 0x01
    2cf6:	1a 82       	std	Y+2, r1	; 0x02
    2cf8:	1b 82       	std	Y+3, r1	; 0x03
    2cfa:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    2cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfe:	98 85       	ldd	r25, Y+8	; 0x08
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <ADC_u8GetResultSync+0x2e>
    2d04:	78 c0       	rjmp	.+240    	; 0x2df6 <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    2d06:	80 91 8e 03 	lds	r24, 0x038E
    2d0a:	88 23       	and	r24, r24
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <ADC_u8GetResultSync+0x38>
    2d0e:	70 c0       	rjmp	.+224    	; 0x2df0 <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 8e 03 	sts	0x038E, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2d16:	8e 81       	ldd	r24, Y+6	; 0x06
    2d18:	80 32       	cpi	r24, 0x20	; 32
    2d1a:	78 f4       	brcc	.+30     	; 0x2d3a <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    2d1c:	a7 e2       	ldi	r26, 0x27	; 39
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e7 e2       	ldi	r30, 0x27	; 39
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	80 7e       	andi	r24, 0xE0	; 224
    2d28:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2d2a:	a7 e2       	ldi	r26, 0x27	; 39
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e7 e2       	ldi	r30, 0x27	; 39
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	90 81       	ld	r25, Z
    2d34:	8e 81       	ldd	r24, Y+6	; 0x06
    2d36:	89 2b       	or	r24, r25
    2d38:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2d3a:	a6 e2       	ldi	r26, 0x26	; 38
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e6 e2       	ldi	r30, 0x26	; 38
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	80 64       	ori	r24, 0x40	; 64
    2d46:	8c 93       	st	X, r24
    2d48:	0b c0       	rjmp	.+22     	; 0x2d60 <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	ab 81       	ldd	r26, Y+3	; 0x03
    2d50:	bc 81       	ldd	r27, Y+4	; 0x04
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	a1 1d       	adc	r26, r1
    2d56:	b1 1d       	adc	r27, r1
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	ab 83       	std	Y+3, r26	; 0x03
    2d5e:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    2d60:	e6 e2       	ldi	r30, 0x26	; 38
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	80 71       	andi	r24, 0x10	; 16
    2d6c:	90 70       	andi	r25, 0x00	; 0
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	95 95       	asr	r25
    2d74:	87 95       	ror	r24
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	95 95       	asr	r25
    2d7c:	87 95       	ror	r24
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	61 f4       	brne	.+24     	; 0x2d9a <ADC_u8GetResultSync+0xc2>
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	ab 81       	ldd	r26, Y+3	; 0x03
    2d88:	bc 81       	ldd	r27, Y+4	; 0x04
    2d8a:	80 35       	cpi	r24, 0x50	; 80
    2d8c:	23 ec       	ldi	r18, 0xC3	; 195
    2d8e:	92 07       	cpc	r25, r18
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	a2 07       	cpc	r26, r18
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	b2 07       	cpc	r27, r18
    2d98:	c0 f2       	brcs	.-80     	; 0x2d4a <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2da0:	bc 81       	ldd	r27, Y+4	; 0x04
    2da2:	80 35       	cpi	r24, 0x50	; 80
    2da4:	23 ec       	ldi	r18, 0xC3	; 195
    2da6:	92 07       	cpc	r25, r18
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	a2 07       	cpc	r26, r18
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	b2 07       	cpc	r27, r18
    2db0:	19 f4       	brne	.+6      	; 0x2db8 <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	19 c0       	rjmp	.+50     	; 0x2dea <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    2db8:	a6 e2       	ldi	r26, 0x26	; 38
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e6 e2       	ldi	r30, 0x26	; 38
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 61       	ori	r24, 0x10	; 16
    2dc4:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    2dc6:	e4 e2       	ldi	r30, 0x24	; 36
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	e5 e2       	ldi	r30, 0x25	; 37
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	98 2f       	mov	r25, r24
    2ddc:	88 27       	eor	r24, r24
    2dde:	82 2b       	or	r24, r18
    2de0:	93 2b       	or	r25, r19
    2de2:	ef 81       	ldd	r30, Y+7	; 0x07
    2de4:	f8 85       	ldd	r31, Y+8	; 0x08
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    2dea:	10 92 8e 03 	sts	0x038E, r1
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2df0:	83 e0       	ldi	r24, 0x03	; 3
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2dfc:	28 96       	adiw	r28, 0x08	; 8
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <ADC_u8StartConversionAsynch+0x6>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <ADC_u8StartConversionAsynch+0x8>
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <ADC_u8StartConversionAsynch+0xa>
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
    2e1e:	7c 83       	std	Y+4, r23	; 0x04
    2e20:	6b 83       	std	Y+3, r22	; 0x03
    2e22:	5e 83       	std	Y+6, r21	; 0x06
    2e24:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    2e26:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	e9 f1       	breq	.+122    	; 0x2eaa <ADC_u8StartConversionAsynch+0x9c>
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	c9 f1       	breq	.+114    	; 0x2eaa <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    2e38:	80 91 8e 03 	lds	r24, 0x038E
    2e3c:	88 23       	and	r24, r24
    2e3e:	91 f5       	brne	.+100    	; 0x2ea4 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	80 93 8e 03 	sts	0x038E, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    2e46:	10 92 8f 03 	sts	0x038F, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	90 93 8b 03 	sts	0x038B, r25
    2e52:	80 93 8a 03 	sts	0x038A, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	90 93 8d 03 	sts	0x038D, r25
    2e5e:	80 93 8c 03 	sts	0x038C, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	80 32       	cpi	r24, 0x20	; 32
    2e66:	78 f4       	brcc	.+30     	; 0x2e86 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    2e68:	a7 e2       	ldi	r26, 0x27	; 39
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e7 e2       	ldi	r30, 0x27	; 39
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	80 7e       	andi	r24, 0xE0	; 224
    2e74:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    2e76:	a7 e2       	ldi	r26, 0x27	; 39
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e7 e2       	ldi	r30, 0x27	; 39
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	90 81       	ld	r25, Z
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	89 2b       	or	r24, r25
    2e84:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2e86:	a6 e2       	ldi	r26, 0x26	; 38
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e6 e2       	ldi	r30, 0x26	; 38
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 64       	ori	r24, 0x40	; 64
    2e92:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2e94:	a6 e2       	ldi	r26, 0x26	; 38
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e6 e2       	ldi	r30, 0x26	; 38
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 60       	ori	r24, 0x08	; 8
    2ea0:	8c 93       	st	X, r24
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2ea4:	83 e0       	ldi	r24, 0x03	; 3
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb0:	26 96       	adiw	r28, 0x06	; 6
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <ADC_u8StartChainAsynch+0x6>
    2ec8:	0f 92       	push	r0
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	9b 83       	std	Y+3, r25	; 0x03
    2ed0:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2ed2:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	09 f4       	brne	.+2      	; 0x2ede <ADC_u8StartChainAsynch+0x1c>
    2edc:	79 c0       	rjmp	.+242    	; 0x2fd0 <ADC_u8StartChainAsynch+0x10e>
    2ede:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <ADC_u8StartChainAsynch+0x2a>
    2eea:	72 c0       	rjmp	.+228    	; 0x2fd0 <ADC_u8StartChainAsynch+0x10e>
    2eec:	ea 81       	ldd	r30, Y+2	; 0x02
    2eee:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef0:	85 81       	ldd	r24, Z+5	; 0x05
    2ef2:	96 81       	ldd	r25, Z+6	; 0x06
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <ADC_u8StartChainAsynch+0x38>
    2ef8:	6b c0       	rjmp	.+214    	; 0x2fd0 <ADC_u8StartChainAsynch+0x10e>
    2efa:	ea 81       	ldd	r30, Y+2	; 0x02
    2efc:	fb 81       	ldd	r31, Y+3	; 0x03
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <ADC_u8StartChainAsynch+0x46>
    2f06:	64 c0       	rjmp	.+200    	; 0x2fd0 <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    2f08:	80 91 8e 03 	lds	r24, 0x038E
    2f0c:	88 23       	and	r24, r24
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <ADC_u8StartChainAsynch+0x50>
    2f10:	5c c0       	rjmp	.+184    	; 0x2fca <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	80 93 8e 03 	sts	0x038E, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	80 93 8f 03 	sts	0x038F, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    2f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f20:	fb 81       	ldd	r31, Y+3	; 0x03
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	90 93 8b 03 	sts	0x038B, r25
    2f2a:	80 93 8a 03 	sts	0x038A, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    2f2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f30:	fb 81       	ldd	r31, Y+3	; 0x03
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	90 93 91 03 	sts	0x0391, r25
    2f3a:	80 93 90 03 	sts	0x0390, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    2f3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f40:	fb 81       	ldd	r31, Y+3	; 0x03
    2f42:	84 81       	ldd	r24, Z+4	; 0x04
    2f44:	80 93 92 03 	sts	0x0392, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    2f48:	ea 81       	ldd	r30, Y+2	; 0x02
    2f4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f4c:	85 81       	ldd	r24, Z+5	; 0x05
    2f4e:	96 81       	ldd	r25, Z+6	; 0x06
    2f50:	90 93 8d 03 	sts	0x038D, r25
    2f54:	80 93 8c 03 	sts	0x038C, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    2f58:	10 92 93 03 	sts	0x0393, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    2f5c:	20 91 90 03 	lds	r18, 0x0390
    2f60:	30 91 91 03 	lds	r19, 0x0391
    2f64:	80 91 93 03 	lds	r24, 0x0393
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	f9 01       	movw	r30, r18
    2f6e:	e8 0f       	add	r30, r24
    2f70:	f9 1f       	adc	r31, r25
    2f72:	80 81       	ld	r24, Z
    2f74:	80 32       	cpi	r24, 0x20	; 32
    2f76:	d0 f4       	brcc	.+52     	; 0x2fac <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    2f78:	a7 e2       	ldi	r26, 0x27	; 39
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e7 e2       	ldi	r30, 0x27	; 39
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	80 7e       	andi	r24, 0xE0	; 224
    2f84:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    2f86:	a7 e2       	ldi	r26, 0x27	; 39
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e7 e2       	ldi	r30, 0x27	; 39
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	40 81       	ld	r20, Z
    2f90:	20 91 90 03 	lds	r18, 0x0390
    2f94:	30 91 91 03 	lds	r19, 0x0391
    2f98:	80 91 93 03 	lds	r24, 0x0393
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	e8 0f       	add	r30, r24
    2fa4:	f9 1f       	adc	r31, r25
    2fa6:	80 81       	ld	r24, Z
    2fa8:	84 2b       	or	r24, r20
    2faa:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    2fac:	a6 e2       	ldi	r26, 0x26	; 38
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e6 e2       	ldi	r30, 0x26	; 38
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	80 64       	ori	r24, 0x40	; 64
    2fb8:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    2fba:	a6 e2       	ldi	r26, 0x26	; 38
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e6 e2       	ldi	r30, 0x26	; 38
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 60       	ori	r24, 0x08	; 8
    2fc6:	8c 93       	st	X, r24
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	2f 93       	push	r18
    2fee:	3f 93       	push	r19
    2ff0:	4f 93       	push	r20
    2ff2:	5f 93       	push	r21
    2ff4:	6f 93       	push	r22
    2ff6:	7f 93       	push	r23
    2ff8:	8f 93       	push	r24
    2ffa:	9f 93       	push	r25
    2ffc:	af 93       	push	r26
    2ffe:	bf 93       	push	r27
    3000:	ef 93       	push	r30
    3002:	ff 93       	push	r31
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    300c:	80 91 8f 03 	lds	r24, 0x038F
    3010:	88 23       	and	r24, r24
    3012:	19 f5       	brne	.+70     	; 0x305a <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    3014:	a0 91 8a 03 	lds	r26, 0x038A
    3018:	b0 91 8b 03 	lds	r27, 0x038B
    301c:	e4 e2       	ldi	r30, 0x24	; 36
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	e5 e2       	ldi	r30, 0x25	; 37
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	98 2f       	mov	r25, r24
    3032:	88 27       	eor	r24, r24
    3034:	82 2b       	or	r24, r18
    3036:	93 2b       	or	r25, r19
    3038:	8d 93       	st	X+, r24
    303a:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    303c:	10 92 8e 03 	sts	0x038E, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    3040:	e0 91 8c 03 	lds	r30, 0x038C
    3044:	f0 91 8d 03 	lds	r31, 0x038D
    3048:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    304a:	a6 e2       	ldi	r26, 0x26	; 38
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e6 e2       	ldi	r30, 0x26	; 38
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	87 7f       	andi	r24, 0xF7	; 247
    3056:	8c 93       	st	X, r24
    3058:	6c c0       	rjmp	.+216    	; 0x3132 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    305a:	80 91 8f 03 	lds	r24, 0x038F
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	09 f0       	breq	.+2      	; 0x3064 <__vector_16+0x82>
    3062:	67 c0       	rjmp	.+206    	; 0x3132 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    3064:	20 91 8a 03 	lds	r18, 0x038A
    3068:	30 91 8b 03 	lds	r19, 0x038B
    306c:	80 91 93 03 	lds	r24, 0x0393
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	d9 01       	movw	r26, r18
    307a:	a8 0f       	add	r26, r24
    307c:	b9 1f       	adc	r27, r25
    307e:	e4 e2       	ldi	r30, 0x24	; 36
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	e5 e2       	ldi	r30, 0x25	; 37
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	98 2f       	mov	r25, r24
    3094:	88 27       	eor	r24, r24
    3096:	82 2b       	or	r24, r18
    3098:	93 2b       	or	r25, r19
    309a:	11 96       	adiw	r26, 0x01	; 1
    309c:	9c 93       	st	X, r25
    309e:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    30a0:	80 91 93 03 	lds	r24, 0x0393
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	80 93 93 03 	sts	0x0393, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    30aa:	90 91 93 03 	lds	r25, 0x0393
    30ae:	80 91 92 03 	lds	r24, 0x0392
    30b2:	98 17       	cp	r25, r24
    30b4:	79 f4       	brne	.+30     	; 0x30d4 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    30b6:	10 92 8e 03 	sts	0x038E, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    30ba:	e0 91 8c 03 	lds	r30, 0x038C
    30be:	f0 91 8d 03 	lds	r31, 0x038D
    30c2:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    30c4:	a6 e2       	ldi	r26, 0x26	; 38
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e6 e2       	ldi	r30, 0x26	; 38
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	87 7f       	andi	r24, 0xF7	; 247
    30d0:	8c 93       	st	X, r24
    30d2:	2f c0       	rjmp	.+94     	; 0x3132 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    30d4:	20 91 90 03 	lds	r18, 0x0390
    30d8:	30 91 91 03 	lds	r19, 0x0391
    30dc:	80 91 93 03 	lds	r24, 0x0393
    30e0:	88 2f       	mov	r24, r24
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	f9 01       	movw	r30, r18
    30e6:	e8 0f       	add	r30, r24
    30e8:	f9 1f       	adc	r31, r25
    30ea:	80 81       	ld	r24, Z
    30ec:	80 32       	cpi	r24, 0x20	; 32
    30ee:	d0 f4       	brcc	.+52     	; 0x3124 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    30f0:	a7 e2       	ldi	r26, 0x27	; 39
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e7 e2       	ldi	r30, 0x27	; 39
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	80 7e       	andi	r24, 0xE0	; 224
    30fc:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    30fe:	a7 e2       	ldi	r26, 0x27	; 39
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e7 e2       	ldi	r30, 0x27	; 39
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	40 81       	ld	r20, Z
    3108:	20 91 90 03 	lds	r18, 0x0390
    310c:	30 91 91 03 	lds	r19, 0x0391
    3110:	80 91 93 03 	lds	r24, 0x0393
    3114:	88 2f       	mov	r24, r24
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	f9 01       	movw	r30, r18
    311a:	e8 0f       	add	r30, r24
    311c:	f9 1f       	adc	r31, r25
    311e:	80 81       	ld	r24, Z
    3120:	84 2b       	or	r24, r20
    3122:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3124:	a6 e2       	ldi	r26, 0x26	; 38
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e6 e2       	ldi	r30, 0x26	; 38
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	80 64       	ori	r24, 0x40	; 64
    3130:	8c 93       	st	X, r24
    }
  }
}
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	ff 91       	pop	r31
    3138:	ef 91       	pop	r30
    313a:	bf 91       	pop	r27
    313c:	af 91       	pop	r26
    313e:	9f 91       	pop	r25
    3140:	8f 91       	pop	r24
    3142:	7f 91       	pop	r23
    3144:	6f 91       	pop	r22
    3146:	5f 91       	pop	r21
    3148:	4f 91       	pop	r20
    314a:	3f 91       	pop	r19
    314c:	2f 91       	pop	r18
    314e:	0f 90       	pop	r0
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	0f 90       	pop	r0
    3154:	1f 90       	pop	r1
    3156:	18 95       	reti

00003158 <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    3158:	ef 92       	push	r14
    315a:	ff 92       	push	r15
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	2b 97       	sbiw	r28, 0x0b	; 11
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	99 87       	std	Y+9, r25	; 0x09
    3176:	88 87       	std	Y+8, r24	; 0x08
    3178:	7b 87       	std	Y+11, r23	; 0x0b
    317a:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    317c:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    317e:	e8 85       	ldd	r30, Y+8	; 0x08
    3180:	f9 85       	ldd	r31, Y+9	; 0x09
    3182:	81 81       	ldd	r24, Z+1	; 0x01
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	88 ee       	ldi	r24, 0xE8	; 232
    318a:	93 e0       	ldi	r25, 0x03	; 3
    318c:	ac 01       	movw	r20, r24
    318e:	24 9f       	mul	r18, r20
    3190:	c0 01       	movw	r24, r0
    3192:	25 9f       	mul	r18, r21
    3194:	90 0d       	add	r25, r0
    3196:	34 9f       	mul	r19, r20
    3198:	90 0d       	add	r25, r0
    319a:	11 24       	eor	r1, r1
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    31a0:	e8 85       	ldd	r30, Y+8	; 0x08
    31a2:	f9 85       	ldd	r31, Y+9	; 0x09
    31a4:	80 81       	ld	r24, Z
    31a6:	9e 01       	movw	r18, r28
    31a8:	2a 5f       	subi	r18, 0xFA	; 250
    31aa:	3f 4f       	sbci	r19, 0xFF	; 255
    31ac:	b9 01       	movw	r22, r18
    31ae:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    31b2:	e8 85       	ldd	r30, Y+8	; 0x08
    31b4:	f9 85       	ldd	r31, Y+9	; 0x09
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	88 23       	and	r24, r24
    31ba:	e1 f4       	brne	.+56     	; 0x31f4 <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    31bc:	8e 81       	ldd	r24, Y+6	; 0x06
    31be:	9f 81       	ldd	r25, Y+7	; 0x07
    31c0:	7c 01       	movw	r14, r24
    31c2:	00 e0       	ldi	r16, 0x00	; 0
    31c4:	10 e0       	ldi	r17, 0x00	; 0
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	9c 01       	movw	r18, r24
    31cc:	40 e0       	ldi	r20, 0x00	; 0
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	c8 01       	movw	r24, r16
    31d2:	b7 01       	movw	r22, r14
    31d4:	0e 94 98 3c 	call	0x7930	; 0x7930 <__mulsi3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	07 2e       	mov	r0, r23
    31de:	7a e0       	ldi	r23, 0x0A	; 10
    31e0:	b6 95       	lsr	r27
    31e2:	a7 95       	ror	r26
    31e4:	97 95       	ror	r25
    31e6:	87 95       	ror	r24
    31e8:	7a 95       	dec	r23
    31ea:	d1 f7       	brne	.-12     	; 0x31e0 <LM35_u8GetTemp+0x88>
    31ec:	70 2d       	mov	r23, r0
    31ee:	9c 83       	std	Y+4, r25	; 0x04
    31f0:	8b 83       	std	Y+3, r24	; 0x03
    31f2:	1b c0       	rjmp	.+54     	; 0x322a <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    31f4:	e8 85       	ldd	r30, Y+8	; 0x08
    31f6:	f9 85       	ldd	r31, Y+9	; 0x09
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	b1 f4       	brne	.+44     	; 0x322a <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    31fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3200:	9f 81       	ldd	r25, Y+7	; 0x07
    3202:	7c 01       	movw	r14, r24
    3204:	00 e0       	ldi	r16, 0x00	; 0
    3206:	10 e0       	ldi	r17, 0x00	; 0
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	9c 01       	movw	r18, r24
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	c8 01       	movw	r24, r16
    3214:	b7 01       	movw	r22, r14
    3216:	0e 94 98 3c 	call	0x7930	; 0x7930 <__mulsi3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	89 2f       	mov	r24, r25
    3220:	9a 2f       	mov	r25, r26
    3222:	ab 2f       	mov	r26, r27
    3224:	bb 27       	eor	r27, r27
    3226:	9c 83       	std	Y+4, r25	; 0x04
    3228:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	2a e0       	ldi	r18, 0x0A	; 10
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	b9 01       	movw	r22, r18
    3234:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__udivmodhi4>
    3238:	cb 01       	movw	r24, r22
    323a:	ea 85       	ldd	r30, Y+10	; 0x0a
    323c:	fb 85       	ldd	r31, Y+11	; 0x0b
    323e:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    3240:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3242:	2b 96       	adiw	r28, 0x0b	; 11
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	cf 91       	pop	r28
    3250:	df 91       	pop	r29
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	08 95       	ret

0000325c <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	29 97       	sbiw	r28, 0x09	; 9
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	9f 83       	std	Y+7, r25	; 0x07
    327a:	8e 83       	std	Y+6, r24	; 0x06
    327c:	79 87       	std	Y+9, r23	; 0x09
    327e:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    3280:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    3282:	ee 81       	ldd	r30, Y+6	; 0x06
    3284:	ff 81       	ldd	r31, Y+7	; 0x07
    3286:	81 81       	ldd	r24, Z+1	; 0x01
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	88 ee       	ldi	r24, 0xE8	; 232
    328e:	93 e0       	ldi	r25, 0x03	; 3
    3290:	ac 01       	movw	r20, r24
    3292:	24 9f       	mul	r18, r20
    3294:	c0 01       	movw	r24, r0
    3296:	25 9f       	mul	r18, r21
    3298:	90 0d       	add	r25, r0
    329a:	34 9f       	mul	r19, r20
    329c:	90 0d       	add	r25, r0
    329e:	11 24       	eor	r1, r1
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    32a4:	ee 81       	ldd	r30, Y+6	; 0x06
    32a6:	ff 81       	ldd	r31, Y+7	; 0x07
    32a8:	80 81       	ld	r24, Z
    32aa:	9e 01       	movw	r18, r28
    32ac:	2c 5f       	subi	r18, 0xFC	; 252
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	b9 01       	movw	r22, r18
    32b2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    32b6:	ee 81       	ldd	r30, Y+6	; 0x06
    32b8:	ff 81       	ldd	r31, Y+7	; 0x07
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	88 23       	and	r24, r24
    32be:	f1 f4       	brne	.+60     	; 0x32fc <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	7c 01       	movw	r14, r24
    32c6:	00 e0       	ldi	r16, 0x00	; 0
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	9c 01       	movw	r18, r24
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	c8 01       	movw	r24, r16
    32d6:	b7 01       	movw	r22, r14
    32d8:	0e 94 98 3c 	call	0x7930	; 0x7930 <__mulsi3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	07 2e       	mov	r0, r23
    32e2:	7a e0       	ldi	r23, 0x0A	; 10
    32e4:	b6 95       	lsr	r27
    32e6:	a7 95       	ror	r26
    32e8:	97 95       	ror	r25
    32ea:	87 95       	ror	r24
    32ec:	7a 95       	dec	r23
    32ee:	d1 f7       	brne	.-12     	; 0x32e4 <LM35_u8GetAnalogSignal+0x88>
    32f0:	70 2d       	mov	r23, r0
    32f2:	e8 85       	ldd	r30, Y+8	; 0x08
    32f4:	f9 85       	ldd	r31, Y+9	; 0x09
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	1d c0       	rjmp	.+58     	; 0x3336 <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    32fc:	ee 81       	ldd	r30, Y+6	; 0x06
    32fe:	ff 81       	ldd	r31, Y+7	; 0x07
    3300:	82 81       	ldd	r24, Z+2	; 0x02
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	c1 f4       	brne	.+48     	; 0x3336 <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    3306:	8c 81       	ldd	r24, Y+4	; 0x04
    3308:	9d 81       	ldd	r25, Y+5	; 0x05
    330a:	7c 01       	movw	r14, r24
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	10 e0       	ldi	r17, 0x00	; 0
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	9c 01       	movw	r18, r24
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	c8 01       	movw	r24, r16
    331c:	b7 01       	movw	r22, r14
    331e:	0e 94 98 3c 	call	0x7930	; 0x7930 <__mulsi3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	89 2f       	mov	r24, r25
    3328:	9a 2f       	mov	r25, r26
    332a:	ab 2f       	mov	r26, r27
    332c:	bb 27       	eor	r27, r27
    332e:	e8 85       	ldd	r30, Y+8	; 0x08
    3330:	f9 85       	ldd	r31, Y+9	; 0x09
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3338:	29 96       	adiw	r28, 0x09	; 9
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	08 95       	ret

00003352 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	41 e0       	ldi	r20, 0x01	; 1
    3360:	0e 94 b5 10 	call	0x216a	; 0x216a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	61 e0       	ldi	r22, 0x01	; 1
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	0e 94 b5 10 	call	0x216a	; 0x216a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	62 e0       	ldi	r22, 0x02	; 2
    3372:	41 e0       	ldi	r20, 0x01	; 1
    3374:	0e 94 b5 10 	call	0x216a	; 0x216a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	63 e0       	ldi	r22, 0x03	; 3
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 b5 10 	call	0x216a	; 0x216a <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	6f e0       	ldi	r22, 0x0F	; 15
    3386:	0e 94 ce 14 	call	0x299c	; 0x299c <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	6f e0       	ldi	r22, 0x0F	; 15
    338e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	62 97       	sbiw	r28, 0x12	; 18
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    33b0:	84 e0       	ldi	r24, 0x04	; 4
    33b2:	8f 87       	std	Y+15, r24	; 0x0f
    33b4:	c9 c0       	rjmp	.+402    	; 0x3548 <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    33b6:	83 e0       	ldi	r24, 0x03	; 3
    33b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    33c0:	18 8a       	std	Y+16, r1	; 0x10
    33c2:	b6 c0       	rjmp	.+364    	; 0x3530 <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    33c4:	9e 01       	movw	r18, r28
    33c6:	2e 5e       	subi	r18, 0xEE	; 238
    33c8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	68 89       	ldd	r22, Y+16	; 0x10
    33ce:	a9 01       	movw	r20, r18
    33d0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    33d4:	8a 89       	ldd	r24, Y+18	; 0x12
    33d6:	88 23       	and	r24, r24
    33d8:	09 f0       	breq	.+2      	; 0x33dc <KPD_u8GetPressed+0x44>
    33da:	a7 c0       	rjmp	.+334    	; 0x352a <KPD_u8GetPressed+0x192>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a8 e4       	ldi	r26, 0x48	; 72
    33e2:	b2 e4       	ldi	r27, 0x42	; 66
    33e4:	8b 87       	std	Y+11, r24	; 0x0b
    33e6:	9c 87       	std	Y+12, r25	; 0x0c
    33e8:	ad 87       	std	Y+13, r26	; 0x0d
    33ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	4a ef       	ldi	r20, 0xFA	; 250
    33fa:	54 e4       	ldi	r21, 0x44	; 68
    33fc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	8f 83       	std	Y+7, r24	; 0x07
    3406:	98 87       	std	Y+8, r25	; 0x08
    3408:	a9 87       	std	Y+9, r26	; 0x09
    340a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e8       	ldi	r20, 0x80	; 128
    341a:	5f e3       	ldi	r21, 0x3F	; 63
    341c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3420:	88 23       	and	r24, r24
    3422:	2c f4       	brge	.+10     	; 0x342e <KPD_u8GetPressed+0x96>
		__ticks = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
    342c:	3f c0       	rjmp	.+126    	; 0x34ac <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	3f ef       	ldi	r19, 0xFF	; 255
    343a:	4f e7       	ldi	r20, 0x7F	; 127
    343c:	57 e4       	ldi	r21, 0x47	; 71
    343e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3442:	18 16       	cp	r1, r24
    3444:	4c f5       	brge	.+82     	; 0x3498 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3446:	6b 85       	ldd	r22, Y+11	; 0x0b
    3448:	7c 85       	ldd	r23, Y+12	; 0x0c
    344a:	8d 85       	ldd	r24, Y+13	; 0x0d
    344c:	9e 85       	ldd	r25, Y+14	; 0x0e
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e2       	ldi	r20, 0x20	; 32
    3454:	51 e4       	ldi	r21, 0x41	; 65
    3456:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	9e 83       	std	Y+6, r25	; 0x06
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	0f c0       	rjmp	.+30     	; 0x348e <KPD_u8GetPressed+0xf6>
    3470:	88 ec       	ldi	r24, 0xC8	; 200
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	9c 83       	std	Y+4, r25	; 0x04
    3476:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	9c 81       	ldd	r25, Y+4	; 0x04
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <KPD_u8GetPressed+0xe4>
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	9e 81       	ldd	r25, Y+6	; 0x06
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	69 f7       	brne	.-38     	; 0x3470 <KPD_u8GetPressed+0xd8>
    3496:	14 c0       	rjmp	.+40     	; 0x34c0 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3498:	6f 81       	ldd	r22, Y+7	; 0x07
    349a:	78 85       	ldd	r23, Y+8	; 0x08
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <KPD_u8GetPressed+0x120>
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    34c0:	9e 01       	movw	r18, r28
    34c2:	2e 5e       	subi	r18, 0xEE	; 238
    34c4:	3f 4f       	sbci	r19, 0xFF	; 255
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	68 89       	ldd	r22, Y+16	; 0x10
    34ca:	a9 01       	movw	r20, r18
    34cc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    34d0:	8a 89       	ldd	r24, Y+18	; 0x12
    34d2:	88 23       	and	r24, r24
    34d4:	a9 f4       	brne	.+42     	; 0x3500 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    34d6:	88 89       	ldd	r24, Y+16	; 0x10
    34d8:	48 2f       	mov	r20, r24
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34de:	88 2f       	mov	r24, r24
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	9c 01       	movw	r18, r24
    34e4:	24 50       	subi	r18, 0x04	; 4
    34e6:	30 40       	sbci	r19, 0x00	; 0
    34e8:	ca 01       	movw	r24, r20
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	82 0f       	add	r24, r18
    34f4:	93 1f       	adc	r25, r19
    34f6:	fc 01       	movw	r30, r24
    34f8:	ed 5f       	subi	r30, 0xFD	; 253
    34fa:	fc 4f       	sbci	r31, 0xFC	; 252
    34fc:	80 81       	ld	r24, Z
    34fe:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3500:	9e 01       	movw	r18, r28
    3502:	2e 5e       	subi	r18, 0xEE	; 238
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	83 e0       	ldi	r24, 0x03	; 3
    3508:	68 89       	ldd	r22, Y+16	; 0x10
    350a:	a9 01       	movw	r20, r18
    350c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <DIO_enumReadPinVal>
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3512:	9e 01       	movw	r18, r28
    3514:	2e 5e       	subi	r18, 0xEE	; 238
    3516:	3f 4f       	sbci	r19, 0xFF	; 255
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	68 89       	ldd	r22, Y+16	; 0x10
    351c:	a9 01       	movw	r20, r18
    351e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    3522:	8a 89       	ldd	r24, Y+18	; 0x12
    3524:	88 23       	and	r24, r24
    3526:	a9 f3       	breq	.-22     	; 0x3512 <KPD_u8GetPressed+0x17a>
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    352a:	88 89       	ldd	r24, Y+16	; 0x10
    352c:	8f 5f       	subi	r24, 0xFF	; 255
    352e:	88 8b       	std	Y+16, r24	; 0x10
    3530:	88 89       	ldd	r24, Y+16	; 0x10
    3532:	84 30       	cpi	r24, 0x04	; 4
    3534:	08 f4       	brcc	.+2      	; 0x3538 <KPD_u8GetPressed+0x1a0>
    3536:	46 cf       	rjmp	.-372    	; 0x33c4 <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    3538:	83 e0       	ldi	r24, 0x03	; 3
    353a:	6f 85       	ldd	r22, Y+15	; 0x0f
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    3542:	8f 85       	ldd	r24, Y+15	; 0x0f
    3544:	8f 5f       	subi	r24, 0xFF	; 255
    3546:	8f 87       	std	Y+15, r24	; 0x0f
    3548:	8f 85       	ldd	r24, Y+15	; 0x0f
    354a:	88 30       	cpi	r24, 0x08	; 8
    354c:	08 f4       	brcc	.+2      	; 0x3550 <KPD_u8GetPressed+0x1b8>
    354e:	33 cf       	rjmp	.-410    	; 0x33b6 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    3550:	89 89       	ldd	r24, Y+17	; 0x11
}
    3552:	62 96       	adiw	r28, 0x12	; 18
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	c6 54       	subi	r28, 0x46	; 70
    3572:	d0 40       	sbci	r29, 0x00	; 0
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	fe 01       	movw	r30, r28
    3580:	ed 5b       	subi	r30, 0xBD	; 189
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a8 e4       	ldi	r26, 0x48	; 72
    358a:	b2 e4       	ldi	r27, 0x42	; 66
    358c:	80 83       	st	Z, r24
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	a2 83       	std	Z+2, r26	; 0x02
    3592:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	8e 01       	movw	r16, r28
    3596:	01 5c       	subi	r16, 0xC1	; 193
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	fe 01       	movw	r30, r28
    359c:	ed 5b       	subi	r30, 0xBD	; 189
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	4a ef       	ldi	r20, 0xFA	; 250
    35ae:	54 e4       	ldi	r21, 0x44	; 68
    35b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	f8 01       	movw	r30, r16
    35ba:	80 83       	st	Z, r24
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	a2 83       	std	Z+2, r26	; 0x02
    35c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35c2:	fe 01       	movw	r30, r28
    35c4:	ff 96       	adiw	r30, 0x3f	; 63
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e8       	ldi	r20, 0x80	; 128
    35d4:	5f e3       	ldi	r21, 0x3F	; 63
    35d6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    35da:	88 23       	and	r24, r24
    35dc:	2c f4       	brge	.+10     	; 0x35e8 <CLCD_vInit+0x84>
		__ticks = 1;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	9e af       	std	Y+62, r25	; 0x3e
    35e4:	8d af       	std	Y+61, r24	; 0x3d
    35e6:	46 c0       	rjmp	.+140    	; 0x3674 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    35e8:	fe 01       	movw	r30, r28
    35ea:	ff 96       	adiw	r30, 0x3f	; 63
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	64 f5       	brge	.+88     	; 0x365c <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	fe 01       	movw	r30, r28
    3606:	ed 5b       	subi	r30, 0xBD	; 189
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e2       	ldi	r20, 0x20	; 32
    3618:	51 e4       	ldi	r21, 0x41	; 65
    361a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9e af       	std	Y+62, r25	; 0x3e
    3630:	8d af       	std	Y+61, r24	; 0x3d
    3632:	0f c0       	rjmp	.+30     	; 0x3652 <CLCD_vInit+0xee>
    3634:	88 ec       	ldi	r24, 0xC8	; 200
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9c af       	std	Y+60, r25	; 0x3c
    363a:	8b af       	std	Y+59, r24	; 0x3b
    363c:	8b ad       	ldd	r24, Y+59	; 0x3b
    363e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <CLCD_vInit+0xdc>
    3644:	9c af       	std	Y+60, r25	; 0x3c
    3646:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3648:	8d ad       	ldd	r24, Y+61	; 0x3d
    364a:	9e ad       	ldd	r25, Y+62	; 0x3e
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	9e af       	std	Y+62, r25	; 0x3e
    3650:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3652:	8d ad       	ldd	r24, Y+61	; 0x3d
    3654:	9e ad       	ldd	r25, Y+62	; 0x3e
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	69 f7       	brne	.-38     	; 0x3634 <CLCD_vInit+0xd0>
    365a:	16 c0       	rjmp	.+44     	; 0x3688 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365c:	fe 01       	movw	r30, r28
    365e:	ff 96       	adiw	r30, 0x3f	; 63
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9e af       	std	Y+62, r25	; 0x3e
    3672:	8d af       	std	Y+61, r24	; 0x3d
    3674:	8d ad       	ldd	r24, Y+61	; 0x3d
    3676:	9e ad       	ldd	r25, Y+62	; 0x3e
    3678:	9a af       	std	Y+58, r25	; 0x3a
    367a:	89 af       	std	Y+57, r24	; 0x39
    367c:	89 ad       	ldd	r24, Y+57	; 0x39
    367e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <CLCD_vInit+0x11c>
    3684:	9a af       	std	Y+58, r25	; 0x3a
    3686:	89 af       	std	Y+57, r24	; 0x39

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	64 e0       	ldi	r22, 0x04	; 4
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	65 e0       	ldi	r22, 0x05	; 5
    3696:	41 e0       	ldi	r20, 0x01	; 1
    3698:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	66 e0       	ldi	r22, 0x06	; 6
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	67 e0       	ldi	r22, 0x07	; 7
    36aa:	41 e0       	ldi	r20, 0x01	; 1
    36ac:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	67 e0       	ldi	r22, 0x07	; 7
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	66 e0       	ldi	r22, 0x06	; 6
    36be:	41 e0       	ldi	r20, 0x01	; 1
    36c0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	65 e0       	ldi	r22, 0x05	; 5
    36c8:	41 e0       	ldi	r20, 0x01	; 1
    36ca:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	a0 e2       	ldi	r26, 0x20	; 32
    36da:	b1 e4       	ldi	r27, 0x41	; 65
    36dc:	8d ab       	std	Y+53, r24	; 0x35
    36de:	9e ab       	std	Y+54, r25	; 0x36
    36e0:	af ab       	std	Y+55, r26	; 0x37
    36e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e4:	6d a9       	ldd	r22, Y+53	; 0x35
    36e6:	7e a9       	ldd	r23, Y+54	; 0x36
    36e8:	8f a9       	ldd	r24, Y+55	; 0x37
    36ea:	98 ad       	ldd	r25, Y+56	; 0x38
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	4a ef       	ldi	r20, 0xFA	; 250
    36f2:	54 e4       	ldi	r21, 0x44	; 68
    36f4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	89 ab       	std	Y+49, r24	; 0x31
    36fe:	9a ab       	std	Y+50, r25	; 0x32
    3700:	ab ab       	std	Y+51, r26	; 0x33
    3702:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3704:	69 a9       	ldd	r22, Y+49	; 0x31
    3706:	7a a9       	ldd	r23, Y+50	; 0x32
    3708:	8b a9       	ldd	r24, Y+51	; 0x33
    370a:	9c a9       	ldd	r25, Y+52	; 0x34
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e8       	ldi	r20, 0x80	; 128
    3712:	5f e3       	ldi	r21, 0x3F	; 63
    3714:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3718:	88 23       	and	r24, r24
    371a:	2c f4       	brge	.+10     	; 0x3726 <CLCD_vInit+0x1c2>
		__ticks = 1;
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	98 ab       	std	Y+48, r25	; 0x30
    3722:	8f a7       	std	Y+47, r24	; 0x2f
    3724:	3f c0       	rjmp	.+126    	; 0x37a4 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    3726:	69 a9       	ldd	r22, Y+49	; 0x31
    3728:	7a a9       	ldd	r23, Y+50	; 0x32
    372a:	8b a9       	ldd	r24, Y+51	; 0x33
    372c:	9c a9       	ldd	r25, Y+52	; 0x34
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	3f ef       	ldi	r19, 0xFF	; 255
    3732:	4f e7       	ldi	r20, 0x7F	; 127
    3734:	57 e4       	ldi	r21, 0x47	; 71
    3736:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    373a:	18 16       	cp	r1, r24
    373c:	4c f5       	brge	.+82     	; 0x3790 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373e:	6d a9       	ldd	r22, Y+53	; 0x35
    3740:	7e a9       	ldd	r23, Y+54	; 0x36
    3742:	8f a9       	ldd	r24, Y+55	; 0x37
    3744:	98 ad       	ldd	r25, Y+56	; 0x38
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e2       	ldi	r20, 0x20	; 32
    374c:	51 e4       	ldi	r21, 0x41	; 65
    374e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	98 ab       	std	Y+48, r25	; 0x30
    3764:	8f a7       	std	Y+47, r24	; 0x2f
    3766:	0f c0       	rjmp	.+30     	; 0x3786 <CLCD_vInit+0x222>
    3768:	88 ec       	ldi	r24, 0xC8	; 200
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9e a7       	std	Y+46, r25	; 0x2e
    376e:	8d a7       	std	Y+45, r24	; 0x2d
    3770:	8d a5       	ldd	r24, Y+45	; 0x2d
    3772:	9e a5       	ldd	r25, Y+46	; 0x2e
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <CLCD_vInit+0x210>
    3778:	9e a7       	std	Y+46, r25	; 0x2e
    377a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377c:	8f a5       	ldd	r24, Y+47	; 0x2f
    377e:	98 a9       	ldd	r25, Y+48	; 0x30
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	98 ab       	std	Y+48, r25	; 0x30
    3784:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3786:	8f a5       	ldd	r24, Y+47	; 0x2f
    3788:	98 a9       	ldd	r25, Y+48	; 0x30
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	69 f7       	brne	.-38     	; 0x3768 <CLCD_vInit+0x204>
    378e:	14 c0       	rjmp	.+40     	; 0x37b8 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3790:	69 a9       	ldd	r22, Y+49	; 0x31
    3792:	7a a9       	ldd	r23, Y+50	; 0x32
    3794:	8b a9       	ldd	r24, Y+51	; 0x33
    3796:	9c a9       	ldd	r25, Y+52	; 0x34
    3798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	98 ab       	std	Y+48, r25	; 0x30
    37a2:	8f a7       	std	Y+47, r24	; 0x2f
    37a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a6:	98 a9       	ldd	r25, Y+48	; 0x30
    37a8:	9c a7       	std	Y+44, r25	; 0x2c
    37aa:	8b a7       	std	Y+43, r24	; 0x2b
    37ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    37ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <CLCD_vInit+0x24c>
    37b4:	9c a7       	std	Y+44, r25	; 0x2c
    37b6:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    37b8:	88 e2       	ldi	r24, 0x28	; 40
    37ba:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a0 e8       	ldi	r26, 0x80	; 128
    37c4:	bf e3       	ldi	r27, 0x3F	; 63
    37c6:	8f a3       	std	Y+39, r24	; 0x27
    37c8:	98 a7       	std	Y+40, r25	; 0x28
    37ca:	a9 a7       	std	Y+41, r26	; 0x29
    37cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ce:	6f a1       	ldd	r22, Y+39	; 0x27
    37d0:	78 a5       	ldd	r23, Y+40	; 0x28
    37d2:	89 a5       	ldd	r24, Y+41	; 0x29
    37d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4a ef       	ldi	r20, 0xFA	; 250
    37dc:	54 e4       	ldi	r21, 0x44	; 68
    37de:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	8b a3       	std	Y+35, r24	; 0x23
    37e8:	9c a3       	std	Y+36, r25	; 0x24
    37ea:	ad a3       	std	Y+37, r26	; 0x25
    37ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ee:	6b a1       	ldd	r22, Y+35	; 0x23
    37f0:	7c a1       	ldd	r23, Y+36	; 0x24
    37f2:	8d a1       	ldd	r24, Y+37	; 0x25
    37f4:	9e a1       	ldd	r25, Y+38	; 0x26
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5f e3       	ldi	r21, 0x3F	; 63
    37fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3802:	88 23       	and	r24, r24
    3804:	2c f4       	brge	.+10     	; 0x3810 <CLCD_vInit+0x2ac>
		__ticks = 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9a a3       	std	Y+34, r25	; 0x22
    380c:	89 a3       	std	Y+33, r24	; 0x21
    380e:	3f c0       	rjmp	.+126    	; 0x388e <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    3810:	6b a1       	ldd	r22, Y+35	; 0x23
    3812:	7c a1       	ldd	r23, Y+36	; 0x24
    3814:	8d a1       	ldd	r24, Y+37	; 0x25
    3816:	9e a1       	ldd	r25, Y+38	; 0x26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	3f ef       	ldi	r19, 0xFF	; 255
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	57 e4       	ldi	r21, 0x47	; 71
    3820:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	4c f5       	brge	.+82     	; 0x387a <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3828:	6f a1       	ldd	r22, Y+39	; 0x27
    382a:	78 a5       	ldd	r23, Y+40	; 0x28
    382c:	89 a5       	ldd	r24, Y+41	; 0x29
    382e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e2       	ldi	r20, 0x20	; 32
    3836:	51 e4       	ldi	r21, 0x41	; 65
    3838:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <CLCD_vInit+0x30c>
    3852:	88 ec       	ldi	r24, 0xC8	; 200
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	98 a3       	std	Y+32, r25	; 0x20
    3858:	8f 8f       	std	Y+31, r24	; 0x1f
    385a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385c:	98 a1       	ldd	r25, Y+32	; 0x20
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <CLCD_vInit+0x2fa>
    3862:	98 a3       	std	Y+32, r25	; 0x20
    3864:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	89 a1       	ldd	r24, Y+33	; 0x21
    3868:	9a a1       	ldd	r25, Y+34	; 0x22
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	9a a3       	std	Y+34, r25	; 0x22
    386e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3870:	89 a1       	ldd	r24, Y+33	; 0x21
    3872:	9a a1       	ldd	r25, Y+34	; 0x22
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	69 f7       	brne	.-38     	; 0x3852 <CLCD_vInit+0x2ee>
    3878:	14 c0       	rjmp	.+40     	; 0x38a2 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387a:	6b a1       	ldd	r22, Y+35	; 0x23
    387c:	7c a1       	ldd	r23, Y+36	; 0x24
    387e:	8d a1       	ldd	r24, Y+37	; 0x25
    3880:	9e a1       	ldd	r25, Y+38	; 0x26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9a a3       	std	Y+34, r25	; 0x22
    388c:	89 a3       	std	Y+33, r24	; 0x21
    388e:	89 a1       	ldd	r24, Y+33	; 0x21
    3890:	9a a1       	ldd	r25, Y+34	; 0x22
    3892:	9e 8f       	std	Y+30, r25	; 0x1e
    3894:	8d 8f       	std	Y+29, r24	; 0x1d
    3896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <CLCD_vInit+0x336>
    389e:	9e 8f       	std	Y+30, r25	; 0x1e
    38a0:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    38a2:	8c e0       	ldi	r24, 0x0C	; 12
    38a4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	a0 e8       	ldi	r26, 0x80	; 128
    38ae:	bf e3       	ldi	r27, 0x3F	; 63
    38b0:	89 8f       	std	Y+25, r24	; 0x19
    38b2:	9a 8f       	std	Y+26, r25	; 0x1a
    38b4:	ab 8f       	std	Y+27, r26	; 0x1b
    38b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b8:	69 8d       	ldd	r22, Y+25	; 0x19
    38ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	4a ef       	ldi	r20, 0xFA	; 250
    38c6:	54 e4       	ldi	r21, 0x44	; 68
    38c8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8d 8b       	std	Y+21, r24	; 0x15
    38d2:	9e 8b       	std	Y+22, r25	; 0x16
    38d4:	af 8b       	std	Y+23, r26	; 0x17
    38d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38d8:	6d 89       	ldd	r22, Y+21	; 0x15
    38da:	7e 89       	ldd	r23, Y+22	; 0x16
    38dc:	8f 89       	ldd	r24, Y+23	; 0x17
    38de:	98 8d       	ldd	r25, Y+24	; 0x18
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e8       	ldi	r20, 0x80	; 128
    38e6:	5f e3       	ldi	r21, 0x3F	; 63
    38e8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    38ec:	88 23       	and	r24, r24
    38ee:	2c f4       	brge	.+10     	; 0x38fa <CLCD_vInit+0x396>
		__ticks = 1;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9c 8b       	std	Y+20, r25	; 0x14
    38f6:	8b 8b       	std	Y+19, r24	; 0x13
    38f8:	3f c0       	rjmp	.+126    	; 0x3978 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	4f e7       	ldi	r20, 0x7F	; 127
    3908:	57 e4       	ldi	r21, 0x47	; 71
    390a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    390e:	18 16       	cp	r1, r24
    3910:	4c f5       	brge	.+82     	; 0x3964 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3912:	69 8d       	ldd	r22, Y+25	; 0x19
    3914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e2       	ldi	r20, 0x20	; 32
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9c 8b       	std	Y+20, r25	; 0x14
    3938:	8b 8b       	std	Y+19, r24	; 0x13
    393a:	0f c0       	rjmp	.+30     	; 0x395a <CLCD_vInit+0x3f6>
    393c:	88 ec       	ldi	r24, 0xC8	; 200
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	9a 8b       	std	Y+18, r25	; 0x12
    3942:	89 8b       	std	Y+17, r24	; 0x11
    3944:	89 89       	ldd	r24, Y+17	; 0x11
    3946:	9a 89       	ldd	r25, Y+18	; 0x12
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <CLCD_vInit+0x3e4>
    394c:	9a 8b       	std	Y+18, r25	; 0x12
    394e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3950:	8b 89       	ldd	r24, Y+19	; 0x13
    3952:	9c 89       	ldd	r25, Y+20	; 0x14
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	9c 89       	ldd	r25, Y+20	; 0x14
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	69 f7       	brne	.-38     	; 0x393c <CLCD_vInit+0x3d8>
    3962:	14 c0       	rjmp	.+40     	; 0x398c <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3964:	6d 89       	ldd	r22, Y+21	; 0x15
    3966:	7e 89       	ldd	r23, Y+22	; 0x16
    3968:	8f 89       	ldd	r24, Y+23	; 0x17
    396a:	98 8d       	ldd	r25, Y+24	; 0x18
    396c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	9c 8b       	std	Y+20, r25	; 0x14
    3976:	8b 8b       	std	Y+19, r24	; 0x13
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	9c 89       	ldd	r25, Y+20	; 0x14
    397c:	98 8b       	std	Y+16, r25	; 0x10
    397e:	8f 87       	std	Y+15, r24	; 0x0f
    3980:	8f 85       	ldd	r24, Y+15	; 0x0f
    3982:	98 89       	ldd	r25, Y+16	; 0x10
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <CLCD_vInit+0x420>
    3988:	98 8b       	std	Y+16, r25	; 0x10
    398a:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    398c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    3990:	86 e0       	ldi	r24, 0x06	; 6
    3992:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e8       	ldi	r26, 0x80	; 128
    399c:	bf e3       	ldi	r27, 0x3F	; 63
    399e:	8b 87       	std	Y+11, r24	; 0x0b
    39a0:	9c 87       	std	Y+12, r25	; 0x0c
    39a2:	ad 87       	std	Y+13, r26	; 0x0d
    39a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a ef       	ldi	r20, 0xFA	; 250
    39b4:	54 e4       	ldi	r21, 0x44	; 68
    39b6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8f 83       	std	Y+7, r24	; 0x07
    39c0:	98 87       	std	Y+8, r25	; 0x08
    39c2:	a9 87       	std	Y+9, r26	; 0x09
    39c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c6:	6f 81       	ldd	r22, Y+7	; 0x07
    39c8:	78 85       	ldd	r23, Y+8	; 0x08
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <CLCD_vInit+0x484>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <CLCD_vInit+0x4e4>
    3a2a:	88 ec       	ldi	r24, 0xC8	; 200
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <CLCD_vInit+0x4d2>
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <CLCD_vInit+0x4c6>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <CLCD_vInit+0x50e>
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3a7a:	ca 5b       	subi	r28, 0xBA	; 186
    3a7c:	df 4f       	sbci	r29, 0xFF	; 255
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	08 95       	ret

00003a92 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	0f 92       	push	r0
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	67 e0       	ldi	r22, 0x07	; 7
    3aa2:	41 e0       	ldi	r20, 0x01	; 1
    3aa4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	66 e0       	ldi	r22, 0x06	; 6
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  
#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to high nibbles
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	98 2f       	mov	r25, r24
    3ab6:	92 95       	swap	r25
    3ab8:	9f 70       	andi	r25, 0x0F	; 15
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	69 2f       	mov	r22, r25
    3abe:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3ac2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	69 81       	ldd	r22, Y+1	; 0x01
    3aca:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3ace:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	0f 92       	push	r0
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	67 e0       	ldi	r22, 0x07	; 7
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	66 e0       	ldi	r22, 0x06	; 6
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to high nibbles
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	98 2f       	mov	r25, r24
    3afe:	92 95       	swap	r25
    3b00:	9f 70       	andi	r25, 0x0F	; 15
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	69 2f       	mov	r22, r25
    3b06:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3b0a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	69 81       	ldd	r22, Y+1	; 0x01
    3b12:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    3b16:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	6c 97       	sbiw	r28, 0x1c	; 28
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	65 e0       	ldi	r22, 0x05	; 5
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	a0 e8       	ldi	r26, 0x80	; 128
    3b46:	bf e3       	ldi	r27, 0x3F	; 63
    3b48:	89 8f       	std	Y+25, r24	; 0x19
    3b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    3b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    3b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b50:	69 8d       	ldd	r22, Y+25	; 0x19
    3b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	4a ef       	ldi	r20, 0xFA	; 250
    3b5e:	54 e4       	ldi	r21, 0x44	; 68
    3b60:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	8d 8b       	std	Y+21, r24	; 0x15
    3b6a:	9e 8b       	std	Y+22, r25	; 0x16
    3b6c:	af 8b       	std	Y+23, r26	; 0x17
    3b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b70:	6d 89       	ldd	r22, Y+21	; 0x15
    3b72:	7e 89       	ldd	r23, Y+22	; 0x16
    3b74:	8f 89       	ldd	r24, Y+23	; 0x17
    3b76:	98 8d       	ldd	r25, Y+24	; 0x18
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e8       	ldi	r20, 0x80	; 128
    3b7e:	5f e3       	ldi	r21, 0x3F	; 63
    3b80:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3b84:	88 23       	and	r24, r24
    3b86:	2c f4       	brge	.+10     	; 0x3b92 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	9c 8b       	std	Y+20, r25	; 0x14
    3b8e:	8b 8b       	std	Y+19, r24	; 0x13
    3b90:	3f c0       	rjmp	.+126    	; 0x3c10 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3b92:	6d 89       	ldd	r22, Y+21	; 0x15
    3b94:	7e 89       	ldd	r23, Y+22	; 0x16
    3b96:	8f 89       	ldd	r24, Y+23	; 0x17
    3b98:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	3f ef       	ldi	r19, 0xFF	; 255
    3b9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ba0:	57 e4       	ldi	r21, 0x47	; 71
    3ba2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3ba6:	18 16       	cp	r1, r24
    3ba8:	4c f5       	brge	.+82     	; 0x3bfc <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3baa:	69 8d       	ldd	r22, Y+25	; 0x19
    3bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e2       	ldi	r20, 0x20	; 32
    3bb8:	51 e4       	ldi	r21, 0x41	; 65
    3bba:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	bc 01       	movw	r22, r24
    3bc4:	cd 01       	movw	r24, r26
    3bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	9c 8b       	std	Y+20, r25	; 0x14
    3bd0:	8b 8b       	std	Y+19, r24	; 0x13
    3bd2:	0f c0       	rjmp	.+30     	; 0x3bf2 <CLCD_vSendFallingEdge+0xd0>
    3bd4:	88 ec       	ldi	r24, 0xC8	; 200
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	9a 8b       	std	Y+18, r25	; 0x12
    3bda:	89 8b       	std	Y+17, r24	; 0x11
    3bdc:	89 89       	ldd	r24, Y+17	; 0x11
    3bde:	9a 89       	ldd	r25, Y+18	; 0x12
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <CLCD_vSendFallingEdge+0xbe>
    3be4:	9a 8b       	std	Y+18, r25	; 0x12
    3be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bea:	9c 89       	ldd	r25, Y+20	; 0x14
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	9c 8b       	std	Y+20, r25	; 0x14
    3bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf6:	00 97       	sbiw	r24, 0x00	; 0
    3bf8:	69 f7       	brne	.-38     	; 0x3bd4 <CLCD_vSendFallingEdge+0xb2>
    3bfa:	14 c0       	rjmp	.+40     	; 0x3c24 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    3c00:	8f 89       	ldd	r24, Y+23	; 0x17
    3c02:	98 8d       	ldd	r25, Y+24	; 0x18
    3c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	9c 8b       	std	Y+20, r25	; 0x14
    3c0e:	8b 8b       	std	Y+19, r24	; 0x13
    3c10:	8b 89       	ldd	r24, Y+19	; 0x13
    3c12:	9c 89       	ldd	r25, Y+20	; 0x14
    3c14:	98 8b       	std	Y+16, r25	; 0x10
    3c16:	8f 87       	std	Y+15, r24	; 0x0f
    3c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c1a:	98 89       	ldd	r25, Y+16	; 0x10
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <CLCD_vSendFallingEdge+0xfa>
    3c20:	98 8b       	std	Y+16, r25	; 0x10
    3c22:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	65 e0       	ldi	r22, 0x05	; 5
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	a0 e8       	ldi	r26, 0x80	; 128
    3c34:	bf e3       	ldi	r27, 0x3F	; 63
    3c36:	8b 87       	std	Y+11, r24	; 0x0b
    3c38:	9c 87       	std	Y+12, r25	; 0x0c
    3c3a:	ad 87       	std	Y+13, r26	; 0x0d
    3c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	4a ef       	ldi	r20, 0xFA	; 250
    3c4c:	54 e4       	ldi	r21, 0x44	; 68
    3c4e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	8f 83       	std	Y+7, r24	; 0x07
    3c58:	98 87       	std	Y+8, r25	; 0x08
    3c5a:	a9 87       	std	Y+9, r26	; 0x09
    3c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c60:	78 85       	ldd	r23, Y+8	; 0x08
    3c62:	89 85       	ldd	r24, Y+9	; 0x09
    3c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e8       	ldi	r20, 0x80	; 128
    3c6c:	5f e3       	ldi	r21, 0x3F	; 63
    3c6e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3c72:	88 23       	and	r24, r24
    3c74:	2c f4       	brge	.+10     	; 0x3c80 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	9e 83       	std	Y+6, r25	; 0x06
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	3f c0       	rjmp	.+126    	; 0x3cfe <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3c80:	6f 81       	ldd	r22, Y+7	; 0x07
    3c82:	78 85       	ldd	r23, Y+8	; 0x08
    3c84:	89 85       	ldd	r24, Y+9	; 0x09
    3c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	3f ef       	ldi	r19, 0xFF	; 255
    3c8c:	4f e7       	ldi	r20, 0x7F	; 127
    3c8e:	57 e4       	ldi	r21, 0x47	; 71
    3c90:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3c94:	18 16       	cp	r1, r24
    3c96:	4c f5       	brge	.+82     	; 0x3cea <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e2       	ldi	r20, 0x20	; 32
    3ca6:	51 e4       	ldi	r21, 0x41	; 65
    3ca8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	0f c0       	rjmp	.+30     	; 0x3ce0 <CLCD_vSendFallingEdge+0x1be>
    3cc2:	88 ec       	ldi	r24, 0xC8	; 200
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9c 83       	std	Y+4, r25	; 0x04
    3cc8:	8b 83       	std	Y+3, r24	; 0x03
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <CLCD_vSendFallingEdge+0x1ac>
    3cd2:	9c 83       	std	Y+4, r25	; 0x04
    3cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cda:	01 97       	sbiw	r24, 0x01	; 1
    3cdc:	9e 83       	std	Y+6, r25	; 0x06
    3cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	69 f7       	brne	.-38     	; 0x3cc2 <CLCD_vSendFallingEdge+0x1a0>
    3ce8:	14 c0       	rjmp	.+40     	; 0x3d12 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cea:	6f 81       	ldd	r22, Y+7	; 0x07
    3cec:	78 85       	ldd	r23, Y+8	; 0x08
    3cee:	89 85       	ldd	r24, Y+9	; 0x09
    3cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	9e 83       	std	Y+6, r25	; 0x06
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
    3cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3d00:	9e 81       	ldd	r25, Y+6	; 0x06
    3d02:	9a 83       	std	Y+2, r25	; 0x02
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <CLCD_vSendFallingEdge+0x1e8>
    3d0e:	9a 83       	std	Y+2, r25	; 0x02
    3d10:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3d12:	6c 96       	adiw	r28, 0x1c	; 28
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	2e 97       	sbiw	r28, 0x0e	; 14
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	a0 e2       	ldi	r26, 0x20	; 32
    3d44:	b1 e4       	ldi	r27, 0x41	; 65
    3d46:	8b 87       	std	Y+11, r24	; 0x0b
    3d48:	9c 87       	std	Y+12, r25	; 0x0c
    3d4a:	ad 87       	std	Y+13, r26	; 0x0d
    3d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	4a ef       	ldi	r20, 0xFA	; 250
    3d5c:	54 e4       	ldi	r21, 0x44	; 68
    3d5e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	8f 83       	std	Y+7, r24	; 0x07
    3d68:	98 87       	std	Y+8, r25	; 0x08
    3d6a:	a9 87       	std	Y+9, r26	; 0x09
    3d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e8       	ldi	r20, 0x80	; 128
    3d7c:	5f e3       	ldi	r21, 0x3F	; 63
    3d7e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3d82:	88 23       	and	r24, r24
    3d84:	2c f4       	brge	.+10     	; 0x3d90 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	9e 83       	std	Y+6, r25	; 0x06
    3d8c:	8d 83       	std	Y+5, r24	; 0x05
    3d8e:	3f c0       	rjmp	.+126    	; 0x3e0e <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    3d90:	6f 81       	ldd	r22, Y+7	; 0x07
    3d92:	78 85       	ldd	r23, Y+8	; 0x08
    3d94:	89 85       	ldd	r24, Y+9	; 0x09
    3d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	3f ef       	ldi	r19, 0xFF	; 255
    3d9c:	4f e7       	ldi	r20, 0x7F	; 127
    3d9e:	57 e4       	ldi	r21, 0x47	; 71
    3da0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3da4:	18 16       	cp	r1, r24
    3da6:	4c f5       	brge	.+82     	; 0x3dfa <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e2       	ldi	r20, 0x20	; 32
    3db6:	51 e4       	ldi	r21, 0x41	; 65
    3db8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	9e 83       	std	Y+6, r25	; 0x06
    3dce:	8d 83       	std	Y+5, r24	; 0x05
    3dd0:	0f c0       	rjmp	.+30     	; 0x3df0 <CLCD_vClearScreen+0xcc>
    3dd2:	88 ec       	ldi	r24, 0xC8	; 200
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9c 83       	std	Y+4, r25	; 0x04
    3dd8:	8b 83       	std	Y+3, r24	; 0x03
    3dda:	8b 81       	ldd	r24, Y+3	; 0x03
    3ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	f1 f7       	brne	.-4      	; 0x3dde <CLCD_vClearScreen+0xba>
    3de2:	9c 83       	std	Y+4, r25	; 0x04
    3de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	69 f7       	brne	.-38     	; 0x3dd2 <CLCD_vClearScreen+0xae>
    3df8:	14 c0       	rjmp	.+40     	; 0x3e22 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	9e 83       	std	Y+6, r25	; 0x06
    3e0c:	8d 83       	std	Y+5, r24	; 0x05
    3e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e10:	9e 81       	ldd	r25, Y+6	; 0x06
    3e12:	9a 83       	std	Y+2, r25	; 0x02
    3e14:	89 83       	std	Y+1, r24	; 0x01
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <CLCD_vClearScreen+0xf6>
    3e1e:	9a 83       	std	Y+2, r25	; 0x02
    3e20:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    3e22:	2e 96       	adiw	r28, 0x0e	; 14
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	08 95       	ret

00003e34 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <CLCD_vSendString+0x6>
    3e3a:	0f 92       	push	r0
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	9b 83       	std	Y+3, r25	; 0x03
    3e42:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    3e44:	19 82       	std	Y+1, r1	; 0x01
    3e46:	0e c0       	rjmp	.+28     	; 0x3e64 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e50:	9b 81       	ldd	r25, Y+3	; 0x03
    3e52:	fc 01       	movw	r30, r24
    3e54:	e2 0f       	add	r30, r18
    3e56:	f3 1f       	adc	r31, r19
    3e58:	80 81       	ld	r24, Z
    3e5a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    LOC_u8Iterator++;
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6e:	fc 01       	movw	r30, r24
    3e70:	e2 0f       	add	r30, r18
    3e72:	f3 1f       	adc	r31, r19
    3e74:	80 81       	ld	r24, Z
    3e76:	88 23       	and	r24, r24
    3e78:	39 f7       	brne	.-50     	; 0x3e48 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	28 97       	sbiw	r28, 0x08	; 8
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	6d 83       	std	Y+5, r22	; 0x05
    3ea4:	7e 83       	std	Y+6, r23	; 0x06
    3ea6:	8f 83       	std	Y+7, r24	; 0x07
    3ea8:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	a0 e0       	ldi	r26, 0x00	; 0
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	89 83       	std	Y+1, r24	; 0x01
    3eb4:	9a 83       	std	Y+2, r25	; 0x02
    3eb6:	ab 83       	std	Y+3, r26	; 0x03
    3eb8:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	af 81       	ldd	r26, Y+7	; 0x07
    3ec0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	a1 05       	cpc	r26, r1
    3ec6:	b1 05       	cpc	r27, r1
    3ec8:	21 f4       	brne	.+8      	; 0x3ed2 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    3eca:	80 e3       	ldi	r24, 0x30	; 48
    3ecc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    3ed0:	85 c0       	rjmp	.+266    	; 0x3fdc <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed6:	af 81       	ldd	r26, Y+7	; 0x07
    3ed8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eda:	bb 23       	and	r27, r27
    3edc:	0c f0       	brlt	.+2      	; 0x3ee0 <CLCD_vSendIntNumber+0x5a>
    3ede:	49 c0       	rjmp	.+146    	; 0x3f72 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    3ee0:	8d e2       	ldi	r24, 0x2D	; 45
    3ee2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eea:	af 81       	ldd	r26, Y+7	; 0x07
    3eec:	b8 85       	ldd	r27, Y+8	; 0x08
    3eee:	b0 95       	com	r27
    3ef0:	a0 95       	com	r26
    3ef2:	90 95       	com	r25
    3ef4:	81 95       	neg	r24
    3ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef8:	af 4f       	sbci	r26, 0xFF	; 255
    3efa:	bf 4f       	sbci	r27, 0xFF	; 255
    3efc:	8d 83       	std	Y+5, r24	; 0x05
    3efe:	9e 83       	std	Y+6, r25	; 0x06
    3f00:	af 83       	std	Y+7, r26	; 0x07
    3f02:	b8 87       	std	Y+8, r27	; 0x08
    3f04:	36 c0       	rjmp	.+108    	; 0x3f72 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3f06:	89 81       	ldd	r24, Y+1	; 0x01
    3f08:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f0c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f0e:	2a e0       	ldi	r18, 0x0A	; 10
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 e0       	ldi	r20, 0x00	; 0
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	bc 01       	movw	r22, r24
    3f18:	cd 01       	movw	r24, r26
    3f1a:	0e 94 98 3c 	call	0x7930	; 0x7930 <__mulsi3>
    3f1e:	7b 01       	movw	r14, r22
    3f20:	8c 01       	movw	r16, r24
    3f22:	8d 81       	ldd	r24, Y+5	; 0x05
    3f24:	9e 81       	ldd	r25, Y+6	; 0x06
    3f26:	af 81       	ldd	r26, Y+7	; 0x07
    3f28:	b8 85       	ldd	r27, Y+8	; 0x08
    3f2a:	2a e0       	ldi	r18, 0x0A	; 10
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__divmodsi4>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	8e 0d       	add	r24, r14
    3f40:	9f 1d       	adc	r25, r15
    3f42:	a0 1f       	adc	r26, r16
    3f44:	b1 1f       	adc	r27, r17
    3f46:	89 83       	std	Y+1, r24	; 0x01
    3f48:	9a 83       	std	Y+2, r25	; 0x02
    3f4a:	ab 83       	std	Y+3, r26	; 0x03
    3f4c:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    3f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f50:	9e 81       	ldd	r25, Y+6	; 0x06
    3f52:	af 81       	ldd	r26, Y+7	; 0x07
    3f54:	b8 85       	ldd	r27, Y+8	; 0x08
    3f56:	2a e0       	ldi	r18, 0x0A	; 10
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e0       	ldi	r20, 0x00	; 0
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	0e 94 f9 3c 	call	0x79f2	; 0x79f2 <__divmodsi4>
    3f66:	da 01       	movw	r26, r20
    3f68:	c9 01       	movw	r24, r18
    3f6a:	8d 83       	std	Y+5, r24	; 0x05
    3f6c:	9e 83       	std	Y+6, r25	; 0x06
    3f6e:	af 83       	std	Y+7, r26	; 0x07
    3f70:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	af 81       	ldd	r26, Y+7	; 0x07
    3f78:	b8 85       	ldd	r27, Y+8	; 0x08
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	a1 05       	cpc	r26, r1
    3f7e:	b1 05       	cpc	r27, r1
    3f80:	11 f6       	brne	.-124    	; 0x3f06 <CLCD_vSendIntNumber+0x80>
    3f82:	23 c0       	rjmp	.+70     	; 0x3fca <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	9a 81       	ldd	r25, Y+2	; 0x02
    3f88:	ab 81       	ldd	r26, Y+3	; 0x03
    3f8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3f8c:	2a e0       	ldi	r18, 0x0A	; 10
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	50 e0       	ldi	r21, 0x00	; 0
    3f94:	bc 01       	movw	r22, r24
    3f96:	cd 01       	movw	r24, r26
    3f98:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__udivmodsi4>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	80 5d       	subi	r24, 0xD0	; 208
    3fa2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3faa:	ab 81       	ldd	r26, Y+3	; 0x03
    3fac:	bc 81       	ldd	r27, Y+4	; 0x04
    3fae:	2a e0       	ldi	r18, 0x0A	; 10
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	50 e0       	ldi	r21, 0x00	; 0
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__udivmodsi4>
    3fbe:	da 01       	movw	r26, r20
    3fc0:	c9 01       	movw	r24, r18
    3fc2:	89 83       	std	Y+1, r24	; 0x01
    3fc4:	9a 83       	std	Y+2, r25	; 0x02
    3fc6:	ab 83       	std	Y+3, r26	; 0x03
    3fc8:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	ab 81       	ldd	r26, Y+3	; 0x03
    3fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fd2:	81 30       	cpi	r24, 0x01	; 1
    3fd4:	91 05       	cpc	r25, r1
    3fd6:	a1 05       	cpc	r26, r1
    3fd8:	b1 05       	cpc	r27, r1
    3fda:	a1 f6       	brne	.-88     	; 0x3f84 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    3fdc:	28 96       	adiw	r28, 0x08	; 8
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	ff 90       	pop	r15
    3ff2:	ef 90       	pop	r14
    3ff4:	08 95       	ret

00003ff6 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	df 93       	push	r29
    4008:	cf 93       	push	r28
    400a:	00 d0       	rcall	.+0      	; 0x400c <CLCD_vSendFloatNumber+0x16>
    400c:	00 d0       	rcall	.+0      	; 0x400e <CLCD_vSendFloatNumber+0x18>
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    4012:	69 83       	std	Y+1, r22	; 0x01
    4014:	7a 83       	std	Y+2, r23	; 0x02
    4016:	8b 83       	std	Y+3, r24	; 0x03
    4018:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    401a:	69 81       	ldd	r22, Y+1	; 0x01
    401c:	7a 81       	ldd	r23, Y+2	; 0x02
    401e:	8b 81       	ldd	r24, Y+3	; 0x03
    4020:	9c 81       	ldd	r25, Y+4	; 0x04
    4022:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	bc 01       	movw	r22, r24
    402c:	cd 01       	movw	r24, r26
    402e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    4032:	69 81       	ldd	r22, Y+1	; 0x01
    4034:	7a 81       	ldd	r23, Y+2	; 0x02
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	9c 81       	ldd	r25, Y+4	; 0x04
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e0       	ldi	r20, 0x00	; 0
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4046:	88 23       	and	r24, r24
    4048:	4c f4       	brge	.+18     	; 0x405c <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	ab 81       	ldd	r26, Y+3	; 0x03
    4050:	bc 81       	ldd	r27, Y+4	; 0x04
    4052:	b0 58       	subi	r27, 0x80	; 128
    4054:	89 83       	std	Y+1, r24	; 0x01
    4056:	9a 83       	std	Y+2, r25	; 0x02
    4058:	ab 83       	std	Y+3, r26	; 0x03
    405a:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    405c:	69 81       	ldd	r22, Y+1	; 0x01
    405e:	7a 81       	ldd	r23, Y+2	; 0x02
    4060:	8b 81       	ldd	r24, Y+3	; 0x03
    4062:	9c 81       	ldd	r25, Y+4	; 0x04
    4064:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    4074:	9b 01       	movw	r18, r22
    4076:	ac 01       	movw	r20, r24
    4078:	69 81       	ldd	r22, Y+1	; 0x01
    407a:	7a 81       	ldd	r23, Y+2	; 0x02
    407c:	8b 81       	ldd	r24, Y+3	; 0x03
    407e:	9c 81       	ldd	r25, Y+4	; 0x04
    4080:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	ab 83       	std	Y+3, r26	; 0x03
    408e:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    4090:	69 81       	ldd	r22, Y+1	; 0x01
    4092:	7a 81       	ldd	r23, Y+2	; 0x02
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e4       	ldi	r19, 0x40	; 64
    409c:	4c e1       	ldi	r20, 0x1C	; 28
    409e:	56 e4       	ldi	r21, 0x46	; 70
    40a0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	9a 83       	std	Y+2, r25	; 0x02
    40ac:	ab 83       	std	Y+3, r26	; 0x03
    40ae:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    40b0:	69 81       	ldd	r22, Y+1	; 0x01
    40b2:	7a 81       	ldd	r23, Y+2	; 0x02
    40b4:	8b 81       	ldd	r24, Y+3	; 0x03
    40b6:	9c 81       	ldd	r25, Y+4	; 0x04
    40b8:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    40bc:	a2 2e       	mov	r10, r18
    40be:	b3 2e       	mov	r11, r19
    40c0:	c4 2e       	mov	r12, r20
    40c2:	d5 2e       	mov	r13, r21
    40c4:	e6 2e       	mov	r14, r22
    40c6:	f7 2e       	mov	r15, r23
    40c8:	08 2f       	mov	r16, r24
    40ca:	19 2f       	mov	r17, r25
    40cc:	8a 2d       	mov	r24, r10
    40ce:	8b 29       	or	r24, r11
    40d0:	8c 29       	or	r24, r12
    40d2:	8d 29       	or	r24, r13
    40d4:	8e 29       	or	r24, r14
    40d6:	8f 29       	or	r24, r15
    40d8:	80 2b       	or	r24, r16
    40da:	81 2b       	or	r24, r17
    40dc:	88 23       	and	r24, r24
    40de:	79 f0       	breq	.+30     	; 0x40fe <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    40e0:	8e e2       	ldi	r24, 0x2E	; 46
    40e2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    40e6:	69 81       	ldd	r22, Y+1	; 0x01
    40e8:	7a 81       	ldd	r23, Y+2	; 0x02
    40ea:	8b 81       	ldd	r24, Y+3	; 0x03
    40ec:	9c 81       	ldd	r25, Y+4	; 0x04
    40ee:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	bc 01       	movw	r22, r24
    40f8:	cd 01       	movw	r24, r26
    40fa:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <CLCD_vSendIntNumber>
  }
}
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	ff 90       	pop	r15
    4110:	ef 90       	pop	r14
    4112:	df 90       	pop	r13
    4114:	cf 90       	pop	r12
    4116:	bf 90       	pop	r11
    4118:	af 90       	pop	r10
    411a:	08 95       	ret

0000411c <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	61 97       	sbiw	r28, 0x11	; 17
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	88 8b       	std	Y+16, r24	; 0x10
    4132:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    4134:	88 89       	ldd	r24, Y+16	; 0x10
    4136:	88 23       	and	r24, r24
    4138:	49 f0       	breq	.+18     	; 0x414c <CLCD_vSetPosition+0x30>
    413a:	88 89       	ldd	r24, Y+16	; 0x10
    413c:	85 30       	cpi	r24, 0x05	; 5
    413e:	30 f4       	brcc	.+12     	; 0x414c <CLCD_vSetPosition+0x30>
    4140:	89 89       	ldd	r24, Y+17	; 0x11
    4142:	88 23       	and	r24, r24
    4144:	19 f0       	breq	.+6      	; 0x414c <CLCD_vSetPosition+0x30>
    4146:	89 89       	ldd	r24, Y+17	; 0x11
    4148:	85 31       	cpi	r24, 0x15	; 21
    414a:	18 f0       	brcs	.+6      	; 0x4152 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    414c:	80 e8       	ldi	r24, 0x80	; 128
    414e:	8f 87       	std	Y+15, r24	; 0x0f
    4150:	1b c0       	rjmp	.+54     	; 0x4188 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    4152:	88 89       	ldd	r24, Y+16	; 0x10
    4154:	81 30       	cpi	r24, 0x01	; 1
    4156:	21 f4       	brne	.+8      	; 0x4160 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    4158:	89 89       	ldd	r24, Y+17	; 0x11
    415a:	81 58       	subi	r24, 0x81	; 129
    415c:	8f 87       	std	Y+15, r24	; 0x0f
    415e:	14 c0       	rjmp	.+40     	; 0x4188 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    4160:	88 89       	ldd	r24, Y+16	; 0x10
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	21 f4       	brne	.+8      	; 0x416e <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    4166:	89 89       	ldd	r24, Y+17	; 0x11
    4168:	81 54       	subi	r24, 0x41	; 65
    416a:	8f 87       	std	Y+15, r24	; 0x0f
    416c:	0d c0       	rjmp	.+26     	; 0x4188 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    416e:	88 89       	ldd	r24, Y+16	; 0x10
    4170:	83 30       	cpi	r24, 0x03	; 3
    4172:	21 f4       	brne	.+8      	; 0x417c <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    4174:	89 89       	ldd	r24, Y+17	; 0x11
    4176:	8d 56       	subi	r24, 0x6D	; 109
    4178:	8f 87       	std	Y+15, r24	; 0x0f
    417a:	06 c0       	rjmp	.+12     	; 0x4188 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    417c:	88 89       	ldd	r24, Y+16	; 0x10
    417e:	84 30       	cpi	r24, 0x04	; 4
    4180:	19 f4       	brne	.+6      	; 0x4188 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    4182:	89 89       	ldd	r24, Y+17	; 0x11
    4184:	8d 52       	subi	r24, 0x2D	; 45
    4186:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    4188:	8f 85       	ldd	r24, Y+15	; 0x0f
    418a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a0 e8       	ldi	r26, 0x80	; 128
    4194:	bf e3       	ldi	r27, 0x3F	; 63
    4196:	8b 87       	std	Y+11, r24	; 0x0b
    4198:	9c 87       	std	Y+12, r25	; 0x0c
    419a:	ad 87       	std	Y+13, r26	; 0x0d
    419c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a ef       	ldi	r20, 0xFA	; 250
    41ac:	54 e4       	ldi	r21, 0x44	; 68
    41ae:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8f 83       	std	Y+7, r24	; 0x07
    41b8:	98 87       	std	Y+8, r25	; 0x08
    41ba:	a9 87       	std	Y+9, r26	; 0x09
    41bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41be:	6f 81       	ldd	r22, Y+7	; 0x07
    41c0:	78 85       	ldd	r23, Y+8	; 0x08
    41c2:	89 85       	ldd	r24, Y+9	; 0x09
    41c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	3f c0       	rjmp	.+126    	; 0x425e <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    41e0:	6f 81       	ldd	r22, Y+7	; 0x07
    41e2:	78 85       	ldd	r23, Y+8	; 0x08
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9e 83       	std	Y+6, r25	; 0x06
    421e:	8d 83       	std	Y+5, r24	; 0x05
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <CLCD_vSetPosition+0x124>
    4222:	88 ec       	ldi	r24, 0xC8	; 200
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9c 83       	std	Y+4, r25	; 0x04
    4228:	8b 83       	std	Y+3, r24	; 0x03
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <CLCD_vSetPosition+0x112>
    4232:	9c 83       	std	Y+4, r25	; 0x04
    4234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	8d 81       	ldd	r24, Y+5	; 0x05
    4238:	9e 81       	ldd	r25, Y+6	; 0x06
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9e 83       	std	Y+6, r25	; 0x06
    423e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	8d 81       	ldd	r24, Y+5	; 0x05
    4242:	9e 81       	ldd	r25, Y+6	; 0x06
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <CLCD_vSetPosition+0x106>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	8d 83       	std	Y+5, r24	; 0x05
    425e:	8d 81       	ldd	r24, Y+5	; 0x05
    4260:	9e 81       	ldd	r25, Y+6	; 0x06
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	89 83       	std	Y+1, r24	; 0x01
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	9a 81       	ldd	r25, Y+2	; 0x02
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <CLCD_vSetPosition+0x14e>
    426e:	9a 83       	std	Y+2, r25	; 0x02
    4270:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4272:	61 96       	adiw	r28, 0x11	; 17
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	00 d0       	rcall	.+0      	; 0x428a <CLCD_vSendExtraChar+0x6>
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	8a 83       	std	Y+2, r24	; 0x02
    4292:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    4294:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    4296:	80 e4       	ldi	r24, 0x40	; 64
    4298:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    429c:	19 82       	std	Y+1, r1	; 0x01
    429e:	0c c0       	rjmp	.+24     	; 0x42b8 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	88 2f       	mov	r24, r24
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	fc 01       	movw	r30, r24
    42a8:	ed 5e       	subi	r30, 0xED	; 237
    42aa:	fc 4f       	sbci	r31, 0xFC	; 252
    42ac:	80 81       	ld	r24, Z
    42ae:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	8f 5f       	subi	r24, 0xFF	; 255
    42b6:	89 83       	std	Y+1, r24	; 0x01
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	80 34       	cpi	r24, 0x40	; 64
    42bc:	88 f3       	brcs	.-30     	; 0x42a0 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    42be:	8a 81       	ldd	r24, Y+2	; 0x02
    42c0:	6b 81       	ldd	r22, Y+3	; 0x03
    42c2:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    42c6:	19 82       	std	Y+1, r1	; 0x01
    42c8:	06 c0       	rjmp	.+12     	; 0x42d6 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	88 30       	cpi	r24, 0x08	; 8
    42da:	b8 f3       	brcs	.-18     	; 0x42ca <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	08 95       	ret

000042e8 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    42e8:	df 93       	push	r29
    42ea:	cf 93       	push	r28
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	2e 97       	sbiw	r28, 0x0e	; 14
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    42fc:	8c e1       	ldi	r24, 0x1C	; 28
    42fe:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	a0 e8       	ldi	r26, 0x80	; 128
    4308:	bf e3       	ldi	r27, 0x3F	; 63
    430a:	8b 87       	std	Y+11, r24	; 0x0b
    430c:	9c 87       	std	Y+12, r25	; 0x0c
    430e:	ad 87       	std	Y+13, r26	; 0x0d
    4310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4312:	6b 85       	ldd	r22, Y+11	; 0x0b
    4314:	7c 85       	ldd	r23, Y+12	; 0x0c
    4316:	8d 85       	ldd	r24, Y+13	; 0x0d
    4318:	9e 85       	ldd	r25, Y+14	; 0x0e
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4a ef       	ldi	r20, 0xFA	; 250
    4320:	54 e4       	ldi	r21, 0x44	; 68
    4322:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8f 83       	std	Y+7, r24	; 0x07
    432c:	98 87       	std	Y+8, r25	; 0x08
    432e:	a9 87       	std	Y+9, r26	; 0x09
    4330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4332:	6f 81       	ldd	r22, Y+7	; 0x07
    4334:	78 85       	ldd	r23, Y+8	; 0x08
    4336:	89 85       	ldd	r24, Y+9	; 0x09
    4338:	9a 85       	ldd	r25, Y+10	; 0x0a
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4346:	88 23       	and	r24, r24
    4348:	2c f4       	brge	.+10     	; 0x4354 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9e 83       	std	Y+6, r25	; 0x06
    4350:	8d 83       	std	Y+5, r24	; 0x05
    4352:	3f c0       	rjmp	.+126    	; 0x43d2 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    4354:	6f 81       	ldd	r22, Y+7	; 0x07
    4356:	78 85       	ldd	r23, Y+8	; 0x08
    4358:	89 85       	ldd	r24, Y+9	; 0x09
    435a:	9a 85       	ldd	r25, Y+10	; 0x0a
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	3f ef       	ldi	r19, 0xFF	; 255
    4360:	4f e7       	ldi	r20, 0x7F	; 127
    4362:	57 e4       	ldi	r21, 0x47	; 71
    4364:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4368:	18 16       	cp	r1, r24
    436a:	4c f5       	brge	.+82     	; 0x43be <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436c:	6b 85       	ldd	r22, Y+11	; 0x0b
    436e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4370:	8d 85       	ldd	r24, Y+13	; 0x0d
    4372:	9e 85       	ldd	r25, Y+14	; 0x0e
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9e 83       	std	Y+6, r25	; 0x06
    4392:	8d 83       	std	Y+5, r24	; 0x05
    4394:	0f c0       	rjmp	.+30     	; 0x43b4 <CLCD_voidShiftDisplayRight+0xcc>
    4396:	88 ec       	ldi	r24, 0xC8	; 200
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	9c 83       	std	Y+4, r25	; 0x04
    439c:	8b 83       	std	Y+3, r24	; 0x03
    439e:	8b 81       	ldd	r24, Y+3	; 0x03
    43a0:	9c 81       	ldd	r25, Y+4	; 0x04
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <CLCD_voidShiftDisplayRight+0xba>
    43a6:	9c 83       	std	Y+4, r25	; 0x04
    43a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43aa:	8d 81       	ldd	r24, Y+5	; 0x05
    43ac:	9e 81       	ldd	r25, Y+6	; 0x06
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	9e 83       	std	Y+6, r25	; 0x06
    43b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b4:	8d 81       	ldd	r24, Y+5	; 0x05
    43b6:	9e 81       	ldd	r25, Y+6	; 0x06
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	69 f7       	brne	.-38     	; 0x4396 <CLCD_voidShiftDisplayRight+0xae>
    43bc:	14 c0       	rjmp	.+40     	; 0x43e6 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43be:	6f 81       	ldd	r22, Y+7	; 0x07
    43c0:	78 85       	ldd	r23, Y+8	; 0x08
    43c2:	89 85       	ldd	r24, Y+9	; 0x09
    43c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	9e 83       	std	Y+6, r25	; 0x06
    43d0:	8d 83       	std	Y+5, r24	; 0x05
    43d2:	8d 81       	ldd	r24, Y+5	; 0x05
    43d4:	9e 81       	ldd	r25, Y+6	; 0x06
    43d6:	9a 83       	std	Y+2, r25	; 0x02
    43d8:	89 83       	std	Y+1, r24	; 0x01
    43da:	89 81       	ldd	r24, Y+1	; 0x01
    43dc:	9a 81       	ldd	r25, Y+2	; 0x02
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	f1 f7       	brne	.-4      	; 0x43de <CLCD_voidShiftDisplayRight+0xf6>
    43e2:	9a 83       	std	Y+2, r25	; 0x02
    43e4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    43e6:	2e 96       	adiw	r28, 0x0e	; 14
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	2e 97       	sbiw	r28, 0x0e	; 14
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    440c:	88 e1       	ldi	r24, 0x18	; 24
    440e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a0 e8       	ldi	r26, 0x80	; 128
    4418:	bf e3       	ldi	r27, 0x3F	; 63
    441a:	8b 87       	std	Y+11, r24	; 0x0b
    441c:	9c 87       	std	Y+12, r25	; 0x0c
    441e:	ad 87       	std	Y+13, r26	; 0x0d
    4420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	6b 85       	ldd	r22, Y+11	; 0x0b
    4424:	7c 85       	ldd	r23, Y+12	; 0x0c
    4426:	8d 85       	ldd	r24, Y+13	; 0x0d
    4428:	9e 85       	ldd	r25, Y+14	; 0x0e
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a ef       	ldi	r20, 0xFA	; 250
    4430:	54 e4       	ldi	r21, 0x44	; 68
    4432:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8f 83       	std	Y+7, r24	; 0x07
    443c:	98 87       	std	Y+8, r25	; 0x08
    443e:	a9 87       	std	Y+9, r26	; 0x09
    4440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4442:	6f 81       	ldd	r22, Y+7	; 0x07
    4444:	78 85       	ldd	r23, Y+8	; 0x08
    4446:	89 85       	ldd	r24, Y+9	; 0x09
    4448:	9a 85       	ldd	r25, Y+10	; 0x0a
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e8       	ldi	r20, 0x80	; 128
    4450:	5f e3       	ldi	r21, 0x3F	; 63
    4452:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4456:	88 23       	and	r24, r24
    4458:	2c f4       	brge	.+10     	; 0x4464 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 83       	std	Y+5, r24	; 0x05
    4462:	3f c0       	rjmp	.+126    	; 0x44e2 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    4464:	6f 81       	ldd	r22, Y+7	; 0x07
    4466:	78 85       	ldd	r23, Y+8	; 0x08
    4468:	89 85       	ldd	r24, Y+9	; 0x09
    446a:	9a 85       	ldd	r25, Y+10	; 0x0a
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	4c f5       	brge	.+82     	; 0x44ce <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	6b 85       	ldd	r22, Y+11	; 0x0b
    447e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4480:	8d 85       	ldd	r24, Y+13	; 0x0d
    4482:	9e 85       	ldd	r25, Y+14	; 0x0e
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9e 83       	std	Y+6, r25	; 0x06
    44a2:	8d 83       	std	Y+5, r24	; 0x05
    44a4:	0f c0       	rjmp	.+30     	; 0x44c4 <CLCD_voidShiftDisplayLeft+0xcc>
    44a6:	88 ec       	ldi	r24, 0xC8	; 200
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9c 83       	std	Y+4, r25	; 0x04
    44ac:	8b 83       	std	Y+3, r24	; 0x03
    44ae:	8b 81       	ldd	r24, Y+3	; 0x03
    44b0:	9c 81       	ldd	r25, Y+4	; 0x04
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <CLCD_voidShiftDisplayLeft+0xba>
    44b6:	9c 83       	std	Y+4, r25	; 0x04
    44b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ba:	8d 81       	ldd	r24, Y+5	; 0x05
    44bc:	9e 81       	ldd	r25, Y+6	; 0x06
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	9e 83       	std	Y+6, r25	; 0x06
    44c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c4:	8d 81       	ldd	r24, Y+5	; 0x05
    44c6:	9e 81       	ldd	r25, Y+6	; 0x06
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	69 f7       	brne	.-38     	; 0x44a6 <CLCD_voidShiftDisplayLeft+0xae>
    44cc:	14 c0       	rjmp	.+40     	; 0x44f6 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ce:	6f 81       	ldd	r22, Y+7	; 0x07
    44d0:	78 85       	ldd	r23, Y+8	; 0x08
    44d2:	89 85       	ldd	r24, Y+9	; 0x09
    44d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	9e 83       	std	Y+6, r25	; 0x06
    44e0:	8d 83       	std	Y+5, r24	; 0x05
    44e2:	8d 81       	ldd	r24, Y+5	; 0x05
    44e4:	9e 81       	ldd	r25, Y+6	; 0x06
    44e6:	9a 83       	std	Y+2, r25	; 0x02
    44e8:	89 83       	std	Y+1, r24	; 0x01
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	9a 81       	ldd	r25, Y+2	; 0x02
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <CLCD_voidShiftDisplayLeft+0xf6>
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    44f6:	2e 96       	adiw	r28, 0x0e	; 14
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	cf 91       	pop	r28
    4504:	df 91       	pop	r29
    4506:	08 95       	ret

00004508 <BUZ_vInit>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vInit(BUZ_config BUZ_Configuration)
{
    4508:	df 93       	push	r29
    450a:	cf 93       	push	r28
    450c:	00 d0       	rcall	.+0      	; 0x450e <BUZ_vInit+0x6>
    450e:	0f 92       	push	r0
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	69 83       	std	Y+1, r22	; 0x01
    4516:	7a 83       	std	Y+2, r23	; 0x02
    4518:	8b 83       	std	Y+3, r24	; 0x03

  DIO_enumSetPinDir(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	9a 81       	ldd	r25, Y+2	; 0x02
    451e:	69 2f       	mov	r22, r25
    4520:	41 e0       	ldi	r20, 0x01	; 1
    4522:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
}
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	cf 91       	pop	r28
    452e:	df 91       	pop	r29
    4530:	08 95       	ret

00004532 <BUZ_vOn>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOn(BUZ_config BUZ_Configuration)
{
    4532:	df 93       	push	r29
    4534:	cf 93       	push	r28
    4536:	00 d0       	rcall	.+0      	; 0x4538 <BUZ_vOn+0x6>
    4538:	0f 92       	push	r0
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    453e:	69 83       	std	Y+1, r22	; 0x01
    4540:	7a 83       	std	Y+2, r23	; 0x02
    4542:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    4544:	8b 81       	ldd	r24, Y+3	; 0x03
    4546:	81 30       	cpi	r24, 0x01	; 1
    4548:	39 f4       	brne	.+14     	; 0x4558 <BUZ_vOn+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	9a 81       	ldd	r25, Y+2	; 0x02
    454e:	69 2f       	mov	r22, r25
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    4556:	09 c0       	rjmp	.+18     	; 0x456a <BUZ_vOn+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	88 23       	and	r24, r24
    455c:	31 f4       	brne	.+12     	; 0x456a <BUZ_vOn+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_PIN_OUTPUT);
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	9a 81       	ldd	r25, Y+2	; 0x02
    4562:	69 2f       	mov	r22, r25
    4564:	41 e0       	ldi	r20, 0x01	; 1
    4566:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  }
}
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <BUZ_vOff>:
* Parameters :
             => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vOff(BUZ_config BUZ_Configuration)
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	00 d0       	rcall	.+0      	; 0x457c <BUZ_vOff+0x6>
    457c:	0f 92       	push	r0
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
    4582:	69 83       	std	Y+1, r22	; 0x01
    4584:	7a 83       	std	Y+2, r23	; 0x02
    4586:	8b 83       	std	Y+3, r24	; 0x03

  if (BUZ_Configuration.ActiveState == ACTIVE_HIGH)
    4588:	8b 81       	ldd	r24, Y+3	; 0x03
    458a:	81 30       	cpi	r24, 0x01	; 1
    458c:	39 f4       	brne	.+14     	; 0x459c <BUZ_vOff+0x26>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_LOW);
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	9a 81       	ldd	r25, Y+2	; 0x02
    4592:	69 2f       	mov	r22, r25
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    459a:	09 c0       	rjmp	.+18     	; 0x45ae <BUZ_vOff+0x38>
  }
  else if (BUZ_Configuration.ActiveState == ACTIVE_LOW)
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	88 23       	and	r24, r24
    45a0:	31 f4       	brne	.+12     	; 0x45ae <BUZ_vOff+0x38>
  {

	  DIO_enumWritePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber, DIO_HIGH);
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	9a 81       	ldd	r25, Y+2	; 0x02
    45a6:	69 2f       	mov	r22, r25
    45a8:	41 e0       	ldi	r20, 0x01	; 1
    45aa:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  }
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	cf 91       	pop	r28
    45b6:	df 91       	pop	r29
    45b8:	08 95       	ret

000045ba <BUZ_vTog>:
* Parameters :
            => struct has the BUZ porn , pin , status
* return : void
*/
void BUZ_vTog(BUZ_config BUZ_Configuration)
{
    45ba:	df 93       	push	r29
    45bc:	cf 93       	push	r28
    45be:	00 d0       	rcall	.+0      	; 0x45c0 <BUZ_vTog+0x6>
    45c0:	0f 92       	push	r0
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
    45c6:	69 83       	std	Y+1, r22	; 0x01
    45c8:	7a 83       	std	Y+2, r23	; 0x02
    45ca:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinVal(BUZ_Configuration.PortName, BUZ_Configuration.PinNumber);
    45cc:	89 81       	ldd	r24, Y+1	; 0x01
    45ce:	9a 81       	ldd	r25, Y+2	; 0x02
    45d0:	69 2f       	mov	r22, r25
    45d2:	0e 94 29 10 	call	0x2052	; 0x2052 <DIO_enumTogglePinVal>
}
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	cf 91       	pop	r28
    45de:	df 91       	pop	r29
    45e0:	08 95       	ret

000045e2 <SSD_vInitDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_vInitDataPort(SSD_config Configuration)
{
    45e2:	df 93       	push	r29
    45e4:	cf 93       	push	r28
    45e6:	00 d0       	rcall	.+0      	; 0x45e8 <SSD_vInitDataPort+0x6>
    45e8:	00 d0       	rcall	.+0      	; 0x45ea <SSD_vInitDataPort+0x8>
    45ea:	0f 92       	push	r0
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	49 83       	std	Y+1, r20	; 0x01
    45f2:	5a 83       	std	Y+2, r21	; 0x02
    45f4:	6b 83       	std	Y+3, r22	; 0x03
    45f6:	7c 83       	std	Y+4, r23	; 0x04
    45f8:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    45fa:	8d 81       	ldd	r24, Y+5	; 0x05
    45fc:	88 23       	and	r24, r24
    45fe:	29 f4       	brne	.+10     	; 0x460a <SSD_vInitDataPort+0x28>
  {
    DIO_vSetLowNibbleDir(Configuration.DataPort, 0x0F);
    4600:	8a 81       	ldd	r24, Y+2	; 0x02
    4602:	6f e0       	ldi	r22, 0x0F	; 15
    4604:	0e 94 53 14 	call	0x28a6	; 0x28a6 <DIO_vSetLowNibbleDir>
    4608:	07 c0       	rjmp	.+14     	; 0x4618 <SSD_vInitDataPort+0x36>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    460a:	8d 81       	ldd	r24, Y+5	; 0x05
    460c:	81 30       	cpi	r24, 0x01	; 1
    460e:	21 f4       	brne	.+8      	; 0x4618 <SSD_vInitDataPort+0x36>
  {
    DIO_vSetHighNibbleDir(Configuration.DataPort, 0xF0);
    4610:	8a 81       	ldd	r24, Y+2	; 0x02
    4612:	60 ef       	ldi	r22, 0xF0	; 240
    4614:	0e 94 ce 14 	call	0x299c	; 0x299c <DIO_vSetHighNibbleDir>
  }
}
    4618:	0f 90       	pop	r0
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	08 95       	ret

00004628 <SSD_vSendNumber>:
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vSendNumber(SSD_config Configuration, u8 Copy_u8Number)
{
    4628:	df 93       	push	r29
    462a:	cf 93       	push	r28
    462c:	00 d0       	rcall	.+0      	; 0x462e <SSD_vSendNumber+0x6>
    462e:	00 d0       	rcall	.+0      	; 0x4630 <SSD_vSendNumber+0x8>
    4630:	00 d0       	rcall	.+0      	; 0x4632 <SSD_vSendNumber+0xa>
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
    4636:	49 83       	std	Y+1, r20	; 0x01
    4638:	5a 83       	std	Y+2, r21	; 0x02
    463a:	6b 83       	std	Y+3, r22	; 0x03
    463c:	7c 83       	std	Y+4, r23	; 0x04
    463e:	8d 83       	std	Y+5, r24	; 0x05
    4640:	2e 83       	std	Y+6, r18	; 0x06
  if (Configuration.Nibble == SSD_LOW_NIBBLE)
    4642:	8d 81       	ldd	r24, Y+5	; 0x05
    4644:	88 23       	and	r24, r24
    4646:	29 f4       	brne	.+10     	; 0x4652 <SSD_vSendNumber+0x2a>
  {
    DIO_vWriteLowNibble(Configuration.DataPort, Copy_u8Number);
    4648:	8a 81       	ldd	r24, Y+2	; 0x02
    464a:	6e 81       	ldd	r22, Y+6	; 0x06
    464c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <DIO_vWriteLowNibble>
    4650:	07 c0       	rjmp	.+14     	; 0x4660 <SSD_vSendNumber+0x38>
  }
  else if (Configuration.Nibble == SSD_HIGH_NIBBLE)
    4652:	8d 81       	ldd	r24, Y+5	; 0x05
    4654:	81 30       	cpi	r24, 0x01	; 1
    4656:	21 f4       	brne	.+8      	; 0x4660 <SSD_vSendNumber+0x38>
  {
    DIO_vWriteHighNibble(Configuration.DataPort, Copy_u8Number);
    4658:	8a 81       	ldd	r24, Y+2	; 0x02
    465a:	6e 81       	ldd	r22, Y+6	; 0x06
    465c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <DIO_vWriteHighNibble>
  }
}
    4660:	26 96       	adiw	r28, 0x06	; 6
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	f8 94       	cli
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	cf 91       	pop	r28
    466e:	df 91       	pop	r29
    4670:	08 95       	ret

00004672 <SSD_vEnable>:
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vEnable(SSD_config Configuration)
{
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	00 d0       	rcall	.+0      	; 0x4678 <SSD_vEnable+0x6>
    4678:	00 d0       	rcall	.+0      	; 0x467a <SSD_vEnable+0x8>
    467a:	0f 92       	push	r0
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	49 83       	std	Y+1, r20	; 0x01
    4682:	5a 83       	std	Y+2, r21	; 0x02
    4684:	6b 83       	std	Y+3, r22	; 0x03
    4686:	7c 83       	std	Y+4, r23	; 0x04
    4688:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	88 23       	and	r24, r24
    468e:	69 f4       	brne	.+26     	; 0x46aa <SSD_vEnable+0x38>
  {
    DIO_enumSetPinDir   (Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	9c 81       	ldd	r25, Y+4	; 0x04
    4694:	69 2f       	mov	r22, r25
    4696:	41 e0       	ldi	r20, 0x01	; 1
    4698:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
    DIO_enumWritePinVal (Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	9c 81       	ldd	r25, Y+4	; 0x04
    46a0:	69 2f       	mov	r22, r25
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    46a8:	0f c0       	rjmp	.+30     	; 0x46c8 <SSD_vEnable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	81 30       	cpi	r24, 0x01	; 1
    46ae:	61 f4       	brne	.+24     	; 0x46c8 <SSD_vEnable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    46b0:	8b 81       	ldd	r24, Y+3	; 0x03
    46b2:	9c 81       	ldd	r25, Y+4	; 0x04
    46b4:	69 2f       	mov	r22, r25
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    46bc:	8b 81       	ldd	r24, Y+3	; 0x03
    46be:	9c 81       	ldd	r25, Y+4	; 0x04
    46c0:	69 2f       	mov	r22, r25
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  }
}
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	0f 90       	pop	r0
    46d0:	0f 90       	pop	r0
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <SSD_vDisable>:
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_vDisable(SSD_config Configuration)
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	00 d0       	rcall	.+0      	; 0x46de <SSD_vDisable+0x6>
    46de:	00 d0       	rcall	.+0      	; 0x46e0 <SSD_vDisable+0x8>
    46e0:	0f 92       	push	r0
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	49 83       	std	Y+1, r20	; 0x01
    46e8:	5a 83       	std	Y+2, r21	; 0x02
    46ea:	6b 83       	std	Y+3, r22	; 0x03
    46ec:	7c 83       	std	Y+4, r23	; 0x04
    46ee:	8d 83       	std	Y+5, r24	; 0x05
  if (Configuration.Type == SSD_COMMON_CATHODE)
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	88 23       	and	r24, r24
    46f4:	69 f4       	brne	.+26     	; 0x4710 <SSD_vDisable+0x38>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    46f6:	8b 81       	ldd	r24, Y+3	; 0x03
    46f8:	9c 81       	ldd	r25, Y+4	; 0x04
    46fa:	69 2f       	mov	r22, r25
    46fc:	41 e0       	ldi	r20, 0x01	; 1
    46fe:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4702:	8b 81       	ldd	r24, Y+3	; 0x03
    4704:	9c 81       	ldd	r25, Y+4	; 0x04
    4706:	69 2f       	mov	r22, r25
    4708:	41 e0       	ldi	r20, 0x01	; 1
    470a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
    470e:	0f c0       	rjmp	.+30     	; 0x472e <SSD_vDisable+0x56>
  }
  else if (Configuration.Type == SSD_COMMON_ANODE)
    4710:	89 81       	ldd	r24, Y+1	; 0x01
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	61 f4       	brne	.+24     	; 0x472e <SSD_vDisable+0x56>
  {
    DIO_enumSetPinDir(Configuration.EnablePort, Configuration.EnablePin, DIO_HIGH);
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	9c 81       	ldd	r25, Y+4	; 0x04
    471a:	69 2f       	mov	r22, r25
    471c:	41 e0       	ldi	r20, 0x01	; 1
    471e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
    DIO_enumWritePinVal(Configuration.EnablePort, Configuration.EnablePin, DIO_LOW);
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	9c 81       	ldd	r25, Y+4	; 0x04
    4726:	69 2f       	mov	r22, r25
    4728:	40 e0       	ldi	r20, 0x00	; 0
    472a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  }
}
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	cf 91       	pop	r28
    473a:	df 91       	pop	r29
    473c:	08 95       	ret

0000473e <main>:
void ISR_TIMER2_OVF_MODE             (void);

//======================================================================================================================================//

void main(void)
{
    473e:	0f 93       	push	r16
    4740:	1f 93       	push	r17
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	c8 5c       	subi	r28, 0xC8	; 200
    474c:	d0 40       	sbci	r29, 0x00	; 0
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	cd bf       	out	0x3d, r28	; 61
  /* Configure AM/PM indicator pin as output */
  DIO_enumSetPinDir  (DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT        );
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	63 e0       	ldi	r22, 0x03	; 3
    475c:	41 e0       	ldi	r20, 0x01	; 1
    475e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>
  DIO_enumWritePinVal(DIO_PORTA, DIO_PIN3, DIO_HIGH              );
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	63 e0       	ldi	r22, 0x03	; 3
    4766:	41 e0       	ldi	r20, 0x01	; 1
    4768:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumWritePinVal>
  /* To sure that ISR execute each 1 sec */
  DIO_enumSetPinDir  (DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT        );
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	62 e0       	ldi	r22, 0x02	; 2
    4770:	41 e0       	ldi	r20, 0x01	; 1
    4772:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinDir>

  // Set callback function for TIMER2 overflow interrup
  TIMER_u8SetCallBack(ISR_TIMER2_OVF_MODE, TIMER2_OVF_VECTOR_ID);
    4776:	8a e1       	ldi	r24, 0x1A	; 26
    4778:	9c e3       	ldi	r25, 0x3C	; 60
    477a:	65 e0       	ldi	r22, 0x05	; 5
    477c:	0e 94 6d 0b 	call	0x16da	; 0x16da <TIMER_u8SetCallBack>

  /* Initialize Keypad on PORTD */
  KPD_vInit();
    4780:	0e 94 a9 19 	call	0x3352	; 0x3352 <KPD_vInit>

  /* Initialize CLCD on High Nibble for PORTA */
  CLCD_vInit();
    4784:	0e 94 b2 1a 	call	0x3564	; 0x3564 <CLCD_vInit>

  /* Enable Global Interrupts */
  GIE_vEnable();
    4788:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <GIE_vEnable>

  /* Initialize BUZ on PIN4 for PORTB */
  BUZ_vInit(BUZ0);
    478c:	60 91 77 03 	lds	r22, 0x0377
    4790:	70 91 78 03 	lds	r23, 0x0378
    4794:	80 91 79 03 	lds	r24, 0x0379
    4798:	0e 94 84 22 	call	0x4508	; 0x4508 <BUZ_vInit>

  /* Initialize seven-segment displays */
  SSD_vInitDataPort(seven_seg0);
    479c:	40 91 56 03 	lds	r20, 0x0356
    47a0:	50 91 57 03 	lds	r21, 0x0357
    47a4:	60 91 58 03 	lds	r22, 0x0358
    47a8:	70 91 59 03 	lds	r23, 0x0359
    47ac:	80 91 5a 03 	lds	r24, 0x035A
    47b0:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>
  SSD_vInitDataPort(seven_seg1);
    47b4:	40 91 5b 03 	lds	r20, 0x035B
    47b8:	50 91 5c 03 	lds	r21, 0x035C
    47bc:	60 91 5d 03 	lds	r22, 0x035D
    47c0:	70 91 5e 03 	lds	r23, 0x035E
    47c4:	80 91 5f 03 	lds	r24, 0x035F
    47c8:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>
  SSD_vInitDataPort(seven_seg2);
    47cc:	40 91 60 03 	lds	r20, 0x0360
    47d0:	50 91 61 03 	lds	r21, 0x0361
    47d4:	60 91 62 03 	lds	r22, 0x0362
    47d8:	70 91 63 03 	lds	r23, 0x0363
    47dc:	80 91 64 03 	lds	r24, 0x0364
    47e0:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>
  SSD_vInitDataPort(seven_seg3);
    47e4:	40 91 65 03 	lds	r20, 0x0365
    47e8:	50 91 66 03 	lds	r21, 0x0366
    47ec:	60 91 67 03 	lds	r22, 0x0367
    47f0:	70 91 68 03 	lds	r23, 0x0368
    47f4:	80 91 69 03 	lds	r24, 0x0369
    47f8:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>
  SSD_vInitDataPort(seven_seg4);
    47fc:	40 91 6a 03 	lds	r20, 0x036A
    4800:	50 91 6b 03 	lds	r21, 0x036B
    4804:	60 91 6c 03 	lds	r22, 0x036C
    4808:	70 91 6d 03 	lds	r23, 0x036D
    480c:	80 91 6e 03 	lds	r24, 0x036E
    4810:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>
  SSD_vInitDataPort(seven_seg5);
    4814:	40 91 6f 03 	lds	r20, 0x036F
    4818:	50 91 70 03 	lds	r21, 0x0370
    481c:	60 91 71 03 	lds	r22, 0x0371
    4820:	70 91 72 03 	lds	r23, 0x0372
    4824:	80 91 73 03 	lds	r24, 0x0373
    4828:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <SSD_vInitDataPort>

  /*
   * Initialize TIMER2 with external clock at 32.768 KHz
   * Using division factor 128 to achieve 1 second intervals
   */
  TIMER2_vInit();
    482c:	0e 94 c1 09 	call	0x1382	; 0x1382 <TIMER2_vInit>

  /* Initialize ADC for temperature sensor */
  ADC_vInit();
    4830:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <ADC_vInit>

  CLCD_vSendString("Press ON to");
    4834:	80 e6       	ldi	r24, 0x60	; 96
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    483c:	82 e0       	ldi	r24, 0x02	; 2
    483e:	61 e0       	ldi	r22, 0x01	; 1
    4840:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("Show Option");
    4844:	8c e6       	ldi	r24, 0x6C	; 108
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  while (1)
  {
    KPD_Press = KPD_u8GetPressed();
    484c:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    4850:	80 93 9a 03 	sts	0x039A, r24
    if (KPD_Press == 'A')
    4854:	80 91 9a 03 	lds	r24, 0x039A
    4858:	81 34       	cpi	r24, 0x41	; 65
    485a:	09 f0       	breq	.+2      	; 0x485e <main+0x120>
    485c:	70 c1       	rjmp	.+736    	; 0x4b3e <main+0x400>
    {
      // Display menu options on CLCD
      CLCD_vClearScreen();
    485e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("1 - Set time");
    4862:	88 e7       	ldi	r24, 0x78	; 120
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    486a:	82 e0       	ldi	r24, 0x02	; 2
    486c:	61 e0       	ldi	r22, 0x01	; 1
    486e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - Select mode");
    4872:	85 e8       	ldi	r24, 0x85	; 133
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(3, 1);
    487a:	83 e0       	ldi	r24, 0x03	; 3
    487c:	61 e0       	ldi	r22, 0x01	; 1
    487e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("3 - Set Alarm");
    4882:	85 e9       	ldi	r24, 0x95	; 149
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 1);
    488a:	84 e0       	ldi	r24, 0x04	; 4
    488c:	61 e0       	ldi	r22, 0x01	; 1
    488e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("4 - Weather");
    4892:	83 ea       	ldi	r24, 0xA3	; 163
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 15);
    489a:	84 e0       	ldi	r24, 0x04	; 4
    489c:	6f e0       	ldi	r22, 0x0F	; 15
    489e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("X:EXIT");
    48a2:	8f ea       	ldi	r24, 0xAF	; 175
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>

      do
      {
        KPD_Press = KPD_u8GetPressed();
    48aa:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    48ae:	80 93 9a 03 	sts	0x039A, r24
        if (KPD_Press != NOTPRESSED)
    48b2:	80 91 9a 03 	lds	r24, 0x039A
    48b6:	8f 3f       	cpi	r24, 0xFF	; 255
    48b8:	09 f4       	brne	.+2      	; 0x48bc <main+0x17e>
    48ba:	3c c1       	rjmp	.+632    	; 0x4b34 <main+0x3f6>
        {
          // Perform actions based on the pressed key
          switch (KPD_Press)
    48bc:	80 91 9a 03 	lds	r24, 0x039A
    48c0:	28 2f       	mov	r18, r24
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	c9 53       	subi	r28, 0x39	; 57
    48c6:	df 4f       	sbci	r29, 0xFF	; 255
    48c8:	39 83       	std	Y+1, r19	; 0x01
    48ca:	28 83       	st	Y, r18
    48cc:	c7 5c       	subi	r28, 0xC7	; 199
    48ce:	d0 40       	sbci	r29, 0x00	; 0
    48d0:	c9 53       	subi	r28, 0x39	; 57
    48d2:	df 4f       	sbci	r29, 0xFF	; 255
    48d4:	88 81       	ld	r24, Y
    48d6:	99 81       	ldd	r25, Y+1	; 0x01
    48d8:	c7 5c       	subi	r28, 0xC7	; 199
    48da:	d0 40       	sbci	r29, 0x00	; 0
    48dc:	82 33       	cpi	r24, 0x32	; 50
    48de:	91 05       	cpc	r25, r1
    48e0:	91 f1       	breq	.+100    	; 0x4946 <main+0x208>
    48e2:	c9 53       	subi	r28, 0x39	; 57
    48e4:	df 4f       	sbci	r29, 0xFF	; 255
    48e6:	e8 81       	ld	r30, Y
    48e8:	f9 81       	ldd	r31, Y+1	; 0x01
    48ea:	c7 5c       	subi	r28, 0xC7	; 199
    48ec:	d0 40       	sbci	r29, 0x00	; 0
    48ee:	e3 33       	cpi	r30, 0x33	; 51
    48f0:	f1 05       	cpc	r31, r1
    48f2:	9c f4       	brge	.+38     	; 0x491a <main+0x1dc>
    48f4:	c9 53       	subi	r28, 0x39	; 57
    48f6:	df 4f       	sbci	r29, 0xFF	; 255
    48f8:	28 81       	ld	r18, Y
    48fa:	39 81       	ldd	r19, Y+1	; 0x01
    48fc:	c7 5c       	subi	r28, 0xC7	; 199
    48fe:	d0 40       	sbci	r29, 0x00	; 0
    4900:	2a 32       	cpi	r18, 0x2A	; 42
    4902:	31 05       	cpc	r19, r1
    4904:	49 f1       	breq	.+82     	; 0x4958 <main+0x21a>
    4906:	c9 53       	subi	r28, 0x39	; 57
    4908:	df 4f       	sbci	r29, 0xFF	; 255
    490a:	88 81       	ld	r24, Y
    490c:	99 81       	ldd	r25, Y+1	; 0x01
    490e:	c7 5c       	subi	r28, 0xC7	; 199
    4910:	d0 40       	sbci	r29, 0x00	; 0
    4912:	81 33       	cpi	r24, 0x31	; 49
    4914:	91 05       	cpc	r25, r1
    4916:	a1 f0       	breq	.+40     	; 0x4940 <main+0x202>
    4918:	2e c0       	rjmp	.+92     	; 0x4976 <main+0x238>
    491a:	c9 53       	subi	r28, 0x39	; 57
    491c:	df 4f       	sbci	r29, 0xFF	; 255
    491e:	e8 81       	ld	r30, Y
    4920:	f9 81       	ldd	r31, Y+1	; 0x01
    4922:	c7 5c       	subi	r28, 0xC7	; 199
    4924:	d0 40       	sbci	r29, 0x00	; 0
    4926:	e3 33       	cpi	r30, 0x33	; 51
    4928:	f1 05       	cpc	r31, r1
    492a:	81 f0       	breq	.+32     	; 0x494c <main+0x20e>
    492c:	c9 53       	subi	r28, 0x39	; 57
    492e:	df 4f       	sbci	r29, 0xFF	; 255
    4930:	28 81       	ld	r18, Y
    4932:	39 81       	ldd	r19, Y+1	; 0x01
    4934:	c7 5c       	subi	r28, 0xC7	; 199
    4936:	d0 40       	sbci	r29, 0x00	; 0
    4938:	24 33       	cpi	r18, 0x34	; 52
    493a:	31 05       	cpc	r19, r1
    493c:	51 f0       	breq	.+20     	; 0x4952 <main+0x214>
    493e:	1b c0       	rjmp	.+54     	; 0x4976 <main+0x238>
          {
          case '1':
            Set_Time();
    4940:	0e 94 5f 30 	call	0x60be	; 0x60be <Set_Time>
    4944:	f7 c0       	rjmp	.+494    	; 0x4b34 <main+0x3f6>
            break;

          case '2':
            Select_Mode();
    4946:	0e 94 f5 34 	call	0x69ea	; 0x69ea <Select_Mode>
    494a:	f4 c0       	rjmp	.+488    	; 0x4b34 <main+0x3f6>
            break;

          case '3':
            Set_Alarm();
    494c:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <Set_Alarm>
    4950:	f1 c0       	rjmp	.+482    	; 0x4b34 <main+0x3f6>
            break;

          case '4':
            Get_Temp();
    4952:	0e 94 09 3b 	call	0x7612	; 0x7612 <Get_Temp>
    4956:	ee c0       	rjmp	.+476    	; 0x4b34 <main+0x3f6>
            break;

          case '*':
            CLCD_vClearScreen();
    4958:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
            CLCD_vSendString("Press ON to");
    495c:	80 e6       	ldi	r24, 0x60	; 96
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            CLCD_vSetPosition(2, 1);
    4964:	82 e0       	ldi	r24, 0x02	; 2
    4966:	61 e0       	ldi	r22, 0x01	; 1
    4968:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
            CLCD_vSendString("Show Option");
    496c:	8c e6       	ldi	r24, 0x6C	; 108
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    4974:	df c0       	rjmp	.+446    	; 0x4b34 <main+0x3f6>
            break;

          default:
            // Invalid choice handling
            CLCD_vClearScreen();
    4976:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
            CLCD_vSendString("wrong choice");
    497a:	86 eb       	ldi	r24, 0xB6	; 182
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    4982:	fe 01       	movw	r30, r28
    4984:	ef 53       	subi	r30, 0x3F	; 63
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	aa ef       	ldi	r26, 0xFA	; 250
    498e:	b3 e4       	ldi	r27, 0x43	; 67
    4990:	80 83       	st	Z, r24
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	a2 83       	std	Z+2, r26	; 0x02
    4996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4998:	8e 01       	movw	r16, r28
    499a:	03 54       	subi	r16, 0x43	; 67
    499c:	1f 4f       	sbci	r17, 0xFF	; 255
    499e:	fe 01       	movw	r30, r28
    49a0:	ef 53       	subi	r30, 0x3F	; 63
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	60 81       	ld	r22, Z
    49a6:	71 81       	ldd	r23, Z+1	; 0x01
    49a8:	82 81       	ldd	r24, Z+2	; 0x02
    49aa:	93 81       	ldd	r25, Z+3	; 0x03
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	4a ef       	ldi	r20, 0xFA	; 250
    49b2:	54 e4       	ldi	r21, 0x44	; 68
    49b4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	f8 01       	movw	r30, r16
    49be:	80 83       	st	Z, r24
    49c0:	91 83       	std	Z+1, r25	; 0x01
    49c2:	a2 83       	std	Z+2, r26	; 0x02
    49c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49c6:	fe 01       	movw	r30, r28
    49c8:	e3 54       	subi	r30, 0x43	; 67
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	60 81       	ld	r22, Z
    49ce:	71 81       	ldd	r23, Z+1	; 0x01
    49d0:	82 81       	ldd	r24, Z+2	; 0x02
    49d2:	93 81       	ldd	r25, Z+3	; 0x03
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	40 e8       	ldi	r20, 0x80	; 128
    49da:	5f e3       	ldi	r21, 0x3F	; 63
    49dc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    49e0:	88 23       	and	r24, r24
    49e2:	44 f4       	brge	.+16     	; 0x49f4 <main+0x2b6>
		__ticks = 1;
    49e4:	fe 01       	movw	r30, r28
    49e6:	e5 54       	subi	r30, 0x45	; 69
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	80 83       	st	Z, r24
    49f2:	64 c0       	rjmp	.+200    	; 0x4abc <main+0x37e>
	else if (__tmp > 65535)
    49f4:	fe 01       	movw	r30, r28
    49f6:	e3 54       	subi	r30, 0x43	; 67
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	60 81       	ld	r22, Z
    49fc:	71 81       	ldd	r23, Z+1	; 0x01
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	3f ef       	ldi	r19, 0xFF	; 255
    4a06:	4f e7       	ldi	r20, 0x7F	; 127
    4a08:	57 e4       	ldi	r21, 0x47	; 71
    4a0a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4a0e:	18 16       	cp	r1, r24
    4a10:	0c f0       	brlt	.+2      	; 0x4a14 <main+0x2d6>
    4a12:	43 c0       	rjmp	.+134    	; 0x4a9a <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a14:	fe 01       	movw	r30, r28
    4a16:	ef 53       	subi	r30, 0x3F	; 63
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	93 81       	ldd	r25, Z+3	; 0x03
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	40 e2       	ldi	r20, 0x20	; 32
    4a28:	51 e4       	ldi	r21, 0x41	; 65
    4a2a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	8e 01       	movw	r16, r28
    4a34:	05 54       	subi	r16, 0x45	; 69
    4a36:	1f 4f       	sbci	r17, 0xFF	; 255
    4a38:	bc 01       	movw	r22, r24
    4a3a:	cd 01       	movw	r24, r26
    4a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	f8 01       	movw	r30, r16
    4a46:	91 83       	std	Z+1, r25	; 0x01
    4a48:	80 83       	st	Z, r24
    4a4a:	1f c0       	rjmp	.+62     	; 0x4a8a <main+0x34c>
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e7 54       	subi	r30, 0x47	; 71
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	88 ec       	ldi	r24, 0xC8	; 200
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	91 83       	std	Z+1, r25	; 0x01
    4a58:	80 83       	st	Z, r24
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e7 54       	subi	r30, 0x47	; 71
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	80 81       	ld	r24, Z
    4a62:	91 81       	ldd	r25, Z+1	; 0x01
    4a64:	01 97       	sbiw	r24, 0x01	; 1
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <main+0x326>
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e7 54       	subi	r30, 0x47	; 71
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	91 83       	std	Z+1, r25	; 0x01
    4a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a72:	de 01       	movw	r26, r28
    4a74:	a5 54       	subi	r26, 0x45	; 69
    4a76:	bf 4f       	sbci	r27, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	e5 54       	subi	r30, 0x45	; 69
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	11 96       	adiw	r26, 0x01	; 1
    4a86:	9c 93       	st	X, r25
    4a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e5 54       	subi	r30, 0x45	; 69
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	80 81       	ld	r24, Z
    4a92:	91 81       	ldd	r25, Z+1	; 0x01
    4a94:	00 97       	sbiw	r24, 0x00	; 0
    4a96:	d1 f6       	brne	.-76     	; 0x4a4c <main+0x30e>
    4a98:	27 c0       	rjmp	.+78     	; 0x4ae8 <main+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a9a:	8e 01       	movw	r16, r28
    4a9c:	05 54       	subi	r16, 0x45	; 69
    4a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e3 54       	subi	r30, 0x43	; 67
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	60 81       	ld	r22, Z
    4aa8:	71 81       	ldd	r23, Z+1	; 0x01
    4aaa:	82 81       	ldd	r24, Z+2	; 0x02
    4aac:	93 81       	ldd	r25, Z+3	; 0x03
    4aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	f8 01       	movw	r30, r16
    4ab8:	91 83       	std	Z+1, r25	; 0x01
    4aba:	80 83       	st	Z, r24
    4abc:	de 01       	movw	r26, r28
    4abe:	a9 54       	subi	r26, 0x49	; 73
    4ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	e5 54       	subi	r30, 0x45	; 69
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 81       	ld	r24, Z
    4aca:	91 81       	ldd	r25, Z+1	; 0x01
    4acc:	8d 93       	st	X+, r24
    4ace:	9c 93       	st	X, r25
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e9 54       	subi	r30, 0x49	; 73
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <main+0x39c>
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e9 54       	subi	r30, 0x49	; 73
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	80 83       	st	Z, r24
            _delay_ms(500);
            CLCD_vClearScreen();
    4ae8:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
            CLCD_vSendString("1 - set time");
    4aec:	83 ec       	ldi	r24, 0xC3	; 195
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            CLCD_vSetPosition(2, 1);
    4af4:	82 e0       	ldi	r24, 0x02	; 2
    4af6:	61 e0       	ldi	r22, 0x01	; 1
    4af8:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
            CLCD_vSendString("2 - select mode");
    4afc:	80 ed       	ldi	r24, 0xD0	; 208
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            CLCD_vSetPosition(3, 1);
    4b04:	83 e0       	ldi	r24, 0x03	; 3
    4b06:	61 e0       	ldi	r22, 0x01	; 1
    4b08:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
            CLCD_vSendString("3 - Set Alarm");
    4b0c:	85 e9       	ldi	r24, 0x95	; 149
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            CLCD_vSetPosition(4, 1);
    4b14:	84 e0       	ldi	r24, 0x04	; 4
    4b16:	61 e0       	ldi	r22, 0x01	; 1
    4b18:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
            CLCD_vSendString("4 - Weather");
    4b1c:	83 ea       	ldi	r24, 0xA3	; 163
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            CLCD_vSetPosition(4, 15);
    4b24:	84 e0       	ldi	r24, 0x04	; 4
    4b26:	6f e0       	ldi	r22, 0x0F	; 15
    4b28:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
            CLCD_vSendString("X:EXIT");
    4b2c:	8f ea       	ldi	r24, 0xAF	; 175
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            break;
          }
        }
      } while (KPD_Press != '*');
    4b34:	80 91 9a 03 	lds	r24, 0x039A
    4b38:	8a 32       	cpi	r24, 0x2A	; 42
    4b3a:	09 f0       	breq	.+2      	; 0x4b3e <main+0x400>
    4b3c:	b6 ce       	rjmp	.-660    	; 0x48aa <main+0x16c>
    }
    /* Display time on seven-segment displays using POV theorem */

    // Display seconds (units)
    SSD_vDisable(seven_seg5);
    4b3e:	40 91 6f 03 	lds	r20, 0x036F
    4b42:	50 91 70 03 	lds	r21, 0x0370
    4b46:	60 91 71 03 	lds	r22, 0x0371
    4b4a:	70 91 72 03 	lds	r23, 0x0372
    4b4e:	80 91 73 03 	lds	r24, 0x0373
    4b52:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg0);
    4b56:	40 91 56 03 	lds	r20, 0x0356
    4b5a:	50 91 57 03 	lds	r21, 0x0357
    4b5e:	60 91 58 03 	lds	r22, 0x0358
    4b62:	70 91 59 03 	lds	r23, 0x0359
    4b66:	80 91 5a 03 	lds	r24, 0x035A
    4b6a:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg0, Time_Second % 10);
    4b6e:	80 91 97 03 	lds	r24, 0x0397
    4b72:	9a e0       	ldi	r25, 0x0A	; 10
    4b74:	69 2f       	mov	r22, r25
    4b76:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    4b7a:	89 2f       	mov	r24, r25
    4b7c:	98 2f       	mov	r25, r24
    4b7e:	40 91 56 03 	lds	r20, 0x0356
    4b82:	50 91 57 03 	lds	r21, 0x0357
    4b86:	60 91 58 03 	lds	r22, 0x0358
    4b8a:	70 91 59 03 	lds	r23, 0x0359
    4b8e:	80 91 5a 03 	lds	r24, 0x035A
    4b92:	29 2f       	mov	r18, r25
    4b94:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    4b98:	fe 01       	movw	r30, r28
    4b9a:	ed 54       	subi	r30, 0x4D	; 77
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	80 e0       	ldi	r24, 0x00	; 0
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	a0 ea       	ldi	r26, 0xA0	; 160
    4ba4:	b0 e4       	ldi	r27, 0x40	; 64
    4ba6:	80 83       	st	Z, r24
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	a2 83       	std	Z+2, r26	; 0x02
    4bac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bae:	8e 01       	movw	r16, r28
    4bb0:	01 55       	subi	r16, 0x51	; 81
    4bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	ed 54       	subi	r30, 0x4D	; 77
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	60 81       	ld	r22, Z
    4bbc:	71 81       	ldd	r23, Z+1	; 0x01
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	93 81       	ldd	r25, Z+3	; 0x03
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	4a ef       	ldi	r20, 0xFA	; 250
    4bc8:	54 e4       	ldi	r21, 0x44	; 68
    4bca:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	80 83       	st	Z, r24
    4bd6:	91 83       	std	Z+1, r25	; 0x01
    4bd8:	a2 83       	std	Z+2, r26	; 0x02
    4bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bdc:	fe 01       	movw	r30, r28
    4bde:	e1 55       	subi	r30, 0x51	; 81
    4be0:	ff 4f       	sbci	r31, 0xFF	; 255
    4be2:	60 81       	ld	r22, Z
    4be4:	71 81       	ldd	r23, Z+1	; 0x01
    4be6:	82 81       	ldd	r24, Z+2	; 0x02
    4be8:	93 81       	ldd	r25, Z+3	; 0x03
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e8       	ldi	r20, 0x80	; 128
    4bf0:	5f e3       	ldi	r21, 0x3F	; 63
    4bf2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4bf6:	88 23       	and	r24, r24
    4bf8:	44 f4       	brge	.+16     	; 0x4c0a <main+0x4cc>
		__ticks = 1;
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e3 55       	subi	r30, 0x53	; 83
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	91 83       	std	Z+1, r25	; 0x01
    4c06:	80 83       	st	Z, r24
    4c08:	64 c0       	rjmp	.+200    	; 0x4cd2 <main+0x594>
	else if (__tmp > 65535)
    4c0a:	fe 01       	movw	r30, r28
    4c0c:	e1 55       	subi	r30, 0x51	; 81
    4c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c10:	60 81       	ld	r22, Z
    4c12:	71 81       	ldd	r23, Z+1	; 0x01
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	3f ef       	ldi	r19, 0xFF	; 255
    4c1c:	4f e7       	ldi	r20, 0x7F	; 127
    4c1e:	57 e4       	ldi	r21, 0x47	; 71
    4c20:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4c24:	18 16       	cp	r1, r24
    4c26:	0c f0       	brlt	.+2      	; 0x4c2a <main+0x4ec>
    4c28:	43 c0       	rjmp	.+134    	; 0x4cb0 <main+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ed 54       	subi	r30, 0x4D	; 77
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	60 81       	ld	r22, Z
    4c32:	71 81       	ldd	r23, Z+1	; 0x01
    4c34:	82 81       	ldd	r24, Z+2	; 0x02
    4c36:	93 81       	ldd	r25, Z+3	; 0x03
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e2       	ldi	r20, 0x20	; 32
    4c3e:	51 e4       	ldi	r21, 0x41	; 65
    4c40:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	8e 01       	movw	r16, r28
    4c4a:	03 55       	subi	r16, 0x53	; 83
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	f8 01       	movw	r30, r16
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
    4c60:	1f c0       	rjmp	.+62     	; 0x4ca0 <main+0x562>
    4c62:	fe 01       	movw	r30, r28
    4c64:	e5 55       	subi	r30, 0x55	; 85
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	88 ec       	ldi	r24, 0xC8	; 200
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	80 83       	st	Z, r24
    4c70:	fe 01       	movw	r30, r28
    4c72:	e5 55       	subi	r30, 0x55	; 85
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	80 81       	ld	r24, Z
    4c78:	91 81       	ldd	r25, Z+1	; 0x01
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <main+0x53c>
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e5 55       	subi	r30, 0x55	; 85
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	91 83       	std	Z+1, r25	; 0x01
    4c86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c88:	de 01       	movw	r26, r28
    4c8a:	a3 55       	subi	r26, 0x53	; 83
    4c8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e3 55       	subi	r30, 0x53	; 83
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 81       	ld	r24, Z
    4c96:	91 81       	ldd	r25, Z+1	; 0x01
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	11 96       	adiw	r26, 0x01	; 1
    4c9c:	9c 93       	st	X, r25
    4c9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ca0:	fe 01       	movw	r30, r28
    4ca2:	e3 55       	subi	r30, 0x53	; 83
    4ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca6:	80 81       	ld	r24, Z
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	00 97       	sbiw	r24, 0x00	; 0
    4cac:	d1 f6       	brne	.-76     	; 0x4c62 <main+0x524>
    4cae:	27 c0       	rjmp	.+78     	; 0x4cfe <main+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cb0:	8e 01       	movw	r16, r28
    4cb2:	03 55       	subi	r16, 0x53	; 83
    4cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e1 55       	subi	r30, 0x51	; 81
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	f8 01       	movw	r30, r16
    4cce:	91 83       	std	Z+1, r25	; 0x01
    4cd0:	80 83       	st	Z, r24
    4cd2:	de 01       	movw	r26, r28
    4cd4:	a7 55       	subi	r26, 0x57	; 87
    4cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd8:	fe 01       	movw	r30, r28
    4cda:	e3 55       	subi	r30, 0x53	; 83
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	80 81       	ld	r24, Z
    4ce0:	91 81       	ldd	r25, Z+1	; 0x01
    4ce2:	8d 93       	st	X+, r24
    4ce4:	9c 93       	st	X, r25
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e7 55       	subi	r30, 0x57	; 87
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	80 81       	ld	r24, Z
    4cee:	91 81       	ldd	r25, Z+1	; 0x01
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	f1 f7       	brne	.-4      	; 0x4cf0 <main+0x5b2>
    4cf4:	fe 01       	movw	r30, r28
    4cf6:	e7 55       	subi	r30, 0x57	; 87
    4cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfa:	91 83       	std	Z+1, r25	; 0x01
    4cfc:	80 83       	st	Z, r24
    _delay_ms(5);

    // Display seconds (tens)
    SSD_vDisable(seven_seg0);
    4cfe:	40 91 56 03 	lds	r20, 0x0356
    4d02:	50 91 57 03 	lds	r21, 0x0357
    4d06:	60 91 58 03 	lds	r22, 0x0358
    4d0a:	70 91 59 03 	lds	r23, 0x0359
    4d0e:	80 91 5a 03 	lds	r24, 0x035A
    4d12:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg1);
    4d16:	40 91 5b 03 	lds	r20, 0x035B
    4d1a:	50 91 5c 03 	lds	r21, 0x035C
    4d1e:	60 91 5d 03 	lds	r22, 0x035D
    4d22:	70 91 5e 03 	lds	r23, 0x035E
    4d26:	80 91 5f 03 	lds	r24, 0x035F
    4d2a:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg1, Time_Second / 10);
    4d2e:	80 91 97 03 	lds	r24, 0x0397
    4d32:	9a e0       	ldi	r25, 0x0A	; 10
    4d34:	69 2f       	mov	r22, r25
    4d36:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    4d3a:	98 2f       	mov	r25, r24
    4d3c:	40 91 5b 03 	lds	r20, 0x035B
    4d40:	50 91 5c 03 	lds	r21, 0x035C
    4d44:	60 91 5d 03 	lds	r22, 0x035D
    4d48:	70 91 5e 03 	lds	r23, 0x035E
    4d4c:	80 91 5f 03 	lds	r24, 0x035F
    4d50:	29 2f       	mov	r18, r25
    4d52:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    4d56:	fe 01       	movw	r30, r28
    4d58:	eb 55       	subi	r30, 0x5B	; 91
    4d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	a0 ea       	ldi	r26, 0xA0	; 160
    4d62:	b0 e4       	ldi	r27, 0x40	; 64
    4d64:	80 83       	st	Z, r24
    4d66:	91 83       	std	Z+1, r25	; 0x01
    4d68:	a2 83       	std	Z+2, r26	; 0x02
    4d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d6c:	8e 01       	movw	r16, r28
    4d6e:	0f 55       	subi	r16, 0x5F	; 95
    4d70:	1f 4f       	sbci	r17, 0xFF	; 255
    4d72:	fe 01       	movw	r30, r28
    4d74:	eb 55       	subi	r30, 0x5B	; 91
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	60 81       	ld	r22, Z
    4d7a:	71 81       	ldd	r23, Z+1	; 0x01
    4d7c:	82 81       	ldd	r24, Z+2	; 0x02
    4d7e:	93 81       	ldd	r25, Z+3	; 0x03
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	4a ef       	ldi	r20, 0xFA	; 250
    4d86:	54 e4       	ldi	r21, 0x44	; 68
    4d88:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	cb 01       	movw	r24, r22
    4d90:	f8 01       	movw	r30, r16
    4d92:	80 83       	st	Z, r24
    4d94:	91 83       	std	Z+1, r25	; 0x01
    4d96:	a2 83       	std	Z+2, r26	; 0x02
    4d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d9a:	fe 01       	movw	r30, r28
    4d9c:	ef 55       	subi	r30, 0x5F	; 95
    4d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4da0:	60 81       	ld	r22, Z
    4da2:	71 81       	ldd	r23, Z+1	; 0x01
    4da4:	82 81       	ldd	r24, Z+2	; 0x02
    4da6:	93 81       	ldd	r25, Z+3	; 0x03
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	40 e8       	ldi	r20, 0x80	; 128
    4dae:	5f e3       	ldi	r21, 0x3F	; 63
    4db0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4db4:	88 23       	and	r24, r24
    4db6:	44 f4       	brge	.+16     	; 0x4dc8 <main+0x68a>
		__ticks = 1;
    4db8:	fe 01       	movw	r30, r28
    4dba:	e1 56       	subi	r30, 0x61	; 97
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	91 83       	std	Z+1, r25	; 0x01
    4dc4:	80 83       	st	Z, r24
    4dc6:	64 c0       	rjmp	.+200    	; 0x4e90 <main+0x752>
	else if (__tmp > 65535)
    4dc8:	fe 01       	movw	r30, r28
    4dca:	ef 55       	subi	r30, 0x5F	; 95
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	60 81       	ld	r22, Z
    4dd0:	71 81       	ldd	r23, Z+1	; 0x01
    4dd2:	82 81       	ldd	r24, Z+2	; 0x02
    4dd4:	93 81       	ldd	r25, Z+3	; 0x03
    4dd6:	20 e0       	ldi	r18, 0x00	; 0
    4dd8:	3f ef       	ldi	r19, 0xFF	; 255
    4dda:	4f e7       	ldi	r20, 0x7F	; 127
    4ddc:	57 e4       	ldi	r21, 0x47	; 71
    4dde:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4de2:	18 16       	cp	r1, r24
    4de4:	0c f0       	brlt	.+2      	; 0x4de8 <main+0x6aa>
    4de6:	43 c0       	rjmp	.+134    	; 0x4e6e <main+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de8:	fe 01       	movw	r30, r28
    4dea:	eb 55       	subi	r30, 0x5B	; 91
    4dec:	ff 4f       	sbci	r31, 0xFF	; 255
    4dee:	60 81       	ld	r22, Z
    4df0:	71 81       	ldd	r23, Z+1	; 0x01
    4df2:	82 81       	ldd	r24, Z+2	; 0x02
    4df4:	93 81       	ldd	r25, Z+3	; 0x03
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	40 e2       	ldi	r20, 0x20	; 32
    4dfc:	51 e4       	ldi	r21, 0x41	; 65
    4dfe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	8e 01       	movw	r16, r28
    4e08:	01 56       	subi	r16, 0x61	; 97
    4e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0c:	bc 01       	movw	r22, r24
    4e0e:	cd 01       	movw	r24, r26
    4e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e14:	dc 01       	movw	r26, r24
    4e16:	cb 01       	movw	r24, r22
    4e18:	f8 01       	movw	r30, r16
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	80 83       	st	Z, r24
    4e1e:	1f c0       	rjmp	.+62     	; 0x4e5e <main+0x720>
    4e20:	fe 01       	movw	r30, r28
    4e22:	e3 56       	subi	r30, 0x63	; 99
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	88 ec       	ldi	r24, 0xC8	; 200
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	91 83       	std	Z+1, r25	; 0x01
    4e2c:	80 83       	st	Z, r24
    4e2e:	fe 01       	movw	r30, r28
    4e30:	e3 56       	subi	r30, 0x63	; 99
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	80 81       	ld	r24, Z
    4e36:	91 81       	ldd	r25, Z+1	; 0x01
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	f1 f7       	brne	.-4      	; 0x4e38 <main+0x6fa>
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	e3 56       	subi	r30, 0x63	; 99
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	91 83       	std	Z+1, r25	; 0x01
    4e44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e46:	de 01       	movw	r26, r28
    4e48:	a1 56       	subi	r26, 0x61	; 97
    4e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e1 56       	subi	r30, 0x61	; 97
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	01 97       	sbiw	r24, 0x01	; 1
    4e58:	11 96       	adiw	r26, 0x01	; 1
    4e5a:	9c 93       	st	X, r25
    4e5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e5e:	fe 01       	movw	r30, r28
    4e60:	e1 56       	subi	r30, 0x61	; 97
    4e62:	ff 4f       	sbci	r31, 0xFF	; 255
    4e64:	80 81       	ld	r24, Z
    4e66:	91 81       	ldd	r25, Z+1	; 0x01
    4e68:	00 97       	sbiw	r24, 0x00	; 0
    4e6a:	d1 f6       	brne	.-76     	; 0x4e20 <main+0x6e2>
    4e6c:	27 c0       	rjmp	.+78     	; 0x4ebc <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6e:	8e 01       	movw	r16, r28
    4e70:	01 56       	subi	r16, 0x61	; 97
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
    4e74:	fe 01       	movw	r30, r28
    4e76:	ef 55       	subi	r30, 0x5F	; 95
    4e78:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7a:	60 81       	ld	r22, Z
    4e7c:	71 81       	ldd	r23, Z+1	; 0x01
    4e7e:	82 81       	ldd	r24, Z+2	; 0x02
    4e80:	93 81       	ldd	r25, Z+3	; 0x03
    4e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	f8 01       	movw	r30, r16
    4e8c:	91 83       	std	Z+1, r25	; 0x01
    4e8e:	80 83       	st	Z, r24
    4e90:	de 01       	movw	r26, r28
    4e92:	a5 56       	subi	r26, 0x65	; 101
    4e94:	bf 4f       	sbci	r27, 0xFF	; 255
    4e96:	fe 01       	movw	r30, r28
    4e98:	e1 56       	subi	r30, 0x61	; 97
    4e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	8d 93       	st	X+, r24
    4ea2:	9c 93       	st	X, r25
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	e5 56       	subi	r30, 0x65	; 101
    4ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eaa:	80 81       	ld	r24, Z
    4eac:	91 81       	ldd	r25, Z+1	; 0x01
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	f1 f7       	brne	.-4      	; 0x4eae <main+0x770>
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e5 56       	subi	r30, 0x65	; 101
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	80 83       	st	Z, r24
    _delay_ms(5);

    // Display minutes (units)
    SSD_vDisable(seven_seg1);
    4ebc:	40 91 5b 03 	lds	r20, 0x035B
    4ec0:	50 91 5c 03 	lds	r21, 0x035C
    4ec4:	60 91 5d 03 	lds	r22, 0x035D
    4ec8:	70 91 5e 03 	lds	r23, 0x035E
    4ecc:	80 91 5f 03 	lds	r24, 0x035F
    4ed0:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg2);
    4ed4:	40 91 60 03 	lds	r20, 0x0360
    4ed8:	50 91 61 03 	lds	r21, 0x0361
    4edc:	60 91 62 03 	lds	r22, 0x0362
    4ee0:	70 91 63 03 	lds	r23, 0x0363
    4ee4:	80 91 64 03 	lds	r24, 0x0364
    4ee8:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg2, Time_Minute % 10);
    4eec:	80 91 96 03 	lds	r24, 0x0396
    4ef0:	9a e0       	ldi	r25, 0x0A	; 10
    4ef2:	69 2f       	mov	r22, r25
    4ef4:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    4ef8:	89 2f       	mov	r24, r25
    4efa:	98 2f       	mov	r25, r24
    4efc:	40 91 60 03 	lds	r20, 0x0360
    4f00:	50 91 61 03 	lds	r21, 0x0361
    4f04:	60 91 62 03 	lds	r22, 0x0362
    4f08:	70 91 63 03 	lds	r23, 0x0363
    4f0c:	80 91 64 03 	lds	r24, 0x0364
    4f10:	29 2f       	mov	r18, r25
    4f12:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    4f16:	fe 01       	movw	r30, r28
    4f18:	e9 56       	subi	r30, 0x69	; 105
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	a0 ea       	ldi	r26, 0xA0	; 160
    4f22:	b0 e4       	ldi	r27, 0x40	; 64
    4f24:	80 83       	st	Z, r24
    4f26:	91 83       	std	Z+1, r25	; 0x01
    4f28:	a2 83       	std	Z+2, r26	; 0x02
    4f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f2c:	8e 01       	movw	r16, r28
    4f2e:	0d 56       	subi	r16, 0x6D	; 109
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	fe 01       	movw	r30, r28
    4f34:	e9 56       	subi	r30, 0x69	; 105
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	4a ef       	ldi	r20, 0xFA	; 250
    4f46:	54 e4       	ldi	r21, 0x44	; 68
    4f48:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	f8 01       	movw	r30, r16
    4f52:	80 83       	st	Z, r24
    4f54:	91 83       	std	Z+1, r25	; 0x01
    4f56:	a2 83       	std	Z+2, r26	; 0x02
    4f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ed 56       	subi	r30, 0x6D	; 109
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	60 81       	ld	r22, Z
    4f62:	71 81       	ldd	r23, Z+1	; 0x01
    4f64:	82 81       	ldd	r24, Z+2	; 0x02
    4f66:	93 81       	ldd	r25, Z+3	; 0x03
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	40 e8       	ldi	r20, 0x80	; 128
    4f6e:	5f e3       	ldi	r21, 0x3F	; 63
    4f70:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4f74:	88 23       	and	r24, r24
    4f76:	44 f4       	brge	.+16     	; 0x4f88 <main+0x84a>
		__ticks = 1;
    4f78:	fe 01       	movw	r30, r28
    4f7a:	ef 56       	subi	r30, 0x6F	; 111
    4f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	91 83       	std	Z+1, r25	; 0x01
    4f84:	80 83       	st	Z, r24
    4f86:	64 c0       	rjmp	.+200    	; 0x5050 <main+0x912>
	else if (__tmp > 65535)
    4f88:	fe 01       	movw	r30, r28
    4f8a:	ed 56       	subi	r30, 0x6D	; 109
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	60 81       	ld	r22, Z
    4f90:	71 81       	ldd	r23, Z+1	; 0x01
    4f92:	82 81       	ldd	r24, Z+2	; 0x02
    4f94:	93 81       	ldd	r25, Z+3	; 0x03
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	3f ef       	ldi	r19, 0xFF	; 255
    4f9a:	4f e7       	ldi	r20, 0x7F	; 127
    4f9c:	57 e4       	ldi	r21, 0x47	; 71
    4f9e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4fa2:	18 16       	cp	r1, r24
    4fa4:	0c f0       	brlt	.+2      	; 0x4fa8 <main+0x86a>
    4fa6:	43 c0       	rjmp	.+134    	; 0x502e <main+0x8f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e9 56       	subi	r30, 0x69	; 105
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	60 81       	ld	r22, Z
    4fb0:	71 81       	ldd	r23, Z+1	; 0x01
    4fb2:	82 81       	ldd	r24, Z+2	; 0x02
    4fb4:	93 81       	ldd	r25, Z+3	; 0x03
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	40 e2       	ldi	r20, 0x20	; 32
    4fbc:	51 e4       	ldi	r21, 0x41	; 65
    4fbe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	8e 01       	movw	r16, r28
    4fc8:	0f 56       	subi	r16, 0x6F	; 111
    4fca:	1f 4f       	sbci	r17, 0xFF	; 255
    4fcc:	bc 01       	movw	r22, r24
    4fce:	cd 01       	movw	r24, r26
    4fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	f8 01       	movw	r30, r16
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
    4fde:	1f c0       	rjmp	.+62     	; 0x501e <main+0x8e0>
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	e1 57       	subi	r30, 0x71	; 113
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	88 ec       	ldi	r24, 0xC8	; 200
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	91 83       	std	Z+1, r25	; 0x01
    4fec:	80 83       	st	Z, r24
    4fee:	fe 01       	movw	r30, r28
    4ff0:	e1 57       	subi	r30, 0x71	; 113
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	80 81       	ld	r24, Z
    4ff6:	91 81       	ldd	r25, Z+1	; 0x01
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	f1 f7       	brne	.-4      	; 0x4ff8 <main+0x8ba>
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	e1 57       	subi	r30, 0x71	; 113
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	91 83       	std	Z+1, r25	; 0x01
    5004:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5006:	de 01       	movw	r26, r28
    5008:	af 56       	subi	r26, 0x6F	; 111
    500a:	bf 4f       	sbci	r27, 0xFF	; 255
    500c:	fe 01       	movw	r30, r28
    500e:	ef 56       	subi	r30, 0x6F	; 111
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	91 81       	ldd	r25, Z+1	; 0x01
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	11 96       	adiw	r26, 0x01	; 1
    501a:	9c 93       	st	X, r25
    501c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    501e:	fe 01       	movw	r30, r28
    5020:	ef 56       	subi	r30, 0x6F	; 111
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	80 81       	ld	r24, Z
    5026:	91 81       	ldd	r25, Z+1	; 0x01
    5028:	00 97       	sbiw	r24, 0x00	; 0
    502a:	d1 f6       	brne	.-76     	; 0x4fe0 <main+0x8a2>
    502c:	27 c0       	rjmp	.+78     	; 0x507c <main+0x93e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    502e:	8e 01       	movw	r16, r28
    5030:	0f 56       	subi	r16, 0x6F	; 111
    5032:	1f 4f       	sbci	r17, 0xFF	; 255
    5034:	fe 01       	movw	r30, r28
    5036:	ed 56       	subi	r30, 0x6D	; 109
    5038:	ff 4f       	sbci	r31, 0xFF	; 255
    503a:	60 81       	ld	r22, Z
    503c:	71 81       	ldd	r23, Z+1	; 0x01
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	93 81       	ldd	r25, Z+3	; 0x03
    5042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	f8 01       	movw	r30, r16
    504c:	91 83       	std	Z+1, r25	; 0x01
    504e:	80 83       	st	Z, r24
    5050:	de 01       	movw	r26, r28
    5052:	a3 57       	subi	r26, 0x73	; 115
    5054:	bf 4f       	sbci	r27, 0xFF	; 255
    5056:	fe 01       	movw	r30, r28
    5058:	ef 56       	subi	r30, 0x6F	; 111
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	80 81       	ld	r24, Z
    505e:	91 81       	ldd	r25, Z+1	; 0x01
    5060:	8d 93       	st	X+, r24
    5062:	9c 93       	st	X, r25
    5064:	fe 01       	movw	r30, r28
    5066:	e3 57       	subi	r30, 0x73	; 115
    5068:	ff 4f       	sbci	r31, 0xFF	; 255
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	f1 f7       	brne	.-4      	; 0x506e <main+0x930>
    5072:	fe 01       	movw	r30, r28
    5074:	e3 57       	subi	r30, 0x73	; 115
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	91 83       	std	Z+1, r25	; 0x01
    507a:	80 83       	st	Z, r24
    _delay_ms(5);

    // Display minutes (tens)
    SSD_vDisable(seven_seg2);
    507c:	40 91 60 03 	lds	r20, 0x0360
    5080:	50 91 61 03 	lds	r21, 0x0361
    5084:	60 91 62 03 	lds	r22, 0x0362
    5088:	70 91 63 03 	lds	r23, 0x0363
    508c:	80 91 64 03 	lds	r24, 0x0364
    5090:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg3);
    5094:	40 91 65 03 	lds	r20, 0x0365
    5098:	50 91 66 03 	lds	r21, 0x0366
    509c:	60 91 67 03 	lds	r22, 0x0367
    50a0:	70 91 68 03 	lds	r23, 0x0368
    50a4:	80 91 69 03 	lds	r24, 0x0369
    50a8:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg3, Time_Minute / 10);
    50ac:	80 91 96 03 	lds	r24, 0x0396
    50b0:	9a e0       	ldi	r25, 0x0A	; 10
    50b2:	69 2f       	mov	r22, r25
    50b4:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    50b8:	98 2f       	mov	r25, r24
    50ba:	40 91 65 03 	lds	r20, 0x0365
    50be:	50 91 66 03 	lds	r21, 0x0366
    50c2:	60 91 67 03 	lds	r22, 0x0367
    50c6:	70 91 68 03 	lds	r23, 0x0368
    50ca:	80 91 69 03 	lds	r24, 0x0369
    50ce:	29 2f       	mov	r18, r25
    50d0:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    50d4:	fe 01       	movw	r30, r28
    50d6:	e7 57       	subi	r30, 0x77	; 119
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	80 e0       	ldi	r24, 0x00	; 0
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	a0 ea       	ldi	r26, 0xA0	; 160
    50e0:	b0 e4       	ldi	r27, 0x40	; 64
    50e2:	80 83       	st	Z, r24
    50e4:	91 83       	std	Z+1, r25	; 0x01
    50e6:	a2 83       	std	Z+2, r26	; 0x02
    50e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ea:	8e 01       	movw	r16, r28
    50ec:	0b 57       	subi	r16, 0x7B	; 123
    50ee:	1f 4f       	sbci	r17, 0xFF	; 255
    50f0:	fe 01       	movw	r30, r28
    50f2:	e7 57       	subi	r30, 0x77	; 119
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	60 81       	ld	r22, Z
    50f8:	71 81       	ldd	r23, Z+1	; 0x01
    50fa:	82 81       	ldd	r24, Z+2	; 0x02
    50fc:	93 81       	ldd	r25, Z+3	; 0x03
    50fe:	20 e0       	ldi	r18, 0x00	; 0
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	4a ef       	ldi	r20, 0xFA	; 250
    5104:	54 e4       	ldi	r21, 0x44	; 68
    5106:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	f8 01       	movw	r30, r16
    5110:	80 83       	st	Z, r24
    5112:	91 83       	std	Z+1, r25	; 0x01
    5114:	a2 83       	std	Z+2, r26	; 0x02
    5116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5118:	fe 01       	movw	r30, r28
    511a:	eb 57       	subi	r30, 0x7B	; 123
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e8       	ldi	r20, 0x80	; 128
    512c:	5f e3       	ldi	r21, 0x3F	; 63
    512e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5132:	88 23       	and	r24, r24
    5134:	44 f4       	brge	.+16     	; 0x5146 <main+0xa08>
		__ticks = 1;
    5136:	fe 01       	movw	r30, r28
    5138:	ed 57       	subi	r30, 0x7D	; 125
    513a:	ff 4f       	sbci	r31, 0xFF	; 255
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	80 83       	st	Z, r24
    5144:	64 c0       	rjmp	.+200    	; 0x520e <main+0xad0>
	else if (__tmp > 65535)
    5146:	fe 01       	movw	r30, r28
    5148:	eb 57       	subi	r30, 0x7B	; 123
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	60 81       	ld	r22, Z
    514e:	71 81       	ldd	r23, Z+1	; 0x01
    5150:	82 81       	ldd	r24, Z+2	; 0x02
    5152:	93 81       	ldd	r25, Z+3	; 0x03
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	3f ef       	ldi	r19, 0xFF	; 255
    5158:	4f e7       	ldi	r20, 0x7F	; 127
    515a:	57 e4       	ldi	r21, 0x47	; 71
    515c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5160:	18 16       	cp	r1, r24
    5162:	0c f0       	brlt	.+2      	; 0x5166 <main+0xa28>
    5164:	43 c0       	rjmp	.+134    	; 0x51ec <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5166:	fe 01       	movw	r30, r28
    5168:	e7 57       	subi	r30, 0x77	; 119
    516a:	ff 4f       	sbci	r31, 0xFF	; 255
    516c:	60 81       	ld	r22, Z
    516e:	71 81       	ldd	r23, Z+1	; 0x01
    5170:	82 81       	ldd	r24, Z+2	; 0x02
    5172:	93 81       	ldd	r25, Z+3	; 0x03
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	40 e2       	ldi	r20, 0x20	; 32
    517a:	51 e4       	ldi	r21, 0x41	; 65
    517c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	8e 01       	movw	r16, r28
    5186:	0d 57       	subi	r16, 0x7D	; 125
    5188:	1f 4f       	sbci	r17, 0xFF	; 255
    518a:	bc 01       	movw	r22, r24
    518c:	cd 01       	movw	r24, r26
    518e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5192:	dc 01       	movw	r26, r24
    5194:	cb 01       	movw	r24, r22
    5196:	f8 01       	movw	r30, r16
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	80 83       	st	Z, r24
    519c:	1f c0       	rjmp	.+62     	; 0x51dc <main+0xa9e>
    519e:	fe 01       	movw	r30, r28
    51a0:	ef 57       	subi	r30, 0x7F	; 127
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	88 ec       	ldi	r24, 0xC8	; 200
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	91 83       	std	Z+1, r25	; 0x01
    51aa:	80 83       	st	Z, r24
    51ac:	fe 01       	movw	r30, r28
    51ae:	ef 57       	subi	r30, 0x7F	; 127
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	01 97       	sbiw	r24, 0x01	; 1
    51b8:	f1 f7       	brne	.-4      	; 0x51b6 <main+0xa78>
    51ba:	fe 01       	movw	r30, r28
    51bc:	ef 57       	subi	r30, 0x7F	; 127
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	91 83       	std	Z+1, r25	; 0x01
    51c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c4:	de 01       	movw	r26, r28
    51c6:	ad 57       	subi	r26, 0x7D	; 125
    51c8:	bf 4f       	sbci	r27, 0xFF	; 255
    51ca:	fe 01       	movw	r30, r28
    51cc:	ed 57       	subi	r30, 0x7D	; 125
    51ce:	ff 4f       	sbci	r31, 0xFF	; 255
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	11 96       	adiw	r26, 0x01	; 1
    51d8:	9c 93       	st	X, r25
    51da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51dc:	fe 01       	movw	r30, r28
    51de:	ed 57       	subi	r30, 0x7D	; 125
    51e0:	ff 4f       	sbci	r31, 0xFF	; 255
    51e2:	80 81       	ld	r24, Z
    51e4:	91 81       	ldd	r25, Z+1	; 0x01
    51e6:	00 97       	sbiw	r24, 0x00	; 0
    51e8:	d1 f6       	brne	.-76     	; 0x519e <main+0xa60>
    51ea:	27 c0       	rjmp	.+78     	; 0x523a <main+0xafc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ec:	8e 01       	movw	r16, r28
    51ee:	0d 57       	subi	r16, 0x7D	; 125
    51f0:	1f 4f       	sbci	r17, 0xFF	; 255
    51f2:	fe 01       	movw	r30, r28
    51f4:	eb 57       	subi	r30, 0x7B	; 123
    51f6:	ff 4f       	sbci	r31, 0xFF	; 255
    51f8:	60 81       	ld	r22, Z
    51fa:	71 81       	ldd	r23, Z+1	; 0x01
    51fc:	82 81       	ldd	r24, Z+2	; 0x02
    51fe:	93 81       	ldd	r25, Z+3	; 0x03
    5200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	f8 01       	movw	r30, r16
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	80 83       	st	Z, r24
    520e:	de 01       	movw	r26, r28
    5210:	a1 58       	subi	r26, 0x81	; 129
    5212:	bf 4f       	sbci	r27, 0xFF	; 255
    5214:	fe 01       	movw	r30, r28
    5216:	ed 57       	subi	r30, 0x7D	; 125
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	8d 93       	st	X+, r24
    5220:	9c 93       	st	X, r25
    5222:	fe 01       	movw	r30, r28
    5224:	e1 58       	subi	r30, 0x81	; 129
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	80 81       	ld	r24, Z
    522a:	91 81       	ldd	r25, Z+1	; 0x01
    522c:	01 97       	sbiw	r24, 0x01	; 1
    522e:	f1 f7       	brne	.-4      	; 0x522c <main+0xaee>
    5230:	fe 01       	movw	r30, r28
    5232:	e1 58       	subi	r30, 0x81	; 129
    5234:	ff 4f       	sbci	r31, 0xFF	; 255
    5236:	91 83       	std	Z+1, r25	; 0x01
    5238:	80 83       	st	Z, r24
    _delay_ms(5);

    // Display hours (units)
    SSD_vDisable(seven_seg3);
    523a:	40 91 65 03 	lds	r20, 0x0365
    523e:	50 91 66 03 	lds	r21, 0x0366
    5242:	60 91 67 03 	lds	r22, 0x0367
    5246:	70 91 68 03 	lds	r23, 0x0368
    524a:	80 91 69 03 	lds	r24, 0x0369
    524e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg4);
    5252:	40 91 6a 03 	lds	r20, 0x036A
    5256:	50 91 6b 03 	lds	r21, 0x036B
    525a:	60 91 6c 03 	lds	r22, 0x036C
    525e:	70 91 6d 03 	lds	r23, 0x036D
    5262:	80 91 6e 03 	lds	r24, 0x036E
    5266:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg4, Time_Hour % 10);
    526a:	80 91 54 03 	lds	r24, 0x0354
    526e:	9a e0       	ldi	r25, 0x0A	; 10
    5270:	69 2f       	mov	r22, r25
    5272:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5276:	89 2f       	mov	r24, r25
    5278:	98 2f       	mov	r25, r24
    527a:	40 91 6a 03 	lds	r20, 0x036A
    527e:	50 91 6b 03 	lds	r21, 0x036B
    5282:	60 91 6c 03 	lds	r22, 0x036C
    5286:	70 91 6d 03 	lds	r23, 0x036D
    528a:	80 91 6e 03 	lds	r24, 0x036E
    528e:	29 2f       	mov	r18, r25
    5290:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5294:	fe 01       	movw	r30, r28
    5296:	e5 58       	subi	r30, 0x85	; 133
    5298:	ff 4f       	sbci	r31, 0xFF	; 255
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	a0 ea       	ldi	r26, 0xA0	; 160
    52a0:	b0 e4       	ldi	r27, 0x40	; 64
    52a2:	80 83       	st	Z, r24
    52a4:	91 83       	std	Z+1, r25	; 0x01
    52a6:	a2 83       	std	Z+2, r26	; 0x02
    52a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52aa:	8e 01       	movw	r16, r28
    52ac:	09 58       	subi	r16, 0x89	; 137
    52ae:	1f 4f       	sbci	r17, 0xFF	; 255
    52b0:	fe 01       	movw	r30, r28
    52b2:	e5 58       	subi	r30, 0x85	; 133
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	60 81       	ld	r22, Z
    52b8:	71 81       	ldd	r23, Z+1	; 0x01
    52ba:	82 81       	ldd	r24, Z+2	; 0x02
    52bc:	93 81       	ldd	r25, Z+3	; 0x03
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	4a ef       	ldi	r20, 0xFA	; 250
    52c4:	54 e4       	ldi	r21, 0x44	; 68
    52c6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	f8 01       	movw	r30, r16
    52d0:	80 83       	st	Z, r24
    52d2:	91 83       	std	Z+1, r25	; 0x01
    52d4:	a2 83       	std	Z+2, r26	; 0x02
    52d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52d8:	fe 01       	movw	r30, r28
    52da:	e9 58       	subi	r30, 0x89	; 137
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	40 e8       	ldi	r20, 0x80	; 128
    52ec:	5f e3       	ldi	r21, 0x3F	; 63
    52ee:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    52f2:	88 23       	and	r24, r24
    52f4:	44 f4       	brge	.+16     	; 0x5306 <main+0xbc8>
		__ticks = 1;
    52f6:	fe 01       	movw	r30, r28
    52f8:	eb 58       	subi	r30, 0x8B	; 139
    52fa:	ff 4f       	sbci	r31, 0xFF	; 255
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
    5304:	64 c0       	rjmp	.+200    	; 0x53ce <main+0xc90>
	else if (__tmp > 65535)
    5306:	fe 01       	movw	r30, r28
    5308:	e9 58       	subi	r30, 0x89	; 137
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	60 81       	ld	r22, Z
    530e:	71 81       	ldd	r23, Z+1	; 0x01
    5310:	82 81       	ldd	r24, Z+2	; 0x02
    5312:	93 81       	ldd	r25, Z+3	; 0x03
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	3f ef       	ldi	r19, 0xFF	; 255
    5318:	4f e7       	ldi	r20, 0x7F	; 127
    531a:	57 e4       	ldi	r21, 0x47	; 71
    531c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5320:	18 16       	cp	r1, r24
    5322:	0c f0       	brlt	.+2      	; 0x5326 <main+0xbe8>
    5324:	43 c0       	rjmp	.+134    	; 0x53ac <main+0xc6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5326:	fe 01       	movw	r30, r28
    5328:	e5 58       	subi	r30, 0x85	; 133
    532a:	ff 4f       	sbci	r31, 0xFF	; 255
    532c:	60 81       	ld	r22, Z
    532e:	71 81       	ldd	r23, Z+1	; 0x01
    5330:	82 81       	ldd	r24, Z+2	; 0x02
    5332:	93 81       	ldd	r25, Z+3	; 0x03
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	40 e2       	ldi	r20, 0x20	; 32
    533a:	51 e4       	ldi	r21, 0x41	; 65
    533c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	8e 01       	movw	r16, r28
    5346:	0b 58       	subi	r16, 0x8B	; 139
    5348:	1f 4f       	sbci	r17, 0xFF	; 255
    534a:	bc 01       	movw	r22, r24
    534c:	cd 01       	movw	r24, r26
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	f8 01       	movw	r30, r16
    5358:	91 83       	std	Z+1, r25	; 0x01
    535a:	80 83       	st	Z, r24
    535c:	1f c0       	rjmp	.+62     	; 0x539c <main+0xc5e>
    535e:	fe 01       	movw	r30, r28
    5360:	ed 58       	subi	r30, 0x8D	; 141
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	88 ec       	ldi	r24, 0xC8	; 200
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	91 83       	std	Z+1, r25	; 0x01
    536a:	80 83       	st	Z, r24
    536c:	fe 01       	movw	r30, r28
    536e:	ed 58       	subi	r30, 0x8D	; 141
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	80 81       	ld	r24, Z
    5374:	91 81       	ldd	r25, Z+1	; 0x01
    5376:	01 97       	sbiw	r24, 0x01	; 1
    5378:	f1 f7       	brne	.-4      	; 0x5376 <main+0xc38>
    537a:	fe 01       	movw	r30, r28
    537c:	ed 58       	subi	r30, 0x8D	; 141
    537e:	ff 4f       	sbci	r31, 0xFF	; 255
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5384:	de 01       	movw	r26, r28
    5386:	ab 58       	subi	r26, 0x8B	; 139
    5388:	bf 4f       	sbci	r27, 0xFF	; 255
    538a:	fe 01       	movw	r30, r28
    538c:	eb 58       	subi	r30, 0x8B	; 139
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	80 81       	ld	r24, Z
    5392:	91 81       	ldd	r25, Z+1	; 0x01
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	11 96       	adiw	r26, 0x01	; 1
    5398:	9c 93       	st	X, r25
    539a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539c:	fe 01       	movw	r30, r28
    539e:	eb 58       	subi	r30, 0x8B	; 139
    53a0:	ff 4f       	sbci	r31, 0xFF	; 255
    53a2:	80 81       	ld	r24, Z
    53a4:	91 81       	ldd	r25, Z+1	; 0x01
    53a6:	00 97       	sbiw	r24, 0x00	; 0
    53a8:	d1 f6       	brne	.-76     	; 0x535e <main+0xc20>
    53aa:	27 c0       	rjmp	.+78     	; 0x53fa <main+0xcbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ac:	8e 01       	movw	r16, r28
    53ae:	0b 58       	subi	r16, 0x8B	; 139
    53b0:	1f 4f       	sbci	r17, 0xFF	; 255
    53b2:	fe 01       	movw	r30, r28
    53b4:	e9 58       	subi	r30, 0x89	; 137
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	60 81       	ld	r22, Z
    53ba:	71 81       	ldd	r23, Z+1	; 0x01
    53bc:	82 81       	ldd	r24, Z+2	; 0x02
    53be:	93 81       	ldd	r25, Z+3	; 0x03
    53c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c4:	dc 01       	movw	r26, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	f8 01       	movw	r30, r16
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	80 83       	st	Z, r24
    53ce:	de 01       	movw	r26, r28
    53d0:	af 58       	subi	r26, 0x8F	; 143
    53d2:	bf 4f       	sbci	r27, 0xFF	; 255
    53d4:	fe 01       	movw	r30, r28
    53d6:	eb 58       	subi	r30, 0x8B	; 139
    53d8:	ff 4f       	sbci	r31, 0xFF	; 255
    53da:	80 81       	ld	r24, Z
    53dc:	91 81       	ldd	r25, Z+1	; 0x01
    53de:	8d 93       	st	X+, r24
    53e0:	9c 93       	st	X, r25
    53e2:	fe 01       	movw	r30, r28
    53e4:	ef 58       	subi	r30, 0x8F	; 143
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	80 81       	ld	r24, Z
    53ea:	91 81       	ldd	r25, Z+1	; 0x01
    53ec:	01 97       	sbiw	r24, 0x01	; 1
    53ee:	f1 f7       	brne	.-4      	; 0x53ec <main+0xcae>
    53f0:	fe 01       	movw	r30, r28
    53f2:	ef 58       	subi	r30, 0x8F	; 143
    53f4:	ff 4f       	sbci	r31, 0xFF	; 255
    53f6:	91 83       	std	Z+1, r25	; 0x01
    53f8:	80 83       	st	Z, r24
    _delay_ms(5);

    // Display hours (tens)
    SSD_vDisable(seven_seg4);
    53fa:	40 91 6a 03 	lds	r20, 0x036A
    53fe:	50 91 6b 03 	lds	r21, 0x036B
    5402:	60 91 6c 03 	lds	r22, 0x036C
    5406:	70 91 6d 03 	lds	r23, 0x036D
    540a:	80 91 6e 03 	lds	r24, 0x036E
    540e:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
    SSD_vEnable(seven_seg5);
    5412:	40 91 6f 03 	lds	r20, 0x036F
    5416:	50 91 70 03 	lds	r21, 0x0370
    541a:	60 91 71 03 	lds	r22, 0x0371
    541e:	70 91 72 03 	lds	r23, 0x0372
    5422:	80 91 73 03 	lds	r24, 0x0373
    5426:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
    SSD_vSendNumber(seven_seg5, Time_Hour / 10);
    542a:	80 91 54 03 	lds	r24, 0x0354
    542e:	9a e0       	ldi	r25, 0x0A	; 10
    5430:	69 2f       	mov	r22, r25
    5432:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5436:	98 2f       	mov	r25, r24
    5438:	40 91 6f 03 	lds	r20, 0x036F
    543c:	50 91 70 03 	lds	r21, 0x0370
    5440:	60 91 71 03 	lds	r22, 0x0371
    5444:	70 91 72 03 	lds	r23, 0x0372
    5448:	80 91 73 03 	lds	r24, 0x0373
    544c:	29 2f       	mov	r18, r25
    544e:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5452:	fe 01       	movw	r30, r28
    5454:	e3 59       	subi	r30, 0x93	; 147
    5456:	ff 4f       	sbci	r31, 0xFF	; 255
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	a0 ea       	ldi	r26, 0xA0	; 160
    545e:	b0 e4       	ldi	r27, 0x40	; 64
    5460:	80 83       	st	Z, r24
    5462:	91 83       	std	Z+1, r25	; 0x01
    5464:	a2 83       	std	Z+2, r26	; 0x02
    5466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5468:	8e 01       	movw	r16, r28
    546a:	07 59       	subi	r16, 0x97	; 151
    546c:	1f 4f       	sbci	r17, 0xFF	; 255
    546e:	fe 01       	movw	r30, r28
    5470:	e3 59       	subi	r30, 0x93	; 147
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	60 81       	ld	r22, Z
    5476:	71 81       	ldd	r23, Z+1	; 0x01
    5478:	82 81       	ldd	r24, Z+2	; 0x02
    547a:	93 81       	ldd	r25, Z+3	; 0x03
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	4a ef       	ldi	r20, 0xFA	; 250
    5482:	54 e4       	ldi	r21, 0x44	; 68
    5484:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	f8 01       	movw	r30, r16
    548e:	80 83       	st	Z, r24
    5490:	91 83       	std	Z+1, r25	; 0x01
    5492:	a2 83       	std	Z+2, r26	; 0x02
    5494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5496:	fe 01       	movw	r30, r28
    5498:	e7 59       	subi	r30, 0x97	; 151
    549a:	ff 4f       	sbci	r31, 0xFF	; 255
    549c:	60 81       	ld	r22, Z
    549e:	71 81       	ldd	r23, Z+1	; 0x01
    54a0:	82 81       	ldd	r24, Z+2	; 0x02
    54a2:	93 81       	ldd	r25, Z+3	; 0x03
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	30 e0       	ldi	r19, 0x00	; 0
    54a8:	40 e8       	ldi	r20, 0x80	; 128
    54aa:	5f e3       	ldi	r21, 0x3F	; 63
    54ac:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    54b0:	88 23       	and	r24, r24
    54b2:	44 f4       	brge	.+16     	; 0x54c4 <main+0xd86>
		__ticks = 1;
    54b4:	fe 01       	movw	r30, r28
    54b6:	e9 59       	subi	r30, 0x99	; 153
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	91 83       	std	Z+1, r25	; 0x01
    54c0:	80 83       	st	Z, r24
    54c2:	64 c0       	rjmp	.+200    	; 0x558c <main+0xe4e>
	else if (__tmp > 65535)
    54c4:	fe 01       	movw	r30, r28
    54c6:	e7 59       	subi	r30, 0x97	; 151
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	60 81       	ld	r22, Z
    54cc:	71 81       	ldd	r23, Z+1	; 0x01
    54ce:	82 81       	ldd	r24, Z+2	; 0x02
    54d0:	93 81       	ldd	r25, Z+3	; 0x03
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	3f ef       	ldi	r19, 0xFF	; 255
    54d6:	4f e7       	ldi	r20, 0x7F	; 127
    54d8:	57 e4       	ldi	r21, 0x47	; 71
    54da:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    54de:	18 16       	cp	r1, r24
    54e0:	0c f0       	brlt	.+2      	; 0x54e4 <main+0xda6>
    54e2:	43 c0       	rjmp	.+134    	; 0x556a <main+0xe2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e4:	fe 01       	movw	r30, r28
    54e6:	e3 59       	subi	r30, 0x93	; 147
    54e8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ea:	60 81       	ld	r22, Z
    54ec:	71 81       	ldd	r23, Z+1	; 0x01
    54ee:	82 81       	ldd	r24, Z+2	; 0x02
    54f0:	93 81       	ldd	r25, Z+3	; 0x03
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e2       	ldi	r20, 0x20	; 32
    54f8:	51 e4       	ldi	r21, 0x41	; 65
    54fa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	8e 01       	movw	r16, r28
    5504:	09 59       	subi	r16, 0x99	; 153
    5506:	1f 4f       	sbci	r17, 0xFF	; 255
    5508:	bc 01       	movw	r22, r24
    550a:	cd 01       	movw	r24, r26
    550c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5510:	dc 01       	movw	r26, r24
    5512:	cb 01       	movw	r24, r22
    5514:	f8 01       	movw	r30, r16
    5516:	91 83       	std	Z+1, r25	; 0x01
    5518:	80 83       	st	Z, r24
    551a:	1f c0       	rjmp	.+62     	; 0x555a <main+0xe1c>
    551c:	fe 01       	movw	r30, r28
    551e:	eb 59       	subi	r30, 0x9B	; 155
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	88 ec       	ldi	r24, 0xC8	; 200
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	91 83       	std	Z+1, r25	; 0x01
    5528:	80 83       	st	Z, r24
    552a:	fe 01       	movw	r30, r28
    552c:	eb 59       	subi	r30, 0x9B	; 155
    552e:	ff 4f       	sbci	r31, 0xFF	; 255
    5530:	80 81       	ld	r24, Z
    5532:	91 81       	ldd	r25, Z+1	; 0x01
    5534:	01 97       	sbiw	r24, 0x01	; 1
    5536:	f1 f7       	brne	.-4      	; 0x5534 <main+0xdf6>
    5538:	fe 01       	movw	r30, r28
    553a:	eb 59       	subi	r30, 0x9B	; 155
    553c:	ff 4f       	sbci	r31, 0xFF	; 255
    553e:	91 83       	std	Z+1, r25	; 0x01
    5540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5542:	de 01       	movw	r26, r28
    5544:	a9 59       	subi	r26, 0x99	; 153
    5546:	bf 4f       	sbci	r27, 0xFF	; 255
    5548:	fe 01       	movw	r30, r28
    554a:	e9 59       	subi	r30, 0x99	; 153
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	80 81       	ld	r24, Z
    5550:	91 81       	ldd	r25, Z+1	; 0x01
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	11 96       	adiw	r26, 0x01	; 1
    5556:	9c 93       	st	X, r25
    5558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    555a:	fe 01       	movw	r30, r28
    555c:	e9 59       	subi	r30, 0x99	; 153
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	80 81       	ld	r24, Z
    5562:	91 81       	ldd	r25, Z+1	; 0x01
    5564:	00 97       	sbiw	r24, 0x00	; 0
    5566:	d1 f6       	brne	.-76     	; 0x551c <main+0xdde>
    5568:	28 c0       	rjmp	.+80     	; 0x55ba <main+0xe7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    556a:	8e 01       	movw	r16, r28
    556c:	09 59       	subi	r16, 0x99	; 153
    556e:	1f 4f       	sbci	r17, 0xFF	; 255
    5570:	fe 01       	movw	r30, r28
    5572:	e7 59       	subi	r30, 0x97	; 151
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 81       	ld	r22, Z
    5578:	71 81       	ldd	r23, Z+1	; 0x01
    557a:	82 81       	ldd	r24, Z+2	; 0x02
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	f8 01       	movw	r30, r16
    5588:	91 83       	std	Z+1, r25	; 0x01
    558a:	80 83       	st	Z, r24
    558c:	de 01       	movw	r26, r28
    558e:	ad 59       	subi	r26, 0x9D	; 157
    5590:	bf 4f       	sbci	r27, 0xFF	; 255
    5592:	fe 01       	movw	r30, r28
    5594:	e9 59       	subi	r30, 0x99	; 153
    5596:	ff 4f       	sbci	r31, 0xFF	; 255
    5598:	80 81       	ld	r24, Z
    559a:	91 81       	ldd	r25, Z+1	; 0x01
    559c:	11 96       	adiw	r26, 0x01	; 1
    559e:	9c 93       	st	X, r25
    55a0:	8e 93       	st	-X, r24
    55a2:	fe 01       	movw	r30, r28
    55a4:	ed 59       	subi	r30, 0x9D	; 157
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	80 81       	ld	r24, Z
    55aa:	91 81       	ldd	r25, Z+1	; 0x01
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	f1 f7       	brne	.-4      	; 0x55ac <main+0xe6e>
    55b0:	fe 01       	movw	r30, r28
    55b2:	ed 59       	subi	r30, 0x9D	; 157
    55b4:	ff 4f       	sbci	r31, 0xFF	; 255
    55b6:	91 83       	std	Z+1, r25	; 0x01
    55b8:	80 83       	st	Z, r24
    _delay_ms(5);

    /* When Alarm is Ring */
    if (Time_Hour == Alarm_Hour && Time_Minute == Alarm_Minutes && Time_Second == 0 && Alarm_Status == Alarm_EN && READ_BIT(PORTA_REG, DIO_PIN3) == Alarm_DayTime)
    55ba:	90 91 54 03 	lds	r25, 0x0354
    55be:	80 91 98 03 	lds	r24, 0x0398
    55c2:	98 17       	cp	r25, r24
    55c4:	09 f0       	breq	.+2      	; 0x55c8 <main+0xe8a>
    55c6:	42 c9       	rjmp	.-3452   	; 0x484c <main+0x10e>
    55c8:	90 91 96 03 	lds	r25, 0x0396
    55cc:	80 91 9b 03 	lds	r24, 0x039B
    55d0:	98 17       	cp	r25, r24
    55d2:	09 f0       	breq	.+2      	; 0x55d6 <main+0xe98>
    55d4:	3b c9       	rjmp	.-3466   	; 0x484c <main+0x10e>
    55d6:	80 91 97 03 	lds	r24, 0x0397
    55da:	88 23       	and	r24, r24
    55dc:	09 f0       	breq	.+2      	; 0x55e0 <main+0xea2>
    55de:	36 c9       	rjmp	.-3476   	; 0x484c <main+0x10e>
    55e0:	80 91 95 03 	lds	r24, 0x0395
    55e4:	81 30       	cpi	r24, 0x01	; 1
    55e6:	09 f0       	breq	.+2      	; 0x55ea <main+0xeac>
    55e8:	31 c9       	rjmp	.-3486   	; 0x484c <main+0x10e>
    55ea:	eb e3       	ldi	r30, 0x3B	; 59
    55ec:	f0 e0       	ldi	r31, 0x00	; 0
    55ee:	80 81       	ld	r24, Z
    55f0:	88 2f       	mov	r24, r24
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	88 70       	andi	r24, 0x08	; 8
    55f6:	90 70       	andi	r25, 0x00	; 0
    55f8:	9c 01       	movw	r18, r24
    55fa:	35 95       	asr	r19
    55fc:	27 95       	ror	r18
    55fe:	35 95       	asr	r19
    5600:	27 95       	ror	r18
    5602:	35 95       	asr	r19
    5604:	27 95       	ror	r18
    5606:	80 91 94 03 	lds	r24, 0x0394
    560a:	88 2f       	mov	r24, r24
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	28 17       	cp	r18, r24
    5610:	39 07       	cpc	r19, r25
    5612:	09 f0       	breq	.+2      	; 0x5616 <main+0xed8>
    5614:	1b c9       	rjmp	.-3530   	; 0x484c <main+0x10e>
    {
      CLCD_vClearScreen();
    5616:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSetPosition(1, 8);
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	68 e0       	ldi	r22, 0x08	; 8
    561e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("Alarm");
    5622:	80 ee       	ldi	r24, 0xE0	; 224
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>

      CLCD_vSetPosition(2, 6);
    562a:	82 e0       	ldi	r24, 0x02	; 2
    562c:	66 e0       	ldi	r22, 0x06	; 6
    562e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendData((Alarm_Hour / 10) + 48);
    5632:	80 91 98 03 	lds	r24, 0x0398
    5636:	9a e0       	ldi	r25, 0x0A	; 10
    5638:	69 2f       	mov	r22, r25
    563a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    563e:	80 5d       	subi	r24, 0xD0	; 208
    5640:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData((Alarm_Hour % 10) + 48);
    5644:	80 91 98 03 	lds	r24, 0x0398
    5648:	9a e0       	ldi	r25, 0x0A	; 10
    564a:	69 2f       	mov	r22, r25
    564c:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5650:	89 2f       	mov	r24, r25
    5652:	80 5d       	subi	r24, 0xD0	; 208
    5654:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendString(" : ");
    5658:	86 ee       	ldi	r24, 0xE6	; 230
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSendData((Alarm_Minutes / 10) + 48);
    5660:	80 91 9b 03 	lds	r24, 0x039B
    5664:	9a e0       	ldi	r25, 0x0A	; 10
    5666:	69 2f       	mov	r22, r25
    5668:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    566c:	80 5d       	subi	r24, 0xD0	; 208
    566e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData((Alarm_Minutes % 10) + 48);
    5672:	80 91 9b 03 	lds	r24, 0x039B
    5676:	9a e0       	ldi	r25, 0x0A	; 10
    5678:	69 2f       	mov	r22, r25
    567a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    567e:	89 2f       	mov	r24, r25
    5680:	80 5d       	subi	r24, 0xD0	; 208
    5682:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      switch (Alarm_DayTime)
    5686:	80 91 94 03 	lds	r24, 0x0394
    568a:	28 2f       	mov	r18, r24
    568c:	30 e0       	ldi	r19, 0x00	; 0
    568e:	cb 53       	subi	r28, 0x3B	; 59
    5690:	df 4f       	sbci	r29, 0xFF	; 255
    5692:	39 83       	std	Y+1, r19	; 0x01
    5694:	28 83       	st	Y, r18
    5696:	c5 5c       	subi	r28, 0xC5	; 197
    5698:	d0 40       	sbci	r29, 0x00	; 0
    569a:	cb 53       	subi	r28, 0x3B	; 59
    569c:	df 4f       	sbci	r29, 0xFF	; 255
    569e:	88 81       	ld	r24, Y
    56a0:	99 81       	ldd	r25, Y+1	; 0x01
    56a2:	c5 5c       	subi	r28, 0xC5	; 197
    56a4:	d0 40       	sbci	r29, 0x00	; 0
    56a6:	00 97       	sbiw	r24, 0x00	; 0
    56a8:	71 f0       	breq	.+28     	; 0x56c6 <main+0xf88>
    56aa:	cb 53       	subi	r28, 0x3B	; 59
    56ac:	df 4f       	sbci	r29, 0xFF	; 255
    56ae:	e8 81       	ld	r30, Y
    56b0:	f9 81       	ldd	r31, Y+1	; 0x01
    56b2:	c5 5c       	subi	r28, 0xC5	; 197
    56b4:	d0 40       	sbci	r29, 0x00	; 0
    56b6:	e1 30       	cpi	r30, 0x01	; 1
    56b8:	f1 05       	cpc	r31, r1
    56ba:	49 f4       	brne	.+18     	; 0x56ce <main+0xf90>
      {
      case 1:
        CLCD_vSendString(" AM");
    56bc:	8a ee       	ldi	r24, 0xEA	; 234
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    56c4:	04 c0       	rjmp	.+8      	; 0x56ce <main+0xf90>
        break;
      case 0:
        CLCD_vSendString(" PM");
    56c6:	8e ee       	ldi	r24, 0xEE	; 238
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        break;
      }
      CLCD_vSetPosition(3, 1);
    56ce:	83 e0       	ldi	r24, 0x03	; 3
    56d0:	61 e0       	ldi	r22, 0x01	; 1
    56d2:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("Press any key");
    56d6:	82 ef       	ldi	r24, 0xF2	; 242
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 1);
    56de:	84 e0       	ldi	r24, 0x04	; 4
    56e0:	61 e0       	ldi	r22, 0x01	; 1
    56e2:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("to close");
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	91 e0       	ldi	r25, 0x01	; 1
    56ea:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>

      while (1)
      {
        KPD_Press = KPD_u8GetPressed();
    56ee:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    56f2:	80 93 9a 03 	sts	0x039A, r24
        if (KPD_Press != NOTPRESSED)
    56f6:	80 91 9a 03 	lds	r24, 0x039A
    56fa:	8f 3f       	cpi	r24, 0xFF	; 255
    56fc:	09 f0       	breq	.+2      	; 0x5700 <main+0xfc2>
    56fe:	c7 c4       	rjmp	.+2446   	; 0x608e <main+0x1950>
          break;
        }
        /* Display time on seven-segment displays using POV theorem */

        // Display seconds (units)
        SSD_vDisable(seven_seg5);
    5700:	40 91 6f 03 	lds	r20, 0x036F
    5704:	50 91 70 03 	lds	r21, 0x0370
    5708:	60 91 71 03 	lds	r22, 0x0371
    570c:	70 91 72 03 	lds	r23, 0x0372
    5710:	80 91 73 03 	lds	r24, 0x0373
    5714:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg0);
    5718:	40 91 56 03 	lds	r20, 0x0356
    571c:	50 91 57 03 	lds	r21, 0x0357
    5720:	60 91 58 03 	lds	r22, 0x0358
    5724:	70 91 59 03 	lds	r23, 0x0359
    5728:	80 91 5a 03 	lds	r24, 0x035A
    572c:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg0, Time_Second % 10);
    5730:	80 91 97 03 	lds	r24, 0x0397
    5734:	9a e0       	ldi	r25, 0x0A	; 10
    5736:	69 2f       	mov	r22, r25
    5738:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    573c:	89 2f       	mov	r24, r25
    573e:	98 2f       	mov	r25, r24
    5740:	40 91 56 03 	lds	r20, 0x0356
    5744:	50 91 57 03 	lds	r21, 0x0357
    5748:	60 91 58 03 	lds	r22, 0x0358
    574c:	70 91 59 03 	lds	r23, 0x0359
    5750:	80 91 5a 03 	lds	r24, 0x035A
    5754:	29 2f       	mov	r18, r25
    5756:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    575a:	fe 01       	movw	r30, r28
    575c:	e1 5a       	subi	r30, 0xA1	; 161
    575e:	ff 4f       	sbci	r31, 0xFF	; 255
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	a0 ea       	ldi	r26, 0xA0	; 160
    5766:	b0 e4       	ldi	r27, 0x40	; 64
    5768:	80 83       	st	Z, r24
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	a2 83       	std	Z+2, r26	; 0x02
    576e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5770:	8e 01       	movw	r16, r28
    5772:	05 5a       	subi	r16, 0xA5	; 165
    5774:	1f 4f       	sbci	r17, 0xFF	; 255
    5776:	fe 01       	movw	r30, r28
    5778:	e1 5a       	subi	r30, 0xA1	; 161
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	60 81       	ld	r22, Z
    577e:	71 81       	ldd	r23, Z+1	; 0x01
    5780:	82 81       	ldd	r24, Z+2	; 0x02
    5782:	93 81       	ldd	r25, Z+3	; 0x03
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	4a ef       	ldi	r20, 0xFA	; 250
    578a:	54 e4       	ldi	r21, 0x44	; 68
    578c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	f8 01       	movw	r30, r16
    5796:	80 83       	st	Z, r24
    5798:	91 83       	std	Z+1, r25	; 0x01
    579a:	a2 83       	std	Z+2, r26	; 0x02
    579c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    579e:	fe 01       	movw	r30, r28
    57a0:	e5 5a       	subi	r30, 0xA5	; 165
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	60 81       	ld	r22, Z
    57a6:	71 81       	ldd	r23, Z+1	; 0x01
    57a8:	82 81       	ldd	r24, Z+2	; 0x02
    57aa:	93 81       	ldd	r25, Z+3	; 0x03
    57ac:	20 e0       	ldi	r18, 0x00	; 0
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	40 e8       	ldi	r20, 0x80	; 128
    57b2:	5f e3       	ldi	r21, 0x3F	; 63
    57b4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    57b8:	88 23       	and	r24, r24
    57ba:	44 f4       	brge	.+16     	; 0x57cc <main+0x108e>
		__ticks = 1;
    57bc:	fe 01       	movw	r30, r28
    57be:	e7 5a       	subi	r30, 0xA7	; 167
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	91 83       	std	Z+1, r25	; 0x01
    57c8:	80 83       	st	Z, r24
    57ca:	64 c0       	rjmp	.+200    	; 0x5894 <main+0x1156>
	else if (__tmp > 65535)
    57cc:	fe 01       	movw	r30, r28
    57ce:	e5 5a       	subi	r30, 0xA5	; 165
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	60 81       	ld	r22, Z
    57d4:	71 81       	ldd	r23, Z+1	; 0x01
    57d6:	82 81       	ldd	r24, Z+2	; 0x02
    57d8:	93 81       	ldd	r25, Z+3	; 0x03
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	3f ef       	ldi	r19, 0xFF	; 255
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	57 e4       	ldi	r21, 0x47	; 71
    57e2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    57e6:	18 16       	cp	r1, r24
    57e8:	0c f0       	brlt	.+2      	; 0x57ec <main+0x10ae>
    57ea:	43 c0       	rjmp	.+134    	; 0x5872 <main+0x1134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ec:	fe 01       	movw	r30, r28
    57ee:	e1 5a       	subi	r30, 0xA1	; 161
    57f0:	ff 4f       	sbci	r31, 0xFF	; 255
    57f2:	60 81       	ld	r22, Z
    57f4:	71 81       	ldd	r23, Z+1	; 0x01
    57f6:	82 81       	ldd	r24, Z+2	; 0x02
    57f8:	93 81       	ldd	r25, Z+3	; 0x03
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	40 e2       	ldi	r20, 0x20	; 32
    5800:	51 e4       	ldi	r21, 0x41	; 65
    5802:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	8e 01       	movw	r16, r28
    580c:	07 5a       	subi	r16, 0xA7	; 167
    580e:	1f 4f       	sbci	r17, 0xFF	; 255
    5810:	bc 01       	movw	r22, r24
    5812:	cd 01       	movw	r24, r26
    5814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5818:	dc 01       	movw	r26, r24
    581a:	cb 01       	movw	r24, r22
    581c:	f8 01       	movw	r30, r16
    581e:	91 83       	std	Z+1, r25	; 0x01
    5820:	80 83       	st	Z, r24
    5822:	1f c0       	rjmp	.+62     	; 0x5862 <main+0x1124>
    5824:	fe 01       	movw	r30, r28
    5826:	e9 5a       	subi	r30, 0xA9	; 169
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	88 ec       	ldi	r24, 0xC8	; 200
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	91 83       	std	Z+1, r25	; 0x01
    5830:	80 83       	st	Z, r24
    5832:	fe 01       	movw	r30, r28
    5834:	e9 5a       	subi	r30, 0xA9	; 169
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	80 81       	ld	r24, Z
    583a:	91 81       	ldd	r25, Z+1	; 0x01
    583c:	01 97       	sbiw	r24, 0x01	; 1
    583e:	f1 f7       	brne	.-4      	; 0x583c <main+0x10fe>
    5840:	fe 01       	movw	r30, r28
    5842:	e9 5a       	subi	r30, 0xA9	; 169
    5844:	ff 4f       	sbci	r31, 0xFF	; 255
    5846:	91 83       	std	Z+1, r25	; 0x01
    5848:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    584a:	de 01       	movw	r26, r28
    584c:	a7 5a       	subi	r26, 0xA7	; 167
    584e:	bf 4f       	sbci	r27, 0xFF	; 255
    5850:	fe 01       	movw	r30, r28
    5852:	e7 5a       	subi	r30, 0xA7	; 167
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	80 81       	ld	r24, Z
    5858:	91 81       	ldd	r25, Z+1	; 0x01
    585a:	01 97       	sbiw	r24, 0x01	; 1
    585c:	11 96       	adiw	r26, 0x01	; 1
    585e:	9c 93       	st	X, r25
    5860:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5862:	fe 01       	movw	r30, r28
    5864:	e7 5a       	subi	r30, 0xA7	; 167
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	80 81       	ld	r24, Z
    586a:	91 81       	ldd	r25, Z+1	; 0x01
    586c:	00 97       	sbiw	r24, 0x00	; 0
    586e:	d1 f6       	brne	.-76     	; 0x5824 <main+0x10e6>
    5870:	27 c0       	rjmp	.+78     	; 0x58c0 <main+0x1182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5872:	8e 01       	movw	r16, r28
    5874:	07 5a       	subi	r16, 0xA7	; 167
    5876:	1f 4f       	sbci	r17, 0xFF	; 255
    5878:	fe 01       	movw	r30, r28
    587a:	e5 5a       	subi	r30, 0xA5	; 165
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	60 81       	ld	r22, Z
    5880:	71 81       	ldd	r23, Z+1	; 0x01
    5882:	82 81       	ldd	r24, Z+2	; 0x02
    5884:	93 81       	ldd	r25, Z+3	; 0x03
    5886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	f8 01       	movw	r30, r16
    5890:	91 83       	std	Z+1, r25	; 0x01
    5892:	80 83       	st	Z, r24
    5894:	de 01       	movw	r26, r28
    5896:	ab 5a       	subi	r26, 0xAB	; 171
    5898:	bf 4f       	sbci	r27, 0xFF	; 255
    589a:	fe 01       	movw	r30, r28
    589c:	e7 5a       	subi	r30, 0xA7	; 167
    589e:	ff 4f       	sbci	r31, 0xFF	; 255
    58a0:	80 81       	ld	r24, Z
    58a2:	91 81       	ldd	r25, Z+1	; 0x01
    58a4:	8d 93       	st	X+, r24
    58a6:	9c 93       	st	X, r25
    58a8:	fe 01       	movw	r30, r28
    58aa:	eb 5a       	subi	r30, 0xAB	; 171
    58ac:	ff 4f       	sbci	r31, 0xFF	; 255
    58ae:	80 81       	ld	r24, Z
    58b0:	91 81       	ldd	r25, Z+1	; 0x01
    58b2:	01 97       	sbiw	r24, 0x01	; 1
    58b4:	f1 f7       	brne	.-4      	; 0x58b2 <main+0x1174>
    58b6:	fe 01       	movw	r30, r28
    58b8:	eb 5a       	subi	r30, 0xAB	; 171
    58ba:	ff 4f       	sbci	r31, 0xFF	; 255
    58bc:	91 83       	std	Z+1, r25	; 0x01
    58be:	80 83       	st	Z, r24
        _delay_ms(5);

        // Display seconds (tens)
        SSD_vDisable(seven_seg0);
    58c0:	40 91 56 03 	lds	r20, 0x0356
    58c4:	50 91 57 03 	lds	r21, 0x0357
    58c8:	60 91 58 03 	lds	r22, 0x0358
    58cc:	70 91 59 03 	lds	r23, 0x0359
    58d0:	80 91 5a 03 	lds	r24, 0x035A
    58d4:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg1);
    58d8:	40 91 5b 03 	lds	r20, 0x035B
    58dc:	50 91 5c 03 	lds	r21, 0x035C
    58e0:	60 91 5d 03 	lds	r22, 0x035D
    58e4:	70 91 5e 03 	lds	r23, 0x035E
    58e8:	80 91 5f 03 	lds	r24, 0x035F
    58ec:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg1, Time_Second / 10);
    58f0:	80 91 97 03 	lds	r24, 0x0397
    58f4:	9a e0       	ldi	r25, 0x0A	; 10
    58f6:	69 2f       	mov	r22, r25
    58f8:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    58fc:	98 2f       	mov	r25, r24
    58fe:	40 91 5b 03 	lds	r20, 0x035B
    5902:	50 91 5c 03 	lds	r21, 0x035C
    5906:	60 91 5d 03 	lds	r22, 0x035D
    590a:	70 91 5e 03 	lds	r23, 0x035E
    590e:	80 91 5f 03 	lds	r24, 0x035F
    5912:	29 2f       	mov	r18, r25
    5914:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5918:	fe 01       	movw	r30, r28
    591a:	ef 5a       	subi	r30, 0xAF	; 175
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	a0 ea       	ldi	r26, 0xA0	; 160
    5924:	b0 e4       	ldi	r27, 0x40	; 64
    5926:	80 83       	st	Z, r24
    5928:	91 83       	std	Z+1, r25	; 0x01
    592a:	a2 83       	std	Z+2, r26	; 0x02
    592c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    592e:	8e 01       	movw	r16, r28
    5930:	03 5b       	subi	r16, 0xB3	; 179
    5932:	1f 4f       	sbci	r17, 0xFF	; 255
    5934:	fe 01       	movw	r30, r28
    5936:	ef 5a       	subi	r30, 0xAF	; 175
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	60 81       	ld	r22, Z
    593c:	71 81       	ldd	r23, Z+1	; 0x01
    593e:	82 81       	ldd	r24, Z+2	; 0x02
    5940:	93 81       	ldd	r25, Z+3	; 0x03
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	4a ef       	ldi	r20, 0xFA	; 250
    5948:	54 e4       	ldi	r21, 0x44	; 68
    594a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	f8 01       	movw	r30, r16
    5954:	80 83       	st	Z, r24
    5956:	91 83       	std	Z+1, r25	; 0x01
    5958:	a2 83       	std	Z+2, r26	; 0x02
    595a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    595c:	fe 01       	movw	r30, r28
    595e:	e3 5b       	subi	r30, 0xB3	; 179
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	60 81       	ld	r22, Z
    5964:	71 81       	ldd	r23, Z+1	; 0x01
    5966:	82 81       	ldd	r24, Z+2	; 0x02
    5968:	93 81       	ldd	r25, Z+3	; 0x03
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	40 e8       	ldi	r20, 0x80	; 128
    5970:	5f e3       	ldi	r21, 0x3F	; 63
    5972:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5976:	88 23       	and	r24, r24
    5978:	44 f4       	brge	.+16     	; 0x598a <main+0x124c>
		__ticks = 1;
    597a:	fe 01       	movw	r30, r28
    597c:	e5 5b       	subi	r30, 0xB5	; 181
    597e:	ff 4f       	sbci	r31, 0xFF	; 255
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	91 83       	std	Z+1, r25	; 0x01
    5986:	80 83       	st	Z, r24
    5988:	64 c0       	rjmp	.+200    	; 0x5a52 <main+0x1314>
	else if (__tmp > 65535)
    598a:	fe 01       	movw	r30, r28
    598c:	e3 5b       	subi	r30, 0xB3	; 179
    598e:	ff 4f       	sbci	r31, 0xFF	; 255
    5990:	60 81       	ld	r22, Z
    5992:	71 81       	ldd	r23, Z+1	; 0x01
    5994:	82 81       	ldd	r24, Z+2	; 0x02
    5996:	93 81       	ldd	r25, Z+3	; 0x03
    5998:	20 e0       	ldi	r18, 0x00	; 0
    599a:	3f ef       	ldi	r19, 0xFF	; 255
    599c:	4f e7       	ldi	r20, 0x7F	; 127
    599e:	57 e4       	ldi	r21, 0x47	; 71
    59a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    59a4:	18 16       	cp	r1, r24
    59a6:	0c f0       	brlt	.+2      	; 0x59aa <main+0x126c>
    59a8:	43 c0       	rjmp	.+134    	; 0x5a30 <main+0x12f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59aa:	fe 01       	movw	r30, r28
    59ac:	ef 5a       	subi	r30, 0xAF	; 175
    59ae:	ff 4f       	sbci	r31, 0xFF	; 255
    59b0:	60 81       	ld	r22, Z
    59b2:	71 81       	ldd	r23, Z+1	; 0x01
    59b4:	82 81       	ldd	r24, Z+2	; 0x02
    59b6:	93 81       	ldd	r25, Z+3	; 0x03
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	40 e2       	ldi	r20, 0x20	; 32
    59be:	51 e4       	ldi	r21, 0x41	; 65
    59c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	8e 01       	movw	r16, r28
    59ca:	05 5b       	subi	r16, 0xB5	; 181
    59cc:	1f 4f       	sbci	r17, 0xFF	; 255
    59ce:	bc 01       	movw	r22, r24
    59d0:	cd 01       	movw	r24, r26
    59d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d6:	dc 01       	movw	r26, r24
    59d8:	cb 01       	movw	r24, r22
    59da:	f8 01       	movw	r30, r16
    59dc:	91 83       	std	Z+1, r25	; 0x01
    59de:	80 83       	st	Z, r24
    59e0:	1f c0       	rjmp	.+62     	; 0x5a20 <main+0x12e2>
    59e2:	fe 01       	movw	r30, r28
    59e4:	e7 5b       	subi	r30, 0xB7	; 183
    59e6:	ff 4f       	sbci	r31, 0xFF	; 255
    59e8:	88 ec       	ldi	r24, 0xC8	; 200
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	91 83       	std	Z+1, r25	; 0x01
    59ee:	80 83       	st	Z, r24
    59f0:	fe 01       	movw	r30, r28
    59f2:	e7 5b       	subi	r30, 0xB7	; 183
    59f4:	ff 4f       	sbci	r31, 0xFF	; 255
    59f6:	80 81       	ld	r24, Z
    59f8:	91 81       	ldd	r25, Z+1	; 0x01
    59fa:	01 97       	sbiw	r24, 0x01	; 1
    59fc:	f1 f7       	brne	.-4      	; 0x59fa <main+0x12bc>
    59fe:	fe 01       	movw	r30, r28
    5a00:	e7 5b       	subi	r30, 0xB7	; 183
    5a02:	ff 4f       	sbci	r31, 0xFF	; 255
    5a04:	91 83       	std	Z+1, r25	; 0x01
    5a06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a08:	de 01       	movw	r26, r28
    5a0a:	a5 5b       	subi	r26, 0xB5	; 181
    5a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    5a0e:	fe 01       	movw	r30, r28
    5a10:	e5 5b       	subi	r30, 0xB5	; 181
    5a12:	ff 4f       	sbci	r31, 0xFF	; 255
    5a14:	80 81       	ld	r24, Z
    5a16:	91 81       	ldd	r25, Z+1	; 0x01
    5a18:	01 97       	sbiw	r24, 0x01	; 1
    5a1a:	11 96       	adiw	r26, 0x01	; 1
    5a1c:	9c 93       	st	X, r25
    5a1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a20:	fe 01       	movw	r30, r28
    5a22:	e5 5b       	subi	r30, 0xB5	; 181
    5a24:	ff 4f       	sbci	r31, 0xFF	; 255
    5a26:	80 81       	ld	r24, Z
    5a28:	91 81       	ldd	r25, Z+1	; 0x01
    5a2a:	00 97       	sbiw	r24, 0x00	; 0
    5a2c:	d1 f6       	brne	.-76     	; 0x59e2 <main+0x12a4>
    5a2e:	27 c0       	rjmp	.+78     	; 0x5a7e <main+0x1340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a30:	8e 01       	movw	r16, r28
    5a32:	05 5b       	subi	r16, 0xB5	; 181
    5a34:	1f 4f       	sbci	r17, 0xFF	; 255
    5a36:	fe 01       	movw	r30, r28
    5a38:	e3 5b       	subi	r30, 0xB3	; 179
    5a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3c:	60 81       	ld	r22, Z
    5a3e:	71 81       	ldd	r23, Z+1	; 0x01
    5a40:	82 81       	ldd	r24, Z+2	; 0x02
    5a42:	93 81       	ldd	r25, Z+3	; 0x03
    5a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a48:	dc 01       	movw	r26, r24
    5a4a:	cb 01       	movw	r24, r22
    5a4c:	f8 01       	movw	r30, r16
    5a4e:	91 83       	std	Z+1, r25	; 0x01
    5a50:	80 83       	st	Z, r24
    5a52:	de 01       	movw	r26, r28
    5a54:	a9 5b       	subi	r26, 0xB9	; 185
    5a56:	bf 4f       	sbci	r27, 0xFF	; 255
    5a58:	fe 01       	movw	r30, r28
    5a5a:	e5 5b       	subi	r30, 0xB5	; 181
    5a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5e:	80 81       	ld	r24, Z
    5a60:	91 81       	ldd	r25, Z+1	; 0x01
    5a62:	8d 93       	st	X+, r24
    5a64:	9c 93       	st	X, r25
    5a66:	fe 01       	movw	r30, r28
    5a68:	e9 5b       	subi	r30, 0xB9	; 185
    5a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6c:	80 81       	ld	r24, Z
    5a6e:	91 81       	ldd	r25, Z+1	; 0x01
    5a70:	01 97       	sbiw	r24, 0x01	; 1
    5a72:	f1 f7       	brne	.-4      	; 0x5a70 <main+0x1332>
    5a74:	fe 01       	movw	r30, r28
    5a76:	e9 5b       	subi	r30, 0xB9	; 185
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	91 83       	std	Z+1, r25	; 0x01
    5a7c:	80 83       	st	Z, r24
        _delay_ms(5);

        // Display minutes (units)
        SSD_vDisable(seven_seg1);
    5a7e:	40 91 5b 03 	lds	r20, 0x035B
    5a82:	50 91 5c 03 	lds	r21, 0x035C
    5a86:	60 91 5d 03 	lds	r22, 0x035D
    5a8a:	70 91 5e 03 	lds	r23, 0x035E
    5a8e:	80 91 5f 03 	lds	r24, 0x035F
    5a92:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg2);
    5a96:	40 91 60 03 	lds	r20, 0x0360
    5a9a:	50 91 61 03 	lds	r21, 0x0361
    5a9e:	60 91 62 03 	lds	r22, 0x0362
    5aa2:	70 91 63 03 	lds	r23, 0x0363
    5aa6:	80 91 64 03 	lds	r24, 0x0364
    5aaa:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg2, Time_Minute % 10);
    5aae:	80 91 96 03 	lds	r24, 0x0396
    5ab2:	9a e0       	ldi	r25, 0x0A	; 10
    5ab4:	69 2f       	mov	r22, r25
    5ab6:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5aba:	89 2f       	mov	r24, r25
    5abc:	98 2f       	mov	r25, r24
    5abe:	40 91 60 03 	lds	r20, 0x0360
    5ac2:	50 91 61 03 	lds	r21, 0x0361
    5ac6:	60 91 62 03 	lds	r22, 0x0362
    5aca:	70 91 63 03 	lds	r23, 0x0363
    5ace:	80 91 64 03 	lds	r24, 0x0364
    5ad2:	29 2f       	mov	r18, r25
    5ad4:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5ad8:	fe 01       	movw	r30, r28
    5ada:	ed 5b       	subi	r30, 0xBD	; 189
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	a0 ea       	ldi	r26, 0xA0	; 160
    5ae4:	b0 e4       	ldi	r27, 0x40	; 64
    5ae6:	80 83       	st	Z, r24
    5ae8:	91 83       	std	Z+1, r25	; 0x01
    5aea:	a2 83       	std	Z+2, r26	; 0x02
    5aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aee:	8e 01       	movw	r16, r28
    5af0:	01 5c       	subi	r16, 0xC1	; 193
    5af2:	1f 4f       	sbci	r17, 0xFF	; 255
    5af4:	fe 01       	movw	r30, r28
    5af6:	ed 5b       	subi	r30, 0xBD	; 189
    5af8:	ff 4f       	sbci	r31, 0xFF	; 255
    5afa:	60 81       	ld	r22, Z
    5afc:	71 81       	ldd	r23, Z+1	; 0x01
    5afe:	82 81       	ldd	r24, Z+2	; 0x02
    5b00:	93 81       	ldd	r25, Z+3	; 0x03
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	4a ef       	ldi	r20, 0xFA	; 250
    5b08:	54 e4       	ldi	r21, 0x44	; 68
    5b0a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	f8 01       	movw	r30, r16
    5b14:	80 83       	st	Z, r24
    5b16:	91 83       	std	Z+1, r25	; 0x01
    5b18:	a2 83       	std	Z+2, r26	; 0x02
    5b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	ff 96       	adiw	r30, 0x3f	; 63
    5b20:	60 81       	ld	r22, Z
    5b22:	71 81       	ldd	r23, Z+1	; 0x01
    5b24:	82 81       	ldd	r24, Z+2	; 0x02
    5b26:	93 81       	ldd	r25, Z+3	; 0x03
    5b28:	20 e0       	ldi	r18, 0x00	; 0
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	40 e8       	ldi	r20, 0x80	; 128
    5b2e:	5f e3       	ldi	r21, 0x3F	; 63
    5b30:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5b34:	88 23       	and	r24, r24
    5b36:	2c f4       	brge	.+10     	; 0x5b42 <main+0x1404>
		__ticks = 1;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	9e af       	std	Y+62, r25	; 0x3e
    5b3e:	8d af       	std	Y+61, r24	; 0x3d
    5b40:	46 c0       	rjmp	.+140    	; 0x5bce <main+0x1490>
	else if (__tmp > 65535)
    5b42:	fe 01       	movw	r30, r28
    5b44:	ff 96       	adiw	r30, 0x3f	; 63
    5b46:	60 81       	ld	r22, Z
    5b48:	71 81       	ldd	r23, Z+1	; 0x01
    5b4a:	82 81       	ldd	r24, Z+2	; 0x02
    5b4c:	93 81       	ldd	r25, Z+3	; 0x03
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	3f ef       	ldi	r19, 0xFF	; 255
    5b52:	4f e7       	ldi	r20, 0x7F	; 127
    5b54:	57 e4       	ldi	r21, 0x47	; 71
    5b56:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5b5a:	18 16       	cp	r1, r24
    5b5c:	64 f5       	brge	.+88     	; 0x5bb6 <main+0x1478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5e:	fe 01       	movw	r30, r28
    5b60:	ed 5b       	subi	r30, 0xBD	; 189
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	60 81       	ld	r22, Z
    5b66:	71 81       	ldd	r23, Z+1	; 0x01
    5b68:	82 81       	ldd	r24, Z+2	; 0x02
    5b6a:	93 81       	ldd	r25, Z+3	; 0x03
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	40 e2       	ldi	r20, 0x20	; 32
    5b72:	51 e4       	ldi	r21, 0x41	; 65
    5b74:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	bc 01       	movw	r22, r24
    5b7e:	cd 01       	movw	r24, r26
    5b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	9e af       	std	Y+62, r25	; 0x3e
    5b8a:	8d af       	std	Y+61, r24	; 0x3d
    5b8c:	0f c0       	rjmp	.+30     	; 0x5bac <main+0x146e>
    5b8e:	88 ec       	ldi	r24, 0xC8	; 200
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	9c af       	std	Y+60, r25	; 0x3c
    5b94:	8b af       	std	Y+59, r24	; 0x3b
    5b96:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b98:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b9a:	01 97       	sbiw	r24, 0x01	; 1
    5b9c:	f1 f7       	brne	.-4      	; 0x5b9a <main+0x145c>
    5b9e:	9c af       	std	Y+60, r25	; 0x3c
    5ba0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ba6:	01 97       	sbiw	r24, 0x01	; 1
    5ba8:	9e af       	std	Y+62, r25	; 0x3e
    5baa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bac:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bae:	9e ad       	ldd	r25, Y+62	; 0x3e
    5bb0:	00 97       	sbiw	r24, 0x00	; 0
    5bb2:	69 f7       	brne	.-38     	; 0x5b8e <main+0x1450>
    5bb4:	16 c0       	rjmp	.+44     	; 0x5be2 <main+0x14a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bb6:	fe 01       	movw	r30, r28
    5bb8:	ff 96       	adiw	r30, 0x3f	; 63
    5bba:	60 81       	ld	r22, Z
    5bbc:	71 81       	ldd	r23, Z+1	; 0x01
    5bbe:	82 81       	ldd	r24, Z+2	; 0x02
    5bc0:	93 81       	ldd	r25, Z+3	; 0x03
    5bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	cb 01       	movw	r24, r22
    5bca:	9e af       	std	Y+62, r25	; 0x3e
    5bcc:	8d af       	std	Y+61, r24	; 0x3d
    5bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5bd2:	9a af       	std	Y+58, r25	; 0x3a
    5bd4:	89 af       	std	Y+57, r24	; 0x39
    5bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    5bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5bda:	01 97       	sbiw	r24, 0x01	; 1
    5bdc:	f1 f7       	brne	.-4      	; 0x5bda <main+0x149c>
    5bde:	9a af       	std	Y+58, r25	; 0x3a
    5be0:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(5);

        // Display minutes (tens)
        SSD_vDisable(seven_seg2);
    5be2:	40 91 60 03 	lds	r20, 0x0360
    5be6:	50 91 61 03 	lds	r21, 0x0361
    5bea:	60 91 62 03 	lds	r22, 0x0362
    5bee:	70 91 63 03 	lds	r23, 0x0363
    5bf2:	80 91 64 03 	lds	r24, 0x0364
    5bf6:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg3);
    5bfa:	40 91 65 03 	lds	r20, 0x0365
    5bfe:	50 91 66 03 	lds	r21, 0x0366
    5c02:	60 91 67 03 	lds	r22, 0x0367
    5c06:	70 91 68 03 	lds	r23, 0x0368
    5c0a:	80 91 69 03 	lds	r24, 0x0369
    5c0e:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg3, Time_Minute / 10);
    5c12:	80 91 96 03 	lds	r24, 0x0396
    5c16:	9a e0       	ldi	r25, 0x0A	; 10
    5c18:	69 2f       	mov	r22, r25
    5c1a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5c1e:	98 2f       	mov	r25, r24
    5c20:	40 91 65 03 	lds	r20, 0x0365
    5c24:	50 91 66 03 	lds	r21, 0x0366
    5c28:	60 91 67 03 	lds	r22, 0x0367
    5c2c:	70 91 68 03 	lds	r23, 0x0368
    5c30:	80 91 69 03 	lds	r24, 0x0369
    5c34:	29 2f       	mov	r18, r25
    5c36:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5c3a:	80 e0       	ldi	r24, 0x00	; 0
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	a0 ea       	ldi	r26, 0xA0	; 160
    5c40:	b0 e4       	ldi	r27, 0x40	; 64
    5c42:	8d ab       	std	Y+53, r24	; 0x35
    5c44:	9e ab       	std	Y+54, r25	; 0x36
    5c46:	af ab       	std	Y+55, r26	; 0x37
    5c48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    5c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    5c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    5c50:	98 ad       	ldd	r25, Y+56	; 0x38
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4a ef       	ldi	r20, 0xFA	; 250
    5c58:	54 e4       	ldi	r21, 0x44	; 68
    5c5a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5c5e:	dc 01       	movw	r26, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	89 ab       	std	Y+49, r24	; 0x31
    5c64:	9a ab       	std	Y+50, r25	; 0x32
    5c66:	ab ab       	std	Y+51, r26	; 0x33
    5c68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    5c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    5c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    5c70:	9c a9       	ldd	r25, Y+52	; 0x34
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	40 e8       	ldi	r20, 0x80	; 128
    5c78:	5f e3       	ldi	r21, 0x3F	; 63
    5c7a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5c7e:	88 23       	and	r24, r24
    5c80:	2c f4       	brge	.+10     	; 0x5c8c <main+0x154e>
		__ticks = 1;
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	98 ab       	std	Y+48, r25	; 0x30
    5c88:	8f a7       	std	Y+47, r24	; 0x2f
    5c8a:	3f c0       	rjmp	.+126    	; 0x5d0a <main+0x15cc>
	else if (__tmp > 65535)
    5c8c:	69 a9       	ldd	r22, Y+49	; 0x31
    5c8e:	7a a9       	ldd	r23, Y+50	; 0x32
    5c90:	8b a9       	ldd	r24, Y+51	; 0x33
    5c92:	9c a9       	ldd	r25, Y+52	; 0x34
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	3f ef       	ldi	r19, 0xFF	; 255
    5c98:	4f e7       	ldi	r20, 0x7F	; 127
    5c9a:	57 e4       	ldi	r21, 0x47	; 71
    5c9c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5ca0:	18 16       	cp	r1, r24
    5ca2:	4c f5       	brge	.+82     	; 0x5cf6 <main+0x15b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ca4:	6d a9       	ldd	r22, Y+53	; 0x35
    5ca6:	7e a9       	ldd	r23, Y+54	; 0x36
    5ca8:	8f a9       	ldd	r24, Y+55	; 0x37
    5caa:	98 ad       	ldd	r25, Y+56	; 0x38
    5cac:	20 e0       	ldi	r18, 0x00	; 0
    5cae:	30 e0       	ldi	r19, 0x00	; 0
    5cb0:	40 e2       	ldi	r20, 0x20	; 32
    5cb2:	51 e4       	ldi	r21, 0x41	; 65
    5cb4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5cb8:	dc 01       	movw	r26, r24
    5cba:	cb 01       	movw	r24, r22
    5cbc:	bc 01       	movw	r22, r24
    5cbe:	cd 01       	movw	r24, r26
    5cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	cb 01       	movw	r24, r22
    5cc8:	98 ab       	std	Y+48, r25	; 0x30
    5cca:	8f a7       	std	Y+47, r24	; 0x2f
    5ccc:	0f c0       	rjmp	.+30     	; 0x5cec <main+0x15ae>
    5cce:	88 ec       	ldi	r24, 0xC8	; 200
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	9e a7       	std	Y+46, r25	; 0x2e
    5cd4:	8d a7       	std	Y+45, r24	; 0x2d
    5cd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    5cd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    5cda:	01 97       	sbiw	r24, 0x01	; 1
    5cdc:	f1 f7       	brne	.-4      	; 0x5cda <main+0x159c>
    5cde:	9e a7       	std	Y+46, r25	; 0x2e
    5ce0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ce4:	98 a9       	ldd	r25, Y+48	; 0x30
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	98 ab       	std	Y+48, r25	; 0x30
    5cea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    5cee:	98 a9       	ldd	r25, Y+48	; 0x30
    5cf0:	00 97       	sbiw	r24, 0x00	; 0
    5cf2:	69 f7       	brne	.-38     	; 0x5cce <main+0x1590>
    5cf4:	14 c0       	rjmp	.+40     	; 0x5d1e <main+0x15e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cf6:	69 a9       	ldd	r22, Y+49	; 0x31
    5cf8:	7a a9       	ldd	r23, Y+50	; 0x32
    5cfa:	8b a9       	ldd	r24, Y+51	; 0x33
    5cfc:	9c a9       	ldd	r25, Y+52	; 0x34
    5cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d02:	dc 01       	movw	r26, r24
    5d04:	cb 01       	movw	r24, r22
    5d06:	98 ab       	std	Y+48, r25	; 0x30
    5d08:	8f a7       	std	Y+47, r24	; 0x2f
    5d0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d0c:	98 a9       	ldd	r25, Y+48	; 0x30
    5d0e:	9c a7       	std	Y+44, r25	; 0x2c
    5d10:	8b a7       	std	Y+43, r24	; 0x2b
    5d12:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d14:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d16:	01 97       	sbiw	r24, 0x01	; 1
    5d18:	f1 f7       	brne	.-4      	; 0x5d16 <main+0x15d8>
    5d1a:	9c a7       	std	Y+44, r25	; 0x2c
    5d1c:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(5);

        // Display hours (units)
        SSD_vDisable(seven_seg3);
    5d1e:	40 91 65 03 	lds	r20, 0x0365
    5d22:	50 91 66 03 	lds	r21, 0x0366
    5d26:	60 91 67 03 	lds	r22, 0x0367
    5d2a:	70 91 68 03 	lds	r23, 0x0368
    5d2e:	80 91 69 03 	lds	r24, 0x0369
    5d32:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg4);
    5d36:	40 91 6a 03 	lds	r20, 0x036A
    5d3a:	50 91 6b 03 	lds	r21, 0x036B
    5d3e:	60 91 6c 03 	lds	r22, 0x036C
    5d42:	70 91 6d 03 	lds	r23, 0x036D
    5d46:	80 91 6e 03 	lds	r24, 0x036E
    5d4a:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg4, Time_Hour % 10);
    5d4e:	80 91 54 03 	lds	r24, 0x0354
    5d52:	9a e0       	ldi	r25, 0x0A	; 10
    5d54:	69 2f       	mov	r22, r25
    5d56:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5d5a:	89 2f       	mov	r24, r25
    5d5c:	98 2f       	mov	r25, r24
    5d5e:	40 91 6a 03 	lds	r20, 0x036A
    5d62:	50 91 6b 03 	lds	r21, 0x036B
    5d66:	60 91 6c 03 	lds	r22, 0x036C
    5d6a:	70 91 6d 03 	lds	r23, 0x036D
    5d6e:	80 91 6e 03 	lds	r24, 0x036E
    5d72:	29 2f       	mov	r18, r25
    5d74:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	a0 ea       	ldi	r26, 0xA0	; 160
    5d7e:	b0 e4       	ldi	r27, 0x40	; 64
    5d80:	8f a3       	std	Y+39, r24	; 0x27
    5d82:	98 a7       	std	Y+40, r25	; 0x28
    5d84:	a9 a7       	std	Y+41, r26	; 0x29
    5d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d88:	6f a1       	ldd	r22, Y+39	; 0x27
    5d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    5d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    5d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d90:	20 e0       	ldi	r18, 0x00	; 0
    5d92:	30 e0       	ldi	r19, 0x00	; 0
    5d94:	4a ef       	ldi	r20, 0xFA	; 250
    5d96:	54 e4       	ldi	r21, 0x44	; 68
    5d98:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5d9c:	dc 01       	movw	r26, r24
    5d9e:	cb 01       	movw	r24, r22
    5da0:	8b a3       	std	Y+35, r24	; 0x23
    5da2:	9c a3       	std	Y+36, r25	; 0x24
    5da4:	ad a3       	std	Y+37, r26	; 0x25
    5da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5da8:	6b a1       	ldd	r22, Y+35	; 0x23
    5daa:	7c a1       	ldd	r23, Y+36	; 0x24
    5dac:	8d a1       	ldd	r24, Y+37	; 0x25
    5dae:	9e a1       	ldd	r25, Y+38	; 0x26
    5db0:	20 e0       	ldi	r18, 0x00	; 0
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	40 e8       	ldi	r20, 0x80	; 128
    5db6:	5f e3       	ldi	r21, 0x3F	; 63
    5db8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5dbc:	88 23       	and	r24, r24
    5dbe:	2c f4       	brge	.+10     	; 0x5dca <main+0x168c>
		__ticks = 1;
    5dc0:	81 e0       	ldi	r24, 0x01	; 1
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	9a a3       	std	Y+34, r25	; 0x22
    5dc6:	89 a3       	std	Y+33, r24	; 0x21
    5dc8:	3f c0       	rjmp	.+126    	; 0x5e48 <main+0x170a>
	else if (__tmp > 65535)
    5dca:	6b a1       	ldd	r22, Y+35	; 0x23
    5dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    5dce:	8d a1       	ldd	r24, Y+37	; 0x25
    5dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    5dd2:	20 e0       	ldi	r18, 0x00	; 0
    5dd4:	3f ef       	ldi	r19, 0xFF	; 255
    5dd6:	4f e7       	ldi	r20, 0x7F	; 127
    5dd8:	57 e4       	ldi	r21, 0x47	; 71
    5dda:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5dde:	18 16       	cp	r1, r24
    5de0:	4c f5       	brge	.+82     	; 0x5e34 <main+0x16f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5de2:	6f a1       	ldd	r22, Y+39	; 0x27
    5de4:	78 a5       	ldd	r23, Y+40	; 0x28
    5de6:	89 a5       	ldd	r24, Y+41	; 0x29
    5de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5dea:	20 e0       	ldi	r18, 0x00	; 0
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	40 e2       	ldi	r20, 0x20	; 32
    5df0:	51 e4       	ldi	r21, 0x41	; 65
    5df2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5df6:	dc 01       	movw	r26, r24
    5df8:	cb 01       	movw	r24, r22
    5dfa:	bc 01       	movw	r22, r24
    5dfc:	cd 01       	movw	r24, r26
    5dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e02:	dc 01       	movw	r26, r24
    5e04:	cb 01       	movw	r24, r22
    5e06:	9a a3       	std	Y+34, r25	; 0x22
    5e08:	89 a3       	std	Y+33, r24	; 0x21
    5e0a:	0f c0       	rjmp	.+30     	; 0x5e2a <main+0x16ec>
    5e0c:	88 ec       	ldi	r24, 0xC8	; 200
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	98 a3       	std	Y+32, r25	; 0x20
    5e12:	8f 8f       	std	Y+31, r24	; 0x1f
    5e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e16:	98 a1       	ldd	r25, Y+32	; 0x20
    5e18:	01 97       	sbiw	r24, 0x01	; 1
    5e1a:	f1 f7       	brne	.-4      	; 0x5e18 <main+0x16da>
    5e1c:	98 a3       	std	Y+32, r25	; 0x20
    5e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e20:	89 a1       	ldd	r24, Y+33	; 0x21
    5e22:	9a a1       	ldd	r25, Y+34	; 0x22
    5e24:	01 97       	sbiw	r24, 0x01	; 1
    5e26:	9a a3       	std	Y+34, r25	; 0x22
    5e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    5e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    5e2e:	00 97       	sbiw	r24, 0x00	; 0
    5e30:	69 f7       	brne	.-38     	; 0x5e0c <main+0x16ce>
    5e32:	14 c0       	rjmp	.+40     	; 0x5e5c <main+0x171e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e34:	6b a1       	ldd	r22, Y+35	; 0x23
    5e36:	7c a1       	ldd	r23, Y+36	; 0x24
    5e38:	8d a1       	ldd	r24, Y+37	; 0x25
    5e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    5e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e40:	dc 01       	movw	r26, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	9a a3       	std	Y+34, r25	; 0x22
    5e46:	89 a3       	std	Y+33, r24	; 0x21
    5e48:	89 a1       	ldd	r24, Y+33	; 0x21
    5e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    5e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    5e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    5e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e54:	01 97       	sbiw	r24, 0x01	; 1
    5e56:	f1 f7       	brne	.-4      	; 0x5e54 <main+0x1716>
    5e58:	9e 8f       	std	Y+30, r25	; 0x1e
    5e5a:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(5);

        // Display hours (tens)
        SSD_vDisable(seven_seg4);
    5e5c:	40 91 6a 03 	lds	r20, 0x036A
    5e60:	50 91 6b 03 	lds	r21, 0x036B
    5e64:	60 91 6c 03 	lds	r22, 0x036C
    5e68:	70 91 6d 03 	lds	r23, 0x036D
    5e6c:	80 91 6e 03 	lds	r24, 0x036E
    5e70:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SSD_vDisable>
        SSD_vEnable(seven_seg5);
    5e74:	40 91 6f 03 	lds	r20, 0x036F
    5e78:	50 91 70 03 	lds	r21, 0x0370
    5e7c:	60 91 71 03 	lds	r22, 0x0371
    5e80:	70 91 72 03 	lds	r23, 0x0372
    5e84:	80 91 73 03 	lds	r24, 0x0373
    5e88:	0e 94 39 23 	call	0x4672	; 0x4672 <SSD_vEnable>
        SSD_vSendNumber(seven_seg5, Time_Hour / 10);
    5e8c:	80 91 54 03 	lds	r24, 0x0354
    5e90:	9a e0       	ldi	r25, 0x0A	; 10
    5e92:	69 2f       	mov	r22, r25
    5e94:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    5e98:	98 2f       	mov	r25, r24
    5e9a:	40 91 6f 03 	lds	r20, 0x036F
    5e9e:	50 91 70 03 	lds	r21, 0x0370
    5ea2:	60 91 71 03 	lds	r22, 0x0371
    5ea6:	70 91 72 03 	lds	r23, 0x0372
    5eaa:	80 91 73 03 	lds	r24, 0x0373
    5eae:	29 2f       	mov	r18, r25
    5eb0:	0e 94 14 23 	call	0x4628	; 0x4628 <SSD_vSendNumber>
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	a0 ea       	ldi	r26, 0xA0	; 160
    5eba:	b0 e4       	ldi	r27, 0x40	; 64
    5ebc:	89 8f       	std	Y+25, r24	; 0x19
    5ebe:	9a 8f       	std	Y+26, r25	; 0x1a
    5ec0:	ab 8f       	std	Y+27, r26	; 0x1b
    5ec2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    5ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	4a ef       	ldi	r20, 0xFA	; 250
    5ed2:	54 e4       	ldi	r21, 0x44	; 68
    5ed4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5ed8:	dc 01       	movw	r26, r24
    5eda:	cb 01       	movw	r24, r22
    5edc:	8d 8b       	std	Y+21, r24	; 0x15
    5ede:	9e 8b       	std	Y+22, r25	; 0x16
    5ee0:	af 8b       	std	Y+23, r26	; 0x17
    5ee2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    5ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    5ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    5eea:	98 8d       	ldd	r25, Y+24	; 0x18
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e8       	ldi	r20, 0x80	; 128
    5ef2:	5f e3       	ldi	r21, 0x3F	; 63
    5ef4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5ef8:	88 23       	and	r24, r24
    5efa:	2c f4       	brge	.+10     	; 0x5f06 <main+0x17c8>
		__ticks = 1;
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	9c 8b       	std	Y+20, r25	; 0x14
    5f02:	8b 8b       	std	Y+19, r24	; 0x13
    5f04:	3f c0       	rjmp	.+126    	; 0x5f84 <main+0x1846>
	else if (__tmp > 65535)
    5f06:	6d 89       	ldd	r22, Y+21	; 0x15
    5f08:	7e 89       	ldd	r23, Y+22	; 0x16
    5f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    5f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	3f ef       	ldi	r19, 0xFF	; 255
    5f12:	4f e7       	ldi	r20, 0x7F	; 127
    5f14:	57 e4       	ldi	r21, 0x47	; 71
    5f16:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5f1a:	18 16       	cp	r1, r24
    5f1c:	4c f5       	brge	.+82     	; 0x5f70 <main+0x1832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f1e:	69 8d       	ldd	r22, Y+25	; 0x19
    5f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	40 e2       	ldi	r20, 0x20	; 32
    5f2c:	51 e4       	ldi	r21, 0x41	; 65
    5f2e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5f32:	dc 01       	movw	r26, r24
    5f34:	cb 01       	movw	r24, r22
    5f36:	bc 01       	movw	r22, r24
    5f38:	cd 01       	movw	r24, r26
    5f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	9c 8b       	std	Y+20, r25	; 0x14
    5f44:	8b 8b       	std	Y+19, r24	; 0x13
    5f46:	0f c0       	rjmp	.+30     	; 0x5f66 <main+0x1828>
    5f48:	88 ec       	ldi	r24, 0xC8	; 200
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	9a 8b       	std	Y+18, r25	; 0x12
    5f4e:	89 8b       	std	Y+17, r24	; 0x11
    5f50:	89 89       	ldd	r24, Y+17	; 0x11
    5f52:	9a 89       	ldd	r25, Y+18	; 0x12
    5f54:	01 97       	sbiw	r24, 0x01	; 1
    5f56:	f1 f7       	brne	.-4      	; 0x5f54 <main+0x1816>
    5f58:	9a 8b       	std	Y+18, r25	; 0x12
    5f5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5f60:	01 97       	sbiw	r24, 0x01	; 1
    5f62:	9c 8b       	std	Y+20, r25	; 0x14
    5f64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f66:	8b 89       	ldd	r24, Y+19	; 0x13
    5f68:	9c 89       	ldd	r25, Y+20	; 0x14
    5f6a:	00 97       	sbiw	r24, 0x00	; 0
    5f6c:	69 f7       	brne	.-38     	; 0x5f48 <main+0x180a>
    5f6e:	14 c0       	rjmp	.+40     	; 0x5f98 <main+0x185a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f70:	6d 89       	ldd	r22, Y+21	; 0x15
    5f72:	7e 89       	ldd	r23, Y+22	; 0x16
    5f74:	8f 89       	ldd	r24, Y+23	; 0x17
    5f76:	98 8d       	ldd	r25, Y+24	; 0x18
    5f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	cb 01       	movw	r24, r22
    5f80:	9c 8b       	std	Y+20, r25	; 0x14
    5f82:	8b 8b       	std	Y+19, r24	; 0x13
    5f84:	8b 89       	ldd	r24, Y+19	; 0x13
    5f86:	9c 89       	ldd	r25, Y+20	; 0x14
    5f88:	98 8b       	std	Y+16, r25	; 0x10
    5f8a:	8f 87       	std	Y+15, r24	; 0x0f
    5f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f8e:	98 89       	ldd	r25, Y+16	; 0x10
    5f90:	01 97       	sbiw	r24, 0x01	; 1
    5f92:	f1 f7       	brne	.-4      	; 0x5f90 <main+0x1852>
    5f94:	98 8b       	std	Y+16, r25	; 0x10
    5f96:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(5);

        BUZ_vTog(BUZ0);
    5f98:	60 91 77 03 	lds	r22, 0x0377
    5f9c:	70 91 78 03 	lds	r23, 0x0378
    5fa0:	80 91 79 03 	lds	r24, 0x0379
    5fa4:	0e 94 dd 22 	call	0x45ba	; 0x45ba <BUZ_vTog>
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	a0 e2       	ldi	r26, 0x20	; 32
    5fae:	b1 e4       	ldi	r27, 0x41	; 65
    5fb0:	8b 87       	std	Y+11, r24	; 0x0b
    5fb2:	9c 87       	std	Y+12, r25	; 0x0c
    5fb4:	ad 87       	std	Y+13, r26	; 0x0d
    5fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    5fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fc0:	20 e0       	ldi	r18, 0x00	; 0
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	4a ef       	ldi	r20, 0xFA	; 250
    5fc6:	54 e4       	ldi	r21, 0x44	; 68
    5fc8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5fcc:	dc 01       	movw	r26, r24
    5fce:	cb 01       	movw	r24, r22
    5fd0:	8f 83       	std	Y+7, r24	; 0x07
    5fd2:	98 87       	std	Y+8, r25	; 0x08
    5fd4:	a9 87       	std	Y+9, r26	; 0x09
    5fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    5fda:	78 85       	ldd	r23, Y+8	; 0x08
    5fdc:	89 85       	ldd	r24, Y+9	; 0x09
    5fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fe0:	20 e0       	ldi	r18, 0x00	; 0
    5fe2:	30 e0       	ldi	r19, 0x00	; 0
    5fe4:	40 e8       	ldi	r20, 0x80	; 128
    5fe6:	5f e3       	ldi	r21, 0x3F	; 63
    5fe8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5fec:	88 23       	and	r24, r24
    5fee:	2c f4       	brge	.+10     	; 0x5ffa <main+0x18bc>
		__ticks = 1;
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	9e 83       	std	Y+6, r25	; 0x06
    5ff6:	8d 83       	std	Y+5, r24	; 0x05
    5ff8:	3f c0       	rjmp	.+126    	; 0x6078 <main+0x193a>
	else if (__tmp > 65535)
    5ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    5ffc:	78 85       	ldd	r23, Y+8	; 0x08
    5ffe:	89 85       	ldd	r24, Y+9	; 0x09
    6000:	9a 85       	ldd	r25, Y+10	; 0x0a
    6002:	20 e0       	ldi	r18, 0x00	; 0
    6004:	3f ef       	ldi	r19, 0xFF	; 255
    6006:	4f e7       	ldi	r20, 0x7F	; 127
    6008:	57 e4       	ldi	r21, 0x47	; 71
    600a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    600e:	18 16       	cp	r1, r24
    6010:	4c f5       	brge	.+82     	; 0x6064 <main+0x1926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6012:	6b 85       	ldd	r22, Y+11	; 0x0b
    6014:	7c 85       	ldd	r23, Y+12	; 0x0c
    6016:	8d 85       	ldd	r24, Y+13	; 0x0d
    6018:	9e 85       	ldd	r25, Y+14	; 0x0e
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	40 e2       	ldi	r20, 0x20	; 32
    6020:	51 e4       	ldi	r21, 0x41	; 65
    6022:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6026:	dc 01       	movw	r26, r24
    6028:	cb 01       	movw	r24, r22
    602a:	bc 01       	movw	r22, r24
    602c:	cd 01       	movw	r24, r26
    602e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6032:	dc 01       	movw	r26, r24
    6034:	cb 01       	movw	r24, r22
    6036:	9e 83       	std	Y+6, r25	; 0x06
    6038:	8d 83       	std	Y+5, r24	; 0x05
    603a:	0f c0       	rjmp	.+30     	; 0x605a <main+0x191c>
    603c:	88 ec       	ldi	r24, 0xC8	; 200
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	9c 83       	std	Y+4, r25	; 0x04
    6042:	8b 83       	std	Y+3, r24	; 0x03
    6044:	8b 81       	ldd	r24, Y+3	; 0x03
    6046:	9c 81       	ldd	r25, Y+4	; 0x04
    6048:	01 97       	sbiw	r24, 0x01	; 1
    604a:	f1 f7       	brne	.-4      	; 0x6048 <main+0x190a>
    604c:	9c 83       	std	Y+4, r25	; 0x04
    604e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6050:	8d 81       	ldd	r24, Y+5	; 0x05
    6052:	9e 81       	ldd	r25, Y+6	; 0x06
    6054:	01 97       	sbiw	r24, 0x01	; 1
    6056:	9e 83       	std	Y+6, r25	; 0x06
    6058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    605a:	8d 81       	ldd	r24, Y+5	; 0x05
    605c:	9e 81       	ldd	r25, Y+6	; 0x06
    605e:	00 97       	sbiw	r24, 0x00	; 0
    6060:	69 f7       	brne	.-38     	; 0x603c <main+0x18fe>
    6062:	45 cb       	rjmp	.-2422   	; 0x56ee <main+0xfb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6064:	6f 81       	ldd	r22, Y+7	; 0x07
    6066:	78 85       	ldd	r23, Y+8	; 0x08
    6068:	89 85       	ldd	r24, Y+9	; 0x09
    606a:	9a 85       	ldd	r25, Y+10	; 0x0a
    606c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6070:	dc 01       	movw	r26, r24
    6072:	cb 01       	movw	r24, r22
    6074:	9e 83       	std	Y+6, r25	; 0x06
    6076:	8d 83       	std	Y+5, r24	; 0x05
    6078:	8d 81       	ldd	r24, Y+5	; 0x05
    607a:	9e 81       	ldd	r25, Y+6	; 0x06
    607c:	9a 83       	std	Y+2, r25	; 0x02
    607e:	89 83       	std	Y+1, r24	; 0x01
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	9a 81       	ldd	r25, Y+2	; 0x02
    6084:	01 97       	sbiw	r24, 0x01	; 1
    6086:	f1 f7       	brne	.-4      	; 0x6084 <main+0x1946>
    6088:	9a 83       	std	Y+2, r25	; 0x02
    608a:	89 83       	std	Y+1, r24	; 0x01
    608c:	30 cb       	rjmp	.-2464   	; 0x56ee <main+0xfb0>
        _delay_ms(10);
      }
      BUZ_vOff(BUZ0);
    608e:	60 91 77 03 	lds	r22, 0x0377
    6092:	70 91 78 03 	lds	r23, 0x0378
    6096:	80 91 79 03 	lds	r24, 0x0379
    609a:	0e 94 bb 22 	call	0x4576	; 0x4576 <BUZ_vOff>
      CLCD_vClearScreen();
    609e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Press ON to");
    60a2:	80 e6       	ldi	r24, 0x60	; 96
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    60aa:	82 e0       	ldi	r24, 0x02	; 2
    60ac:	61 e0       	ldi	r22, 0x01	; 1
    60ae:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("Show Option");
    60b2:	8c e6       	ldi	r24, 0x6C	; 108
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    60ba:	0c 94 26 24 	jmp	0x484c	; 0x484c <main+0x10e>

000060be <Set_Time>:

//======================================================================================================================================//

// Function to set time
void Set_Time()
{
    60be:	df 93       	push	r29
    60c0:	cf 93       	push	r28
    60c2:	cd b7       	in	r28, 0x3d	; 61
    60c4:	de b7       	in	r29, 0x3e	; 62
    60c6:	aa 97       	sbiw	r28, 0x2a	; 42
    60c8:	0f b6       	in	r0, 0x3f	; 63
    60ca:	f8 94       	cli
    60cc:	de bf       	out	0x3e, r29	; 62
    60ce:	0f be       	out	0x3f, r0	; 63
    60d0:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    60d2:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("1 - 12-hour time");
    60d6:	89 e0       	ldi	r24, 0x09	; 9
    60d8:	91 e0       	ldi	r25, 0x01	; 1
    60da:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    60de:	82 e0       	ldi	r24, 0x02	; 2
    60e0:	61 e0       	ldi	r22, 0x01	; 1
    60e2:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("2 - 24-hour time");
    60e6:	8a e1       	ldi	r24, 0x1A	; 26
    60e8:	91 e0       	ldi	r25, 0x01	; 1
    60ea:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  /* Select time mode: 12 Hours or 24 Hours */
  do
  {
    /*___________________________________________________________________________________________________________________*/

    Time_Mode = KPD_u8GetPressed();
    60ee:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    60f2:	80 93 55 03 	sts	0x0355, r24

    if (Time_Mode != NOTPRESSED && (Time_Mode != Time_Mode12Hours && Time_Mode != Time_Mode24Hours))
    60f6:	80 91 55 03 	lds	r24, 0x0355
    60fa:	8f 3f       	cpi	r24, 0xFF	; 255
    60fc:	09 f4       	brne	.+2      	; 0x6100 <Set_Time+0x42>
    60fe:	90 c0       	rjmp	.+288    	; 0x6220 <Set_Time+0x162>
    6100:	80 91 55 03 	lds	r24, 0x0355
    6104:	81 33       	cpi	r24, 0x31	; 49
    6106:	09 f4       	brne	.+2      	; 0x610a <Set_Time+0x4c>
    6108:	8b c0       	rjmp	.+278    	; 0x6220 <Set_Time+0x162>
    610a:	80 91 55 03 	lds	r24, 0x0355
    610e:	82 33       	cpi	r24, 0x32	; 50
    6110:	09 f4       	brne	.+2      	; 0x6114 <Set_Time+0x56>
    6112:	86 c0       	rjmp	.+268    	; 0x6220 <Set_Time+0x162>
    {
      // Handle wrong input
      CLCD_vClearScreen();
    6114:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("wrong choise");
    6118:	8b e2       	ldi	r24, 0x2B	; 43
    611a:	91 e0       	ldi	r25, 0x01	; 1
    611c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6120:	80 e0       	ldi	r24, 0x00	; 0
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	aa ef       	ldi	r26, 0xFA	; 250
    6126:	b3 e4       	ldi	r27, 0x43	; 67
    6128:	8f a3       	std	Y+39, r24	; 0x27
    612a:	98 a7       	std	Y+40, r25	; 0x28
    612c:	a9 a7       	std	Y+41, r26	; 0x29
    612e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6130:	6f a1       	ldd	r22, Y+39	; 0x27
    6132:	78 a5       	ldd	r23, Y+40	; 0x28
    6134:	89 a5       	ldd	r24, Y+41	; 0x29
    6136:	9a a5       	ldd	r25, Y+42	; 0x2a
    6138:	20 e0       	ldi	r18, 0x00	; 0
    613a:	30 e0       	ldi	r19, 0x00	; 0
    613c:	4a ef       	ldi	r20, 0xFA	; 250
    613e:	54 e4       	ldi	r21, 0x44	; 68
    6140:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6144:	dc 01       	movw	r26, r24
    6146:	cb 01       	movw	r24, r22
    6148:	8b a3       	std	Y+35, r24	; 0x23
    614a:	9c a3       	std	Y+36, r25	; 0x24
    614c:	ad a3       	std	Y+37, r26	; 0x25
    614e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6150:	6b a1       	ldd	r22, Y+35	; 0x23
    6152:	7c a1       	ldd	r23, Y+36	; 0x24
    6154:	8d a1       	ldd	r24, Y+37	; 0x25
    6156:	9e a1       	ldd	r25, Y+38	; 0x26
    6158:	20 e0       	ldi	r18, 0x00	; 0
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	40 e8       	ldi	r20, 0x80	; 128
    615e:	5f e3       	ldi	r21, 0x3F	; 63
    6160:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6164:	88 23       	and	r24, r24
    6166:	2c f4       	brge	.+10     	; 0x6172 <Set_Time+0xb4>
		__ticks = 1;
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	9a a3       	std	Y+34, r25	; 0x22
    616e:	89 a3       	std	Y+33, r24	; 0x21
    6170:	3f c0       	rjmp	.+126    	; 0x61f0 <Set_Time+0x132>
	else if (__tmp > 65535)
    6172:	6b a1       	ldd	r22, Y+35	; 0x23
    6174:	7c a1       	ldd	r23, Y+36	; 0x24
    6176:	8d a1       	ldd	r24, Y+37	; 0x25
    6178:	9e a1       	ldd	r25, Y+38	; 0x26
    617a:	20 e0       	ldi	r18, 0x00	; 0
    617c:	3f ef       	ldi	r19, 0xFF	; 255
    617e:	4f e7       	ldi	r20, 0x7F	; 127
    6180:	57 e4       	ldi	r21, 0x47	; 71
    6182:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6186:	18 16       	cp	r1, r24
    6188:	4c f5       	brge	.+82     	; 0x61dc <Set_Time+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    618a:	6f a1       	ldd	r22, Y+39	; 0x27
    618c:	78 a5       	ldd	r23, Y+40	; 0x28
    618e:	89 a5       	ldd	r24, Y+41	; 0x29
    6190:	9a a5       	ldd	r25, Y+42	; 0x2a
    6192:	20 e0       	ldi	r18, 0x00	; 0
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	40 e2       	ldi	r20, 0x20	; 32
    6198:	51 e4       	ldi	r21, 0x41	; 65
    619a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    619e:	dc 01       	movw	r26, r24
    61a0:	cb 01       	movw	r24, r22
    61a2:	bc 01       	movw	r22, r24
    61a4:	cd 01       	movw	r24, r26
    61a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	9a a3       	std	Y+34, r25	; 0x22
    61b0:	89 a3       	std	Y+33, r24	; 0x21
    61b2:	0f c0       	rjmp	.+30     	; 0x61d2 <Set_Time+0x114>
    61b4:	88 ec       	ldi	r24, 0xC8	; 200
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	98 a3       	std	Y+32, r25	; 0x20
    61ba:	8f 8f       	std	Y+31, r24	; 0x1f
    61bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    61be:	98 a1       	ldd	r25, Y+32	; 0x20
    61c0:	01 97       	sbiw	r24, 0x01	; 1
    61c2:	f1 f7       	brne	.-4      	; 0x61c0 <Set_Time+0x102>
    61c4:	98 a3       	std	Y+32, r25	; 0x20
    61c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61c8:	89 a1       	ldd	r24, Y+33	; 0x21
    61ca:	9a a1       	ldd	r25, Y+34	; 0x22
    61cc:	01 97       	sbiw	r24, 0x01	; 1
    61ce:	9a a3       	std	Y+34, r25	; 0x22
    61d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61d2:	89 a1       	ldd	r24, Y+33	; 0x21
    61d4:	9a a1       	ldd	r25, Y+34	; 0x22
    61d6:	00 97       	sbiw	r24, 0x00	; 0
    61d8:	69 f7       	brne	.-38     	; 0x61b4 <Set_Time+0xf6>
    61da:	14 c0       	rjmp	.+40     	; 0x6204 <Set_Time+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61dc:	6b a1       	ldd	r22, Y+35	; 0x23
    61de:	7c a1       	ldd	r23, Y+36	; 0x24
    61e0:	8d a1       	ldd	r24, Y+37	; 0x25
    61e2:	9e a1       	ldd	r25, Y+38	; 0x26
    61e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61e8:	dc 01       	movw	r26, r24
    61ea:	cb 01       	movw	r24, r22
    61ec:	9a a3       	std	Y+34, r25	; 0x22
    61ee:	89 a3       	std	Y+33, r24	; 0x21
    61f0:	89 a1       	ldd	r24, Y+33	; 0x21
    61f2:	9a a1       	ldd	r25, Y+34	; 0x22
    61f4:	9e 8f       	std	Y+30, r25	; 0x1e
    61f6:	8d 8f       	std	Y+29, r24	; 0x1d
    61f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    61fc:	01 97       	sbiw	r24, 0x01	; 1
    61fe:	f1 f7       	brne	.-4      	; 0x61fc <Set_Time+0x13e>
    6200:	9e 8f       	std	Y+30, r25	; 0x1e
    6202:	8d 8f       	std	Y+29, r24	; 0x1d
      _delay_ms(500);
      CLCD_vClearScreen();
    6204:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("1 - 12-hour time");
    6208:	89 e0       	ldi	r24, 0x09	; 9
    620a:	91 e0       	ldi	r25, 0x01	; 1
    620c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    6210:	82 e0       	ldi	r24, 0x02	; 2
    6212:	61 e0       	ldi	r22, 0x01	; 1
    6214:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - 24-hour time");
    6218:	8a e1       	ldi	r24, 0x1A	; 26
    621a:	91 e0       	ldi	r25, 0x01	; 1
    621c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    }
  } while (Time_Mode == NOTPRESSED || (Time_Mode != Time_Mode12Hours && Time_Mode != Time_Mode24Hours));
    6220:	80 91 55 03 	lds	r24, 0x0355
    6224:	8f 3f       	cpi	r24, 0xFF	; 255
    6226:	09 f4       	brne	.+2      	; 0x622a <Set_Time+0x16c>
    6228:	62 cf       	rjmp	.-316    	; 0x60ee <Set_Time+0x30>
    622a:	80 91 55 03 	lds	r24, 0x0355
    622e:	81 33       	cpi	r24, 0x31	; 49
    6230:	29 f0       	breq	.+10     	; 0x623c <Set_Time+0x17e>
    6232:	80 91 55 03 	lds	r24, 0x0355
    6236:	82 33       	cpi	r24, 0x32	; 50
    6238:	09 f0       	breq	.+2      	; 0x623c <Set_Time+0x17e>
    623a:	59 cf       	rjmp	.-334    	; 0x60ee <Set_Time+0x30>

  /*___________________________________________________________________________________________________________________*/

  // Set AM or PM flag based on selected mode
  if (Time_Mode == Time_Mode12Hours)
    623c:	80 91 55 03 	lds	r24, 0x0355
    6240:	81 33       	cpi	r24, 0x31	; 49
    6242:	21 f4       	brne	.+8      	; 0x624c <Set_Time+0x18e>
  {
    Time_ModeFlag = 1;
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	80 93 53 03 	sts	0x0353, r24
    624a:	06 c0       	rjmp	.+12     	; 0x6258 <Set_Time+0x19a>
  }
  else if (Time_Mode == Time_Mode24Hours)
    624c:	80 91 55 03 	lds	r24, 0x0355
    6250:	82 33       	cpi	r24, 0x32	; 50
    6252:	11 f4       	brne	.+4      	; 0x6258 <Set_Time+0x19a>
  {
    Time_ModeFlag = 0;
    6254:	10 92 53 03 	sts	0x0353, r1

  }

  /*___________________________________________________________________________________________________________________*/

  CLCD_vClearScreen();
    6258:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>

  /*___________________________________________________________________________________________________________________*/

  // Display the current time on the CLCD
  CLCD_vSendData(Time_Hour / 10 + 48);
    625c:	80 91 54 03 	lds	r24, 0x0354
    6260:	9a e0       	ldi	r25, 0x0A	; 10
    6262:	69 2f       	mov	r22, r25
    6264:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6268:	80 5d       	subi	r24, 0xD0	; 208
    626a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendData(Time_Hour % 10 + 48);
    626e:	80 91 54 03 	lds	r24, 0x0354
    6272:	9a e0       	ldi	r25, 0x0A	; 10
    6274:	69 2f       	mov	r22, r25
    6276:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    627a:	89 2f       	mov	r24, r25
    627c:	80 5d       	subi	r24, 0xD0	; 208
    627e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendString(" : ");
    6282:	86 ee       	ldi	r24, 0xE6	; 230
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSendData(Time_Minute / 10 + 48);
    628a:	80 91 96 03 	lds	r24, 0x0396
    628e:	9a e0       	ldi	r25, 0x0A	; 10
    6290:	69 2f       	mov	r22, r25
    6292:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6296:	80 5d       	subi	r24, 0xD0	; 208
    6298:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendData(Time_Minute % 10 + 48);
    629c:	80 91 96 03 	lds	r24, 0x0396
    62a0:	9a e0       	ldi	r25, 0x0A	; 10
    62a2:	69 2f       	mov	r22, r25
    62a4:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    62a8:	89 2f       	mov	r24, r25
    62aa:	80 5d       	subi	r24, 0xD0	; 208
    62ac:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendString(" : ");
    62b0:	86 ee       	ldi	r24, 0xE6	; 230
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSendData(Time_Second / 10 + 48);
    62b8:	80 91 97 03 	lds	r24, 0x0397
    62bc:	9a e0       	ldi	r25, 0x0A	; 10
    62be:	69 2f       	mov	r22, r25
    62c0:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    62c4:	80 5d       	subi	r24, 0xD0	; 208
    62c6:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendData(Time_Second % 10 + 48);
    62ca:	80 91 97 03 	lds	r24, 0x0397
    62ce:	9a e0       	ldi	r25, 0x0A	; 10
    62d0:	69 2f       	mov	r22, r25
    62d2:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    62d6:	89 2f       	mov	r24, r25
    62d8:	80 5d       	subi	r24, 0xD0	; 208
    62da:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  CLCD_vSendData(' ');
    62de:	80 e2       	ldi	r24, 0x20	; 32
    62e0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

  // Display AM/PM if in 12-hour mode
  if (Time_Mode == Time_Mode12Hours)
    62e4:	80 91 55 03 	lds	r24, 0x0355
    62e8:	81 33       	cpi	r24, 0x31	; 49
    62ea:	c9 f4       	brne	.+50     	; 0x631e <Set_Time+0x260>
  {
    if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    62ec:	eb e3       	ldi	r30, 0x3B	; 59
    62ee:	f0 e0       	ldi	r31, 0x00	; 0
    62f0:	80 81       	ld	r24, Z
    62f2:	88 2f       	mov	r24, r24
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	88 70       	andi	r24, 0x08	; 8
    62f8:	90 70       	andi	r25, 0x00	; 0
    62fa:	95 95       	asr	r25
    62fc:	87 95       	ror	r24
    62fe:	95 95       	asr	r25
    6300:	87 95       	ror	r24
    6302:	95 95       	asr	r25
    6304:	87 95       	ror	r24
    6306:	81 30       	cpi	r24, 0x01	; 1
    6308:	91 05       	cpc	r25, r1
    630a:	29 f4       	brne	.+10     	; 0x6316 <Set_Time+0x258>
    {
      CLCD_vSendString("AM");
    630c:	88 e3       	ldi	r24, 0x38	; 56
    630e:	91 e0       	ldi	r25, 0x01	; 1
    6310:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6314:	04 c0       	rjmp	.+8      	; 0x631e <Set_Time+0x260>
    }
    else
    {
      CLCD_vSendString("PM");
    6316:	8b e3       	ldi	r24, 0x3B	; 59
    6318:	91 e0       	ldi	r25, 0x01	; 1
    631a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  }

  /*___________________________________________________________________________________________________________________*/

  /* Change Time */
  CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    631e:	8e e0       	ldi	r24, 0x0E	; 14
    6320:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
  CLCD_vSetPosition(1, 1);
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	61 e0       	ldi	r22, 0x01	; 1
    6328:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>

  /* Set hours */
  // First Digit
  do
  {
    KPD_Press = KPD_u8GetPressed();
    632c:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6330:	80 93 9a 03 	sts	0x039A, r24
  } while (KPD_Press == NOTPRESSED);
    6334:	80 91 9a 03 	lds	r24, 0x039A
    6338:	8f 3f       	cpi	r24, 0xFF	; 255
    633a:	c1 f3       	breq	.-16     	; 0x632c <Set_Time+0x26e>
  CLCD_vSetPosition(1, 1);
    633c:	81 e0       	ldi	r24, 0x01	; 1
    633e:	61 e0       	ldi	r22, 0x01	; 1
    6340:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendData(KPD_Press);
    6344:	80 91 9a 03 	lds	r24, 0x039A
    6348:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  Time_Hour = (KPD_Press - 48) * 10;
    634c:	80 91 9a 03 	lds	r24, 0x039A
    6350:	88 2f       	mov	r24, r24
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	9c 01       	movw	r18, r24
    6356:	22 0f       	add	r18, r18
    6358:	33 1f       	adc	r19, r19
    635a:	c9 01       	movw	r24, r18
    635c:	88 0f       	add	r24, r24
    635e:	99 1f       	adc	r25, r25
    6360:	88 0f       	add	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	82 0f       	add	r24, r18
    6366:	93 1f       	adc	r25, r19
    6368:	80 5e       	subi	r24, 0xE0	; 224
    636a:	80 93 54 03 	sts	0x0354, r24

  // Second Digit
  do
  {
    KPD_Press = KPD_u8GetPressed();
    636e:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6372:	80 93 9a 03 	sts	0x039A, r24
  } while (KPD_Press == NOTPRESSED);
    6376:	80 91 9a 03 	lds	r24, 0x039A
    637a:	8f 3f       	cpi	r24, 0xFF	; 255
    637c:	c1 f3       	breq	.-16     	; 0x636e <Set_Time+0x2b0>
  CLCD_vSendData(KPD_Press);
    637e:	80 91 9a 03 	lds	r24, 0x039A
    6382:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

  // Calculate total hours
  Time_Hour += (KPD_Press - 48);
    6386:	90 91 9a 03 	lds	r25, 0x039A
    638a:	80 91 54 03 	lds	r24, 0x0354
    638e:	89 0f       	add	r24, r25
    6390:	80 53       	subi	r24, 0x30	; 48
    6392:	80 93 54 03 	sts	0x0354, r24
   * ==> if mode is 12 hours --> hour is less than 12
   */

  /*___________________________________________________________________________________________________________________*/

  if (Time_Mode == Time_Mode12Hours)
    6396:	80 91 55 03 	lds	r24, 0x0355
    639a:	81 33       	cpi	r24, 0x31	; 49
    639c:	21 f5       	brne	.+72     	; 0x63e6 <Set_Time+0x328>
  {
    if (Time_Hour > 12 || Time_Hour == 0)
    639e:	80 91 54 03 	lds	r24, 0x0354
    63a2:	8d 30       	cpi	r24, 0x0D	; 13
    63a4:	28 f4       	brcc	.+10     	; 0x63b0 <Set_Time+0x2f2>
    63a6:	80 91 54 03 	lds	r24, 0x0354
    63aa:	88 23       	and	r24, r24
    63ac:	09 f0       	breq	.+2      	; 0x63b0 <Set_Time+0x2f2>
    63ae:	47 c0       	rjmp	.+142    	; 0x643e <Set_Time+0x380>
    {
      Time_Hour = 12;
    63b0:	8c e0       	ldi	r24, 0x0C	; 12
    63b2:	80 93 54 03 	sts	0x0354, r24
      CLCD_vSetPosition(1, 1);
    63b6:	81 e0       	ldi	r24, 0x01	; 1
    63b8:	61 e0       	ldi	r22, 0x01	; 1
    63ba:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendData(Time_Hour / 10 + 48);
    63be:	80 91 54 03 	lds	r24, 0x0354
    63c2:	9a e0       	ldi	r25, 0x0A	; 10
    63c4:	69 2f       	mov	r22, r25
    63c6:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    63ca:	80 5d       	subi	r24, 0xD0	; 208
    63cc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData(Time_Hour % 10 + 48);
    63d0:	80 91 54 03 	lds	r24, 0x0354
    63d4:	9a e0       	ldi	r25, 0x0A	; 10
    63d6:	69 2f       	mov	r22, r25
    63d8:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    63dc:	89 2f       	mov	r24, r25
    63de:	80 5d       	subi	r24, 0xD0	; 208
    63e0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    63e4:	2c c0       	rjmp	.+88     	; 0x643e <Set_Time+0x380>
    }
    else
    {
    }
  }
  else if (Time_Mode == Time_Mode24Hours)
    63e6:	80 91 55 03 	lds	r24, 0x0355
    63ea:	82 33       	cpi	r24, 0x32	; 50
    63ec:	41 f5       	brne	.+80     	; 0x643e <Set_Time+0x380>
  {
    if (Time_Hour > 23)
    63ee:	80 91 54 03 	lds	r24, 0x0354
    63f2:	88 31       	cpi	r24, 0x18	; 24
    63f4:	c8 f0       	brcs	.+50     	; 0x6428 <Set_Time+0x36a>
    {
      Time_Hour = 0;
    63f6:	10 92 54 03 	sts	0x0354, r1
      CLCD_vSetPosition(1, 1);
    63fa:	81 e0       	ldi	r24, 0x01	; 1
    63fc:	61 e0       	ldi	r22, 0x01	; 1
    63fe:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendData(Time_Hour / 10 + 48);
    6402:	80 91 54 03 	lds	r24, 0x0354
    6406:	9a e0       	ldi	r25, 0x0A	; 10
    6408:	69 2f       	mov	r22, r25
    640a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    640e:	80 5d       	subi	r24, 0xD0	; 208
    6410:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData(Time_Hour % 10 + 48);
    6414:	80 91 54 03 	lds	r24, 0x0354
    6418:	9a e0       	ldi	r25, 0x0A	; 10
    641a:	69 2f       	mov	r22, r25
    641c:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6420:	89 2f       	mov	r24, r25
    6422:	80 5d       	subi	r24, 0xD0	; 208
    6424:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    }
    else
    {
    }
    if (Time_Hour == 12)
    6428:	80 91 54 03 	lds	r24, 0x0354
    642c:	8c 30       	cpi	r24, 0x0C	; 12
    642e:	39 f4       	brne	.+14     	; 0x643e <Set_Time+0x380>
    {
      CLR_BIT(PORTA_REG, DIO_PIN3);
    6430:	ab e3       	ldi	r26, 0x3B	; 59
    6432:	b0 e0       	ldi	r27, 0x00	; 0
    6434:	eb e3       	ldi	r30, 0x3B	; 59
    6436:	f0 e0       	ldi	r31, 0x00	; 0
    6438:	80 81       	ld	r24, Z
    643a:	87 7f       	andi	r24, 0xF7	; 247
    643c:	8c 93       	st	X, r24
  /*___________________________________________________________________________________________________________________*/

  /* Set minutes and seconds similar to hours */

  // Set minutes
  CLCD_vSetPosition(1, 6);
    643e:	81 e0       	ldi	r24, 0x01	; 1
    6440:	66 e0       	ldi	r22, 0x06	; 6
    6442:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  do
  {
    KPD_Press = KPD_u8GetPressed();
    6446:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    644a:	80 93 9a 03 	sts	0x039A, r24
  } while (KPD_Press == NOTPRESSED);
    644e:	80 91 9a 03 	lds	r24, 0x039A
    6452:	8f 3f       	cpi	r24, 0xFF	; 255
    6454:	c1 f3       	breq	.-16     	; 0x6446 <Set_Time+0x388>
  CLCD_vSendData(KPD_Press);
    6456:	80 91 9a 03 	lds	r24, 0x039A
    645a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  Time_Minute = (KPD_Press - 48) * 10;
    645e:	80 91 9a 03 	lds	r24, 0x039A
    6462:	88 2f       	mov	r24, r24
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	9c 01       	movw	r18, r24
    6468:	22 0f       	add	r18, r18
    646a:	33 1f       	adc	r19, r19
    646c:	c9 01       	movw	r24, r18
    646e:	88 0f       	add	r24, r24
    6470:	99 1f       	adc	r25, r25
    6472:	88 0f       	add	r24, r24
    6474:	99 1f       	adc	r25, r25
    6476:	82 0f       	add	r24, r18
    6478:	93 1f       	adc	r25, r19
    647a:	80 5e       	subi	r24, 0xE0	; 224
    647c:	80 93 96 03 	sts	0x0396, r24

  do
  {
    KPD_Press = KPD_u8GetPressed();
    6480:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6484:	80 93 9a 03 	sts	0x039A, r24

  } while (KPD_Press == NOTPRESSED);
    6488:	80 91 9a 03 	lds	r24, 0x039A
    648c:	8f 3f       	cpi	r24, 0xFF	; 255
    648e:	c1 f3       	breq	.-16     	; 0x6480 <Set_Time+0x3c2>
  CLCD_vSendData(KPD_Press);
    6490:	80 91 9a 03 	lds	r24, 0x039A
    6494:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

  Time_Minute += (KPD_Press - 48);
    6498:	90 91 9a 03 	lds	r25, 0x039A
    649c:	80 91 96 03 	lds	r24, 0x0396
    64a0:	89 0f       	add	r24, r25
    64a2:	80 53       	subi	r24, 0x30	; 48
    64a4:	80 93 96 03 	sts	0x0396, r24

  if (Time_Minute > 59)
    64a8:	80 91 96 03 	lds	r24, 0x0396
    64ac:	8c 33       	cpi	r24, 0x3C	; 60
    64ae:	c8 f0       	brcs	.+50     	; 0x64e2 <Set_Time+0x424>
  {
    Time_Minute = 0;
    64b0:	10 92 96 03 	sts	0x0396, r1
    CLCD_vSetPosition(1, 6);
    64b4:	81 e0       	ldi	r24, 0x01	; 1
    64b6:	66 e0       	ldi	r22, 0x06	; 6
    64b8:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendData(Time_Minute / 10 + 48);
    64bc:	80 91 96 03 	lds	r24, 0x0396
    64c0:	9a e0       	ldi	r25, 0x0A	; 10
    64c2:	69 2f       	mov	r22, r25
    64c4:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    64c8:	80 5d       	subi	r24, 0xD0	; 208
    64ca:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    CLCD_vSendData(Time_Minute % 10 + 48);
    64ce:	80 91 96 03 	lds	r24, 0x0396
    64d2:	9a e0       	ldi	r25, 0x0A	; 10
    64d4:	69 2f       	mov	r22, r25
    64d6:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    64da:	89 2f       	mov	r24, r25
    64dc:	80 5d       	subi	r24, 0xD0	; 208
    64de:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  }

  /*___________________________________________________________________________________________________________________*/

  // Set seconds
  CLCD_vSetPosition(1, 11);
    64e2:	81 e0       	ldi	r24, 0x01	; 1
    64e4:	6b e0       	ldi	r22, 0x0B	; 11
    64e6:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  do
  {
    KPD_Press = KPD_u8GetPressed();
    64ea:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    64ee:	80 93 9a 03 	sts	0x039A, r24

  } while (KPD_Press == NOTPRESSED);
    64f2:	80 91 9a 03 	lds	r24, 0x039A
    64f6:	8f 3f       	cpi	r24, 0xFF	; 255
    64f8:	c1 f3       	breq	.-16     	; 0x64ea <Set_Time+0x42c>
  CLCD_vSendData(KPD_Press);
    64fa:	80 91 9a 03 	lds	r24, 0x039A
    64fe:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  Time_Second = (KPD_Press - 48) * 10;
    6502:	80 91 9a 03 	lds	r24, 0x039A
    6506:	88 2f       	mov	r24, r24
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	9c 01       	movw	r18, r24
    650c:	22 0f       	add	r18, r18
    650e:	33 1f       	adc	r19, r19
    6510:	c9 01       	movw	r24, r18
    6512:	88 0f       	add	r24, r24
    6514:	99 1f       	adc	r25, r25
    6516:	88 0f       	add	r24, r24
    6518:	99 1f       	adc	r25, r25
    651a:	82 0f       	add	r24, r18
    651c:	93 1f       	adc	r25, r19
    651e:	80 5e       	subi	r24, 0xE0	; 224
    6520:	80 93 97 03 	sts	0x0397, r24

  do
  {
    KPD_Press = KPD_u8GetPressed();
    6524:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6528:	80 93 9a 03 	sts	0x039A, r24

  } while (KPD_Press == NOTPRESSED);
    652c:	80 91 9a 03 	lds	r24, 0x039A
    6530:	8f 3f       	cpi	r24, 0xFF	; 255
    6532:	c1 f3       	breq	.-16     	; 0x6524 <Set_Time+0x466>
  CLCD_vSendData(KPD_Press);
    6534:	80 91 9a 03 	lds	r24, 0x039A
    6538:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

  Time_Second += (KPD_Press - 48);
    653c:	90 91 9a 03 	lds	r25, 0x039A
    6540:	80 91 97 03 	lds	r24, 0x0397
    6544:	89 0f       	add	r24, r25
    6546:	80 53       	subi	r24, 0x30	; 48
    6548:	80 93 97 03 	sts	0x0397, r24

  if (Time_Second > 59)
    654c:	80 91 97 03 	lds	r24, 0x0397
    6550:	8c 33       	cpi	r24, 0x3C	; 60
    6552:	c8 f0       	brcs	.+50     	; 0x6586 <Set_Time+0x4c8>
  {
    Time_Second = 0;
    6554:	10 92 97 03 	sts	0x0397, r1
    CLCD_vSetPosition(1, 11);
    6558:	81 e0       	ldi	r24, 0x01	; 1
    655a:	6b e0       	ldi	r22, 0x0B	; 11
    655c:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendData(Time_Second / 10 + 48);
    6560:	80 91 97 03 	lds	r24, 0x0397
    6564:	9a e0       	ldi	r25, 0x0A	; 10
    6566:	69 2f       	mov	r22, r25
    6568:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    656c:	80 5d       	subi	r24, 0xD0	; 208
    656e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    CLCD_vSendData(Time_Second % 10 + 48);
    6572:	80 91 97 03 	lds	r24, 0x0397
    6576:	9a e0       	ldi	r25, 0x0A	; 10
    6578:	69 2f       	mov	r22, r25
    657a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    657e:	89 2f       	mov	r24, r25
    6580:	80 5d       	subi	r24, 0xD0	; 208
    6582:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
  }

  /*___________________________________________________________________________________________________________________*/

  //display AM or PM when mode is 12 Hour
  if (Time_Mode == Time_Mode12Hours)
    6586:	80 91 55 03 	lds	r24, 0x0355
    658a:	81 33       	cpi	r24, 0x31	; 49
    658c:	09 f0       	breq	.+2      	; 0x6590 <Set_Time+0x4d2>
    658e:	20 c1       	rjmp	.+576    	; 0x67d0 <Set_Time+0x712>
  {
    /* Select AM or PM if mode is 12-hour */
    CLCD_vSetPosition(2, 1);
    6590:	82 e0       	ldi	r24, 0x02	; 2
    6592:	61 e0       	ldi	r22, 0x01	; 1
    6594:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("1 : AM    2 : PM");
    6598:	8e e3       	ldi	r24, 0x3E	; 62
    659a:	91 e0       	ldi	r25, 0x01	; 1
    659c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    do
    {
      Time_DayFlag = KPD_u8GetPressed();
    65a0:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    65a4:	80 93 99 03 	sts	0x0399, r24
      // Handle wrong input
      if (Time_DayFlag != NOTPRESSED && (Time_DayFlag != '1' && Time_DayFlag != '2'))
    65a8:	80 91 99 03 	lds	r24, 0x0399
    65ac:	8f 3f       	cpi	r24, 0xFF	; 255
    65ae:	09 f4       	brne	.+2      	; 0x65b2 <Set_Time+0x4f4>
    65b0:	ea c0       	rjmp	.+468    	; 0x6786 <Set_Time+0x6c8>
    65b2:	80 91 99 03 	lds	r24, 0x0399
    65b6:	81 33       	cpi	r24, 0x31	; 49
    65b8:	09 f4       	brne	.+2      	; 0x65bc <Set_Time+0x4fe>
    65ba:	e5 c0       	rjmp	.+458    	; 0x6786 <Set_Time+0x6c8>
    65bc:	80 91 99 03 	lds	r24, 0x0399
    65c0:	82 33       	cpi	r24, 0x32	; 50
    65c2:	09 f4       	brne	.+2      	; 0x65c6 <Set_Time+0x508>
    65c4:	e0 c0       	rjmp	.+448    	; 0x6786 <Set_Time+0x6c8>
      {
        CLCD_vClearScreen();
    65c6:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
        CLCD_vSendString("Wrong Choise");
    65ca:	8f e4       	ldi	r24, 0x4F	; 79
    65cc:	91 e0       	ldi	r25, 0x01	; 1
    65ce:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	aa ef       	ldi	r26, 0xFA	; 250
    65d8:	b3 e4       	ldi	r27, 0x43	; 67
    65da:	89 8f       	std	Y+25, r24	; 0x19
    65dc:	9a 8f       	std	Y+26, r25	; 0x1a
    65de:	ab 8f       	std	Y+27, r26	; 0x1b
    65e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65e2:	69 8d       	ldd	r22, Y+25	; 0x19
    65e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    65e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65ea:	20 e0       	ldi	r18, 0x00	; 0
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	4a ef       	ldi	r20, 0xFA	; 250
    65f0:	54 e4       	ldi	r21, 0x44	; 68
    65f2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    65f6:	dc 01       	movw	r26, r24
    65f8:	cb 01       	movw	r24, r22
    65fa:	8d 8b       	std	Y+21, r24	; 0x15
    65fc:	9e 8b       	std	Y+22, r25	; 0x16
    65fe:	af 8b       	std	Y+23, r26	; 0x17
    6600:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6602:	6d 89       	ldd	r22, Y+21	; 0x15
    6604:	7e 89       	ldd	r23, Y+22	; 0x16
    6606:	8f 89       	ldd	r24, Y+23	; 0x17
    6608:	98 8d       	ldd	r25, Y+24	; 0x18
    660a:	20 e0       	ldi	r18, 0x00	; 0
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	40 e8       	ldi	r20, 0x80	; 128
    6610:	5f e3       	ldi	r21, 0x3F	; 63
    6612:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6616:	88 23       	and	r24, r24
    6618:	2c f4       	brge	.+10     	; 0x6624 <Set_Time+0x566>
		__ticks = 1;
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	9c 8b       	std	Y+20, r25	; 0x14
    6620:	8b 8b       	std	Y+19, r24	; 0x13
    6622:	3f c0       	rjmp	.+126    	; 0x66a2 <Set_Time+0x5e4>
	else if (__tmp > 65535)
    6624:	6d 89       	ldd	r22, Y+21	; 0x15
    6626:	7e 89       	ldd	r23, Y+22	; 0x16
    6628:	8f 89       	ldd	r24, Y+23	; 0x17
    662a:	98 8d       	ldd	r25, Y+24	; 0x18
    662c:	20 e0       	ldi	r18, 0x00	; 0
    662e:	3f ef       	ldi	r19, 0xFF	; 255
    6630:	4f e7       	ldi	r20, 0x7F	; 127
    6632:	57 e4       	ldi	r21, 0x47	; 71
    6634:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6638:	18 16       	cp	r1, r24
    663a:	4c f5       	brge	.+82     	; 0x668e <Set_Time+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    663c:	69 8d       	ldd	r22, Y+25	; 0x19
    663e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6644:	20 e0       	ldi	r18, 0x00	; 0
    6646:	30 e0       	ldi	r19, 0x00	; 0
    6648:	40 e2       	ldi	r20, 0x20	; 32
    664a:	51 e4       	ldi	r21, 0x41	; 65
    664c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	bc 01       	movw	r22, r24
    6656:	cd 01       	movw	r24, r26
    6658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	9c 8b       	std	Y+20, r25	; 0x14
    6662:	8b 8b       	std	Y+19, r24	; 0x13
    6664:	0f c0       	rjmp	.+30     	; 0x6684 <Set_Time+0x5c6>
    6666:	88 ec       	ldi	r24, 0xC8	; 200
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	9a 8b       	std	Y+18, r25	; 0x12
    666c:	89 8b       	std	Y+17, r24	; 0x11
    666e:	89 89       	ldd	r24, Y+17	; 0x11
    6670:	9a 89       	ldd	r25, Y+18	; 0x12
    6672:	01 97       	sbiw	r24, 0x01	; 1
    6674:	f1 f7       	brne	.-4      	; 0x6672 <Set_Time+0x5b4>
    6676:	9a 8b       	std	Y+18, r25	; 0x12
    6678:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    667a:	8b 89       	ldd	r24, Y+19	; 0x13
    667c:	9c 89       	ldd	r25, Y+20	; 0x14
    667e:	01 97       	sbiw	r24, 0x01	; 1
    6680:	9c 8b       	std	Y+20, r25	; 0x14
    6682:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6684:	8b 89       	ldd	r24, Y+19	; 0x13
    6686:	9c 89       	ldd	r25, Y+20	; 0x14
    6688:	00 97       	sbiw	r24, 0x00	; 0
    668a:	69 f7       	brne	.-38     	; 0x6666 <Set_Time+0x5a8>
    668c:	14 c0       	rjmp	.+40     	; 0x66b6 <Set_Time+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    668e:	6d 89       	ldd	r22, Y+21	; 0x15
    6690:	7e 89       	ldd	r23, Y+22	; 0x16
    6692:	8f 89       	ldd	r24, Y+23	; 0x17
    6694:	98 8d       	ldd	r25, Y+24	; 0x18
    6696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9c 8b       	std	Y+20, r25	; 0x14
    66a0:	8b 8b       	std	Y+19, r24	; 0x13
    66a2:	8b 89       	ldd	r24, Y+19	; 0x13
    66a4:	9c 89       	ldd	r25, Y+20	; 0x14
    66a6:	98 8b       	std	Y+16, r25	; 0x10
    66a8:	8f 87       	std	Y+15, r24	; 0x0f
    66aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    66ac:	98 89       	ldd	r25, Y+16	; 0x10
    66ae:	01 97       	sbiw	r24, 0x01	; 1
    66b0:	f1 f7       	brne	.-4      	; 0x66ae <Set_Time+0x5f0>
    66b2:	98 8b       	std	Y+16, r25	; 0x10
    66b4:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        CLCD_vClearScreen();
    66b6:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
        CLCD_vSetPosition(1, 1);
    66ba:	81 e0       	ldi	r24, 0x01	; 1
    66bc:	61 e0       	ldi	r22, 0x01	; 1
    66be:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData(Time_Hour / 10 + 48);
    66c2:	80 91 54 03 	lds	r24, 0x0354
    66c6:	9a e0       	ldi	r25, 0x0A	; 10
    66c8:	69 2f       	mov	r22, r25
    66ca:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    66ce:	80 5d       	subi	r24, 0xD0	; 208
    66d0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(Time_Hour % 10 + 48);
    66d4:	80 91 54 03 	lds	r24, 0x0354
    66d8:	9a e0       	ldi	r25, 0x0A	; 10
    66da:	69 2f       	mov	r22, r25
    66dc:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    66e0:	89 2f       	mov	r24, r25
    66e2:	80 5d       	subi	r24, 0xD0	; 208
    66e4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendString(" : ");
    66e8:	86 ee       	ldi	r24, 0xE6	; 230
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        CLCD_vSendData(Time_Minute / 10 + 48);
    66f0:	80 91 96 03 	lds	r24, 0x0396
    66f4:	9a e0       	ldi	r25, 0x0A	; 10
    66f6:	69 2f       	mov	r22, r25
    66f8:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    66fc:	80 5d       	subi	r24, 0xD0	; 208
    66fe:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(Time_Minute % 10 + 48);
    6702:	80 91 96 03 	lds	r24, 0x0396
    6706:	9a e0       	ldi	r25, 0x0A	; 10
    6708:	69 2f       	mov	r22, r25
    670a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    670e:	89 2f       	mov	r24, r25
    6710:	80 5d       	subi	r24, 0xD0	; 208
    6712:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendString(" : ");
    6716:	86 ee       	ldi	r24, 0xE6	; 230
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        CLCD_vSendData(Time_Second / 10 + 48);
    671e:	80 91 97 03 	lds	r24, 0x0397
    6722:	9a e0       	ldi	r25, 0x0A	; 10
    6724:	69 2f       	mov	r22, r25
    6726:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    672a:	80 5d       	subi	r24, 0xD0	; 208
    672c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(Time_Second % 10 + 48);
    6730:	80 91 97 03 	lds	r24, 0x0397
    6734:	9a e0       	ldi	r25, 0x0A	; 10
    6736:	69 2f       	mov	r22, r25
    6738:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    673c:	89 2f       	mov	r24, r25
    673e:	80 5d       	subi	r24, 0xD0	; 208
    6740:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

        if (READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6744:	eb e3       	ldi	r30, 0x3B	; 59
    6746:	f0 e0       	ldi	r31, 0x00	; 0
    6748:	80 81       	ld	r24, Z
    674a:	88 2f       	mov	r24, r24
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	88 70       	andi	r24, 0x08	; 8
    6750:	90 70       	andi	r25, 0x00	; 0
    6752:	95 95       	asr	r25
    6754:	87 95       	ror	r24
    6756:	95 95       	asr	r25
    6758:	87 95       	ror	r24
    675a:	95 95       	asr	r25
    675c:	87 95       	ror	r24
    675e:	81 30       	cpi	r24, 0x01	; 1
    6760:	91 05       	cpc	r25, r1
    6762:	29 f4       	brne	.+10     	; 0x676e <Set_Time+0x6b0>
        {
          CLCD_vSendString(" AM");
    6764:	8a ee       	ldi	r24, 0xEA	; 234
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    676c:	04 c0       	rjmp	.+8      	; 0x6776 <Set_Time+0x6b8>
        }
        else
        {
          CLCD_vSendString(" PM");
    676e:	8e ee       	ldi	r24, 0xEE	; 238
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        }
        CLCD_vSetPosition(2, 1);
    6776:	82 e0       	ldi	r24, 0x02	; 2
    6778:	61 e0       	ldi	r22, 0x01	; 1
    677a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendString("1 : AM    2 : PM");
    677e:	8e e3       	ldi	r24, 0x3E	; 62
    6780:	91 e0       	ldi	r25, 0x01	; 1
    6782:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      }
      else
      {
      }
    } while (Time_DayFlag == NOTPRESSED || (Time_DayFlag != '1' && Time_DayFlag != '2'));
    6786:	80 91 99 03 	lds	r24, 0x0399
    678a:	8f 3f       	cpi	r24, 0xFF	; 255
    678c:	09 f4       	brne	.+2      	; 0x6790 <Set_Time+0x6d2>
    678e:	08 cf       	rjmp	.-496    	; 0x65a0 <Set_Time+0x4e2>
    6790:	80 91 99 03 	lds	r24, 0x0399
    6794:	81 33       	cpi	r24, 0x31	; 49
    6796:	29 f0       	breq	.+10     	; 0x67a2 <Set_Time+0x6e4>
    6798:	80 91 99 03 	lds	r24, 0x0399
    679c:	82 33       	cpi	r24, 0x32	; 50
    679e:	09 f0       	breq	.+2      	; 0x67a2 <Set_Time+0x6e4>
    67a0:	ff ce       	rjmp	.-514    	; 0x65a0 <Set_Time+0x4e2>

    // if day time is AM
    if (Time_DayFlag == '1')
    67a2:	80 91 99 03 	lds	r24, 0x0399
    67a6:	81 33       	cpi	r24, 0x31	; 49
    67a8:	41 f4       	brne	.+16     	; 0x67ba <Set_Time+0x6fc>
    {
      SET_BIT(PORTA_REG, DIO_PIN3);
    67aa:	ab e3       	ldi	r26, 0x3B	; 59
    67ac:	b0 e0       	ldi	r27, 0x00	; 0
    67ae:	eb e3       	ldi	r30, 0x3B	; 59
    67b0:	f0 e0       	ldi	r31, 0x00	; 0
    67b2:	80 81       	ld	r24, Z
    67b4:	88 60       	ori	r24, 0x08	; 8
    67b6:	8c 93       	st	X, r24
    67b8:	0b c0       	rjmp	.+22     	; 0x67d0 <Set_Time+0x712>
    }
    // if day time is PM
    else if (Time_DayFlag == '2')
    67ba:	80 91 99 03 	lds	r24, 0x0399
    67be:	82 33       	cpi	r24, 0x32	; 50
    67c0:	39 f4       	brne	.+14     	; 0x67d0 <Set_Time+0x712>
    {
      CLR_BIT(PORTA_REG, DIO_PIN3);
    67c2:	ab e3       	ldi	r26, 0x3B	; 59
    67c4:	b0 e0       	ldi	r27, 0x00	; 0
    67c6:	eb e3       	ldi	r30, 0x3B	; 59
    67c8:	f0 e0       	ldi	r31, 0x00	; 0
    67ca:	80 81       	ld	r24, Z
    67cc:	87 7f       	andi	r24, 0xF7	; 247
    67ce:	8c 93       	st	X, r24
  else
  {

  }
  //to make sure that the user enter correct our or not to Re enter Clock again
  CLCD_vClearScreen();
    67d0:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("Set Time ?");
    67d4:	8c e5       	ldi	r24, 0x5C	; 92
    67d6:	91 e0       	ldi	r25, 0x01	; 1
    67d8:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    67dc:	82 e0       	ldi	r24, 0x02	; 2
    67de:	61 e0       	ldi	r22, 0x01	; 1
    67e0:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("1 : OK    2 : Cancel");
    67e4:	87 e6       	ldi	r24, 0x67	; 103
    67e6:	91 e0       	ldi	r25, 0x01	; 1
    67e8:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(3, 1);
    67ec:	83 e0       	ldi	r24, 0x03	; 3
    67ee:	61 e0       	ldi	r22, 0x01	; 1
    67f0:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("Cancel to Set");
    67f4:	8c e7       	ldi	r24, 0x7C	; 124
    67f6:	91 e0       	ldi	r25, 0x01	; 1
    67f8:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(4, 1);
    67fc:	84 e0       	ldi	r24, 0x04	; 4
    67fe:	61 e0       	ldi	r22, 0x01	; 1
    6800:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("Time Again");
    6804:	8a e8       	ldi	r24, 0x8A	; 138
    6806:	91 e0       	ldi	r25, 0x01	; 1
    6808:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  do
  {
    KPD_Press = KPD_u8GetPressed();
    680c:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6810:	80 93 9a 03 	sts	0x039A, r24
    //when input invalid val
    if (KPD_Press != NOTPRESSED && (KPD_Press != '1' && KPD_Press != '2'))
    6814:	80 91 9a 03 	lds	r24, 0x039A
    6818:	8f 3f       	cpi	r24, 0xFF	; 255
    681a:	09 f4       	brne	.+2      	; 0x681e <Set_Time+0x760>
    681c:	a0 c0       	rjmp	.+320    	; 0x695e <Set_Time+0x8a0>
    681e:	80 91 9a 03 	lds	r24, 0x039A
    6822:	81 33       	cpi	r24, 0x31	; 49
    6824:	09 f4       	brne	.+2      	; 0x6828 <Set_Time+0x76a>
    6826:	9b c0       	rjmp	.+310    	; 0x695e <Set_Time+0x8a0>
    6828:	80 91 9a 03 	lds	r24, 0x039A
    682c:	82 33       	cpi	r24, 0x32	; 50
    682e:	09 f4       	brne	.+2      	; 0x6832 <Set_Time+0x774>
    6830:	96 c0       	rjmp	.+300    	; 0x695e <Set_Time+0x8a0>
    {
      CLCD_vClearScreen();
    6832:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Wrong Choise");
    6836:	8f e4       	ldi	r24, 0x4F	; 79
    6838:	91 e0       	ldi	r25, 0x01	; 1
    683a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    683e:	80 e0       	ldi	r24, 0x00	; 0
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	aa ef       	ldi	r26, 0xFA	; 250
    6844:	b3 e4       	ldi	r27, 0x43	; 67
    6846:	8b 87       	std	Y+11, r24	; 0x0b
    6848:	9c 87       	std	Y+12, r25	; 0x0c
    684a:	ad 87       	std	Y+13, r26	; 0x0d
    684c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    684e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6850:	7c 85       	ldd	r23, Y+12	; 0x0c
    6852:	8d 85       	ldd	r24, Y+13	; 0x0d
    6854:	9e 85       	ldd	r25, Y+14	; 0x0e
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	30 e0       	ldi	r19, 0x00	; 0
    685a:	4a ef       	ldi	r20, 0xFA	; 250
    685c:	54 e4       	ldi	r21, 0x44	; 68
    685e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6862:	dc 01       	movw	r26, r24
    6864:	cb 01       	movw	r24, r22
    6866:	8f 83       	std	Y+7, r24	; 0x07
    6868:	98 87       	std	Y+8, r25	; 0x08
    686a:	a9 87       	std	Y+9, r26	; 0x09
    686c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    686e:	6f 81       	ldd	r22, Y+7	; 0x07
    6870:	78 85       	ldd	r23, Y+8	; 0x08
    6872:	89 85       	ldd	r24, Y+9	; 0x09
    6874:	9a 85       	ldd	r25, Y+10	; 0x0a
    6876:	20 e0       	ldi	r18, 0x00	; 0
    6878:	30 e0       	ldi	r19, 0x00	; 0
    687a:	40 e8       	ldi	r20, 0x80	; 128
    687c:	5f e3       	ldi	r21, 0x3F	; 63
    687e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6882:	88 23       	and	r24, r24
    6884:	2c f4       	brge	.+10     	; 0x6890 <Set_Time+0x7d2>
		__ticks = 1;
    6886:	81 e0       	ldi	r24, 0x01	; 1
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	9e 83       	std	Y+6, r25	; 0x06
    688c:	8d 83       	std	Y+5, r24	; 0x05
    688e:	3f c0       	rjmp	.+126    	; 0x690e <Set_Time+0x850>
	else if (__tmp > 65535)
    6890:	6f 81       	ldd	r22, Y+7	; 0x07
    6892:	78 85       	ldd	r23, Y+8	; 0x08
    6894:	89 85       	ldd	r24, Y+9	; 0x09
    6896:	9a 85       	ldd	r25, Y+10	; 0x0a
    6898:	20 e0       	ldi	r18, 0x00	; 0
    689a:	3f ef       	ldi	r19, 0xFF	; 255
    689c:	4f e7       	ldi	r20, 0x7F	; 127
    689e:	57 e4       	ldi	r21, 0x47	; 71
    68a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    68a4:	18 16       	cp	r1, r24
    68a6:	4c f5       	brge	.+82     	; 0x68fa <Set_Time+0x83c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    68aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    68ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    68ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    68b0:	20 e0       	ldi	r18, 0x00	; 0
    68b2:	30 e0       	ldi	r19, 0x00	; 0
    68b4:	40 e2       	ldi	r20, 0x20	; 32
    68b6:	51 e4       	ldi	r21, 0x41	; 65
    68b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    68bc:	dc 01       	movw	r26, r24
    68be:	cb 01       	movw	r24, r22
    68c0:	bc 01       	movw	r22, r24
    68c2:	cd 01       	movw	r24, r26
    68c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68c8:	dc 01       	movw	r26, r24
    68ca:	cb 01       	movw	r24, r22
    68cc:	9e 83       	std	Y+6, r25	; 0x06
    68ce:	8d 83       	std	Y+5, r24	; 0x05
    68d0:	0f c0       	rjmp	.+30     	; 0x68f0 <Set_Time+0x832>
    68d2:	88 ec       	ldi	r24, 0xC8	; 200
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	9c 83       	std	Y+4, r25	; 0x04
    68d8:	8b 83       	std	Y+3, r24	; 0x03
    68da:	8b 81       	ldd	r24, Y+3	; 0x03
    68dc:	9c 81       	ldd	r25, Y+4	; 0x04
    68de:	01 97       	sbiw	r24, 0x01	; 1
    68e0:	f1 f7       	brne	.-4      	; 0x68de <Set_Time+0x820>
    68e2:	9c 83       	std	Y+4, r25	; 0x04
    68e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68e6:	8d 81       	ldd	r24, Y+5	; 0x05
    68e8:	9e 81       	ldd	r25, Y+6	; 0x06
    68ea:	01 97       	sbiw	r24, 0x01	; 1
    68ec:	9e 83       	std	Y+6, r25	; 0x06
    68ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68f0:	8d 81       	ldd	r24, Y+5	; 0x05
    68f2:	9e 81       	ldd	r25, Y+6	; 0x06
    68f4:	00 97       	sbiw	r24, 0x00	; 0
    68f6:	69 f7       	brne	.-38     	; 0x68d2 <Set_Time+0x814>
    68f8:	14 c0       	rjmp	.+40     	; 0x6922 <Set_Time+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68fa:	6f 81       	ldd	r22, Y+7	; 0x07
    68fc:	78 85       	ldd	r23, Y+8	; 0x08
    68fe:	89 85       	ldd	r24, Y+9	; 0x09
    6900:	9a 85       	ldd	r25, Y+10	; 0x0a
    6902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6906:	dc 01       	movw	r26, r24
    6908:	cb 01       	movw	r24, r22
    690a:	9e 83       	std	Y+6, r25	; 0x06
    690c:	8d 83       	std	Y+5, r24	; 0x05
    690e:	8d 81       	ldd	r24, Y+5	; 0x05
    6910:	9e 81       	ldd	r25, Y+6	; 0x06
    6912:	9a 83       	std	Y+2, r25	; 0x02
    6914:	89 83       	std	Y+1, r24	; 0x01
    6916:	89 81       	ldd	r24, Y+1	; 0x01
    6918:	9a 81       	ldd	r25, Y+2	; 0x02
    691a:	01 97       	sbiw	r24, 0x01	; 1
    691c:	f1 f7       	brne	.-4      	; 0x691a <Set_Time+0x85c>
    691e:	9a 83       	std	Y+2, r25	; 0x02
    6920:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(500);
      CLCD_vClearScreen();
    6922:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Set Time ?");
    6926:	8c e5       	ldi	r24, 0x5C	; 92
    6928:	91 e0       	ldi	r25, 0x01	; 1
    692a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    692e:	82 e0       	ldi	r24, 0x02	; 2
    6930:	61 e0       	ldi	r22, 0x01	; 1
    6932:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("1 : OK    2 : Cancel");
    6936:	87 e6       	ldi	r24, 0x67	; 103
    6938:	91 e0       	ldi	r25, 0x01	; 1
    693a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(3, 1);
    693e:	83 e0       	ldi	r24, 0x03	; 3
    6940:	61 e0       	ldi	r22, 0x01	; 1
    6942:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("Cancel to Set");
    6946:	8c e7       	ldi	r24, 0x7C	; 124
    6948:	91 e0       	ldi	r25, 0x01	; 1
    694a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 1);
    694e:	84 e0       	ldi	r24, 0x04	; 4
    6950:	61 e0       	ldi	r22, 0x01	; 1
    6952:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("Time Again");
    6956:	8a e8       	ldi	r24, 0x8A	; 138
    6958:	91 e0       	ldi	r25, 0x01	; 1
    695a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    }
  } while (KPD_Press != '1' && KPD_Press != '2');
    695e:	80 91 9a 03 	lds	r24, 0x039A
    6962:	81 33       	cpi	r24, 0x31	; 49
    6964:	29 f0       	breq	.+10     	; 0x6970 <Set_Time+0x8b2>
    6966:	80 91 9a 03 	lds	r24, 0x039A
    696a:	82 33       	cpi	r24, 0x32	; 50
    696c:	09 f0       	breq	.+2      	; 0x6970 <Set_Time+0x8b2>
    696e:	4e cf       	rjmp	.-356    	; 0x680c <Set_Time+0x74e>

  //when enter correct clock
  if (KPD_Press == '1')
    6970:	80 91 9a 03 	lds	r24, 0x039A
    6974:	81 33       	cpi	r24, 0x31	; 49
    6976:	51 f5       	brne	.+84     	; 0x69cc <Set_Time+0x90e>
  {
    CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    6978:	8c e0       	ldi	r24, 0x0C	; 12
    697a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    CLCD_vClearScreen();
    697e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
    CLCD_vSendString("1 - set time");
    6982:	83 ec       	ldi	r24, 0xC3	; 195
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    698a:	82 e0       	ldi	r24, 0x02	; 2
    698c:	61 e0       	ldi	r22, 0x01	; 1
    698e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("2 - select mode");
    6992:	80 ed       	ldi	r24, 0xD0	; 208
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    699a:	83 e0       	ldi	r24, 0x03	; 3
    699c:	61 e0       	ldi	r22, 0x01	; 1
    699e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("3 - Set Alarm");
    69a2:	85 e9       	ldi	r24, 0x95	; 149
    69a4:	90 e0       	ldi	r25, 0x00	; 0
    69a6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    69aa:	84 e0       	ldi	r24, 0x04	; 4
    69ac:	61 e0       	ldi	r22, 0x01	; 1
    69ae:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("4 - Weather");
    69b2:	83 ea       	ldi	r24, 0xA3	; 163
    69b4:	90 e0       	ldi	r25, 0x00	; 0
    69b6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(4, 15);
    69ba:	84 e0       	ldi	r24, 0x04	; 4
    69bc:	6f e0       	ldi	r22, 0x0F	; 15
    69be:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("X:EXIT");
    69c2:	8f ea       	ldi	r24, 0xAF	; 175
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    69ca:	06 c0       	rjmp	.+12     	; 0x69d8 <Set_Time+0x91a>
  }
  //when enter incorrect clock
  else if (KPD_Press == '2')
    69cc:	80 91 9a 03 	lds	r24, 0x039A
    69d0:	82 33       	cpi	r24, 0x32	; 50
    69d2:	11 f4       	brne	.+4      	; 0x69d8 <Set_Time+0x91a>
  {
    Set_Time();
    69d4:	0e 94 5f 30 	call	0x60be	; 0x60be <Set_Time>
  }
}
    69d8:	aa 96       	adiw	r28, 0x2a	; 42
    69da:	0f b6       	in	r0, 0x3f	; 63
    69dc:	f8 94       	cli
    69de:	de bf       	out	0x3e, r29	; 62
    69e0:	0f be       	out	0x3f, r0	; 63
    69e2:	cd bf       	out	0x3d, r28	; 61
    69e4:	cf 91       	pop	r28
    69e6:	df 91       	pop	r29
    69e8:	08 95       	ret

000069ea <Select_Mode>:
//======================================================================================================================================//

// Function to select time mode (12-hour or 24-hour)
//it is created for Every possible scenario
void Select_Mode()
{
    69ea:	df 93       	push	r29
    69ec:	cf 93       	push	r28
    69ee:	cd b7       	in	r28, 0x3d	; 61
    69f0:	de b7       	in	r29, 0x3e	; 62
    69f2:	2f 97       	sbiw	r28, 0x0f	; 15
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	f8 94       	cli
    69f8:	de bf       	out	0x3e, r29	; 62
    69fa:	0f be       	out	0x3f, r0	; 63
    69fc:	cd bf       	out	0x3d, r28	; 61

  CLCD_vClearScreen();
    69fe:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("1 - 12-hour time");
    6a02:	89 e0       	ldi	r24, 0x09	; 9
    6a04:	91 e0       	ldi	r25, 0x01	; 1
    6a06:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6a0a:	82 e0       	ldi	r24, 0x02	; 2
    6a0c:	61 e0       	ldi	r22, 0x01	; 1
    6a0e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("2 - 24-hour time");
    6a12:	8a e1       	ldi	r24, 0x1A	; 26
    6a14:	91 e0       	ldi	r25, 0x01	; 1
    6a16:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  //Get input from user
  do
  {
    Time_Mode = KPD_u8GetPressed();
    6a1a:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6a1e:	80 93 55 03 	sts	0x0355, r24
    //if Select 12 hour mode
    if (Time_Mode == Time_Mode12Hours)
    6a22:	80 91 55 03 	lds	r24, 0x0355
    6a26:	81 33       	cpi	r24, 0x31	; 49
    6a28:	a1 f5       	brne	.+104    	; 0x6a92 <Select_Mode+0xa8>
    {
      if (Time_ModeFlag == 0)
    6a2a:	80 91 53 03 	lds	r24, 0x0353
    6a2e:	88 23       	and	r24, r24
    6a30:	09 f0       	breq	.+2      	; 0x6a34 <Select_Mode+0x4a>
    6a32:	03 c1       	rjmp	.+518    	; 0x6c3a <Select_Mode+0x250>
      {
        if (Time_Hour > 12)
    6a34:	80 91 54 03 	lds	r24, 0x0354
    6a38:	8d 30       	cpi	r24, 0x0D	; 13
    6a3a:	30 f0       	brcs	.+12     	; 0x6a48 <Select_Mode+0x5e>
        {
          Time_Hour -= 12;
    6a3c:	80 91 54 03 	lds	r24, 0x0354
    6a40:	8c 50       	subi	r24, 0x0C	; 12
    6a42:	80 93 54 03 	sts	0x0354, r24
    6a46:	21 c0       	rjmp	.+66     	; 0x6a8a <Select_Mode+0xa0>
        }
        else if (Time_Hour == 0 && READ_BIT(PORTA_REG,DIO_PIN3) == 1)
    6a48:	80 91 54 03 	lds	r24, 0x0354
    6a4c:	88 23       	and	r24, r24
    6a4e:	a1 f4       	brne	.+40     	; 0x6a78 <Select_Mode+0x8e>
    6a50:	eb e3       	ldi	r30, 0x3B	; 59
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	80 81       	ld	r24, Z
    6a56:	88 2f       	mov	r24, r24
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	88 70       	andi	r24, 0x08	; 8
    6a5c:	90 70       	andi	r25, 0x00	; 0
    6a5e:	95 95       	asr	r25
    6a60:	87 95       	ror	r24
    6a62:	95 95       	asr	r25
    6a64:	87 95       	ror	r24
    6a66:	95 95       	asr	r25
    6a68:	87 95       	ror	r24
    6a6a:	81 30       	cpi	r24, 0x01	; 1
    6a6c:	91 05       	cpc	r25, r1
    6a6e:	21 f4       	brne	.+8      	; 0x6a78 <Select_Mode+0x8e>
        {
          Time_Hour = 12;
    6a70:	8c e0       	ldi	r24, 0x0C	; 12
    6a72:	80 93 54 03 	sts	0x0354, r24
    6a76:	09 c0       	rjmp	.+18     	; 0x6a8a <Select_Mode+0xa0>
        }
        else if (Time_Hour)
    6a78:	80 91 54 03 	lds	r24, 0x0354
    6a7c:	88 23       	and	r24, r24
    6a7e:	29 f0       	breq	.+10     	; 0x6a8a <Select_Mode+0xa0>
        {
          Time_Hour += 12;
    6a80:	80 91 54 03 	lds	r24, 0x0354
    6a84:	84 5f       	subi	r24, 0xF4	; 244
    6a86:	80 93 54 03 	sts	0x0354, r24
        }
        else
        {
        }
        Time_ModeFlag = 1;
    6a8a:	81 e0       	ldi	r24, 0x01	; 1
    6a8c:	80 93 53 03 	sts	0x0353, r24
    6a90:	d4 c0       	rjmp	.+424    	; 0x6c3a <Select_Mode+0x250>
      else
      {
      }
    }
    //if Select 24 hour mode
    else if (Time_Mode == Time_Mode24Hours)
    6a92:	80 91 55 03 	lds	r24, 0x0355
    6a96:	82 33       	cpi	r24, 0x32	; 50
    6a98:	d9 f5       	brne	.+118    	; 0x6b10 <Select_Mode+0x126>
    {
      if (Time_ModeFlag == 1)
    6a9a:	80 91 53 03 	lds	r24, 0x0353
    6a9e:	81 30       	cpi	r24, 0x01	; 1
    6aa0:	09 f0       	breq	.+2      	; 0x6aa4 <Select_Mode+0xba>
    6aa2:	cb c0       	rjmp	.+406    	; 0x6c3a <Select_Mode+0x250>
      {
        if (Time_Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3) == 1)
    6aa4:	80 91 54 03 	lds	r24, 0x0354
    6aa8:	8c 30       	cpi	r24, 0x0C	; 12
    6aaa:	99 f4       	brne	.+38     	; 0x6ad2 <Select_Mode+0xe8>
    6aac:	eb e3       	ldi	r30, 0x3B	; 59
    6aae:	f0 e0       	ldi	r31, 0x00	; 0
    6ab0:	80 81       	ld	r24, Z
    6ab2:	88 2f       	mov	r24, r24
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	88 70       	andi	r24, 0x08	; 8
    6ab8:	90 70       	andi	r25, 0x00	; 0
    6aba:	95 95       	asr	r25
    6abc:	87 95       	ror	r24
    6abe:	95 95       	asr	r25
    6ac0:	87 95       	ror	r24
    6ac2:	95 95       	asr	r25
    6ac4:	87 95       	ror	r24
    6ac6:	81 30       	cpi	r24, 0x01	; 1
    6ac8:	91 05       	cpc	r25, r1
    6aca:	19 f4       	brne	.+6      	; 0x6ad2 <Select_Mode+0xe8>
        {
          Time_Hour = 0;
    6acc:	10 92 54 03 	sts	0x0354, r1
    6ad0:	1c c0       	rjmp	.+56     	; 0x6b0a <Select_Mode+0x120>
        }
        else if (Time_Hour == 12 && READ_BIT(PORTA_REG, DIO_PIN3 == 0))
    6ad2:	80 91 54 03 	lds	r24, 0x0354
    6ad6:	8c 30       	cpi	r24, 0x0C	; 12
    6ad8:	21 f4       	brne	.+8      	; 0x6ae2 <Select_Mode+0xf8>
    6ada:	eb e3       	ldi	r30, 0x3B	; 59
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	80 81       	ld	r24, Z
    6ae0:	14 c0       	rjmp	.+40     	; 0x6b0a <Select_Mode+0x120>
        {
        }
        else if (READ_BIT(PORTA_REG, DIO_PIN3) == 0)
    6ae2:	eb e3       	ldi	r30, 0x3B	; 59
    6ae4:	f0 e0       	ldi	r31, 0x00	; 0
    6ae6:	80 81       	ld	r24, Z
    6ae8:	88 2f       	mov	r24, r24
    6aea:	90 e0       	ldi	r25, 0x00	; 0
    6aec:	88 70       	andi	r24, 0x08	; 8
    6aee:	90 70       	andi	r25, 0x00	; 0
    6af0:	95 95       	asr	r25
    6af2:	87 95       	ror	r24
    6af4:	95 95       	asr	r25
    6af6:	87 95       	ror	r24
    6af8:	95 95       	asr	r25
    6afa:	87 95       	ror	r24
    6afc:	00 97       	sbiw	r24, 0x00	; 0
    6afe:	29 f4       	brne	.+10     	; 0x6b0a <Select_Mode+0x120>
        {
          Time_Hour += 12;
    6b00:	80 91 54 03 	lds	r24, 0x0354
    6b04:	84 5f       	subi	r24, 0xF4	; 244
    6b06:	80 93 54 03 	sts	0x0354, r24
        }
        else
        {
        }
        Time_ModeFlag = 0;
    6b0a:	10 92 53 03 	sts	0x0353, r1
    6b0e:	95 c0       	rjmp	.+298    	; 0x6c3a <Select_Mode+0x250>
      else
      {
      }
    }
    //when inter invalid choose
    else if (Time_Mode != NOTPRESSED && (Time_Mode != '1' && Time_Mode != '2'))
    6b10:	80 91 55 03 	lds	r24, 0x0355
    6b14:	8f 3f       	cpi	r24, 0xFF	; 255
    6b16:	09 f4       	brne	.+2      	; 0x6b1a <Select_Mode+0x130>
    6b18:	90 c0       	rjmp	.+288    	; 0x6c3a <Select_Mode+0x250>
    6b1a:	80 91 55 03 	lds	r24, 0x0355
    6b1e:	81 33       	cpi	r24, 0x31	; 49
    6b20:	09 f4       	brne	.+2      	; 0x6b24 <Select_Mode+0x13a>
    6b22:	8b c0       	rjmp	.+278    	; 0x6c3a <Select_Mode+0x250>
    6b24:	80 91 55 03 	lds	r24, 0x0355
    6b28:	82 33       	cpi	r24, 0x32	; 50
    6b2a:	09 f4       	brne	.+2      	; 0x6b2e <Select_Mode+0x144>
    6b2c:	86 c0       	rjmp	.+268    	; 0x6c3a <Select_Mode+0x250>
    {
      CLCD_vClearScreen();
    6b2e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Wrong choise");
    6b32:	85 e9       	ldi	r24, 0x95	; 149
    6b34:	91 e0       	ldi	r25, 0x01	; 1
    6b36:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6b3a:	80 e0       	ldi	r24, 0x00	; 0
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	aa ef       	ldi	r26, 0xFA	; 250
    6b40:	b3 e4       	ldi	r27, 0x43	; 67
    6b42:	8b 87       	std	Y+11, r24	; 0x0b
    6b44:	9c 87       	std	Y+12, r25	; 0x0c
    6b46:	ad 87       	std	Y+13, r26	; 0x0d
    6b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b52:	20 e0       	ldi	r18, 0x00	; 0
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	4a ef       	ldi	r20, 0xFA	; 250
    6b58:	54 e4       	ldi	r21, 0x44	; 68
    6b5a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6b5e:	dc 01       	movw	r26, r24
    6b60:	cb 01       	movw	r24, r22
    6b62:	8f 83       	std	Y+7, r24	; 0x07
    6b64:	98 87       	std	Y+8, r25	; 0x08
    6b66:	a9 87       	std	Y+9, r26	; 0x09
    6b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b6c:	78 85       	ldd	r23, Y+8	; 0x08
    6b6e:	89 85       	ldd	r24, Y+9	; 0x09
    6b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b72:	20 e0       	ldi	r18, 0x00	; 0
    6b74:	30 e0       	ldi	r19, 0x00	; 0
    6b76:	40 e8       	ldi	r20, 0x80	; 128
    6b78:	5f e3       	ldi	r21, 0x3F	; 63
    6b7a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6b7e:	88 23       	and	r24, r24
    6b80:	2c f4       	brge	.+10     	; 0x6b8c <Select_Mode+0x1a2>
		__ticks = 1;
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	9e 83       	std	Y+6, r25	; 0x06
    6b88:	8d 83       	std	Y+5, r24	; 0x05
    6b8a:	3f c0       	rjmp	.+126    	; 0x6c0a <Select_Mode+0x220>
	else if (__tmp > 65535)
    6b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6b8e:	78 85       	ldd	r23, Y+8	; 0x08
    6b90:	89 85       	ldd	r24, Y+9	; 0x09
    6b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b94:	20 e0       	ldi	r18, 0x00	; 0
    6b96:	3f ef       	ldi	r19, 0xFF	; 255
    6b98:	4f e7       	ldi	r20, 0x7F	; 127
    6b9a:	57 e4       	ldi	r21, 0x47	; 71
    6b9c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6ba0:	18 16       	cp	r1, r24
    6ba2:	4c f5       	brge	.+82     	; 0x6bf6 <Select_Mode+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	40 e2       	ldi	r20, 0x20	; 32
    6bb2:	51 e4       	ldi	r21, 0x41	; 65
    6bb4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6bb8:	dc 01       	movw	r26, r24
    6bba:	cb 01       	movw	r24, r22
    6bbc:	bc 01       	movw	r22, r24
    6bbe:	cd 01       	movw	r24, r26
    6bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bc4:	dc 01       	movw	r26, r24
    6bc6:	cb 01       	movw	r24, r22
    6bc8:	9e 83       	std	Y+6, r25	; 0x06
    6bca:	8d 83       	std	Y+5, r24	; 0x05
    6bcc:	0f c0       	rjmp	.+30     	; 0x6bec <Select_Mode+0x202>
    6bce:	88 ec       	ldi	r24, 0xC8	; 200
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	9c 83       	std	Y+4, r25	; 0x04
    6bd4:	8b 83       	std	Y+3, r24	; 0x03
    6bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    6bda:	01 97       	sbiw	r24, 0x01	; 1
    6bdc:	f1 f7       	brne	.-4      	; 0x6bda <Select_Mode+0x1f0>
    6bde:	9c 83       	std	Y+4, r25	; 0x04
    6be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6be2:	8d 81       	ldd	r24, Y+5	; 0x05
    6be4:	9e 81       	ldd	r25, Y+6	; 0x06
    6be6:	01 97       	sbiw	r24, 0x01	; 1
    6be8:	9e 83       	std	Y+6, r25	; 0x06
    6bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bec:	8d 81       	ldd	r24, Y+5	; 0x05
    6bee:	9e 81       	ldd	r25, Y+6	; 0x06
    6bf0:	00 97       	sbiw	r24, 0x00	; 0
    6bf2:	69 f7       	brne	.-38     	; 0x6bce <Select_Mode+0x1e4>
    6bf4:	14 c0       	rjmp	.+40     	; 0x6c1e <Select_Mode+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    6bf8:	78 85       	ldd	r23, Y+8	; 0x08
    6bfa:	89 85       	ldd	r24, Y+9	; 0x09
    6bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c02:	dc 01       	movw	r26, r24
    6c04:	cb 01       	movw	r24, r22
    6c06:	9e 83       	std	Y+6, r25	; 0x06
    6c08:	8d 83       	std	Y+5, r24	; 0x05
    6c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c0e:	9a 83       	std	Y+2, r25	; 0x02
    6c10:	89 83       	std	Y+1, r24	; 0x01
    6c12:	89 81       	ldd	r24, Y+1	; 0x01
    6c14:	9a 81       	ldd	r25, Y+2	; 0x02
    6c16:	01 97       	sbiw	r24, 0x01	; 1
    6c18:	f1 f7       	brne	.-4      	; 0x6c16 <Select_Mode+0x22c>
    6c1a:	9a 83       	std	Y+2, r25	; 0x02
    6c1c:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(500);
      CLCD_vClearScreen();
    6c1e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("1 - 12-hour time");
    6c22:	89 e0       	ldi	r24, 0x09	; 9
    6c24:	91 e0       	ldi	r25, 0x01	; 1
    6c26:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    6c2a:	82 e0       	ldi	r24, 0x02	; 2
    6c2c:	61 e0       	ldi	r22, 0x01	; 1
    6c2e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - 24-hour time");
    6c32:	8a e1       	ldi	r24, 0x1A	; 26
    6c34:	91 e0       	ldi	r25, 0x01	; 1
    6c36:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    }

  } while (Time_Mode == NOTPRESSED || (Time_Mode != '1' && Time_Mode != '2'));
    6c3a:	80 91 55 03 	lds	r24, 0x0355
    6c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    6c40:	09 f4       	brne	.+2      	; 0x6c44 <Select_Mode+0x25a>
    6c42:	eb ce       	rjmp	.-554    	; 0x6a1a <Select_Mode+0x30>
    6c44:	80 91 55 03 	lds	r24, 0x0355
    6c48:	81 33       	cpi	r24, 0x31	; 49
    6c4a:	29 f0       	breq	.+10     	; 0x6c56 <Select_Mode+0x26c>
    6c4c:	80 91 55 03 	lds	r24, 0x0355
    6c50:	82 33       	cpi	r24, 0x32	; 50
    6c52:	09 f0       	breq	.+2      	; 0x6c56 <Select_Mode+0x26c>
    6c54:	e2 ce       	rjmp	.-572    	; 0x6a1a <Select_Mode+0x30>

  //when choose any of them
  CLCD_vClearScreen();
    6c56:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("1 - set time");
    6c5a:	83 ec       	ldi	r24, 0xC3	; 195
    6c5c:	90 e0       	ldi	r25, 0x00	; 0
    6c5e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6c62:	82 e0       	ldi	r24, 0x02	; 2
    6c64:	61 e0       	ldi	r22, 0x01	; 1
    6c66:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("2 - select mode");
    6c6a:	80 ed       	ldi	r24, 0xD0	; 208
    6c6c:	90 e0       	ldi	r25, 0x00	; 0
    6c6e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(3, 1);
    6c72:	83 e0       	ldi	r24, 0x03	; 3
    6c74:	61 e0       	ldi	r22, 0x01	; 1
    6c76:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("3 - Set Alarm");
    6c7a:	85 e9       	ldi	r24, 0x95	; 149
    6c7c:	90 e0       	ldi	r25, 0x00	; 0
    6c7e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(4, 1);
    6c82:	84 e0       	ldi	r24, 0x04	; 4
    6c84:	61 e0       	ldi	r22, 0x01	; 1
    6c86:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("4 - Weather");
    6c8a:	83 ea       	ldi	r24, 0xA3	; 163
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(4, 15);
    6c92:	84 e0       	ldi	r24, 0x04	; 4
    6c94:	6f e0       	ldi	r22, 0x0F	; 15
    6c96:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("X:EXIT");
    6c9a:	8f ea       	ldi	r24, 0xAF	; 175
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
}
    6ca2:	2f 96       	adiw	r28, 0x0f	; 15
    6ca4:	0f b6       	in	r0, 0x3f	; 63
    6ca6:	f8 94       	cli
    6ca8:	de bf       	out	0x3e, r29	; 62
    6caa:	0f be       	out	0x3f, r0	; 63
    6cac:	cd bf       	out	0x3d, r28	; 61
    6cae:	cf 91       	pop	r28
    6cb0:	df 91       	pop	r29
    6cb2:	08 95       	ret

00006cb4 <Set_Alarm>:

//======================================================================================================================================//

/* Fuction To set the time when Alarm is Ringing */
void Set_Alarm()
{
    6cb4:	df 93       	push	r29
    6cb6:	cf 93       	push	r28
    6cb8:	cd b7       	in	r28, 0x3d	; 61
    6cba:	de b7       	in	r29, 0x3e	; 62
    6cbc:	e3 97       	sbiw	r28, 0x33	; 51
    6cbe:	0f b6       	in	r0, 0x3f	; 63
    6cc0:	f8 94       	cli
    6cc2:	de bf       	out	0x3e, r29	; 62
    6cc4:	0f be       	out	0x3f, r0	; 63
    6cc6:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    6cc8:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("ALARM");
    6ccc:	82 ea       	ldi	r24, 0xA2	; 162
    6cce:	91 e0       	ldi	r25, 0x01	; 1
    6cd0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    6cd4:	82 e0       	ldi	r24, 0x02	; 2
    6cd6:	61 e0       	ldi	r22, 0x01	; 1
    6cd8:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("1 - Enable");
    6cdc:	88 ea       	ldi	r24, 0xA8	; 168
    6cde:	91 e0       	ldi	r25, 0x01	; 1
    6ce0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(3, 1);
    6ce4:	83 e0       	ldi	r24, 0x03	; 3
    6ce6:	61 e0       	ldi	r22, 0x01	; 1
    6ce8:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("2 - Disable");
    6cec:	83 eb       	ldi	r24, 0xB3	; 179
    6cee:	91 e0       	ldi	r25, 0x01	; 1
    6cf0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>

  /* Get pressed to choose if Alarm Statsu IS Enable or Disaple */
  do
  {
    KPD_Press = KPD_u8GetPressed();
    6cf4:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6cf8:	80 93 9a 03 	sts	0x039A, r24
    if (KPD_Press != NOTPRESSED && KPD_Press != '1' && KPD_Press != '2')
    6cfc:	80 91 9a 03 	lds	r24, 0x039A
    6d00:	8f 3f       	cpi	r24, 0xFF	; 255
    6d02:	09 f4       	brne	.+2      	; 0x6d06 <Set_Alarm+0x52>
    6d04:	98 c0       	rjmp	.+304    	; 0x6e36 <Set_Alarm+0x182>
    6d06:	80 91 9a 03 	lds	r24, 0x039A
    6d0a:	81 33       	cpi	r24, 0x31	; 49
    6d0c:	09 f4       	brne	.+2      	; 0x6d10 <Set_Alarm+0x5c>
    6d0e:	93 c0       	rjmp	.+294    	; 0x6e36 <Set_Alarm+0x182>
    6d10:	80 91 9a 03 	lds	r24, 0x039A
    6d14:	82 33       	cpi	r24, 0x32	; 50
    6d16:	09 f4       	brne	.+2      	; 0x6d1a <Set_Alarm+0x66>
    6d18:	8e c0       	rjmp	.+284    	; 0x6e36 <Set_Alarm+0x182>
    {
      CLCD_vClearScreen();
    6d1a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Wrong Choise");
    6d1e:	8f e4       	ldi	r24, 0x4F	; 79
    6d20:	91 e0       	ldi	r25, 0x01	; 1
    6d22:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6d26:	80 e0       	ldi	r24, 0x00	; 0
    6d28:	90 e0       	ldi	r25, 0x00	; 0
    6d2a:	aa ef       	ldi	r26, 0xFA	; 250
    6d2c:	b3 e4       	ldi	r27, 0x43	; 67
    6d2e:	8f a3       	std	Y+39, r24	; 0x27
    6d30:	98 a7       	std	Y+40, r25	; 0x28
    6d32:	a9 a7       	std	Y+41, r26	; 0x29
    6d34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d36:	6f a1       	ldd	r22, Y+39	; 0x27
    6d38:	78 a5       	ldd	r23, Y+40	; 0x28
    6d3a:	89 a5       	ldd	r24, Y+41	; 0x29
    6d3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	30 e0       	ldi	r19, 0x00	; 0
    6d42:	4a ef       	ldi	r20, 0xFA	; 250
    6d44:	54 e4       	ldi	r21, 0x44	; 68
    6d46:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6d4a:	dc 01       	movw	r26, r24
    6d4c:	cb 01       	movw	r24, r22
    6d4e:	8b a3       	std	Y+35, r24	; 0x23
    6d50:	9c a3       	std	Y+36, r25	; 0x24
    6d52:	ad a3       	std	Y+37, r26	; 0x25
    6d54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6d56:	6b a1       	ldd	r22, Y+35	; 0x23
    6d58:	7c a1       	ldd	r23, Y+36	; 0x24
    6d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    6d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    6d5e:	20 e0       	ldi	r18, 0x00	; 0
    6d60:	30 e0       	ldi	r19, 0x00	; 0
    6d62:	40 e8       	ldi	r20, 0x80	; 128
    6d64:	5f e3       	ldi	r21, 0x3F	; 63
    6d66:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6d6a:	88 23       	and	r24, r24
    6d6c:	2c f4       	brge	.+10     	; 0x6d78 <Set_Alarm+0xc4>
		__ticks = 1;
    6d6e:	81 e0       	ldi	r24, 0x01	; 1
    6d70:	90 e0       	ldi	r25, 0x00	; 0
    6d72:	9a a3       	std	Y+34, r25	; 0x22
    6d74:	89 a3       	std	Y+33, r24	; 0x21
    6d76:	3f c0       	rjmp	.+126    	; 0x6df6 <Set_Alarm+0x142>
	else if (__tmp > 65535)
    6d78:	6b a1       	ldd	r22, Y+35	; 0x23
    6d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    6d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    6d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    6d80:	20 e0       	ldi	r18, 0x00	; 0
    6d82:	3f ef       	ldi	r19, 0xFF	; 255
    6d84:	4f e7       	ldi	r20, 0x7F	; 127
    6d86:	57 e4       	ldi	r21, 0x47	; 71
    6d88:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6d8c:	18 16       	cp	r1, r24
    6d8e:	4c f5       	brge	.+82     	; 0x6de2 <Set_Alarm+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d90:	6f a1       	ldd	r22, Y+39	; 0x27
    6d92:	78 a5       	ldd	r23, Y+40	; 0x28
    6d94:	89 a5       	ldd	r24, Y+41	; 0x29
    6d96:	9a a5       	ldd	r25, Y+42	; 0x2a
    6d98:	20 e0       	ldi	r18, 0x00	; 0
    6d9a:	30 e0       	ldi	r19, 0x00	; 0
    6d9c:	40 e2       	ldi	r20, 0x20	; 32
    6d9e:	51 e4       	ldi	r21, 0x41	; 65
    6da0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6da4:	dc 01       	movw	r26, r24
    6da6:	cb 01       	movw	r24, r22
    6da8:	bc 01       	movw	r22, r24
    6daa:	cd 01       	movw	r24, r26
    6dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6db0:	dc 01       	movw	r26, r24
    6db2:	cb 01       	movw	r24, r22
    6db4:	9a a3       	std	Y+34, r25	; 0x22
    6db6:	89 a3       	std	Y+33, r24	; 0x21
    6db8:	0f c0       	rjmp	.+30     	; 0x6dd8 <Set_Alarm+0x124>
    6dba:	88 ec       	ldi	r24, 0xC8	; 200
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	98 a3       	std	Y+32, r25	; 0x20
    6dc0:	8f 8f       	std	Y+31, r24	; 0x1f
    6dc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6dc4:	98 a1       	ldd	r25, Y+32	; 0x20
    6dc6:	01 97       	sbiw	r24, 0x01	; 1
    6dc8:	f1 f7       	brne	.-4      	; 0x6dc6 <Set_Alarm+0x112>
    6dca:	98 a3       	std	Y+32, r25	; 0x20
    6dcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dce:	89 a1       	ldd	r24, Y+33	; 0x21
    6dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    6dd2:	01 97       	sbiw	r24, 0x01	; 1
    6dd4:	9a a3       	std	Y+34, r25	; 0x22
    6dd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    6dda:	9a a1       	ldd	r25, Y+34	; 0x22
    6ddc:	00 97       	sbiw	r24, 0x00	; 0
    6dde:	69 f7       	brne	.-38     	; 0x6dba <Set_Alarm+0x106>
    6de0:	14 c0       	rjmp	.+40     	; 0x6e0a <Set_Alarm+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6de2:	6b a1       	ldd	r22, Y+35	; 0x23
    6de4:	7c a1       	ldd	r23, Y+36	; 0x24
    6de6:	8d a1       	ldd	r24, Y+37	; 0x25
    6de8:	9e a1       	ldd	r25, Y+38	; 0x26
    6dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dee:	dc 01       	movw	r26, r24
    6df0:	cb 01       	movw	r24, r22
    6df2:	9a a3       	std	Y+34, r25	; 0x22
    6df4:	89 a3       	std	Y+33, r24	; 0x21
    6df6:	89 a1       	ldd	r24, Y+33	; 0x21
    6df8:	9a a1       	ldd	r25, Y+34	; 0x22
    6dfa:	9e 8f       	std	Y+30, r25	; 0x1e
    6dfc:	8d 8f       	std	Y+29, r24	; 0x1d
    6dfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6e00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6e02:	01 97       	sbiw	r24, 0x01	; 1
    6e04:	f1 f7       	brne	.-4      	; 0x6e02 <Set_Alarm+0x14e>
    6e06:	9e 8f       	std	Y+30, r25	; 0x1e
    6e08:	8d 8f       	std	Y+29, r24	; 0x1d
      _delay_ms(500);
      CLCD_vClearScreen();
    6e0a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("ALARM");
    6e0e:	82 ea       	ldi	r24, 0xA2	; 162
    6e10:	91 e0       	ldi	r25, 0x01	; 1
    6e12:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    6e16:	82 e0       	ldi	r24, 0x02	; 2
    6e18:	61 e0       	ldi	r22, 0x01	; 1
    6e1a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("1 - Enable");
    6e1e:	88 ea       	ldi	r24, 0xA8	; 168
    6e20:	91 e0       	ldi	r25, 0x01	; 1
    6e22:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(3, 1);
    6e26:	83 e0       	ldi	r24, 0x03	; 3
    6e28:	61 e0       	ldi	r22, 0x01	; 1
    6e2a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - Disable");
    6e2e:	83 eb       	ldi	r24, 0xB3	; 179
    6e30:	91 e0       	ldi	r25, 0x01	; 1
    6e32:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    }
  } while (KPD_Press == NOTPRESSED || (KPD_Press != '1' && KPD_Press != '2'));
    6e36:	80 91 9a 03 	lds	r24, 0x039A
    6e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    6e3c:	09 f4       	brne	.+2      	; 0x6e40 <Set_Alarm+0x18c>
    6e3e:	5a cf       	rjmp	.-332    	; 0x6cf4 <Set_Alarm+0x40>
    6e40:	80 91 9a 03 	lds	r24, 0x039A
    6e44:	81 33       	cpi	r24, 0x31	; 49
    6e46:	29 f0       	breq	.+10     	; 0x6e52 <Set_Alarm+0x19e>
    6e48:	80 91 9a 03 	lds	r24, 0x039A
    6e4c:	82 33       	cpi	r24, 0x32	; 50
    6e4e:	09 f0       	breq	.+2      	; 0x6e52 <Set_Alarm+0x19e>
    6e50:	51 cf       	rjmp	.-350    	; 0x6cf4 <Set_Alarm+0x40>

  /*___________________________________________________________________________________________________________________*/

  /* Check if chosen Alarm Status is Enable or Disaple */
  /* if user choose alarm is enable */
  if (KPD_Press == '1')
    6e52:	80 91 9a 03 	lds	r24, 0x039A
    6e56:	81 33       	cpi	r24, 0x31	; 49
    6e58:	09 f0       	breq	.+2      	; 0x6e5c <Set_Alarm+0x1a8>
    6e5a:	92 c2       	rjmp	.+1316   	; 0x7380 <Set_Alarm+0x6cc>
  {
    /* Check if Alarm was Enaple or Disaple */
    switch (Alarm_Status)
    6e5c:	80 91 95 03 	lds	r24, 0x0395
    6e60:	28 2f       	mov	r18, r24
    6e62:	30 e0       	ldi	r19, 0x00	; 0
    6e64:	3b ab       	std	Y+51, r19	; 0x33
    6e66:	2a ab       	std	Y+50, r18	; 0x32
    6e68:	8a a9       	ldd	r24, Y+50	; 0x32
    6e6a:	9b a9       	ldd	r25, Y+51	; 0x33
    6e6c:	00 97       	sbiw	r24, 0x00	; 0
    6e6e:	31 f0       	breq	.+12     	; 0x6e7c <Set_Alarm+0x1c8>
    6e70:	2a a9       	ldd	r18, Y+50	; 0x32
    6e72:	3b a9       	ldd	r19, Y+51	; 0x33
    6e74:	21 30       	cpi	r18, 0x01	; 1
    6e76:	31 05       	cpc	r19, r1
    6e78:	e9 f0       	breq	.+58     	; 0x6eb4 <Set_Alarm+0x200>
    6e7a:	6c c0       	rjmp	.+216    	; 0x6f54 <Set_Alarm+0x2a0>
    {
    //if Alarm was Disaple display Alarm is 12 : 00
    case Alarm_DIS:
      CLCD_vClearScreen();
    6e7c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Set Aalrm :");
    6e80:	8f eb       	ldi	r24, 0xBF	; 191
    6e82:	91 e0       	ldi	r25, 0x01	; 1
    6e84:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 6);
    6e88:	82 e0       	ldi	r24, 0x02	; 2
    6e8a:	66 e0       	ldi	r22, 0x06	; 6
    6e8c:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("12 : 00");
    6e90:	8b ec       	ldi	r24, 0xCB	; 203
    6e92:	91 e0       	ldi	r25, 0x01	; 1
    6e94:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      //if Time_Mode is 12 Hours Mode display AM or PM
      if (Time_Mode == Time_Mode12Hours)
    6e98:	80 91 55 03 	lds	r24, 0x0355
    6e9c:	81 33       	cpi	r24, 0x31	; 49
    6e9e:	09 f0       	breq	.+2      	; 0x6ea2 <Set_Alarm+0x1ee>
    6ea0:	59 c0       	rjmp	.+178    	; 0x6f54 <Set_Alarm+0x2a0>
      {
        CLCD_vSetPosition(2, 14);
    6ea2:	82 e0       	ldi	r24, 0x02	; 2
    6ea4:	6e e0       	ldi	r22, 0x0E	; 14
    6ea6:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendString("AM");
    6eaa:	88 e3       	ldi	r24, 0x38	; 56
    6eac:	91 e0       	ldi	r25, 0x01	; 1
    6eae:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6eb2:	50 c0       	rjmp	.+160    	; 0x6f54 <Set_Alarm+0x2a0>
      }
      break;
      //If Alarm was Enaple display Last Alarm
    case Alarm_EN:
      CLCD_vClearScreen();
    6eb4:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("Set Aalrm :");
    6eb8:	8f eb       	ldi	r24, 0xBF	; 191
    6eba:	91 e0       	ldi	r25, 0x01	; 1
    6ebc:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 6);
    6ec0:	82 e0       	ldi	r24, 0x02	; 2
    6ec2:	66 e0       	ldi	r22, 0x06	; 6
    6ec4:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendData((Alarm_Hour / 10) + 48);
    6ec8:	80 91 98 03 	lds	r24, 0x0398
    6ecc:	9a e0       	ldi	r25, 0x0A	; 10
    6ece:	69 2f       	mov	r22, r25
    6ed0:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6ed4:	80 5d       	subi	r24, 0xD0	; 208
    6ed6:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData((Alarm_Hour % 10) + 48);
    6eda:	80 91 98 03 	lds	r24, 0x0398
    6ede:	9a e0       	ldi	r25, 0x0A	; 10
    6ee0:	69 2f       	mov	r22, r25
    6ee2:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6ee6:	89 2f       	mov	r24, r25
    6ee8:	80 5d       	subi	r24, 0xD0	; 208
    6eea:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendString(" : ");
    6eee:	86 ee       	ldi	r24, 0xE6	; 230
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSendData((Alarm_Minutes / 10) + 48);
    6ef6:	80 91 9b 03 	lds	r24, 0x039B
    6efa:	9a e0       	ldi	r25, 0x0A	; 10
    6efc:	69 2f       	mov	r22, r25
    6efe:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6f02:	80 5d       	subi	r24, 0xD0	; 208
    6f04:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData((Alarm_Minutes % 10) + 48);
    6f08:	80 91 9b 03 	lds	r24, 0x039B
    6f0c:	9a e0       	ldi	r25, 0x0A	; 10
    6f0e:	69 2f       	mov	r22, r25
    6f10:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    6f14:	89 2f       	mov	r24, r25
    6f16:	80 5d       	subi	r24, 0xD0	; 208
    6f18:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

      //if Time_Mode is 12 Hours Mode display AM or PM
      if (Time_Mode == Time_Mode12Hours)
    6f1c:	80 91 55 03 	lds	r24, 0x0355
    6f20:	81 33       	cpi	r24, 0x31	; 49
    6f22:	c1 f4       	brne	.+48     	; 0x6f54 <Set_Alarm+0x2a0>
      {
        switch (Alarm_DayTime)
    6f24:	80 91 94 03 	lds	r24, 0x0394
    6f28:	28 2f       	mov	r18, r24
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	39 ab       	std	Y+49, r19	; 0x31
    6f2e:	28 ab       	std	Y+48, r18	; 0x30
    6f30:	88 a9       	ldd	r24, Y+48	; 0x30
    6f32:	99 a9       	ldd	r25, Y+49	; 0x31
    6f34:	00 97       	sbiw	r24, 0x00	; 0
    6f36:	51 f0       	breq	.+20     	; 0x6f4c <Set_Alarm+0x298>
    6f38:	28 a9       	ldd	r18, Y+48	; 0x30
    6f3a:	39 a9       	ldd	r19, Y+49	; 0x31
    6f3c:	21 30       	cpi	r18, 0x01	; 1
    6f3e:	31 05       	cpc	r19, r1
    6f40:	49 f4       	brne	.+18     	; 0x6f54 <Set_Alarm+0x2a0>
        {
        case 1:
          CLCD_vSendString(" AM");
    6f42:	8a ee       	ldi	r24, 0xEA	; 234
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    6f4a:	04 c0       	rjmp	.+8      	; 0x6f54 <Set_Alarm+0x2a0>
          break;
        case 0:
          CLCD_vSendString(" PM");
    6f4c:	8e ee       	ldi	r24, 0xEE	; 238
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      }
    }

    /*___________________________________________________________________________________________________________________*/

    CLCD_vSetPosition(2, 6);
    6f54:	82 e0       	ldi	r24, 0x02	; 2
    6f56:	66 e0       	ldi	r22, 0x06	; 6
    6f58:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>

    CLCD_vSendCommand(CLCD_DISPLAYON_CURSORON);
    6f5c:	8e e0       	ldi	r24, 0x0E	; 14
    6f5e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    /*___________________________________________________________________________________________________________________*/

    /* Set Alarm_Hour */
    do
    {
      KPD_Press = KPD_u8GetPressed();
    6f62:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6f66:	80 93 9a 03 	sts	0x039A, r24
    } while (KPD_Press == NOTPRESSED);
    6f6a:	80 91 9a 03 	lds	r24, 0x039A
    6f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f70:	c1 f3       	breq	.-16     	; 0x6f62 <Set_Alarm+0x2ae>

    CLCD_vSendData(KPD_Press);
    6f72:	80 91 9a 03 	lds	r24, 0x039A
    6f76:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

    Alarm_Hour = (KPD_Press - 48) * 10;
    6f7a:	80 91 9a 03 	lds	r24, 0x039A
    6f7e:	88 2f       	mov	r24, r24
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	9c 01       	movw	r18, r24
    6f84:	22 0f       	add	r18, r18
    6f86:	33 1f       	adc	r19, r19
    6f88:	c9 01       	movw	r24, r18
    6f8a:	88 0f       	add	r24, r24
    6f8c:	99 1f       	adc	r25, r25
    6f8e:	88 0f       	add	r24, r24
    6f90:	99 1f       	adc	r25, r25
    6f92:	82 0f       	add	r24, r18
    6f94:	93 1f       	adc	r25, r19
    6f96:	80 5e       	subi	r24, 0xE0	; 224
    6f98:	80 93 98 03 	sts	0x0398, r24
    do
    {
      KPD_Press = KPD_u8GetPressed();
    6f9c:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    6fa0:	80 93 9a 03 	sts	0x039A, r24
    } while (KPD_Press == NOTPRESSED);
    6fa4:	80 91 9a 03 	lds	r24, 0x039A
    6fa8:	8f 3f       	cpi	r24, 0xFF	; 255
    6faa:	c1 f3       	breq	.-16     	; 0x6f9c <Set_Alarm+0x2e8>

    CLCD_vSendData(KPD_Press);
    6fac:	80 91 9a 03 	lds	r24, 0x039A
    6fb0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    Alarm_Hour += (KPD_Press - 48);
    6fb4:	90 91 9a 03 	lds	r25, 0x039A
    6fb8:	80 91 98 03 	lds	r24, 0x0398
    6fbc:	89 0f       	add	r24, r25
    6fbe:	80 53       	subi	r24, 0x30	; 48
    6fc0:	80 93 98 03 	sts	0x0398, r24

    /* Check if it valid or not */
    switch (Time_Mode)
    6fc4:	80 91 55 03 	lds	r24, 0x0355
    6fc8:	28 2f       	mov	r18, r24
    6fca:	30 e0       	ldi	r19, 0x00	; 0
    6fcc:	3f a7       	std	Y+47, r19	; 0x2f
    6fce:	2e a7       	std	Y+46, r18	; 0x2e
    6fd0:	8e a5       	ldd	r24, Y+46	; 0x2e
    6fd2:	9f a5       	ldd	r25, Y+47	; 0x2f
    6fd4:	81 33       	cpi	r24, 0x31	; 49
    6fd6:	91 05       	cpc	r25, r1
    6fd8:	39 f0       	breq	.+14     	; 0x6fe8 <Set_Alarm+0x334>
    6fda:	2e a5       	ldd	r18, Y+46	; 0x2e
    6fdc:	3f a5       	ldd	r19, Y+47	; 0x2f
    6fde:	22 33       	cpi	r18, 0x32	; 50
    6fe0:	31 05       	cpc	r19, r1
    6fe2:	09 f4       	brne	.+2      	; 0x6fe6 <Set_Alarm+0x332>
    6fe4:	45 c0       	rjmp	.+138    	; 0x7070 <Set_Alarm+0x3bc>
    6fe6:	62 c0       	rjmp	.+196    	; 0x70ac <Set_Alarm+0x3f8>
    {
    // Check if it valid or not In case it is in 12 hour mode
    case Time_Mode12Hours:
      if (Alarm_Hour > 12 && Alarm_Hour < 24)
    6fe8:	80 91 98 03 	lds	r24, 0x0398
    6fec:	8d 30       	cpi	r24, 0x0D	; 13
    6fee:	08 f1       	brcs	.+66     	; 0x7032 <Set_Alarm+0x37e>
    6ff0:	80 91 98 03 	lds	r24, 0x0398
    6ff4:	88 31       	cpi	r24, 0x18	; 24
    6ff6:	e8 f4       	brcc	.+58     	; 0x7032 <Set_Alarm+0x37e>
      {
        Alarm_Hour -= 12;
    6ff8:	80 91 98 03 	lds	r24, 0x0398
    6ffc:	8c 50       	subi	r24, 0x0C	; 12
    6ffe:	80 93 98 03 	sts	0x0398, r24
        CLCD_vSetPosition(2, 6);
    7002:	82 e0       	ldi	r24, 0x02	; 2
    7004:	66 e0       	ldi	r22, 0x06	; 6
    7006:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData((Alarm_Hour / 10) + 48);
    700a:	80 91 98 03 	lds	r24, 0x0398
    700e:	9a e0       	ldi	r25, 0x0A	; 10
    7010:	69 2f       	mov	r22, r25
    7012:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7016:	80 5d       	subi	r24, 0xD0	; 208
    7018:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((Alarm_Hour % 10) + 48);
    701c:	80 91 98 03 	lds	r24, 0x0398
    7020:	9a e0       	ldi	r25, 0x0A	; 10
    7022:	69 2f       	mov	r22, r25
    7024:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7028:	89 2f       	mov	r24, r25
    702a:	80 5d       	subi	r24, 0xD0	; 208
    702c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    7030:	3d c0       	rjmp	.+122    	; 0x70ac <Set_Alarm+0x3f8>
      }
      else if (Alarm_Hour > 23)
    7032:	80 91 98 03 	lds	r24, 0x0398
    7036:	88 31       	cpi	r24, 0x18	; 24
    7038:	c8 f1       	brcs	.+114    	; 0x70ac <Set_Alarm+0x3f8>
      {
        Alarm_Hour = 12;
    703a:	8c e0       	ldi	r24, 0x0C	; 12
    703c:	80 93 98 03 	sts	0x0398, r24
        CLCD_vSetPosition(2, 6);
    7040:	82 e0       	ldi	r24, 0x02	; 2
    7042:	66 e0       	ldi	r22, 0x06	; 6
    7044:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData((Alarm_Hour / 10) + 48);
    7048:	80 91 98 03 	lds	r24, 0x0398
    704c:	9a e0       	ldi	r25, 0x0A	; 10
    704e:	69 2f       	mov	r22, r25
    7050:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7054:	80 5d       	subi	r24, 0xD0	; 208
    7056:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((Alarm_Hour % 10) + 48);
    705a:	80 91 98 03 	lds	r24, 0x0398
    705e:	9a e0       	ldi	r25, 0x0A	; 10
    7060:	69 2f       	mov	r22, r25
    7062:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7066:	89 2f       	mov	r24, r25
    7068:	80 5d       	subi	r24, 0xD0	; 208
    706a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    706e:	1e c0       	rjmp	.+60     	; 0x70ac <Set_Alarm+0x3f8>
      {
      }
      break;
      // Check if it valid or not In case it is in 24 hour mode
    case Time_Mode24Hours:
      if (Alarm_Hour > 23)
    7070:	80 91 98 03 	lds	r24, 0x0398
    7074:	88 31       	cpi	r24, 0x18	; 24
    7076:	d0 f0       	brcs	.+52     	; 0x70ac <Set_Alarm+0x3f8>
      {
        Alarm_Hour = 12;
    7078:	8c e0       	ldi	r24, 0x0C	; 12
    707a:	80 93 98 03 	sts	0x0398, r24
        CLCD_vSetPosition(2, 6);
    707e:	82 e0       	ldi	r24, 0x02	; 2
    7080:	66 e0       	ldi	r22, 0x06	; 6
    7082:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData((Alarm_Hour / 10) + 48);
    7086:	80 91 98 03 	lds	r24, 0x0398
    708a:	9a e0       	ldi	r25, 0x0A	; 10
    708c:	69 2f       	mov	r22, r25
    708e:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7092:	80 5d       	subi	r24, 0xD0	; 208
    7094:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((Alarm_Hour % 10) + 48);
    7098:	80 91 98 03 	lds	r24, 0x0398
    709c:	9a e0       	ldi	r25, 0x0A	; 10
    709e:	69 2f       	mov	r22, r25
    70a0:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    70a4:	89 2f       	mov	r24, r25
    70a6:	80 5d       	subi	r24, 0xD0	; 208
    70a8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      break;
    }

    /*___________________________________________________________________________________________________________________*/

    CLCD_vSetPosition(2, 11);
    70ac:	82 e0       	ldi	r24, 0x02	; 2
    70ae:	6b e0       	ldi	r22, 0x0B	; 11
    70b0:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>

    /* Set Alarm Minutes */
    do
    {
      KPD_Press = KPD_u8GetPressed();
    70b4:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    70b8:	80 93 9a 03 	sts	0x039A, r24
    } while (KPD_Press == NOTPRESSED);
    70bc:	80 91 9a 03 	lds	r24, 0x039A
    70c0:	8f 3f       	cpi	r24, 0xFF	; 255
    70c2:	c1 f3       	breq	.-16     	; 0x70b4 <Set_Alarm+0x400>

    CLCD_vSendData(KPD_Press);
    70c4:	80 91 9a 03 	lds	r24, 0x039A
    70c8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

    Alarm_Minutes = (KPD_Press - 48) * 10;
    70cc:	80 91 9a 03 	lds	r24, 0x039A
    70d0:	88 2f       	mov	r24, r24
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	9c 01       	movw	r18, r24
    70d6:	22 0f       	add	r18, r18
    70d8:	33 1f       	adc	r19, r19
    70da:	c9 01       	movw	r24, r18
    70dc:	88 0f       	add	r24, r24
    70de:	99 1f       	adc	r25, r25
    70e0:	88 0f       	add	r24, r24
    70e2:	99 1f       	adc	r25, r25
    70e4:	82 0f       	add	r24, r18
    70e6:	93 1f       	adc	r25, r19
    70e8:	80 5e       	subi	r24, 0xE0	; 224
    70ea:	80 93 9b 03 	sts	0x039B, r24
    do
    {
      KPD_Press = KPD_u8GetPressed();
    70ee:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    70f2:	80 93 9a 03 	sts	0x039A, r24
    } while (KPD_Press == NOTPRESSED);
    70f6:	80 91 9a 03 	lds	r24, 0x039A
    70fa:	8f 3f       	cpi	r24, 0xFF	; 255
    70fc:	c1 f3       	breq	.-16     	; 0x70ee <Set_Alarm+0x43a>

    CLCD_vSendData(KPD_Press);
    70fe:	80 91 9a 03 	lds	r24, 0x039A
    7102:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    Alarm_Minutes += (KPD_Press - 48);
    7106:	90 91 9a 03 	lds	r25, 0x039A
    710a:	80 91 9b 03 	lds	r24, 0x039B
    710e:	89 0f       	add	r24, r25
    7110:	80 53       	subi	r24, 0x30	; 48
    7112:	80 93 9b 03 	sts	0x039B, r24

    //Check if it valid or not
    if (Alarm_Minutes > 59)
    7116:	80 91 9b 03 	lds	r24, 0x039B
    711a:	8c 33       	cpi	r24, 0x3C	; 60
    711c:	c8 f0       	brcs	.+50     	; 0x7150 <Set_Alarm+0x49c>
    {
      Alarm_Minutes = 0;
    711e:	10 92 9b 03 	sts	0x039B, r1
      CLCD_vSetPosition(2, 11);
    7122:	82 e0       	ldi	r24, 0x02	; 2
    7124:	6b e0       	ldi	r22, 0x0B	; 11
    7126:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendData((Alarm_Minutes / 10) + 48);
    712a:	80 91 9b 03 	lds	r24, 0x039B
    712e:	9a e0       	ldi	r25, 0x0A	; 10
    7130:	69 2f       	mov	r22, r25
    7132:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7136:	80 5d       	subi	r24, 0xD0	; 208
    7138:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
      CLCD_vSendData((Alarm_Minutes % 10) + 48);
    713c:	80 91 9b 03 	lds	r24, 0x039B
    7140:	9a e0       	ldi	r25, 0x0A	; 10
    7142:	69 2f       	mov	r22, r25
    7144:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7148:	89 2f       	mov	r24, r25
    714a:	80 5d       	subi	r24, 0xD0	; 208
    714c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>

    /*___________________________________________________________________________________________________________________*/

    /* Check time mode to display AM / PM or not and Choose the time mode */
    //if time mode is 12 hours disply AM or PM and choose between them
    if (Time_Mode == Time_Mode12Hours)
    7150:	80 91 55 03 	lds	r24, 0x0355
    7154:	81 33       	cpi	r24, 0x31	; 49
    7156:	09 f0       	breq	.+2      	; 0x715a <Set_Alarm+0x4a6>
    7158:	ff c0       	rjmp	.+510    	; 0x7358 <Set_Alarm+0x6a4>
    {
      CLCD_vSetPosition(3, 1);
    715a:	83 e0       	ldi	r24, 0x03	; 3
    715c:	61 e0       	ldi	r22, 0x01	; 1
    715e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("1 : AM    2 : PM");
    7162:	8e e3       	ldi	r24, 0x3E	; 62
    7164:	91 e0       	ldi	r25, 0x01	; 1
    7166:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      do
      {
        Alarm_DayTime = KPD_u8GetPressed();
    716a:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    716e:	80 93 94 03 	sts	0x0394, r24
        //when choose invalid input
        if (Alarm_DayTime != NOTPRESSED && (Alarm_DayTime != '1' && Alarm_DayTime != '2'))
    7172:	80 91 94 03 	lds	r24, 0x0394
    7176:	8f 3f       	cpi	r24, 0xFF	; 255
    7178:	09 f4       	brne	.+2      	; 0x717c <Set_Alarm+0x4c8>
    717a:	d6 c0       	rjmp	.+428    	; 0x7328 <Set_Alarm+0x674>
    717c:	80 91 94 03 	lds	r24, 0x0394
    7180:	81 33       	cpi	r24, 0x31	; 49
    7182:	09 f4       	brne	.+2      	; 0x7186 <Set_Alarm+0x4d2>
    7184:	d1 c0       	rjmp	.+418    	; 0x7328 <Set_Alarm+0x674>
    7186:	80 91 94 03 	lds	r24, 0x0394
    718a:	82 33       	cpi	r24, 0x32	; 50
    718c:	09 f4       	brne	.+2      	; 0x7190 <Set_Alarm+0x4dc>
    718e:	cc c0       	rjmp	.+408    	; 0x7328 <Set_Alarm+0x674>
        {
          CLCD_vClearScreen();
    7190:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
          CLCD_vSendString("Wrong Choise");
    7194:	8f e4       	ldi	r24, 0x4F	; 79
    7196:	91 e0       	ldi	r25, 0x01	; 1
    7198:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	90 e0       	ldi	r25, 0x00	; 0
    71a0:	aa ef       	ldi	r26, 0xFA	; 250
    71a2:	b3 e4       	ldi	r27, 0x43	; 67
    71a4:	89 8f       	std	Y+25, r24	; 0x19
    71a6:	9a 8f       	std	Y+26, r25	; 0x1a
    71a8:	ab 8f       	std	Y+27, r26	; 0x1b
    71aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71ac:	69 8d       	ldd	r22, Y+25	; 0x19
    71ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71b4:	20 e0       	ldi	r18, 0x00	; 0
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	4a ef       	ldi	r20, 0xFA	; 250
    71ba:	54 e4       	ldi	r21, 0x44	; 68
    71bc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    71c0:	dc 01       	movw	r26, r24
    71c2:	cb 01       	movw	r24, r22
    71c4:	8d 8b       	std	Y+21, r24	; 0x15
    71c6:	9e 8b       	std	Y+22, r25	; 0x16
    71c8:	af 8b       	std	Y+23, r26	; 0x17
    71ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    71cc:	6d 89       	ldd	r22, Y+21	; 0x15
    71ce:	7e 89       	ldd	r23, Y+22	; 0x16
    71d0:	8f 89       	ldd	r24, Y+23	; 0x17
    71d2:	98 8d       	ldd	r25, Y+24	; 0x18
    71d4:	20 e0       	ldi	r18, 0x00	; 0
    71d6:	30 e0       	ldi	r19, 0x00	; 0
    71d8:	40 e8       	ldi	r20, 0x80	; 128
    71da:	5f e3       	ldi	r21, 0x3F	; 63
    71dc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    71e0:	88 23       	and	r24, r24
    71e2:	2c f4       	brge	.+10     	; 0x71ee <Set_Alarm+0x53a>
		__ticks = 1;
    71e4:	81 e0       	ldi	r24, 0x01	; 1
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	9c 8b       	std	Y+20, r25	; 0x14
    71ea:	8b 8b       	std	Y+19, r24	; 0x13
    71ec:	3f c0       	rjmp	.+126    	; 0x726c <Set_Alarm+0x5b8>
	else if (__tmp > 65535)
    71ee:	6d 89       	ldd	r22, Y+21	; 0x15
    71f0:	7e 89       	ldd	r23, Y+22	; 0x16
    71f2:	8f 89       	ldd	r24, Y+23	; 0x17
    71f4:	98 8d       	ldd	r25, Y+24	; 0x18
    71f6:	20 e0       	ldi	r18, 0x00	; 0
    71f8:	3f ef       	ldi	r19, 0xFF	; 255
    71fa:	4f e7       	ldi	r20, 0x7F	; 127
    71fc:	57 e4       	ldi	r21, 0x47	; 71
    71fe:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7202:	18 16       	cp	r1, r24
    7204:	4c f5       	brge	.+82     	; 0x7258 <Set_Alarm+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7206:	69 8d       	ldd	r22, Y+25	; 0x19
    7208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    720a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    720c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    720e:	20 e0       	ldi	r18, 0x00	; 0
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	40 e2       	ldi	r20, 0x20	; 32
    7214:	51 e4       	ldi	r21, 0x41	; 65
    7216:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    721a:	dc 01       	movw	r26, r24
    721c:	cb 01       	movw	r24, r22
    721e:	bc 01       	movw	r22, r24
    7220:	cd 01       	movw	r24, r26
    7222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7226:	dc 01       	movw	r26, r24
    7228:	cb 01       	movw	r24, r22
    722a:	9c 8b       	std	Y+20, r25	; 0x14
    722c:	8b 8b       	std	Y+19, r24	; 0x13
    722e:	0f c0       	rjmp	.+30     	; 0x724e <Set_Alarm+0x59a>
    7230:	88 ec       	ldi	r24, 0xC8	; 200
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	9a 8b       	std	Y+18, r25	; 0x12
    7236:	89 8b       	std	Y+17, r24	; 0x11
    7238:	89 89       	ldd	r24, Y+17	; 0x11
    723a:	9a 89       	ldd	r25, Y+18	; 0x12
    723c:	01 97       	sbiw	r24, 0x01	; 1
    723e:	f1 f7       	brne	.-4      	; 0x723c <Set_Alarm+0x588>
    7240:	9a 8b       	std	Y+18, r25	; 0x12
    7242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7244:	8b 89       	ldd	r24, Y+19	; 0x13
    7246:	9c 89       	ldd	r25, Y+20	; 0x14
    7248:	01 97       	sbiw	r24, 0x01	; 1
    724a:	9c 8b       	std	Y+20, r25	; 0x14
    724c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    724e:	8b 89       	ldd	r24, Y+19	; 0x13
    7250:	9c 89       	ldd	r25, Y+20	; 0x14
    7252:	00 97       	sbiw	r24, 0x00	; 0
    7254:	69 f7       	brne	.-38     	; 0x7230 <Set_Alarm+0x57c>
    7256:	14 c0       	rjmp	.+40     	; 0x7280 <Set_Alarm+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7258:	6d 89       	ldd	r22, Y+21	; 0x15
    725a:	7e 89       	ldd	r23, Y+22	; 0x16
    725c:	8f 89       	ldd	r24, Y+23	; 0x17
    725e:	98 8d       	ldd	r25, Y+24	; 0x18
    7260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7264:	dc 01       	movw	r26, r24
    7266:	cb 01       	movw	r24, r22
    7268:	9c 8b       	std	Y+20, r25	; 0x14
    726a:	8b 8b       	std	Y+19, r24	; 0x13
    726c:	8b 89       	ldd	r24, Y+19	; 0x13
    726e:	9c 89       	ldd	r25, Y+20	; 0x14
    7270:	98 8b       	std	Y+16, r25	; 0x10
    7272:	8f 87       	std	Y+15, r24	; 0x0f
    7274:	8f 85       	ldd	r24, Y+15	; 0x0f
    7276:	98 89       	ldd	r25, Y+16	; 0x10
    7278:	01 97       	sbiw	r24, 0x01	; 1
    727a:	f1 f7       	brne	.-4      	; 0x7278 <Set_Alarm+0x5c4>
    727c:	98 8b       	std	Y+16, r25	; 0x10
    727e:	8f 87       	std	Y+15, r24	; 0x0f
          _delay_ms(500);
          CLCD_vClearScreen();
    7280:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
          CLCD_vSendString("Set Aalrm :");
    7284:	8f eb       	ldi	r24, 0xBF	; 191
    7286:	91 e0       	ldi	r25, 0x01	; 1
    7288:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
          CLCD_vSetPosition(2, 6);
    728c:	82 e0       	ldi	r24, 0x02	; 2
    728e:	66 e0       	ldi	r22, 0x06	; 6
    7290:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
          CLCD_vSendData((Alarm_Hour / 10) + 48);
    7294:	80 91 98 03 	lds	r24, 0x0398
    7298:	9a e0       	ldi	r25, 0x0A	; 10
    729a:	69 2f       	mov	r22, r25
    729c:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    72a0:	80 5d       	subi	r24, 0xD0	; 208
    72a2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
          CLCD_vSendData((Alarm_Hour % 10) + 48);
    72a6:	80 91 98 03 	lds	r24, 0x0398
    72aa:	9a e0       	ldi	r25, 0x0A	; 10
    72ac:	69 2f       	mov	r22, r25
    72ae:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    72b2:	89 2f       	mov	r24, r25
    72b4:	80 5d       	subi	r24, 0xD0	; 208
    72b6:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
          CLCD_vSendString(" : ");
    72ba:	86 ee       	ldi	r24, 0xE6	; 230
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
          CLCD_vSendData((Alarm_Minutes / 10) + 48);
    72c2:	80 91 9b 03 	lds	r24, 0x039B
    72c6:	9a e0       	ldi	r25, 0x0A	; 10
    72c8:	69 2f       	mov	r22, r25
    72ca:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    72ce:	80 5d       	subi	r24, 0xD0	; 208
    72d0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
          CLCD_vSendData((Alarm_Minutes % 10) + 48);
    72d4:	80 91 9b 03 	lds	r24, 0x039B
    72d8:	9a e0       	ldi	r25, 0x0A	; 10
    72da:	69 2f       	mov	r22, r25
    72dc:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    72e0:	89 2f       	mov	r24, r25
    72e2:	80 5d       	subi	r24, 0xD0	; 208
    72e4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
          switch (Alarm_DayTime)
    72e8:	80 91 94 03 	lds	r24, 0x0394
    72ec:	28 2f       	mov	r18, r24
    72ee:	30 e0       	ldi	r19, 0x00	; 0
    72f0:	3d a7       	std	Y+45, r19	; 0x2d
    72f2:	2c a7       	std	Y+44, r18	; 0x2c
    72f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    72f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    72f8:	00 97       	sbiw	r24, 0x00	; 0
    72fa:	51 f0       	breq	.+20     	; 0x7310 <Set_Alarm+0x65c>
    72fc:	2c a5       	ldd	r18, Y+44	; 0x2c
    72fe:	3d a5       	ldd	r19, Y+45	; 0x2d
    7300:	21 30       	cpi	r18, 0x01	; 1
    7302:	31 05       	cpc	r19, r1
    7304:	49 f4       	brne	.+18     	; 0x7318 <Set_Alarm+0x664>
          {
          case 1:
            CLCD_vSendString(" AM");
    7306:	8a ee       	ldi	r24, 0xEA	; 234
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    730e:	04 c0       	rjmp	.+8      	; 0x7318 <Set_Alarm+0x664>
            break;
          case 0:
            CLCD_vSendString(" PM");
    7310:	8e ee       	ldi	r24, 0xEE	; 238
    7312:	90 e0       	ldi	r25, 0x00	; 0
    7314:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
            break;
          }
          CLCD_vSetPosition(3, 1);
    7318:	83 e0       	ldi	r24, 0x03	; 3
    731a:	61 e0       	ldi	r22, 0x01	; 1
    731c:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
          CLCD_vSendString("1 : AM    2 : PM");
    7320:	8e e3       	ldi	r24, 0x3E	; 62
    7322:	91 e0       	ldi	r25, 0x01	; 1
    7324:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        }
      } while (Alarm_DayTime != '1' && Alarm_DayTime != '2');
    7328:	80 91 94 03 	lds	r24, 0x0394
    732c:	81 33       	cpi	r24, 0x31	; 49
    732e:	29 f0       	breq	.+10     	; 0x733a <Set_Alarm+0x686>
    7330:	80 91 94 03 	lds	r24, 0x0394
    7334:	82 33       	cpi	r24, 0x32	; 50
    7336:	09 f0       	breq	.+2      	; 0x733a <Set_Alarm+0x686>
    7338:	18 cf       	rjmp	.-464    	; 0x716a <Set_Alarm+0x4b6>

      /*___________________________________________________________________________________________________________________*/

      //Set invaliv val to compre with READ AM or PM Led
      if (Alarm_DayTime == '1')
    733a:	80 91 94 03 	lds	r24, 0x0394
    733e:	81 33       	cpi	r24, 0x31	; 49
    7340:	21 f4       	brne	.+8      	; 0x734a <Set_Alarm+0x696>
      {
        Alarm_DayTime = 1; //AM
    7342:	81 e0       	ldi	r24, 0x01	; 1
    7344:	80 93 94 03 	sts	0x0394, r24
    7348:	17 c0       	rjmp	.+46     	; 0x7378 <Set_Alarm+0x6c4>
      }
      else if (Alarm_DayTime == '2')
    734a:	80 91 94 03 	lds	r24, 0x0394
    734e:	82 33       	cpi	r24, 0x32	; 50
    7350:	99 f4       	brne	.+38     	; 0x7378 <Set_Alarm+0x6c4>
      {
        Alarm_DayTime = 0; //PM
    7352:	10 92 94 03 	sts	0x0394, r1
    7356:	10 c0       	rjmp	.+32     	; 0x7378 <Set_Alarm+0x6c4>
      /*___________________________________________________________________________________________________________________*/

    }
    //if time mode is 24 hours don't disply AM or PM
    //and set it depend on hour is AM or PM
    else if (Time_Mode == Time_Mode24Hours)
    7358:	80 91 55 03 	lds	r24, 0x0355
    735c:	82 33       	cpi	r24, 0x32	; 50
    735e:	61 f4       	brne	.+24     	; 0x7378 <Set_Alarm+0x6c4>
    {
      if (Alarm_Hour >= 12)
    7360:	80 91 98 03 	lds	r24, 0x0398
    7364:	8c 30       	cpi	r24, 0x0C	; 12
    7366:	18 f0       	brcs	.+6      	; 0x736e <Set_Alarm+0x6ba>
      {
        Alarm_DayTime = 0;
    7368:	10 92 94 03 	sts	0x0394, r1
    736c:	05 c0       	rjmp	.+10     	; 0x7378 <Set_Alarm+0x6c4>
      }
      else if (Alarm_Hour >= 0)
    736e:	30 91 98 03 	lds	r19, 0x0398
      {
        Alarm_DayTime = 1;
    7372:	81 e0       	ldi	r24, 0x01	; 1
    7374:	80 93 94 03 	sts	0x0394, r24
    }

    /*___________________________________________________________________________________________________________________*/

    /* Make Alarm Status : Alarm Enable */
    Alarm_Status = Alarm_EN;
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	80 93 95 03 	sts	0x0395, r24
    737e:	09 c0       	rjmp	.+18     	; 0x7392 <Set_Alarm+0x6de>

    /*___________________________________________________________________________________________________________________*/
  }
  /* if user choose alarm is disaple */
  else if (KPD_Press == '2')
    7380:	80 91 9a 03 	lds	r24, 0x039A
    7384:	82 33       	cpi	r24, 0x32	; 50
    7386:	29 f4       	brne	.+10     	; 0x7392 <Set_Alarm+0x6de>
  {
    /* Make Alarm Status : Alarm Disaple */
    Alarm_Hour = NOTPRESSED;
    7388:	8f ef       	ldi	r24, 0xFF	; 255
    738a:	80 93 98 03 	sts	0x0398, r24
    Alarm_Status = Alarm_DIS;
    738e:	10 92 95 03 	sts	0x0395, r1

  /*___________________________________________________________________________________________________________________*/

  /* Check Alarm is correct or not */
  // when it not correct you can ReEnter it by choose Cancel but this option is valid when alarm is enable
  if (Alarm_Status == Alarm_EN)
    7392:	80 91 95 03 	lds	r24, 0x0395
    7396:	81 30       	cpi	r24, 0x01	; 1
    7398:	09 f0       	breq	.+2      	; 0x739c <Set_Alarm+0x6e8>
    739a:	05 c1       	rjmp	.+522    	; 0x75a6 <Set_Alarm+0x8f2>
  {
    CLCD_vClearScreen();
    739c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
    CLCD_vSendString("Set Alarm ?");
    73a0:	83 ed       	ldi	r24, 0xD3	; 211
    73a2:	91 e0       	ldi	r25, 0x01	; 1
    73a4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    73a8:	82 e0       	ldi	r24, 0x02	; 2
    73aa:	61 e0       	ldi	r22, 0x01	; 1
    73ac:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("1 : OK    2 : Cancel");
    73b0:	87 e6       	ldi	r24, 0x67	; 103
    73b2:	91 e0       	ldi	r25, 0x01	; 1
    73b4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    73b8:	83 e0       	ldi	r24, 0x03	; 3
    73ba:	61 e0       	ldi	r22, 0x01	; 1
    73bc:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("Cancel to Set");
    73c0:	8c e7       	ldi	r24, 0x7C	; 124
    73c2:	91 e0       	ldi	r25, 0x01	; 1
    73c4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    73c8:	84 e0       	ldi	r24, 0x04	; 4
    73ca:	61 e0       	ldi	r22, 0x01	; 1
    73cc:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("Alarm Again");
    73d0:	8f ed       	ldi	r24, 0xDF	; 223
    73d2:	91 e0       	ldi	r25, 0x01	; 1
    73d4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    do
    {
      KPD_Press = KPD_u8GetPressed();
    73d8:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    73dc:	80 93 9a 03 	sts	0x039A, r24
      //when choose invalid input
      if (KPD_Press != NOTPRESSED && (KPD_Press != '1' && KPD_Press != '2'))
    73e0:	80 91 9a 03 	lds	r24, 0x039A
    73e4:	8f 3f       	cpi	r24, 0xFF	; 255
    73e6:	09 f4       	brne	.+2      	; 0x73ea <Set_Alarm+0x736>
    73e8:	a0 c0       	rjmp	.+320    	; 0x752a <Set_Alarm+0x876>
    73ea:	80 91 9a 03 	lds	r24, 0x039A
    73ee:	81 33       	cpi	r24, 0x31	; 49
    73f0:	09 f4       	brne	.+2      	; 0x73f4 <Set_Alarm+0x740>
    73f2:	9b c0       	rjmp	.+310    	; 0x752a <Set_Alarm+0x876>
    73f4:	80 91 9a 03 	lds	r24, 0x039A
    73f8:	82 33       	cpi	r24, 0x32	; 50
    73fa:	09 f4       	brne	.+2      	; 0x73fe <Set_Alarm+0x74a>
    73fc:	96 c0       	rjmp	.+300    	; 0x752a <Set_Alarm+0x876>
      {
        CLCD_vClearScreen();
    73fe:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
        CLCD_vSendString("Wrong Choise");
    7402:	8f e4       	ldi	r24, 0x4F	; 79
    7404:	91 e0       	ldi	r25, 0x01	; 1
    7406:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    740a:	80 e0       	ldi	r24, 0x00	; 0
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	aa ef       	ldi	r26, 0xFA	; 250
    7410:	b3 e4       	ldi	r27, 0x43	; 67
    7412:	8b 87       	std	Y+11, r24	; 0x0b
    7414:	9c 87       	std	Y+12, r25	; 0x0c
    7416:	ad 87       	std	Y+13, r26	; 0x0d
    7418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    741a:	6b 85       	ldd	r22, Y+11	; 0x0b
    741c:	7c 85       	ldd	r23, Y+12	; 0x0c
    741e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7420:	9e 85       	ldd	r25, Y+14	; 0x0e
    7422:	20 e0       	ldi	r18, 0x00	; 0
    7424:	30 e0       	ldi	r19, 0x00	; 0
    7426:	4a ef       	ldi	r20, 0xFA	; 250
    7428:	54 e4       	ldi	r21, 0x44	; 68
    742a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    742e:	dc 01       	movw	r26, r24
    7430:	cb 01       	movw	r24, r22
    7432:	8f 83       	std	Y+7, r24	; 0x07
    7434:	98 87       	std	Y+8, r25	; 0x08
    7436:	a9 87       	std	Y+9, r26	; 0x09
    7438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    743a:	6f 81       	ldd	r22, Y+7	; 0x07
    743c:	78 85       	ldd	r23, Y+8	; 0x08
    743e:	89 85       	ldd	r24, Y+9	; 0x09
    7440:	9a 85       	ldd	r25, Y+10	; 0x0a
    7442:	20 e0       	ldi	r18, 0x00	; 0
    7444:	30 e0       	ldi	r19, 0x00	; 0
    7446:	40 e8       	ldi	r20, 0x80	; 128
    7448:	5f e3       	ldi	r21, 0x3F	; 63
    744a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    744e:	88 23       	and	r24, r24
    7450:	2c f4       	brge	.+10     	; 0x745c <Set_Alarm+0x7a8>
		__ticks = 1;
    7452:	81 e0       	ldi	r24, 0x01	; 1
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	9e 83       	std	Y+6, r25	; 0x06
    7458:	8d 83       	std	Y+5, r24	; 0x05
    745a:	3f c0       	rjmp	.+126    	; 0x74da <Set_Alarm+0x826>
	else if (__tmp > 65535)
    745c:	6f 81       	ldd	r22, Y+7	; 0x07
    745e:	78 85       	ldd	r23, Y+8	; 0x08
    7460:	89 85       	ldd	r24, Y+9	; 0x09
    7462:	9a 85       	ldd	r25, Y+10	; 0x0a
    7464:	20 e0       	ldi	r18, 0x00	; 0
    7466:	3f ef       	ldi	r19, 0xFF	; 255
    7468:	4f e7       	ldi	r20, 0x7F	; 127
    746a:	57 e4       	ldi	r21, 0x47	; 71
    746c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7470:	18 16       	cp	r1, r24
    7472:	4c f5       	brge	.+82     	; 0x74c6 <Set_Alarm+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7474:	6b 85       	ldd	r22, Y+11	; 0x0b
    7476:	7c 85       	ldd	r23, Y+12	; 0x0c
    7478:	8d 85       	ldd	r24, Y+13	; 0x0d
    747a:	9e 85       	ldd	r25, Y+14	; 0x0e
    747c:	20 e0       	ldi	r18, 0x00	; 0
    747e:	30 e0       	ldi	r19, 0x00	; 0
    7480:	40 e2       	ldi	r20, 0x20	; 32
    7482:	51 e4       	ldi	r21, 0x41	; 65
    7484:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7488:	dc 01       	movw	r26, r24
    748a:	cb 01       	movw	r24, r22
    748c:	bc 01       	movw	r22, r24
    748e:	cd 01       	movw	r24, r26
    7490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7494:	dc 01       	movw	r26, r24
    7496:	cb 01       	movw	r24, r22
    7498:	9e 83       	std	Y+6, r25	; 0x06
    749a:	8d 83       	std	Y+5, r24	; 0x05
    749c:	0f c0       	rjmp	.+30     	; 0x74bc <Set_Alarm+0x808>
    749e:	88 ec       	ldi	r24, 0xC8	; 200
    74a0:	90 e0       	ldi	r25, 0x00	; 0
    74a2:	9c 83       	std	Y+4, r25	; 0x04
    74a4:	8b 83       	std	Y+3, r24	; 0x03
    74a6:	8b 81       	ldd	r24, Y+3	; 0x03
    74a8:	9c 81       	ldd	r25, Y+4	; 0x04
    74aa:	01 97       	sbiw	r24, 0x01	; 1
    74ac:	f1 f7       	brne	.-4      	; 0x74aa <Set_Alarm+0x7f6>
    74ae:	9c 83       	std	Y+4, r25	; 0x04
    74b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74b2:	8d 81       	ldd	r24, Y+5	; 0x05
    74b4:	9e 81       	ldd	r25, Y+6	; 0x06
    74b6:	01 97       	sbiw	r24, 0x01	; 1
    74b8:	9e 83       	std	Y+6, r25	; 0x06
    74ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74bc:	8d 81       	ldd	r24, Y+5	; 0x05
    74be:	9e 81       	ldd	r25, Y+6	; 0x06
    74c0:	00 97       	sbiw	r24, 0x00	; 0
    74c2:	69 f7       	brne	.-38     	; 0x749e <Set_Alarm+0x7ea>
    74c4:	14 c0       	rjmp	.+40     	; 0x74ee <Set_Alarm+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74c6:	6f 81       	ldd	r22, Y+7	; 0x07
    74c8:	78 85       	ldd	r23, Y+8	; 0x08
    74ca:	89 85       	ldd	r24, Y+9	; 0x09
    74cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    74ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74d2:	dc 01       	movw	r26, r24
    74d4:	cb 01       	movw	r24, r22
    74d6:	9e 83       	std	Y+6, r25	; 0x06
    74d8:	8d 83       	std	Y+5, r24	; 0x05
    74da:	8d 81       	ldd	r24, Y+5	; 0x05
    74dc:	9e 81       	ldd	r25, Y+6	; 0x06
    74de:	9a 83       	std	Y+2, r25	; 0x02
    74e0:	89 83       	std	Y+1, r24	; 0x01
    74e2:	89 81       	ldd	r24, Y+1	; 0x01
    74e4:	9a 81       	ldd	r25, Y+2	; 0x02
    74e6:	01 97       	sbiw	r24, 0x01	; 1
    74e8:	f1 f7       	brne	.-4      	; 0x74e6 <Set_Alarm+0x832>
    74ea:	9a 83       	std	Y+2, r25	; 0x02
    74ec:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        CLCD_vClearScreen();
    74ee:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
        CLCD_vSendString("Set Alarm ?");
    74f2:	83 ed       	ldi	r24, 0xD3	; 211
    74f4:	91 e0       	ldi	r25, 0x01	; 1
    74f6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        CLCD_vSetPosition(2, 1);
    74fa:	82 e0       	ldi	r24, 0x02	; 2
    74fc:	61 e0       	ldi	r22, 0x01	; 1
    74fe:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendString("1 : OK    2 : Cancel");
    7502:	87 e6       	ldi	r24, 0x67	; 103
    7504:	91 e0       	ldi	r25, 0x01	; 1
    7506:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        CLCD_vSetPosition(3, 1);
    750a:	83 e0       	ldi	r24, 0x03	; 3
    750c:	61 e0       	ldi	r22, 0x01	; 1
    750e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendString("Cancel to Set");
    7512:	8c e7       	ldi	r24, 0x7C	; 124
    7514:	91 e0       	ldi	r25, 0x01	; 1
    7516:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
        CLCD_vSetPosition(4, 1);
    751a:	84 e0       	ldi	r24, 0x04	; 4
    751c:	61 e0       	ldi	r22, 0x01	; 1
    751e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendString("Alarm Again");
    7522:	8f ed       	ldi	r24, 0xDF	; 223
    7524:	91 e0       	ldi	r25, 0x01	; 1
    7526:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      }
    }while (KPD_Press != '1' && KPD_Press != '2');
    752a:	80 91 9a 03 	lds	r24, 0x039A
    752e:	81 33       	cpi	r24, 0x31	; 49
    7530:	29 f0       	breq	.+10     	; 0x753c <Set_Alarm+0x888>
    7532:	80 91 9a 03 	lds	r24, 0x039A
    7536:	82 33       	cpi	r24, 0x32	; 50
    7538:	09 f0       	breq	.+2      	; 0x753c <Set_Alarm+0x888>
    753a:	4e cf       	rjmp	.-356    	; 0x73d8 <Set_Alarm+0x724>

    /*___________________________________________________________________________________________________________________*/

    //When Alarm is Correct
    if (KPD_Press == '1')
    753c:	80 91 9a 03 	lds	r24, 0x039A
    7540:	81 33       	cpi	r24, 0x31	; 49
    7542:	51 f5       	brne	.+84     	; 0x7598 <Set_Alarm+0x8e4>
    {
      CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    7544:	8c e0       	ldi	r24, 0x0C	; 12
    7546:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
      CLCD_vClearScreen();
    754a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("1 - set time");
    754e:	83 ec       	ldi	r24, 0xC3	; 195
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    7556:	82 e0       	ldi	r24, 0x02	; 2
    7558:	61 e0       	ldi	r22, 0x01	; 1
    755a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - select mode");
    755e:	80 ed       	ldi	r24, 0xD0	; 208
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(3, 1);
    7566:	83 e0       	ldi	r24, 0x03	; 3
    7568:	61 e0       	ldi	r22, 0x01	; 1
    756a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("3 - Set Alarm");
    756e:	85 e9       	ldi	r24, 0x95	; 149
    7570:	90 e0       	ldi	r25, 0x00	; 0
    7572:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 1);
    7576:	84 e0       	ldi	r24, 0x04	; 4
    7578:	61 e0       	ldi	r22, 0x01	; 1
    757a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("4 - Weather");
    757e:	83 ea       	ldi	r24, 0xA3	; 163
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 15);
    7586:	84 e0       	ldi	r24, 0x04	; 4
    7588:	6f e0       	ldi	r22, 0x0F	; 15
    758a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("X:EXIT");
    758e:	8f ea       	ldi	r24, 0xAF	; 175
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    7596:	34 c0       	rjmp	.+104    	; 0x7600 <Set_Alarm+0x94c>
    }
    //When Alarm is not Correct
    else if (KPD_Press == '2')
    7598:	80 91 9a 03 	lds	r24, 0x039A
    759c:	82 33       	cpi	r24, 0x32	; 50
    759e:	81 f5       	brne	.+96     	; 0x7600 <Set_Alarm+0x94c>
    {
      Set_Alarm();
    75a0:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <Set_Alarm>
    75a4:	2d c0       	rjmp	.+90     	; 0x7600 <Set_Alarm+0x94c>

    }
    /*___________________________________________________________________________________________________________________*/
  }
  //When Alarm is disaple you don't need to make sure the alarm set correct or not
  else if (Alarm_Status == Alarm_DIS)
    75a6:	80 91 95 03 	lds	r24, 0x0395
    75aa:	88 23       	and	r24, r24
    75ac:	49 f5       	brne	.+82     	; 0x7600 <Set_Alarm+0x94c>
  {
    CLCD_vSendCommand(CLCD_DISPLAYON_CURSOROFF);
    75ae:	8c e0       	ldi	r24, 0x0C	; 12
    75b0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <CLCD_vSendCommand>
    CLCD_vClearScreen();
    75b4:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
    CLCD_vSendString("1 - set time");
    75b8:	83 ec       	ldi	r24, 0xC3	; 195
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    75c0:	82 e0       	ldi	r24, 0x02	; 2
    75c2:	61 e0       	ldi	r22, 0x01	; 1
    75c4:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("2 - select mode");
    75c8:	80 ed       	ldi	r24, 0xD0	; 208
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    75d0:	83 e0       	ldi	r24, 0x03	; 3
    75d2:	61 e0       	ldi	r22, 0x01	; 1
    75d4:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("3 - Set Alarm");
    75d8:	85 e9       	ldi	r24, 0x95	; 149
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    75e0:	84 e0       	ldi	r24, 0x04	; 4
    75e2:	61 e0       	ldi	r22, 0x01	; 1
    75e4:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("4 - Weather");
    75e8:	83 ea       	ldi	r24, 0xA3	; 163
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    CLCD_vSetPosition(4, 15);
    75f0:	84 e0       	ldi	r24, 0x04	; 4
    75f2:	6f e0       	ldi	r22, 0x0F	; 15
    75f4:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
    CLCD_vSendString("X:EXIT");
    75f8:	8f ea       	ldi	r24, 0xAF	; 175
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  else
  {

  }
  /*___________________________________________________________________________________________________________________*/
}
    7600:	e3 96       	adiw	r28, 0x33	; 51
    7602:	0f b6       	in	r0, 0x3f	; 63
    7604:	f8 94       	cli
    7606:	de bf       	out	0x3e, r29	; 62
    7608:	0f be       	out	0x3f, r0	; 63
    760a:	cd bf       	out	0x3d, r28	; 61
    760c:	cf 91       	pop	r28
    760e:	df 91       	pop	r29
    7610:	08 95       	ret

00007612 <Get_Temp>:

//======================================================================================================================================//

/* Function To get Temp from LM35 Sensor and display it On CLCD */
void Get_Temp()
{
    7612:	df 93       	push	r29
    7614:	cf 93       	push	r28
    7616:	00 d0       	rcall	.+0      	; 0x7618 <Get_Temp+0x6>
    7618:	00 d0       	rcall	.+0      	; 0x761a <Get_Temp+0x8>
    761a:	cd b7       	in	r28, 0x3d	; 61
    761c:	de b7       	in	r29, 0x3e	; 62
  volatile u8 LM35_Temp;
  volatile u16 LM35_Volt;
  CLCD_vClearScreen();
    761e:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
  CLCD_vSendString("Press any key");
    7622:	82 ef       	ldi	r24, 0xF2	; 242
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    762a:	82 e0       	ldi	r24, 0x02	; 2
    762c:	61 e0       	ldi	r22, 0x01	; 1
    762e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("To Exit");
    7632:	8b ee       	ldi	r24, 0xEB	; 235
    7634:	91 e0       	ldi	r25, 0x01	; 1
    7636:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  CLCD_vSetPosition(4, 10);
    763a:	84 e0       	ldi	r24, 0x04	; 4
    763c:	6a e0       	ldi	r22, 0x0A	; 10
    763e:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
  CLCD_vSendString("TEMP : ");
    7642:	83 ef       	ldi	r24, 0xF3	; 243
    7644:	91 e0       	ldi	r25, 0x01	; 1
    7646:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
  while (1)
  {
    //If Any key pressed will exit from Get_Temp Fuction
    KPD_Press = KPD_u8GetPressed();
    764a:	0e 94 cc 19 	call	0x3398	; 0x3398 <KPD_u8GetPressed>
    764e:	80 93 9a 03 	sts	0x039A, r24
    if (KPD_Press != NOTPRESSED)
    7652:	80 91 9a 03 	lds	r24, 0x039A
    7656:	8f 3f       	cpi	r24, 0xFF	; 255
    7658:	69 f1       	breq	.+90     	; 0x76b4 <Get_Temp+0xa2>
    {
      CLCD_vClearScreen();
    765a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <CLCD_vClearScreen>
      CLCD_vSendString("1 - set time");
    765e:	83 ec       	ldi	r24, 0xC3	; 195
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    7666:	82 e0       	ldi	r24, 0x02	; 2
    7668:	61 e0       	ldi	r22, 0x01	; 1
    766a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("2 - select mode");
    766e:	80 ed       	ldi	r24, 0xD0	; 208
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(3, 1);
    7676:	83 e0       	ldi	r24, 0x03	; 3
    7678:	61 e0       	ldi	r22, 0x01	; 1
    767a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("3 - Set Alarm");
    767e:	85 e9       	ldi	r24, 0x95	; 149
    7680:	90 e0       	ldi	r25, 0x00	; 0
    7682:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 1);
    7686:	84 e0       	ldi	r24, 0x04	; 4
    7688:	61 e0       	ldi	r22, 0x01	; 1
    768a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("4 - Weather");
    768e:	83 ea       	ldi	r24, 0xA3	; 163
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
      CLCD_vSetPosition(4, 15);
    7696:	84 e0       	ldi	r24, 0x04	; 4
    7698:	6f e0       	ldi	r22, 0x0F	; 15
    769a:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
      CLCD_vSendString("X:EXIT");
    769e:	8f ea       	ldi	r24, 0xAF	; 175
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <CLCD_vSendString>
    }

    /*___________________________________________________________________________________________________________________*/

  }
}
    76a6:	0f 90       	pop	r0
    76a8:	0f 90       	pop	r0
    76aa:	0f 90       	pop	r0
    76ac:	0f 90       	pop	r0
    76ae:	cf 91       	pop	r28
    76b0:	df 91       	pop	r29
    76b2:	08 95       	ret
    }

    /*___________________________________________________________________________________________________________________*/

    //Get value of Temp Meter
    LM35_u8GetAnalogSignal(&LM350, &LM35_Volt);
    76b4:	84 e7       	ldi	r24, 0x74	; 116
    76b6:	93 e0       	ldi	r25, 0x03	; 3
    76b8:	9e 01       	movw	r18, r28
    76ba:	2e 5f       	subi	r18, 0xFE	; 254
    76bc:	3f 4f       	sbci	r19, 0xFF	; 255
    76be:	b9 01       	movw	r22, r18
    76c0:	0e 94 2e 19 	call	0x325c	; 0x325c <LM35_u8GetAnalogSignal>

    /* Check LM35_Volt */
    /* if it more than 1000 that mean LM35_Temp is positive */
    if (LM35_Volt >= 1000)
    76c4:	8a 81       	ldd	r24, Y+2	; 0x02
    76c6:	9b 81       	ldd	r25, Y+3	; 0x03
    76c8:	23 e0       	ldi	r18, 0x03	; 3
    76ca:	88 3e       	cpi	r24, 0xE8	; 232
    76cc:	92 07       	cpc	r25, r18
    76ce:	08 f4       	brcc	.+2      	; 0x76d2 <Get_Temp+0xc0>
    76d0:	69 c0       	rjmp	.+210    	; 0x77a4 <Get_Temp+0x192>
    {
      LM35_Temp = (LM35_Volt - 1000) / 10;
    76d2:	8a 81       	ldd	r24, Y+2	; 0x02
    76d4:	9b 81       	ldd	r25, Y+3	; 0x03
    76d6:	88 5e       	subi	r24, 0xE8	; 232
    76d8:	93 40       	sbci	r25, 0x03	; 3
    76da:	2a e0       	ldi	r18, 0x0A	; 10
    76dc:	30 e0       	ldi	r19, 0x00	; 0
    76de:	b9 01       	movw	r22, r18
    76e0:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__udivmodhi4>
    76e4:	cb 01       	movw	r24, r22
    76e6:	89 83       	std	Y+1, r24	; 0x01
      //Display Temp on LCD when it positive
      if (LM35_Temp < 10)
    76e8:	89 81       	ldd	r24, Y+1	; 0x01
    76ea:	8a 30       	cpi	r24, 0x0A	; 10
    76ec:	90 f4       	brcc	.+36     	; 0x7712 <Get_Temp+0x100>
      {
        CLCD_vSetPosition(4, 16);
    76ee:	84 e0       	ldi	r24, 0x04	; 4
    76f0:	60 e1       	ldi	r22, 0x10	; 16
    76f2:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData(LM35_Temp + 48);
    76f6:	89 81       	ldd	r24, Y+1	; 0x01
    76f8:	80 5d       	subi	r24, 0xD0	; 208
    76fa:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(0xDF);
    76fe:	8f ed       	ldi	r24, 0xDF	; 223
    7700:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData('C');
    7704:	83 e4       	ldi	r24, 0x43	; 67
    7706:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(' ');
    770a:	80 e2       	ldi	r24, 0x20	; 32
    770c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    7710:	9c cf       	rjmp	.-200    	; 0x764a <Get_Temp+0x38>
      }
      else if (LM35_Temp < 100)
    7712:	89 81       	ldd	r24, Y+1	; 0x01
    7714:	84 36       	cpi	r24, 0x64	; 100
    7716:	e0 f4       	brcc	.+56     	; 0x7750 <Get_Temp+0x13e>
      {
        CLCD_vSetPosition(4, 16);
    7718:	84 e0       	ldi	r24, 0x04	; 4
    771a:	60 e1       	ldi	r22, 0x10	; 16
    771c:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData((LM35_Temp / 10) + 48);
    7720:	89 81       	ldd	r24, Y+1	; 0x01
    7722:	9a e0       	ldi	r25, 0x0A	; 10
    7724:	69 2f       	mov	r22, r25
    7726:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    772a:	80 5d       	subi	r24, 0xD0	; 208
    772c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((LM35_Temp % 10) + 48);
    7730:	89 81       	ldd	r24, Y+1	; 0x01
    7732:	9a e0       	ldi	r25, 0x0A	; 10
    7734:	69 2f       	mov	r22, r25
    7736:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    773a:	89 2f       	mov	r24, r25
    773c:	80 5d       	subi	r24, 0xD0	; 208
    773e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(0xDF);
    7742:	8f ed       	ldi	r24, 0xDF	; 223
    7744:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData('C');
    7748:	83 e4       	ldi	r24, 0x43	; 67
    774a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    774e:	7d cf       	rjmp	.-262    	; 0x764a <Get_Temp+0x38>
      }
      else if (LM35_Temp < 1000)
    7750:	89 81       	ldd	r24, Y+1	; 0x01
      {
        CLCD_vSetPosition(4, 16);
    7752:	84 e0       	ldi	r24, 0x04	; 4
    7754:	60 e1       	ldi	r22, 0x10	; 16
    7756:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData((LM35_Temp / 100) + 48);
    775a:	89 81       	ldd	r24, Y+1	; 0x01
    775c:	94 e6       	ldi	r25, 0x64	; 100
    775e:	69 2f       	mov	r22, r25
    7760:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7764:	80 5d       	subi	r24, 0xD0	; 208
    7766:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(((LM35_Temp / 10) % 10) + 48);
    776a:	89 81       	ldd	r24, Y+1	; 0x01
    776c:	9a e0       	ldi	r25, 0x0A	; 10
    776e:	69 2f       	mov	r22, r25
    7770:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    7774:	9a e0       	ldi	r25, 0x0A	; 10
    7776:	69 2f       	mov	r22, r25
    7778:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    777c:	89 2f       	mov	r24, r25
    777e:	80 5d       	subi	r24, 0xD0	; 208
    7780:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((LM35_Temp % 10) + 48);
    7784:	89 81       	ldd	r24, Y+1	; 0x01
    7786:	9a e0       	ldi	r25, 0x0A	; 10
    7788:	69 2f       	mov	r22, r25
    778a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    778e:	89 2f       	mov	r24, r25
    7790:	80 5d       	subi	r24, 0xD0	; 208
    7792:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(0xDF);
    7796:	8f ed       	ldi	r24, 0xDF	; 223
    7798:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData('C');
    779c:	83 e4       	ldi	r24, 0x43	; 67
    779e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    77a2:	53 cf       	rjmp	.-346    	; 0x764a <Get_Temp+0x38>
    /*___________________________________________________________________________________________________________________*/

    /* if it less than 1000 that mean LM35_Temp is negative */
    else
    {
      LM35_Temp = (1000 - LM35_Volt) / 10;
    77a4:	2a 81       	ldd	r18, Y+2	; 0x02
    77a6:	3b 81       	ldd	r19, Y+3	; 0x03
    77a8:	88 ee       	ldi	r24, 0xE8	; 232
    77aa:	93 e0       	ldi	r25, 0x03	; 3
    77ac:	82 1b       	sub	r24, r18
    77ae:	93 0b       	sbc	r25, r19
    77b0:	2a e0       	ldi	r18, 0x0A	; 10
    77b2:	30 e0       	ldi	r19, 0x00	; 0
    77b4:	b9 01       	movw	r22, r18
    77b6:	0e 94 c3 3c 	call	0x7986	; 0x7986 <__udivmodhi4>
    77ba:	cb 01       	movw	r24, r22
    77bc:	89 83       	std	Y+1, r24	; 0x01
      //Display Temp on LCD when it negative
      if (LM35_Temp < 10)
    77be:	89 81       	ldd	r24, Y+1	; 0x01
    77c0:	8a 30       	cpi	r24, 0x0A	; 10
    77c2:	a8 f4       	brcc	.+42     	; 0x77ee <Get_Temp+0x1dc>
      {
        CLCD_vSetPosition(4, 16);
    77c4:	84 e0       	ldi	r24, 0x04	; 4
    77c6:	60 e1       	ldi	r22, 0x10	; 16
    77c8:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData('-');
    77cc:	8d e2       	ldi	r24, 0x2D	; 45
    77ce:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(LM35_Temp + 48);
    77d2:	89 81       	ldd	r24, Y+1	; 0x01
    77d4:	80 5d       	subi	r24, 0xD0	; 208
    77d6:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(0xDF);
    77da:	8f ed       	ldi	r24, 0xDF	; 223
    77dc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData('C');
    77e0:	83 e4       	ldi	r24, 0x43	; 67
    77e2:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(' ');
    77e6:	80 e2       	ldi	r24, 0x20	; 32
    77e8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    77ec:	2e cf       	rjmp	.-420    	; 0x764a <Get_Temp+0x38>
      }
      else if (LM35_Temp < 100)
    77ee:	89 81       	ldd	r24, Y+1	; 0x01
    77f0:	84 36       	cpi	r24, 0x64	; 100
    77f2:	08 f0       	brcs	.+2      	; 0x77f6 <Get_Temp+0x1e4>
    77f4:	2a cf       	rjmp	.-428    	; 0x764a <Get_Temp+0x38>
      {
        CLCD_vSetPosition(4, 16);
    77f6:	84 e0       	ldi	r24, 0x04	; 4
    77f8:	60 e1       	ldi	r22, 0x10	; 16
    77fa:	0e 94 8e 20 	call	0x411c	; 0x411c <CLCD_vSetPosition>
        CLCD_vSendData('-');
    77fe:	8d e2       	ldi	r24, 0x2D	; 45
    7800:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((LM35_Temp / 10) + 48);
    7804:	89 81       	ldd	r24, Y+1	; 0x01
    7806:	9a e0       	ldi	r25, 0x0A	; 10
    7808:	69 2f       	mov	r22, r25
    780a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    780e:	80 5d       	subi	r24, 0xD0	; 208
    7810:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData((LM35_Temp % 10) + 48);
    7814:	89 81       	ldd	r24, Y+1	; 0x01
    7816:	9a e0       	ldi	r25, 0x0A	; 10
    7818:	69 2f       	mov	r22, r25
    781a:	0e 94 b7 3c 	call	0x796e	; 0x796e <__udivmodqi4>
    781e:	89 2f       	mov	r24, r25
    7820:	80 5d       	subi	r24, 0xD0	; 208
    7822:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData(0xDF);
    7826:	8f ed       	ldi	r24, 0xDF	; 223
    7828:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
        CLCD_vSendData('C');
    782c:	83 e4       	ldi	r24, 0x43	; 67
    782e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <CLCD_vSendData>
    7832:	0b cf       	rjmp	.-490    	; 0x764a <Get_Temp+0x38>

00007834 <ISR_TIMER2_OVF_MODE>:
 * each every second Time_Second++
 * check Time_Minute and Time_Hour and Time_Mode
 * ISR will execute with out affects on the code
 */
void ISR_TIMER2_OVF_MODE()
{
    7834:	df 93       	push	r29
    7836:	cf 93       	push	r28
    7838:	cd b7       	in	r28, 0x3d	; 61
    783a:	de b7       	in	r29, 0x3e	; 62
  /* it's pluse to make sure that ISR will execute each Second */
  DIO_enumTogglePinVal(DIO_PORTA, DIO_PIN2);
    783c:	80 e0       	ldi	r24, 0x00	; 0
    783e:	62 e0       	ldi	r22, 0x02	; 2
    7840:	0e 94 29 10 	call	0x2052	; 0x2052 <DIO_enumTogglePinVal>

  /*___________________________________________________________________________________________________________________*/

  Time_Second++;
    7844:	80 91 97 03 	lds	r24, 0x0397
    7848:	8f 5f       	subi	r24, 0xFF	; 255
    784a:	80 93 97 03 	sts	0x0397, r24

  if (Time_Second == 60)
    784e:	80 91 97 03 	lds	r24, 0x0397
    7852:	8c 33       	cpi	r24, 0x3C	; 60
    7854:	39 f4       	brne	.+14     	; 0x7864 <ISR_TIMER2_OVF_MODE+0x30>
  {
    Time_Second = 0;
    7856:	10 92 97 03 	sts	0x0397, r1
    Time_Minute++;
    785a:	80 91 96 03 	lds	r24, 0x0396
    785e:	8f 5f       	subi	r24, 0xFF	; 255
    7860:	80 93 96 03 	sts	0x0396, r24
  }
  if (Time_Minute == 60)
    7864:	80 91 96 03 	lds	r24, 0x0396
    7868:	8c 33       	cpi	r24, 0x3C	; 60
    786a:	39 f4       	brne	.+14     	; 0x787a <ISR_TIMER2_OVF_MODE+0x46>
  {
    Time_Minute = 0;
    786c:	10 92 96 03 	sts	0x0396, r1
    Time_Hour++;
    7870:	80 91 54 03 	lds	r24, 0x0354
    7874:	8f 5f       	subi	r24, 0xFF	; 255
    7876:	80 93 54 03 	sts	0x0354, r24
  }

  /*___________________________________________________________________________________________________________________*/

  /* Check Time condition */
  if (Time_Mode == Time_Mode12Hours)
    787a:	80 91 55 03 	lds	r24, 0x0355
    787e:	81 33       	cpi	r24, 0x31	; 49
    7880:	f9 f4       	brne	.+62     	; 0x78c0 <ISR_TIMER2_OVF_MODE+0x8c>
  {
    if (Time_Hour == 13)
    7882:	80 91 54 03 	lds	r24, 0x0354
    7886:	8d 30       	cpi	r24, 0x0D	; 13
    7888:	19 f4       	brne	.+6      	; 0x7890 <ISR_TIMER2_OVF_MODE+0x5c>
    {
      Time_Hour = 1;
    788a:	81 e0       	ldi	r24, 0x01	; 1
    788c:	80 93 54 03 	sts	0x0354, r24
    }
    if (Time_Hour == 12 && Time_Minute == 0 && Time_Second == 0)
    7890:	80 91 54 03 	lds	r24, 0x0354
    7894:	8c 30       	cpi	r24, 0x0C	; 12
    7896:	09 f0       	breq	.+2      	; 0x789a <ISR_TIMER2_OVF_MODE+0x66>
    7898:	48 c0       	rjmp	.+144    	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    789a:	80 91 96 03 	lds	r24, 0x0396
    789e:	88 23       	and	r24, r24
    78a0:	09 f0       	breq	.+2      	; 0x78a4 <ISR_TIMER2_OVF_MODE+0x70>
    78a2:	43 c0       	rjmp	.+134    	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    78a4:	80 91 97 03 	lds	r24, 0x0397
    78a8:	88 23       	and	r24, r24
    78aa:	09 f0       	breq	.+2      	; 0x78ae <ISR_TIMER2_OVF_MODE+0x7a>
    78ac:	3e c0       	rjmp	.+124    	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    {
      TOG_BIT(PORTA_REG, DIO_PIN3);   //Toggle LED that displays AM or PM
    78ae:	ab e3       	ldi	r26, 0x3B	; 59
    78b0:	b0 e0       	ldi	r27, 0x00	; 0
    78b2:	eb e3       	ldi	r30, 0x3B	; 59
    78b4:	f0 e0       	ldi	r31, 0x00	; 0
    78b6:	90 81       	ld	r25, Z
    78b8:	88 e0       	ldi	r24, 0x08	; 8
    78ba:	89 27       	eor	r24, r25
    78bc:	8c 93       	st	X, r24
    78be:	35 c0       	rjmp	.+106    	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    }
  }

  else if (Time_Mode == Time_Mode24Hours)
    78c0:	80 91 55 03 	lds	r24, 0x0355
    78c4:	82 33       	cpi	r24, 0x32	; 50
    78c6:	89 f5       	brne	.+98     	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
  {
    if (Time_Hour == 24)
    78c8:	80 91 54 03 	lds	r24, 0x0354
    78cc:	88 31       	cpi	r24, 0x18	; 24
    78ce:	11 f4       	brne	.+4      	; 0x78d4 <ISR_TIMER2_OVF_MODE+0xa0>
    {
      Time_Hour = 0;
    78d0:	10 92 54 03 	sts	0x0354, r1
    }
    else
    {

    }
    if (Time_Hour < 12)
    78d4:	80 91 54 03 	lds	r24, 0x0354
    78d8:	8c 30       	cpi	r24, 0x0C	; 12
    78da:	40 f4       	brcc	.+16     	; 0x78ec <ISR_TIMER2_OVF_MODE+0xb8>
    {
      SET_BIT(PORTA_REG, DIO_PIN3);   //Turn ON Led To Display AM
    78dc:	ab e3       	ldi	r26, 0x3B	; 59
    78de:	b0 e0       	ldi	r27, 0x00	; 0
    78e0:	eb e3       	ldi	r30, 0x3B	; 59
    78e2:	f0 e0       	ldi	r31, 0x00	; 0
    78e4:	80 81       	ld	r24, Z
    78e6:	88 60       	ori	r24, 0x08	; 8
    78e8:	8c 93       	st	X, r24
    78ea:	1f c0       	rjmp	.+62     	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    }
    else if (Time_Hour == 12 && Time_Minute == 0 && Time_Second == 0)
    78ec:	80 91 54 03 	lds	r24, 0x0354
    78f0:	8c 30       	cpi	r24, 0x0C	; 12
    78f2:	81 f4       	brne	.+32     	; 0x7914 <ISR_TIMER2_OVF_MODE+0xe0>
    78f4:	80 91 96 03 	lds	r24, 0x0396
    78f8:	88 23       	and	r24, r24
    78fa:	61 f4       	brne	.+24     	; 0x7914 <ISR_TIMER2_OVF_MODE+0xe0>
    78fc:	80 91 97 03 	lds	r24, 0x0397
    7900:	88 23       	and	r24, r24
    7902:	41 f4       	brne	.+16     	; 0x7914 <ISR_TIMER2_OVF_MODE+0xe0>
    {
      CLR_BIT(PORTA_REG, DIO_PIN3);   //Turn OFF Led To Display PM
    7904:	ab e3       	ldi	r26, 0x3B	; 59
    7906:	b0 e0       	ldi	r27, 0x00	; 0
    7908:	eb e3       	ldi	r30, 0x3B	; 59
    790a:	f0 e0       	ldi	r31, 0x00	; 0
    790c:	80 81       	ld	r24, Z
    790e:	87 7f       	andi	r24, 0xF7	; 247
    7910:	8c 93       	st	X, r24
    7912:	0b c0       	rjmp	.+22     	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    }
    else if (Time_Hour > 12)
    7914:	80 91 54 03 	lds	r24, 0x0354
    7918:	8d 30       	cpi	r24, 0x0D	; 13
    791a:	38 f0       	brcs	.+14     	; 0x792a <ISR_TIMER2_OVF_MODE+0xf6>
    {
      CLR_BIT(PORTA_REG, DIO_PIN3);   //Turn OFF Led To Display PM
    791c:	ab e3       	ldi	r26, 0x3B	; 59
    791e:	b0 e0       	ldi	r27, 0x00	; 0
    7920:	eb e3       	ldi	r30, 0x3B	; 59
    7922:	f0 e0       	ldi	r31, 0x00	; 0
    7924:	80 81       	ld	r24, Z
    7926:	87 7f       	andi	r24, 0xF7	; 247
    7928:	8c 93       	st	X, r24

  }

  /*___________________________________________________________________________________________________________________*/

}
    792a:	cf 91       	pop	r28
    792c:	df 91       	pop	r29
    792e:	08 95       	ret

00007930 <__mulsi3>:
    7930:	62 9f       	mul	r22, r18
    7932:	d0 01       	movw	r26, r0
    7934:	73 9f       	mul	r23, r19
    7936:	f0 01       	movw	r30, r0
    7938:	82 9f       	mul	r24, r18
    793a:	e0 0d       	add	r30, r0
    793c:	f1 1d       	adc	r31, r1
    793e:	64 9f       	mul	r22, r20
    7940:	e0 0d       	add	r30, r0
    7942:	f1 1d       	adc	r31, r1
    7944:	92 9f       	mul	r25, r18
    7946:	f0 0d       	add	r31, r0
    7948:	83 9f       	mul	r24, r19
    794a:	f0 0d       	add	r31, r0
    794c:	74 9f       	mul	r23, r20
    794e:	f0 0d       	add	r31, r0
    7950:	65 9f       	mul	r22, r21
    7952:	f0 0d       	add	r31, r0
    7954:	99 27       	eor	r25, r25
    7956:	72 9f       	mul	r23, r18
    7958:	b0 0d       	add	r27, r0
    795a:	e1 1d       	adc	r30, r1
    795c:	f9 1f       	adc	r31, r25
    795e:	63 9f       	mul	r22, r19
    7960:	b0 0d       	add	r27, r0
    7962:	e1 1d       	adc	r30, r1
    7964:	f9 1f       	adc	r31, r25
    7966:	bd 01       	movw	r22, r26
    7968:	cf 01       	movw	r24, r30
    796a:	11 24       	eor	r1, r1
    796c:	08 95       	ret

0000796e <__udivmodqi4>:
    796e:	99 1b       	sub	r25, r25
    7970:	79 e0       	ldi	r23, 0x09	; 9
    7972:	04 c0       	rjmp	.+8      	; 0x797c <__udivmodqi4_ep>

00007974 <__udivmodqi4_loop>:
    7974:	99 1f       	adc	r25, r25
    7976:	96 17       	cp	r25, r22
    7978:	08 f0       	brcs	.+2      	; 0x797c <__udivmodqi4_ep>
    797a:	96 1b       	sub	r25, r22

0000797c <__udivmodqi4_ep>:
    797c:	88 1f       	adc	r24, r24
    797e:	7a 95       	dec	r23
    7980:	c9 f7       	brne	.-14     	; 0x7974 <__udivmodqi4_loop>
    7982:	80 95       	com	r24
    7984:	08 95       	ret

00007986 <__udivmodhi4>:
    7986:	aa 1b       	sub	r26, r26
    7988:	bb 1b       	sub	r27, r27
    798a:	51 e1       	ldi	r21, 0x11	; 17
    798c:	07 c0       	rjmp	.+14     	; 0x799c <__udivmodhi4_ep>

0000798e <__udivmodhi4_loop>:
    798e:	aa 1f       	adc	r26, r26
    7990:	bb 1f       	adc	r27, r27
    7992:	a6 17       	cp	r26, r22
    7994:	b7 07       	cpc	r27, r23
    7996:	10 f0       	brcs	.+4      	; 0x799c <__udivmodhi4_ep>
    7998:	a6 1b       	sub	r26, r22
    799a:	b7 0b       	sbc	r27, r23

0000799c <__udivmodhi4_ep>:
    799c:	88 1f       	adc	r24, r24
    799e:	99 1f       	adc	r25, r25
    79a0:	5a 95       	dec	r21
    79a2:	a9 f7       	brne	.-22     	; 0x798e <__udivmodhi4_loop>
    79a4:	80 95       	com	r24
    79a6:	90 95       	com	r25
    79a8:	bc 01       	movw	r22, r24
    79aa:	cd 01       	movw	r24, r26
    79ac:	08 95       	ret

000079ae <__udivmodsi4>:
    79ae:	a1 e2       	ldi	r26, 0x21	; 33
    79b0:	1a 2e       	mov	r1, r26
    79b2:	aa 1b       	sub	r26, r26
    79b4:	bb 1b       	sub	r27, r27
    79b6:	fd 01       	movw	r30, r26
    79b8:	0d c0       	rjmp	.+26     	; 0x79d4 <__udivmodsi4_ep>

000079ba <__udivmodsi4_loop>:
    79ba:	aa 1f       	adc	r26, r26
    79bc:	bb 1f       	adc	r27, r27
    79be:	ee 1f       	adc	r30, r30
    79c0:	ff 1f       	adc	r31, r31
    79c2:	a2 17       	cp	r26, r18
    79c4:	b3 07       	cpc	r27, r19
    79c6:	e4 07       	cpc	r30, r20
    79c8:	f5 07       	cpc	r31, r21
    79ca:	20 f0       	brcs	.+8      	; 0x79d4 <__udivmodsi4_ep>
    79cc:	a2 1b       	sub	r26, r18
    79ce:	b3 0b       	sbc	r27, r19
    79d0:	e4 0b       	sbc	r30, r20
    79d2:	f5 0b       	sbc	r31, r21

000079d4 <__udivmodsi4_ep>:
    79d4:	66 1f       	adc	r22, r22
    79d6:	77 1f       	adc	r23, r23
    79d8:	88 1f       	adc	r24, r24
    79da:	99 1f       	adc	r25, r25
    79dc:	1a 94       	dec	r1
    79de:	69 f7       	brne	.-38     	; 0x79ba <__udivmodsi4_loop>
    79e0:	60 95       	com	r22
    79e2:	70 95       	com	r23
    79e4:	80 95       	com	r24
    79e6:	90 95       	com	r25
    79e8:	9b 01       	movw	r18, r22
    79ea:	ac 01       	movw	r20, r24
    79ec:	bd 01       	movw	r22, r26
    79ee:	cf 01       	movw	r24, r30
    79f0:	08 95       	ret

000079f2 <__divmodsi4>:
    79f2:	97 fb       	bst	r25, 7
    79f4:	09 2e       	mov	r0, r25
    79f6:	05 26       	eor	r0, r21
    79f8:	0e d0       	rcall	.+28     	; 0x7a16 <__divmodsi4_neg1>
    79fa:	57 fd       	sbrc	r21, 7
    79fc:	04 d0       	rcall	.+8      	; 0x7a06 <__divmodsi4_neg2>
    79fe:	d7 df       	rcall	.-82     	; 0x79ae <__udivmodsi4>
    7a00:	0a d0       	rcall	.+20     	; 0x7a16 <__divmodsi4_neg1>
    7a02:	00 1c       	adc	r0, r0
    7a04:	38 f4       	brcc	.+14     	; 0x7a14 <__divmodsi4_exit>

00007a06 <__divmodsi4_neg2>:
    7a06:	50 95       	com	r21
    7a08:	40 95       	com	r20
    7a0a:	30 95       	com	r19
    7a0c:	21 95       	neg	r18
    7a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    7a10:	4f 4f       	sbci	r20, 0xFF	; 255
    7a12:	5f 4f       	sbci	r21, 0xFF	; 255

00007a14 <__divmodsi4_exit>:
    7a14:	08 95       	ret

00007a16 <__divmodsi4_neg1>:
    7a16:	f6 f7       	brtc	.-4      	; 0x7a14 <__divmodsi4_exit>
    7a18:	90 95       	com	r25
    7a1a:	80 95       	com	r24
    7a1c:	70 95       	com	r23
    7a1e:	61 95       	neg	r22
    7a20:	7f 4f       	sbci	r23, 0xFF	; 255
    7a22:	8f 4f       	sbci	r24, 0xFF	; 255
    7a24:	9f 4f       	sbci	r25, 0xFF	; 255
    7a26:	08 95       	ret

00007a28 <__prologue_saves__>:
    7a28:	2f 92       	push	r2
    7a2a:	3f 92       	push	r3
    7a2c:	4f 92       	push	r4
    7a2e:	5f 92       	push	r5
    7a30:	6f 92       	push	r6
    7a32:	7f 92       	push	r7
    7a34:	8f 92       	push	r8
    7a36:	9f 92       	push	r9
    7a38:	af 92       	push	r10
    7a3a:	bf 92       	push	r11
    7a3c:	cf 92       	push	r12
    7a3e:	df 92       	push	r13
    7a40:	ef 92       	push	r14
    7a42:	ff 92       	push	r15
    7a44:	0f 93       	push	r16
    7a46:	1f 93       	push	r17
    7a48:	cf 93       	push	r28
    7a4a:	df 93       	push	r29
    7a4c:	cd b7       	in	r28, 0x3d	; 61
    7a4e:	de b7       	in	r29, 0x3e	; 62
    7a50:	ca 1b       	sub	r28, r26
    7a52:	db 0b       	sbc	r29, r27
    7a54:	0f b6       	in	r0, 0x3f	; 63
    7a56:	f8 94       	cli
    7a58:	de bf       	out	0x3e, r29	; 62
    7a5a:	0f be       	out	0x3f, r0	; 63
    7a5c:	cd bf       	out	0x3d, r28	; 61
    7a5e:	09 94       	ijmp

00007a60 <__epilogue_restores__>:
    7a60:	2a 88       	ldd	r2, Y+18	; 0x12
    7a62:	39 88       	ldd	r3, Y+17	; 0x11
    7a64:	48 88       	ldd	r4, Y+16	; 0x10
    7a66:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a68:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a70:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a72:	b9 84       	ldd	r11, Y+9	; 0x09
    7a74:	c8 84       	ldd	r12, Y+8	; 0x08
    7a76:	df 80       	ldd	r13, Y+7	; 0x07
    7a78:	ee 80       	ldd	r14, Y+6	; 0x06
    7a7a:	fd 80       	ldd	r15, Y+5	; 0x05
    7a7c:	0c 81       	ldd	r16, Y+4	; 0x04
    7a7e:	1b 81       	ldd	r17, Y+3	; 0x03
    7a80:	aa 81       	ldd	r26, Y+2	; 0x02
    7a82:	b9 81       	ldd	r27, Y+1	; 0x01
    7a84:	ce 0f       	add	r28, r30
    7a86:	d1 1d       	adc	r29, r1
    7a88:	0f b6       	in	r0, 0x3f	; 63
    7a8a:	f8 94       	cli
    7a8c:	de bf       	out	0x3e, r29	; 62
    7a8e:	0f be       	out	0x3f, r0	; 63
    7a90:	cd bf       	out	0x3d, r28	; 61
    7a92:	ed 01       	movw	r28, r26
    7a94:	08 95       	ret

00007a96 <_exit>:
    7a96:	f8 94       	cli

00007a98 <__stop_program>:
    7a98:	ff cf       	rjmp	.-2      	; 0x7a98 <__stop_program>
